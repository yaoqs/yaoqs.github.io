{"type":"getPostById","data":{"title":"git专题","date":"2022-06-09T11:22:08.000Z","description":"","categories":[{"name":"git","_id":"clzpq9hwt007gsgerbhndfabw"},{"name":"专题","_id":"clzpq9hxc0082sger70z1bxxv"}],"tags":[{"name":"专题","_id":"clzpq9hu0002xsgerfltn8246"},{"name":"git","_id":"clzpq9hzg00btsger6ek79ed1"}],"content":"<h1>Git配置文件的常用参数解析 <a href=\"https://segmentfault.com/a/1190000019793936\">https://segmentfault.com/a/1190000019793936</a></h1>\n<p>我们有时候在多平台开发代码或者批量修改了文件夹的权限时，使用<code>git status</code>命令你很有可能会看到一大片的文件变更记录。其实不用担心，这些只是权限变更的文件也会被显示出来而已。如果你的工程目录不用考虑文件的权限，那么我们可以关闭这个特性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.filemode false</span><br></pre></td></tr></table></figure>\n<p>今天我们介绍下git常用的一些配置参数。</p>\n<h2 id=\"git配置文件\"><a class=\"header-anchor\" href=\"#git配置文件\">※</a>git配置文件</h2>\n<p>当我们初始化或者<code>clone</code>一个<code>git</code>仓库的时候，会自动生成<code>.git</code>的目录，默认隐藏，但我们依然可以查看其文件，其中有一个<code>config</code>的文件是基础的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .git/config</span><br><span class=\"line\">[core]</span><br><span class=\"line\">    # 用于未来能够兼容git版本，决定怎么处理git命令和文件的</span><br><span class=\"line\">    repositoryformatversion = 0</span><br><span class=\"line\">    # 是否提供文件权限的diff</span><br><span class=\"line\">    filemode = true</span><br><span class=\"line\">    # 决定当前仓库是中心仓库还是开发库</span><br><span class=\"line\">    bare = false</span><br><span class=\"line\">    # 记录所有的ref更新：决定变更ref时，会不会被记录在`$GIT_DIR/logs/&lt;ref&gt;`目录下</span><br><span class=\"line\">    logallrefupdates = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">    url = ssh://zhaoshuaiqiang@git.com:8235/reposity</span><br><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">    remote = origin</span><br><span class=\"line\">    merge = refs/heads/master</span><br></pre></td></tr></table></figure>\n<h3 id=\"repositoryformatversion-仓库版本\"><a class=\"header-anchor\" href=\"#repositoryformatversion-仓库版本\">※</a><code>repositoryformatversion</code> 仓库版本</h3>\n<p>现在发布的版本号都是<code>0</code>，但这个属性是为了未来的兼容性，当开发者认为有新的特性需要加入的时候，可以将这个版本号改为<code>1</code>，此时，新的<code>Git</code>版本可以正确执行功能，而老的版本会出现报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Expected git repo version &lt;= 0, found 1. Please upgrade Git&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"filemode-文件权限\"><a class=\"header-anchor\" href=\"#filemode-文件权限\">※</a><code>filemode</code> 文件权限</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># diff时考虑文件权限为true，不考虑为false</span><br><span class=\"line\">core.filemode = true | false</span><br></pre></td></tr></table></figure>\n<p>我们通过这个参数来决定是否会<code>diff</code>文件的权限，如果是源代码，可以关闭这个选项，如果是脚本、二进制程序等需要权限认证之类的还是要开启该参数的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.filemode false</span><br></pre></td></tr></table></figure>\n<p>更改完成后再<code>cat</code>下<code>.git/config</code>就会发现该参数变了。</p>\n<h3 id=\"bare-裸仓库\"><a class=\"header-anchor\" href=\"#bare-裸仓库\">※</a><code>bare</code> 裸仓库</h3>\n<p>我们可以使用<code>git init</code>来将我们的目录转换为一个<code>Git</code>本地仓库或者初始化为一个新仓库。在初始化的时候我们可以加上<code>--bare</code>参数来决定是否创建一个裸仓库。</p>\n<p>裸仓库一般指的是远端的中心仓库，可以被<code>clone</code>和<code>push</code>更新，但不包含工作区，因此不能执行常规的<code>git</code>命令，也不能进行直接的提交和变更。而普通仓库却正好相反，用于我们常规协作开发时的修改和提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 裸仓库为true，普通仓库为false</span><br><span class=\"line\">core.bare = true | false</span><br></pre></td></tr></table></figure>\n<h3 id=\"logallrefupdates-记录引用更新\"><a class=\"header-anchor\" href=\"#logallrefupdates-记录引用更新\">※</a><code>logallrefupdates</code> 记录引用更新</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core.logallupdates = true | false | always</span><br></pre></td></tr></table></figure>\n<p>当值为<code>true</code>时，会将所有引用<code>(ref)</code>的更新记录到<code>$GIT_DIR/logs/&lt;ref&gt;</code>中，包括更新的编号、日期和原因等内容。<code>&lt;ref&gt;</code>的值根据分支的不同为<code>refs/heads/</code> 或 <code>refs/remotes/</code>等。</p>\n<p>当值为<code>always</code>时，<code>&lt;ref&gt;</code>的值为<code>refs/reflog</code>。</p>\n<p>当仓库为裸仓库时，值为<code>false</code>。</p>\n<h2 id=\"总结\"><a class=\"header-anchor\" href=\"#总结\">※</a>总结</h2>\n<p>我们可以通过<a href=\"https://link.segmentfault.com/?enc=iIBN2B9L7EDj5tr7DFsVDw%3D%3D.pkFMvzQF8sMMUdrKFzLEZawOJp7rsD%2FoP2nk0hBJgj5ODnlxR%2FQL%2BT7Am0TsPOXE\">文档</a>来了解所有的参数，这里我们只需要了解<code>bare</code>和<code>filemode</code>两个即可，同时<code>filemode</code>可以通过命令来修改。</p>\n<h2 id=\"参考资料\"><a class=\"header-anchor\" href=\"#参考资料\">※</a>参考资料</h2>\n<ol>\n<li><a href=\"https://link.segmentfault.com/?enc=nKyFr%2FLY0Kx9SYQiYS4pIg%3D%3D.BXCEYE1mScE8R297R%2FoTWJjGxh66T%2BDxwEtxNa6OKY8jax6lmlCHJoJwIJ2woT5t%2BhieDdAEYVQtBXH6WVE9bg8EKjzwhWscqpihuZRJvqooYuidIwvmSSurD%2B7TowTPQytjwbbsZAuM5QDuJ4cqsuRZ5kovnFi%2F02f0aeiuJ88%3D\">https://stackoverflow.com/que…</a></li>\n<li>git tips: 设置filemode：<a href=\"https://link.segmentfault.com/?enc=yxhauGld1pOWGltR3fpMIg%3D%3D.rSrWLz%2FhC%2FHimx7%2ByXvcd54lxA6SAbrmRRoz%2BYA0PYrMS857Q0jHPsMMn%2FnkMXJe\">https://www.jianshu.com/p/3b0…</a></li>\n<li>Git 本地仓库和裸仓库：<a href=\"https://segmentfault.com/a/1190000007686496\">https://segmentfault.com/a/11…</a></li>\n<li>Git文档：<a href=\"https://link.segmentfault.com/?enc=IYAlcwsQ9f%2FjUz30Ib8KsA%3D%3D.lbGxl8XpBzQjt%2FexpJlInCYrvSSqUuZcmfRf6aSQc8sLPNvxkbzyhlvNv8TR0mtv\">https://git-scm.com/docs/git-…</a></li>\n</ol>\n<h1>git配置config文件 <a href=\"https://www.cnblogs.com/hellokitty2/p/10428001.html\">https://www.cnblogs.com/hellokitty2/p/10428001.html</a></h1>\n<p>1.Git有一个工具被称为git config，它允许你获取和设置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量以等级的不同可以被存储在三个不同的位置：</p>\n<p>(1) /etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’–system’ 给 git config，它将明确的读和写这个文件。</p>\n<p>(2) ~/.gitconfig 文件 ：具体到你的用户。你可以通过传递–global 选项使Git明确的读或写这个特定的文件。</p>\n<p>(3) .git/config位于git目录的config文件，特定指向该单一的库。如果git config 时不加–system 也不加–global选项，那么只作用于当前的git版本库，配置产生的修改都体现在.git/config文件中</p>\n<p>三个config文件是逐级覆盖的关系，具体的覆盖非具体的。</p>\n<p>2.例子<br>\n(1) 用户标识配置<br>\n$ git config --global <a href=\"http://user.name\">user.name</a> “John Doe” <a href=\"//user.xn--name-ou9g9k001d\">//user.name就是对</a>[user]下的name进行配置<br>\n$ git config --global user.email <a href=\"mailto:johndoe@example.com\">johndoe@example.com</a></p>\n<p>$ cat ~/.gitconfig<br>\n[user]<br>\nemail = <a href=\"mailto:johndoe@example.com\">johndoe@example.com</a><br>\nname = John Doe<br>\n…</p>\n<p>这里的修改是针对这个用户的所有git版本库的，若不加–global可以就是只针对某一个具体的版本库起作用，修改体现在.git/config下。</p>\n<p>3.更多例子<br>\n$ git config --global core.editor emacs 指定你的编辑器<br>\n$ git config --global merge.tool vimdiff 指定你的比较工具(Your Diff Tool)<br>\n$ git config --list 检查你的设置(Checking Your Settings)<br>\n$ git help config 获取帮助(Getting help)</p>\n<p>4.分别移除各个等级的一个配置项<br>\ngit config --unset <a href=\"http://user.name\">user.name</a><br>\ngit config --unset --global <a href=\"http://user.name\">user.name</a><br>\ngit config --unset --system <a href=\"http://user.name\">user.name</a></p>\n<p>5.移除一组配置项<br>\ngit config --remove-section color</p>\n<p>6.git config get <a href=\"http://user.name\">user.name</a>  获取一个属性的值，当然也可以直接cat上面的config文件。</p>\n<p>git 常用命令</p>\n<p><a href=\"./git%E4%B8%93%E9%A2%98/git.jpg\">!git 常用命令</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class=\"line\">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class=\"line\">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class=\"line\">git config --global color.ui true                         # git status等命令自动着色</span><br><span class=\"line\">git config --global color.status auto</span><br><span class=\"line\">git config --global color.diff auto</span><br><span class=\"line\">git config --global color.branch auto</span><br><span class=\"line\">git config --global color.interactive auto</span><br><span class=\"line\">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class=\"line\">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class=\"line\">git status                                                # 查看当前版本状态（是否修改）</span><br><span class=\"line\">git add xyz                                               # 添加xyz文件至index</span><br><span class=\"line\">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class=\"line\">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class=\"line\">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class=\"line\">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class=\"line\">git rm xxx                                                # 删除index中的文件</span><br><span class=\"line\">git rm -r *                                               # 递归删除</span><br><span class=\"line\">git log                                                   # 显示提交日志</span><br><span class=\"line\">git log -1                                                # 显示1行日志 -n为n行</span><br><span class=\"line\">git log -5</span><br><span class=\"line\">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class=\"line\">git log -p -m</span><br><span class=\"line\">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class=\"line\">git show dfb02                                            # 可只用commitid的前几位</span><br><span class=\"line\">git show HEAD                                             # 显示HEAD提交日志</span><br><span class=\"line\">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class=\"line\">git tag                                                   # 显示已存在的tag</span><br><span class=\"line\">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag</span><br><span class=\"line\">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class=\"line\">git log v2.0                                              # 显示v2.0的日志</span><br><span class=\"line\">git diff                                                  # 显示所有未添加至index的变更</span><br><span class=\"line\">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class=\"line\">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class=\"line\">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class=\"line\">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class=\"line\">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class=\"line\">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class=\"line\">git branch                                                # 显示本地分支</span><br><span class=\"line\">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class=\"line\">git branch -a                                             # 显示所有分支</span><br><span class=\"line\">git branch -r                                             # 显示所有原创分支</span><br><span class=\"line\">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class=\"line\">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class=\"line\">git branch -m master master_copy                          # 本地分支改名</span><br><span class=\"line\">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class=\"line\">git checkout -b master master_copy                        # 上面的完整版</span><br><span class=\"line\">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class=\"line\">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class=\"line\">git checkout v2.0                                         # 检出版本v2.0</span><br><span class=\"line\">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class=\"line\">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class=\"line\">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class=\"line\">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class=\"line\">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class=\"line\">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class=\"line\">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class=\"line\">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class=\"line\">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class=\"line\">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class=\"line\">git mv README README2                                     # 重命名文件README为README2</span><br><span class=\"line\">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class=\"line\">git rebase</span><br><span class=\"line\">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class=\"line\">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class=\"line\">git ls-files                                              # 列出git index包含的文件</span><br><span class=\"line\">git show-branch                                           # 图示当前分支历史</span><br><span class=\"line\">git show-branch --all                                     # 图示所有分支历史</span><br><span class=\"line\">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class=\"line\">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class=\"line\">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class=\"line\">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class=\"line\">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class=\"line\">git show HEAD@&#123;5&#125;</span><br><span class=\"line\">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class=\"line\">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志</span><br><span class=\"line\">git show HEAD~3</span><br><span class=\"line\">git show -s --pretty=raw 2be7fcb476</span><br><span class=\"line\">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class=\"line\">git stash list                                            # 查看所有暂存</span><br><span class=\"line\">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class=\"line\">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class=\"line\">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class=\"line\">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT</span><br><span class=\"line\">git gc</span><br><span class=\"line\">git fsck</span><br></pre></td></tr></table></figure>","_path":"20220609/git-zhuan-ti/","_link":"https://yaoqs.github.io/20220609/git-zhuan-ti/","_id":"clzpq9hwk006ysgerhopbeo58"}}