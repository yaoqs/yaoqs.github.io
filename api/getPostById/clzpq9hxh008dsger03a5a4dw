{"type":"getPostById","data":{"title":"如何将本地项目上传到Github","date":"2019-12-02T01:38:36.000Z","description":"","categories":[{"name":"技术笔记","_id":"clzpq9ht6001lsger8yzb9r3x"}],"tags":[{"name":"Reprint","_id":"clzpq9htg0022sger2ks03l96"},{"name":"github","_id":"clzpq9hzn00cmsger2ku84bhy"}],"content":"<p>Reprint from <a href=\"https://www.cnblogs.com/smfx1314/p/8426115.html\">https://www.cnblogs.com/smfx1314/p/8426115.html</a></p>\n<p>使用git上传文件到GitHub需要git客户端以及注册GitHub账号。</p>\n<ul>\n<li>git官网:<a href=\"https://git-scm.com/\">https://git-scm.com/</a></li>\n<li>github官网:<a href=\"https://github.com/\">https://github.com/</a></li>\n</ul>\n<p>下面是具体的操作步骤：</p>\n<ul>\n<li>第一步：我们需要先创建一个本地的版本库（其实也就是一个文件夹）。你可以直接在桌面右击新建文件夹，也可以右击打开Git bash命令行窗口通过命令来创建。现在我通过命令行在桌面新建一个test文件夹（你也可以在其他任何地方创建这个文件夹），并且进入这个文件夹</li>\n<li>第二步：\n<ul>\n<li>在命令行中输入git init把这个文件夹变成Git可管理的仓库.这时你会发现test里面多了个.git文件夹，它是Git用来跟踪和管理版本库的，因为它默认是隐藏文件，要是看不到就设置下文件夹和搜索选项。</li>\n<li>之后把需要上传到GitHub的文件全部复制到这test这个目录下。</li>\n<li>然后通过git add .(注意这个&quot;.“，是有空格的，”.&quot;代表这个test这个文件夹下的目录全部都提交。你也可以通过git add 文件名  提交指定的文件)把文件添加到缓存区或者指定具体文件提交.</li>\n<li>然后可以通过git status命令，查看下现在的状态.看到有css,js文件夹的内容都提交上去了。</li>\n<li>然后，在使用命令git commit -m “这里面写你的注释”  把文件提交的本地仓库</li>\n</ul>\n</li>\n<li>第三步：下面就到了连接远程仓库（也就是连接Github）\n<ul>\n<li>由于本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下：创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建</li>\n<li>然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个文件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>第四步：登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。</li>\n<li>第五步：在Github上创建一个Git仓库。你可以直接点New repository来创建，比如我创建了一个tes2t的仓库。</li>\n<li>第六步：在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地test仓库的命令行输入：</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:smfx1314/test2.git</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第七步：关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过：</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>由于新建的远程仓库是空的，所以要加上-u这个参数。然后进去GitHub test2这个仓库刷新下就会有已经上传的文件夹了。如果新建远程仓库不是空的，例如你勾选了 Initialize this repository with a README。那么你通过命令 $ git push -u origin master是会报错的,这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull --rebase origin master</span><br></pre></td></tr></table></figure>\n<p>再输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>至此就完成了将本地项目上传到Github的整个过程。</p>\n","_path":"20191202/ru-he-jiang-ben-di-xiang-mu-shang-chuan-dao-github/","_link":"https://yaoqs.github.io/20191202/ru-he-jiang-ben-di-xiang-mu-shang-chuan-dao-github/","_id":"clzpq9hxh008dsger03a5a4dw"}}