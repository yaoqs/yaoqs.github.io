{"type":"getPostById","data":{"title":"Hook_Windows_NT","date":"2019-12-03T12:38:01.000Z","description":"","categories":[{"name":"技术笔记","_id":"clzpq9ht6001lsger8yzb9r3x"}],"tags":[{"name":"Reprint","_id":"clzpq9htg0022sger2ks03l96"},{"name":"windows hook","_id":"clzpq9htl002bsger76fwe3cn"}],"content":"<p>Reprint from <a href=\"https://blog.csdn.net/WinsenJiansbomber/article/details/16891189\">https://blog.csdn.net/WinsenJiansbomber/article/details/16891189</a></p>\n<p>Hook API</p>\n<p>2013年11月16日功能追溯</p>\n<p>Windows编程的最简单的程序结构，只需要一个消息环。以下展示一个基本的Win32程序，它在开发执行时，会播放Windows 7启动时的使用的音响。#pragma 是VC平台的专用指令，使用它来替代手动设置工程属性，免去手动添加链接所需的LIB库。和普通控制台程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;winmm.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> TCHAR szTitle[] = <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;GUI App&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">static</span> TCHAR szSound[] = <span class=\"built_in\">TEXT</span>( <span class=\"string\">&quot;c:\\\\windows\\\\media\\\\Windows Logon Sound.wav&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">HWND hWin;</span><br><span class=\"line\">HINSTANCE hAPP;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">circle</span><span class=\"params\">( HWND, UINT, WPARAM, LPARAM )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> WINAPI <span class=\"title\">WinMain</span><span class=\"params\">(HINSTANCE hApp, HINSTANCE hPre, LPSTR lpLine, <span class=\"type\">int</span> iCmd )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">MSG msg;</span><br><span class=\"line\">WNDCLASS winClass;</span><br><span class=\"line\"></span><br><span class=\"line\">hAPP = hApp;</span><br><span class=\"line\"></span><br><span class=\"line\">winClass.style  = CS_HREDRAW | CS_VREDRAW;</span><br><span class=\"line\">winClass.lpfnWndProc  = circle;</span><br><span class=\"line\">winClass.hInstance= hApp;</span><br><span class=\"line\">winClass.hIcon= <span class=\"built_in\">LoadIcon</span>( <span class=\"literal\">NULL</span>, IDI_APPLICATION );</span><br><span class=\"line\">winClass.hCursor= <span class=\"built_in\">LoadCursor</span>( <span class=\"literal\">NULL</span>,IDC_CROSS );</span><br><span class=\"line\">winClass.hbrBackground = (HBRUSH) <span class=\"built_in\">GetStockObject</span>( WHITE_BRUSH );</span><br><span class=\"line\">winClass.lpszClassName = szTitle;</span><br><span class=\"line\">winClass.lpszMenuName = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">winClass.cbClsExtra  = <span class=\"number\">0</span>;</span><br><span class=\"line\">winClass.cbWndExtra   = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( !<span class=\"built_in\">RegisterClass</span>( &amp;winClass ) )&#123;</span><br><span class=\"line\"><span class=\"built_in\">MessageBox</span>( <span class=\"literal\">NULL</span>, <span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;I need a Window!&quot;</span>), szTitle, MB_ICONERROR );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hWin = <span class=\"built_in\">CreateWindow</span>(</span><br><span class=\"line\">szTitle, szTitle, <span class=\"comment\">//window class and caption</span></span><br><span class=\"line\">WS_OVERLAPPEDWINDOW,</span><br><span class=\"line\">CW_USEDEFAULT,  CW_USEDEFAULT, <span class=\"comment\">// position x, y</span></span><br><span class=\"line\">CW_USEDEFAULT,  CW_USEDEFAULT, <span class=\"comment\">// size width, height</span></span><br><span class=\"line\"><span class=\"literal\">NULL</span>, <span class=\"comment\">// parent windows handle</span></span><br><span class=\"line\"><span class=\"literal\">NULL</span>, <span class=\"comment\">// menu handle</span></span><br><span class=\"line\">hApp,</span><br><span class=\"line\"><span class=\"literal\">NULL</span>); <span class=\"comment\">//creation parameters</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ShowWindow</span>( hWin, iCmd );</span><br><span class=\"line\"><span class=\"built_in\">UpdateWindow</span>( hWin );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">GetMessage</span>( &amp;msg, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) )&#123;</span><br><span class=\"line\"><span class=\"built_in\">TranslateMessage</span>( &amp;msg );</span><br><span class=\"line\"><span class=\"built_in\">DispatchMessage</span>( &amp;msg );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> msg.wParam;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">circle</span><span class=\"params\">( HWND hWin, UINT iMsg, WPARAM wp, LPARAM lp )</span></span>&#123;</span><br><span class=\"line\">HDC hdc ;</span><br><span class=\"line\">PAINTSTRUCT ps ;</span><br><span class=\"line\">RECTrect ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>( iMsg )&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_CREATE:</span><br><span class=\"line\"><span class=\"built_in\">PlaySound</span>( szSound, <span class=\"literal\">NULL</span>, SND_FILENAME | SND_ASYNC );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\"><span class=\"built_in\">PostQuitMessage</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_PAINT:</span><br><span class=\"line\">hdc = <span class=\"built_in\">BeginPaint</span>( hWin, &amp;ps);</span><br><span class=\"line\"><span class=\"built_in\">GetClientRect</span>( hWin, &amp;rect );</span><br><span class=\"line\">string text =  <span class=\"string\">&quot;Appication API HOOK&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">DrawText</span>( hdc, text.<span class=\"built_in\">c_str</span>(), <span class=\"number\">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER );</span><br><span class=\"line\"><span class=\"built_in\">EndPaint</span>( hWin, &amp;ps);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">DefWindowProc</span>( hWin, iMsg, wp, lp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的程序结构和普通的DOS程序大体相同，只是加入了Windows平台的各种对象。为了新建一个GUI界面，首先设置了一个窗口类winClass，然后通过RegisterClass来注册到系统内，最后通过CreateWindow完成窗口的创建并用ShowWindow将其显示出来程序的结束同样是以WinMain的结束而完成的。不同的地方就在while循环，这个就是Windows系统特有的消息环。Windows通过消息机制来管理着系统设备的各种事件，如鼠标移动了，键盘被按下了，网络连接上了，或者是停电了等等。每一个事件有伴随着消息的传递，每条消息按先后缓急顺序被存储到一个称为消息队列Queue的地方。用户程序在消息环调用GetMessage方法时，就会进入一个不消耗CUP的等待状态，Windows在消息队列中发现一个属于当前用户程序的消息时，就会发送给用户程序，这样GetMessage就取得消息并返回到用户程序的消息环。这时最重要的事情就是对消息进行向应，这就是Windows编程要做的事。在前面，创建窗口时，给GreateWindow传入了一个窗口类，这个类的lpfnWndProc成员设置了一个引用circle的函数指针，这就是程序用来响应消息的方法，称为窗口过程。当消息环中调用DispatchMessage方法时，就会将消息传递给窗口过程进行处理。而在窗口过程中，将对不同的消息进行选择性处理，如程序完成初始化时的WM_CREATE消息，程序将播放一段乐音来响应。当用户通过鼠标点击窗口右上角的关闭按钮时，将产生一个WM_DESTORY消息，这就是一个关闭程序的意图。窗口过程在接收到这个关闭程序的消息时，就以调用PostQuitMesage来响应，它就是用来告知系统，程序需要关闭，不需要再做处理其它消息了。然后系统给消息环发送一个空消息，以使用while终止循环，最后WinMain即，程序结束。</p>\n<p>注意，和PostQuitMessage相似的PostMessage可以用来向程序发送任意消息，它只负责将消息放到消息队列中，然后直接返回，相应的SendMessage要等到受到消息处理的返回码后才继续。</p>\n<p>WM_PAINT是Windows窗口系统中一条重要的消息，应用程序通过处理该消息实现在窗口上的绘制工作。系统会在多个不同的时机发送WM_PAINT消息：当第一次创建一个窗口时，当改变窗口的大小时，当把窗口从另一个窗口背后移出时，当最大化或最小化窗口时，等等，这些动作都是由系统管理的，应用只是被动地接收该消息，在消息处理函数中进行绘制操作。大多数的时候应用也需要能够主动引发窗口中的绘制操作，比如当窗口显示的数据改变的时候，这一般是通过InvalidateRect和InvalidateRgn函数来完成的，前者把指定的区域加到窗口的待更新区域Update Region中，当应用的消息队列没有其他消息且待更新区域不为空时，系统就会自动产生WM_PAINT消息。待更新区域是用一个RECT结构表示的，如下定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_RECT</span> &#123;</span><br><span class=\"line\">  LONG left; <span class=\"comment\">// 窗口左边开始计算的像素位置</span></span><br><span class=\"line\">  LONG top; <span class=\"comment\">// 窗口的顶部计算的像素位置</span></span><br><span class=\"line\">  LONG right;</span><br><span class=\"line\">  LONG bottom;</span><br><span class=\"line\">&#125; RECT, *PRECT;</span><br></pre></td></tr></table></figure>\n<p>系统为什么不在调用Invalidate时发送WM_PAINT消息呢？又为什么非要等应用消息队列为空时才发送WM_PAINT消息呢？这是因为系统把在窗口中的绘制操作当作一种低优先级的操作，于是尽可能地推后做。待更新区域区域会被累加起来，然后在一个WM_PAINT消息中一次得到更新，不仅能避免多次重复地更新同一区域，也优化了应用的更新操作。这种通过InvalidateRect和InvalidateRgn来使窗口区域无效，依赖于系统在合适的时机发送WM_PAINT消息的机制实际上是一种异步工作方式，也就是说，在无效化窗口区域和发送WM_PAINT消息之间是有延迟的；有时候这种延迟并不是我们希望的，这时我们当然可以在无效化窗口区域后利用SendMessage发送一条WM_PAINT消息来强制立即重画，但不如使用Windows GDI API：UpdateWindow和RedrawWindow或者使用WM_PRINT 、WM_PRINTCLIENT消息。</p>\n<p>BeginPaint和WM_PAINT消息紧密相关。试一试在WM_PAINT处理函数中不写BeginPaint会怎样？程序会像进入了一个死循环一样达到惊人的CPU占用率，因为程序总有处理不完的WM_PAINT消息。其实BeginPaint的一个作用就是把待更新区域清空。BeginPaint和WM_ERASEBKGND消息也有关系。当窗口的待更新区域被标志为需要擦除背景时，BeginPaint会发送WM_ERASEBKGND消息来重画背景，同时在其返回信息里有一个标志表明窗口背景是否被重画过。当我们用InvalidateRect和InvalidateRgn来把指定区域加到待更新区域中时，可以设置该区域是否需要被擦除背景，这样下一个BeginPaint就知道是否需要发送WM_ERASEBKGND消息了。</p>\n<p>要注意的是，BeginPaint只能在WM_PAINT处理函数中使用，在其它消息下无法实现窗口重绘功能。例如可以使用以下方法来产生一个待更新区，以强制刷新窗口。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RECT rect;</span><br><span class=\"line\"><span class=\"built_in\">GetClientRect</span>( hWin, &amp;rect );</span><br><span class=\"line\"><span class=\"built_in\">InvalidateRect</span>( hWin, &amp;rect, TRUE);</span><br><span class=\"line\"><span class=\"built_in\">UpdateWindow</span>( hWin );</span><br></pre></td></tr></table></figure>\n<p>Windows程序就是这样一个基本的工作过程，然而，从DOS开始，程序开发就有个传统：程序需求对系统功能的监视和响应以实现程序的功能。这也是程序开发的基本需求，Windows 3.x的时代HOOK已经普遍应用。HOOK根本上来讲就是一处提供给开发者嵌入自定义例程以实现程序功能的场所。目前普遍将HOOK翻译为钩子的做法其实不太恰当，如果按照我在做Wordpress二次开发的经验，我更愿意将HOOK称作过滤器 Filter，从本质上讲Windows的HOOK和Wordpress的Filter是一致的。它们所起的作用就像是水管中间接上的一个过滤器，把某些东西过滤出来。事实上，1993年Kyle Marsh在MSDN上发表过一篇文章Win32 Hooks，里就是将钩子回调过程为过滤器函数，这篇文章可以在MSDN的技术文章栏目中找到。</p>\n<p>实现程序功能代码嵌入的方法有各种形式，如下：</p>\n<p>使用注册表注入，将程序注册到：HKLM/Software/Microsoft/Windows NT/CurrentVersion/Windows/AppInit_DLLs。这AppInit_DLLs这个键记录了一个或一组逗号分隔的DLL文件，当一个使用USER32.DLL的程序载入时，就会透过LoadLibrary()API依次加载AppInit_DLLs指定的链接库。这种方法只在NT架构系统且2K+版本上才有效。使用API注入，通过SetWindowsHookEx()来注册HOOK处理程序，使用CallNextHookEx() 来保持钩子链正常工作，退出时，使用UnhookWindowsHookEx()卸载钩子。通过修改PE文件注入，PE程序文件中有一个导入地址表IAT Import Address Table，它记录了程序要调用的外部函数的地址，改PE文件的IAT，使之指向自己的代码，这样EXE/DLL在调用系统API的时候便会调用你自己的函数。要注意，Windows API均有两个版本：Ansi和Unicode。例如获取程序标题的GetWindowTextAPI实际上只是一个宏，根据编译条件UNICODE来决定是调用GetWindowTextA还是GetWindowTextW。在NT系统下所有ANSI版本API会转换成UNICODE版本。通过遥距线程注入，使用CreateRemoteThread()方法可以创建一个线程，将要注入的程序透过LPTHREAD_START_ROUTINE参数传递给创建的线程，但是程序要先使用ThreadProc()API包装。这种方法是Jeffrey Ritcher提出来的，他写的文档也很完善，不过也只在NT架构系统且2K+版本上才有效。透过BHO插件注入，BHO是Browser Helper Objects，只在IE浏览器中使用。IE运行时会加载所有实现IObjectWithSite接口的COM组件。通过Office插件注入，和BHO方式相似，使用范围限制在Office内。</p>\n<p>本文主要涉及API注入、PE文件注入及遥距线程注入。<br>\nAPI钩子程序结构</p>\n<p>钩子，按习惯，大伙都叫它为钩了。在伴随Windows系统的发展中，钩子也发展出好多的分类，有系统层次的，有应用程序层次的，有核心层次的，有处理键盘消息的，有处理系统日志的，有监视API调用的，各式各样。对于一个钩子程序，按上面水管过滤的理解，首先就需要安装一个钩子，主钩子在系统中起作用；然后程序按功能逻辑进行处理，这需要一个钩子回调函数hook procedure；完了，程序要退出，就要清场，把钩子回收。</p>\n<p>而每条水管可以安装多个不同的过滤器，同理钩子不也可以有多个，因此组成了一条链，系统将按注册顺序来调用。先调用线程钩子，然后调用系统钩子，后注册的先调用。</p>\n<p>对于用户层次的钩子，只需要一个可以安装和回收钩子的程序就可以了，连带程序功能都在一个程序内实现。当钩子需要处理Windows内核消息时，就需要钩子运行于内核模式，这时就需要可以开发内核程序的DDK，它才是用来开发内核应用的，像驱动程序这类一样，而且必需将钩子程序编译到DLL程序中。只Win16程序才允许在程序内容注册一个系统钩子。先来看看SetWindowsHookEx原型：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">HHOOK <span class=\"title\">SetWindowsHookEx</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  <span class=\"type\">int</span> idHook,<span class=\"comment\">// hook type</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HOOKPROC lpfn, <span class=\"comment\">// hook procedure</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HINSTANCE hMod,<span class=\"comment\">// handle to application instance</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  DWORD dwThreadId   <span class=\"comment\">// thread identifier</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>hMod 指定钩子回调函数所在DLL的实例句柄。如果安装的是局部钩子的话，由于局部钩子的回调函数并不需要放在动态链接库中，这时这个参数就使用NULL。</p>\n<p>dwThreadID是安装钩子后想监控的线程的ID号。该参数可以决定钩子是线程钩子局部范围的还是系统钩子全局范围。如果参数指定的是自己进程中的某个线程ID号，那么该钩子是一个局部钩子；如果指定的线程ID是另一个进程中某个线程的ID，那么安装的钩子是一个局部的远程钩子；如果想要安装系统范围的全局钩子的话，可以将这个参数指定为NULL，这样钩子就会被解释成系统范围的，可以用来监控所有的进程及它们的线程。</p>\n<p>由于32-bit钩子不能注入到64-bit的进程，反之亦然，在x64平台上，需要准备x64版本的钩子程序，才能正常得到系统支持。使用SetWindowsHookEx注册钩子时，如果回NULL，则表示注册失败，可以通过GetLastError()获取错误代码：返回代码 含义<br>\nERROR_INVALID_HOOK_FILTER 钩子代码无效。<br>\nERROR_INVALID_FILTER_PROC 钩子函数无效。<br>\nERROR_HOOK_NEEDS_HMOD 注册系统钩子使用了空hInstance参数，或者注册线程钩子的线程不存在。<br>\nERROR_GLOBAL_ONLY_HOOK 以系统钩子方式注册了线程钩子。<br>\nERROR_INVALID_PARAMETER 线程ID无效。<br>\nERROR_JOURNAL_HOOK_SET JOURNAL钩子已经注册。<br>\nERROR_MOD_NOT_FOUND hInstance参数不是指向一个库。简而言之就是在模块列表中定位到不到指定模块。其它值 出于安全，不允许或系统内存不足。</p>\n<p>下表展示了WINUSER.H定义的一些钩子的类型：钩子名称 作用层次 监视消息的类型和时机<br>\nWH_CALLWNDPROC 线程、系统 应用于SendMessage函数调用时。<br>\nWH_CALLWNDPROCRET 线程、系统 应用于SendMessage函数调用后。<br>\nWH_CBT 线程、系统 当基于计算机的训练（CBT）事件发生时调用钩子函数<br>\nWH_DEBUG 线程、系统 在系统调用其他钩子函数前执行的钩子，当然是除了WH_DEBUG了，不然会循环。<br>\nWH_FOREGROUNDIDLE 系统 系统空闲钩子，当系统空闲的时候调用钩子函数，这样就可以在这里安排一些优先级很低的任务<br>\nWH_GETMESSAGE 线程、系统 应用于GetMessage或PeekMessage函数执行后。<br>\nWH_HARDWARE 线程、系统 每当调用GetMessage或PeekMessage函数时，如果从消息队列中得到的是非鼠标和键盘消息，则调用钩子函数<br>\nWH_JOURNALRECORD 系统 日志记录钩子，用来记录发送给系统消息队列的所有消息<br>\nWH_JOURNALPLAYBACK 系统 日志回放钩子，用来回放日志记录钩子记录的系统事件<br>\nWH_KEYBOARD 线程、系统 每当调用GetMessage或PeekMessage函数时，如果从消息队列中得到的是WM_KEYUP或WM_KEYDOWN消息，则调用钩子函数<br>\nWH_KEYBOARD_LL 系统 像Ctrl+alt+del 系统会先处理掉，WH_KEYBOARD没法截获，而WH_KEYBOARD_LL可以，但很容易引起挂起之类的问题，不过操作系统通过LowLevelHooksTimeout限时操作，超时就直接被忽略。<br>\nWH_MOUSE 线程、系统 每当调用GetMessage或PeekMessage函数时，如果从消息队列中得到的是鼠标消息，则调用钩子函数<br>\nWH_MOUSE_LL 系统 截获整个系统的鼠标事件消息。<br>\nWH_MSGFILTER 线程、系统 应用于用户程序对对话框、菜单和滚动条的消息，先于程序行为。<br>\nWH_SYSMSGFILTER 系统 同WH_MSGFILTER，应用于系统范围，影响更大。<br>\nWH_SHELL 线程、系统 当Windows shell程序准备接收一些通知事件前调用钩子函数，如shell被激活和重画等</p>\n<p>日志记录钩子和日志回放钩子可以放在安装钩子的程序中，并不需要单独放在一个动态链接库中，因为它们是由Windows系统调用的钩子。程序内的线程级别钩子</p>\n<p>在前面熟悉了Win32程序的基本结构和消息环的作用，在此基础上进行应用应用程序级别的钩子开发相对会比较容易入手。为了直观地显示注册钩子不成功的原因，下面使用FormatMessage增加了一个显示错误信息的方法，此方法通过查询GetLastError返回的错误代码返回文字版本的信息，然后通过对话框显示出来。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowErrorInfo</span><span class=\"params\">(<span class=\"type\">int</span> Error)</span></span>&#123;</span><br><span class=\"line\">LPVOID lpMsgBuf;</span><br><span class=\"line\"><span class=\"built_in\">FormatMessage</span>(</span><br><span class=\"line\">FORMAT_MESSAGE_ALLOCATE_BUFFER |</span><br><span class=\"line\">FORMAT_MESSAGE_FROM_SYSTEM |</span><br><span class=\"line\">FORMAT_MESSAGE_IGNORE_INSERTS,</span><br><span class=\"line\"><span class=\"literal\">NULL</span>,</span><br><span class=\"line\">Error,</span><br><span class=\"line\"><span class=\"built_in\">MAKELANGID</span>(LANG_NEUTRAL, SUBLANG_DEFAULT), <span class=\"comment\">// Default language</span></span><br><span class=\"line\">(LPTSTR) &amp;lpMsgBuf,</span><br><span class=\"line\"><span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"built_in\">MessageBox</span>( <span class=\"literal\">NULL</span>, (LPCTSTR)lpMsgBuf, <span class=\"string\">&quot;Error&quot;</span>, MB_OK | MB_ICONINFORMATION );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照前面对钩子应用的基本结构，这里要添加注册钩子HookStart和清除钩子HookDown的函数，以及钩子过程FilterFunc。现在就来实现最简单的当前程序级别的钩子，将文本最开始给出的Win32例子的窗口过程稍为修改一下，再添加上钩子功能得以下修改过的部分：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UINT COUNT;</span><br><span class=\"line\">HHOOK MyHook;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">FilterFunc</span><span class=\"params\">( <span class=\"type\">int</span> nCode, WORD wp, DWORD lp)</span> </span>&#123;</span><br><span class=\"line\">stringstream ss;</span><br><span class=\"line\"><span class=\"type\">char</span> text[MAXBYTE];</span><br><span class=\"line\">ss &lt;&lt; szTitle &lt;&lt; <span class=\"string\">&quot; -  &quot;</span> &lt;&lt; ++COUNT &lt;&lt; std::hex &lt;&lt; <span class=\"string\">&quot; MSG:&quot;</span> &lt;&lt; nCode</span><br><span class=\"line\"> &lt;&lt; std::hex &lt;&lt; <span class=\"string\">&quot; wp:0x&quot;</span> &lt;&lt; wp &lt;&lt; <span class=\"string\">&quot; lp:0x&quot;</span> &lt;&lt; lp &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">ss.<span class=\"built_in\">getline</span>( text, MAXBYTE);</span><br><span class=\"line\"><span class=\"built_in\">SetWindowText</span>( hWin, text );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">CallNextHookEx</span>( MyHook, nCode, wp, lp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HHOOK <span class=\"title\">HookStart</span><span class=\"params\">(<span class=\"type\">int</span> idHook, HINSTANCE hd, DWORD td)</span></span>&#123;</span><br><span class=\"line\">HOOKPROC hkp = <span class=\"built_in\">reinterpret_cast</span>( FilterFunc );</span><br><span class=\"line\">HHOOK hk = <span class=\"built_in\">SetWindowsHookEx</span>( idHook, hkp, hd, td );</span><br><span class=\"line\"><span class=\"keyword\">if</span>(hk==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">UINT Error = <span class=\"built_in\">GetLastError</span>();</span><br><span class=\"line\">    <span class=\"built_in\">ShowErrorInfo</span>(Error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> hk;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">HookDown</span><span class=\"params\">(HHOOK hook)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UnhookWindowsHookEx</span>(hook);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">circle</span><span class=\"params\">( HWND hWin, UINT iMsg, WPARAM wp, LPARAM lp )</span></span>&#123;</span><br><span class=\"line\">HDC hdc ;</span><br><span class=\"line\">PAINTSTRUCT ps ;</span><br><span class=\"line\">RECTrect ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>( iMsg )&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_CREATE:</span><br><span class=\"line\"><span class=\"built_in\">PlaySound</span>( szSound, <span class=\"literal\">NULL</span>, SND_FILENAME | SND_ASYNC );</span><br><span class=\"line\">MyHook = <span class=\"built_in\">HookStart</span>( WH_KEYBOARD, <span class=\"literal\">NULL</span>,<span class=\"built_in\">GetCurrentThreadId</span>() );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\"><span class=\"built_in\">PostQuitMessage</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">HookDown</span>( MyHook );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_PAINT:</span><br><span class=\"line\">hdc = <span class=\"built_in\">BeginPaint</span>( hWin, &amp;ps);</span><br><span class=\"line\"><span class=\"built_in\">GetClientRect</span>( hWin, &amp;rect );</span><br><span class=\"line\">string text =  <span class=\"string\">&quot;Appication API HOOK&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">DrawText</span>( hdc, text.<span class=\"built_in\">c_str</span>(), <span class=\"number\">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER );</span><br><span class=\"line\"><span class=\"built_in\">EndPaint</span>( hWin, &amp;ps);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">DefWindowProc</span>( hWin, iMsg, wp, lp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当按下键盘时，标题就会显示WPARAM和LPARAM参数，注意窗口过程中没有对按键消息进行处理，这是在钩子过程FilterFunc中处理的，如下图：</p>\n<p>下一步将要实现系统级别的钩子，这个程序将需要获取其它进程的线程ID以将DLL钩子注入线程，这里要先热身，介绍几个相关方法的原型：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">SetCapture</span><span class=\"params\">(  HWND hWnd )</span></span>;  <span class=\"comment\">// 捕捉鼠标事件</span></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">ReleaseCapture</span><span class=\"params\">(VOID)</span></span>;  <span class=\"comment\">// 释放鼠标</span></span><br><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">WindowFromPoint</span><span class=\"params\">(  POINT Point  )</span></span>;  <span class=\"comment\">// 通过鼠标位置来获取窗口句柄</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">FindWindow</span><span class=\"params\">(  <span class=\"comment\">// 通过窗口类查找窗体</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCTSTR lpClassName,  <span class=\"comment\">// 窗口类名，NULL结束字符串</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCTSTR lpWindowName  <span class=\"comment\">// 窗口标题过滤</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>; <span class=\"comment\">// 例如记事本Notepad、写字板WordPadClass、控制台ConsoleWindowClass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HWND <span class=\"title\">FindWindowEx</span><span class=\"params\">(  <span class=\"comment\">// 升级版FindWindow</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hwndParent,  <span class=\"comment\">// handle to parent window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hwndChildAfter,  <span class=\"comment\">// handle to child window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCTSTR lpszClass,<span class=\"comment\">// class name</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCTSTR lpszWindow<span class=\"comment\">// window name</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">EnumWindows</span><span class=\"params\">(  <span class=\"comment\">// 通过枚举查找窗口，回调函数原型随后</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  WNDENUMPROC lpEnumFunc,  <span class=\"comment\">// callback function</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPARAM lParam<span class=\"comment\">// application-defined value</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">EnumChildWindows</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hWndParent, <span class=\"comment\">// handle to parent window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  WNDENUMPROC lpEnumFunc,  <span class=\"comment\">// pointer to callback function</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPARAM lParam<span class=\"comment\">// application-defined value</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL CALLBACK <span class=\"title\">EnumWindowsProc</span><span class=\"params\">( <span class=\"comment\">// 返回False主动停止窗口枚举</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hwnd,  <span class=\"comment\">// handle to parent window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPARAM lParam   <span class=\"comment\">// application-defined value</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">GetWindowThreadProcessId</span><span class=\"params\">(  <span class=\"comment\">// 通过窗口句柄来获取线程ID</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hWnd, <span class=\"comment\">// handle to window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPDWORD lpdwProcessId  <span class=\"comment\">// process identifier</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HANDLE <span class=\"title\">GetCurrentProcess</span><span class=\"params\">(VOID)</span> <span class=\"comment\">// 一组获取当前进程、线程及基ID的API</span></span></span><br><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">GetCurrentProcessId</span><span class=\"params\">(VOID)</span></span></span><br><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">GetCurrentThreadId</span><span class=\"params\">(VOID)</span></span></span><br><span class=\"line\"><span class=\"function\">HANDLE <span class=\"title\">GetCurrentThread</span><span class=\"params\">(VOID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetClassName</span><span class=\"params\">(  <span class=\"comment\">// 获取窗口类名</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hWnd,   <span class=\"comment\">// handle to window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPTSTR lpClassName,  <span class=\"comment\">// class name</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  <span class=\"type\">int</span> nMaxCount<span class=\"comment\">// size of class name buffer</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HANDLE <span class=\"title\">OpenProcess</span><span class=\"params\">( <span class=\"comment\">// 通过线程ID获取线程句柄</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  DWORD dwDesiredAccess,  <span class=\"comment\">// 访问许可标志，见随后常数定义</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  BOOL bInheritHandle,<span class=\"comment\">// handle inheritance option</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  DWORD dwProcessId   <span class=\"comment\">// process identifier</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_TERMINATE (0x0001)<span class=\"comment\">// 允许终止进程。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_CREATE_THREAD (0x0002)  <span class=\"comment\">// 允许创建远程线程。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_VM_OPERATION  (0x0008) <span class=\"comment\">// 许可WriteProcessMemory、VirtualProtectEx修改地址空间。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_VM_READ   (0x0010)<span class=\"comment\">// 允许对进程的地址空间进行读操作。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_VM_WRITE  (0x0020)<span class=\"comment\">// 允许对进程的地址空间进行写操作。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_DUP_HANDLE(0x0040)  <span class=\"comment\">// 允许进程句柄被复制。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_CREATE_PROCESS(0x0080)  <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_SET_QUOTA (0x0100)<span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_SET_INFORMATION   (0x0200)  <span class=\"comment\">// 许可SetPriorityClass函数设置进程的优先级。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_QUERY_INFORMATION (0x0400)  <span class=\"comment\">//许可GetExitCodeProcess查询进程的退出码</span></span></span><br><span class=\"line\"><span class=\"comment\">// 或使用GetPriorityClass函数查询进程的优先级。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROCESS_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0xFFF)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FARPROC <span class=\"title\">GetProcAddress</span><span class=\"params\">( <span class=\"comment\">// 获取指定模块的函数地址</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HMODULE hModule,<span class=\"comment\">// handle to DLL module</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCSTR lpProcName   <span class=\"comment\">// name of function</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"function\">HINSTANCE <span class=\"title\">LoadLibrary</span><span class=\"params\">( <span class=\"comment\">// 手动装载程序模块</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCTSTR lpLibFileName   <span class=\"comment\">// address of filename of executable module</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"function\">HINSTANCE <span class=\"title\">LoadLibraryEx</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPCTSTR lpLibFileName,  <span class=\"comment\">// points to name of executable module</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HANDLE hFile,   <span class=\"comment\">// reserved, must be NULL</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  DWORD dwFlags   <span class=\"comment\">// 入口点处理标志，见随后的常数定义</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DONT_RESOLVE_DLL_REFERENCES 0x00000001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOAD_LIBRARY_AS_DATAFILE0x00000002  <span class=\"comment\">// 不执行入口，相当LoadResource</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOAD_WITH_ALTERED_SEARCH_PATH   0x00000008</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">GetModuleFileName</span><span class=\"params\">( <span class=\"comment\">// 获取模块文件位置</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HMODULE hModule,<span class=\"comment\">// handle to module to find filename for</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  LPTSTR lpFilename,  <span class=\"comment\">// pointer to buffer to receive module path</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  DWORD nSize <span class=\"comment\">// size of buffer, in characters</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">UINT_PTR <span class=\"title\">SetTimer</span><span class=\"params\">( <span class=\"comment\">// 设置定时器</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hWnd,  <span class=\"comment\">// handle to window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  UINT_PTR nIDEvent,  <span class=\"comment\">// your timer identifier</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  UINT uElapse,   <span class=\"comment\">// time-out value in milliseconds</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  TIMERPROC lpTimerFunc   <span class=\"comment\">// timer procedure</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">KillTimer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hWnd,  <span class=\"comment\">// handle to window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  UINT_PTR uIDEvent   <span class=\"comment\">// timer identifier</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"><span class=\"function\">VOID CALLBACK <span class=\"title\">TimerProc</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  HWND hwnd, <span class=\"comment\">// handle to window</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  UINT uMsg, <span class=\"comment\">// WM_TIMER message</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  UINT_PTR idEvent,  <span class=\"comment\">// timer identifier</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  DWORD dwTime   <span class=\"comment\">// current system time</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>先来热身一下，这是一个通过枚举查找窗口类，标题、句柄等信息的控制台程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL CALLBACK <span class=\"title\">EnumProc</span><span class=\"params\">( HWND hwnd, LPARAM lParam )</span></span>&#123;</span><br><span class=\"line\"><span class=\"type\">char</span> buf[MAXWORD];</span><br><span class=\"line\"><span class=\"type\">char</span> bufClass[MAXWORD];</span><br><span class=\"line\">DWORD thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">GetWindowTextA</span>( hwnd, buf, MAXWORD );</span><br><span class=\"line\"><span class=\"built_in\">GetClassNameA</span>( hwnd, bufClass, MAXWORD );</span><br><span class=\"line\">thread = <span class=\"built_in\">GetWindowThreadProcessId</span>( hwnd, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">title</span><span class=\"params\">(buf)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(</span><br><span class=\"line\">title==<span class=\"built_in\">string</span>(<span class=\"string\">&quot;Default IME&quot;</span>) ||</span><br><span class=\"line\">title==<span class=\"built_in\">string</span>(<span class=\"string\">&quot;Default IME&quot;</span>) ||</span><br><span class=\"line\">title==<span class=\"built_in\">string</span>(<span class=\"string\">&quot;MSCTFIME UI&quot;</span>)</span><br><span class=\"line\">) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;Found:0x&quot;</span> &lt;&lt; hwnd &lt;&lt; <span class=\"string\">&quot; THREAD:0x&quot;</span> &lt;&lt; thread</span><br><span class=\"line\">   &lt;&lt; <span class=\"string\">&quot; CLASS:&quot;</span> &lt;&lt; bufClass &lt;&lt; <span class=\"string\">&quot; TITLE:&quot;</span> &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">int</span> (WINAPI *cb)() = <span class=\"built_in\">reinterpret_cast</span>(EnumProc);</span><br><span class=\"line\">BOOL isok = <span class=\"built_in\">EnumWindows</span>( cb,  <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;exit:&quot;</span> &lt;&lt; isok &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一个程序可以通过ShowWindow来让程序在任务栏显示或隐藏。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">Toggle</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *name,  <span class=\"type\">int</span> state=SW_SHOW)</span></span>&#123;</span><br><span class=\"line\">HWND hwin = <span class=\"built_in\">FindWindowA</span>( name, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">ShowWindow</span>( hwin, state );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;Type exit to close.&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(;;)&#123;</span><br><span class=\"line\">string s;</span><br><span class=\"line\">cin &gt;&gt; s;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;show&quot;</span>)&#123;</span><br><span class=\"line\">string name;</span><br><span class=\"line\">cin &gt;&gt; name;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( name.<span class=\"built_in\">length</span>()&gt;<span class=\"number\">0</span> ) <span class=\"built_in\">Toggle</span>( name.<span class=\"built_in\">c_str</span>(), SW_SHOW );</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( s==<span class=\"string\">&quot;hide&quot;</span>)&#123;</span><br><span class=\"line\">string name;</span><br><span class=\"line\">cin &gt;&gt; name;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( name.<span class=\"built_in\">length</span>()&gt;<span class=\"number\">0</span> ) <span class=\"built_in\">Toggle</span>( name.<span class=\"built_in\">c_str</span>(), SW_HIDE );</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( s==<span class=\"string\">&quot;exit&quot;</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>系统钩子</p>\n<p>接下来开始正题，这次要建立系统级别的钩子。接下来需要深入一层使用系统钩子，这样就要新建一个DLL工程了，命名为hooksrv，这样工程就会生成hooksrv.dll。现在就来定义hooksrv.h头文件，注意前面的代码文件中HookStart和HookDown两个方法是要导出供程序调用的，这也是DLL程序的基本要求，那么导出标记EXPORT就在下面这个头文件中按格式定义。导出标记可以有三种方式，源代码中的 __declspec(dllexport) 关键字，.def 文件中的 EXPORTS 语句，LINK 命令中的 /EXPORT 规范。注意，使用 .def 文件从 DLL 中导出变量时，不需要在变量上指定导出标记。但是，在使用 DLL 的代码上，仍必须使用函数的导出声明，这个声明通常伴随在DLL的头文件内。头文件同时定义了一个WM_HOOK消息，这个消息将在消息环中使用。因为这是个自定义消息，所以只能使用Windows要求的比WM_USER大的值，比WM_USER小的消息值只供系统专用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*********** hooksrv.h **********/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> EXPORT __declspec(dllexport)</span></span><br><span class=\"line\"><span class=\"comment\">// #define IMPORT extern _declspec(dllimport)</span></span><br><span class=\"line\"><span class=\"comment\">// IMPORT int hookCode; // 此两行用于程序导入DLL变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EXPORT HHOOK <span class=\"title\">HookStart</span><span class=\"params\">( <span class=\"type\">int</span> hookID, HWND hWindow, DWORD dwThreadId )</span></span>;</span><br><span class=\"line\"><span class=\"function\">EXPORT BOOL <span class=\"title\">HookDown</span><span class=\"params\">( HHOOK )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_HOOK WM_USER + 1</span></span><br></pre></td></tr></table></figure>\n<p>这里使用了Visual Studio 97，编译输出是x86架构的，如果要使用x64平台，请使用Visual Studio 2005的x64编译器。接下来要设置一下工程属性。在Post-build step新建一个命令动作，在DLL完成编译时用来将DLL拷贝到程序目录。假设我们的主程序在hookcross目录下，并且和hooksrv工作目录同级，那么对于DEBUG版本就可以使用以下命令，这样编译DLL时，就会自动拷贝到程序的工作目录下了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy debug\\hooksrv.dll ..\\hookcross\\debug\\</span><br></pre></td></tr></table></figure>\n<p>再来实现钩子的基本功能代码部分hooksrv.cpp，其中HookShared是一个共享段，RWS标记它是Read、Write和Shared的共享段，它是可选部分，这时用来展示如果实现DLL共享数据段。这样DLL注入到不同的程序后，可以透过共享段来进行数据共享。否则，在Win32受保护的程序内存空间下，程序间是不可以相互直接获取数据的。当然可以变通地使用传输只读数据的WM_COPYDATA消息，网络传输，或用CreateFileMapping内存映射文件实现共享内存，进程内存读写ReadProcessMemory及WriteProcessMemory，又或者使用剪切板SetClipboardData等手段。DLL共享数据时，一定要使用静态始化，否则编译时会因被放到未初始化数据段而失效，初始化为0的值也会当作未初始化数据而存放于.bss段中。另外，DLL 本身有可能加载到每个进程的虚拟地址空间中的不同地址。因此具有指向 DLL 中的函数或指向其他共享变量的指针是不安全的。注意永远不要将特定于进程的信息存储在共享数据段中，这里只是展示如何使用DLL共享数据，在逻辑上来讲这样共享hookCode做是不正确的，因为它是属于被注入钩子的进程的。而前导的EXPORT是导出标记，定义在头文件中，导出DLL变量是为了方便在程序中访问，这些导出也可以通过模块定义文件DEF来标记。特别说明一下，导出变量和共享变量是两个概念，共享变量是所有进程加载DLL时，共享变量只有一个副本，任何修改都会在其它进程上反映。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;hooksrv.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg(<span class=\"string\">&quot;HookShared&quot;</span>)</span></span><br><span class=\"line\">HHOOK hHook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">HWND hWnd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">EXPORT <span class=\"type\">int</span> hookCode = <span class=\"number\">0xff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/SECTION:HookShared,RWS&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">HINSTANCE hMod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EXPORT BOOL APIENTRY <span class=\"title\">DllMain</span><span class=\"params\">( HANDLE hModule,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">   DWORD  fdwreason, LPVOID lpReserved )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">hMod = (HINSTANCE)hModule;</span><br><span class=\"line\"><span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowErrorInfo</span><span class=\"params\">(<span class=\"type\">int</span> Error)</span></span>&#123; &#125; <span class=\"comment\">// 函数体在前面已经给出，这里省略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT WINAPI <span class=\"title\">HookProc</span><span class=\"params\">(<span class=\"type\">int</span> code, WPARAM wParam, LPARAM lParam)</span></span>&#123;</span><br><span class=\"line\">hookCode = code;</span><br><span class=\"line\"><span class=\"built_in\">SendMessage</span>( hWnd, WM_HOOK, wParam, lParam );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">CallNextHookEx</span>(hHook, code, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EXPORT HHOOK <span class=\"title\">HookStart</span><span class=\"params\">(<span class=\"type\">int</span> hookID, HWND hWindow, DWORD dwThreadId)</span></span>&#123;</span><br><span class=\"line\">hWnd = hWindow;</span><br><span class=\"line\">HOOKPROC cb = <span class=\"built_in\">reinterpret_cast</span>( HookProc ); <span class=\"comment\">// for VS97</span></span><br><span class=\"line\">hHook = <span class=\"built_in\">SetWindowsHookEx</span>( hookID, cb, hMod, dwThreadId);</span><br><span class=\"line\"><span class=\"keyword\">if</span>( !hHook ) <span class=\"built_in\">ShowErrorInfo</span>( <span class=\"built_in\">GetLastError</span>() );</span><br><span class=\"line\"><span class=\"keyword\">return</span> hHook;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EXPORT BOOL <span class=\"title\">HookDown</span><span class=\"params\">(HHOOK idHook)</span></span>&#123;</span><br><span class=\"line\">hWnd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">UnhookWindowsHookEx</span>(hHook);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于DLL的入口DLLMain，这是自定义的入口点。如果没有指定它，系统会使用内置的入口点_DllMainCRTStartup，它会调用一个例程来初始化 C/C++ 的运行库，这个例程就是_CRT_INIT。事实上，DLLMain也应该完成这些初始化的功能。入口参数hModule指载入DLL的进行句柄，参数fdwreason表示了载入DLL的进程是以什么方式进行的，如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_PROCESS_ATTACH 1  <span class=\"comment\">// 正在映射到进程地址空间，执行初始化，出错则返回FALSE</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_THREAD_ATTACH  2  <span class=\"comment\">// 线程已经创建，执行初始化</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_THREAD_DETACH  3  <span class=\"comment\">// 线程终止，执行清理。测试时并没有执行！</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_PROCESS_DETACH 0  <span class=\"comment\">// 进程终止，从映射空间撤除，执行必要的清理</span></span></span><br></pre></td></tr></table></figure>\n<p>对于主程序，还是拿最开始的样板来使用，只需要修改一部分就可以了。新建一具hookcross工程，添加一个代码文件，文章开始将样板代码拷贝过来，修改窗口过程，并添加一个时钟调用。这样程序执行时会定时检查系统，看看有没有写字板程序在运行，如果发现它就将钩子注入。hooksrv.dll在程序执行时将由系统自动调入，手动装入DLL可以参考MSDN的Platform SDK &gt; Windows Base Services &gt; Excutables部分。注意，注册钩子时，使用了DLL的进程ID，而且使用了其它线程，这里指写字板线程，所以注册的是一个线程的系统钩子，而且只对Wordpad的消息环进行监测。如果，线程ID设置为NULL，那么，这个钩子将对所有进程的消息进行监测，这就成了一个全局系统钩子。主程序不用修改，主要是修改窗口过程部分，这里将修改及添加部分的代码罗列出来：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;../HookSrv/hooksrv.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;../HookSrv/Debug/hooksrv.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> __declspec(dllimport) <span class=\"type\">int</span> hookCode;</span><br><span class=\"line\"></span><br><span class=\"line\">UINT COUNT;</span><br><span class=\"line\">HHOOK MyHook;</span><br><span class=\"line\">UINT TIMER_HOOK = <span class=\"number\">1</span>;</span><br><span class=\"line\">string tipText =  <span class=\"string\">&quot;Appication API HOOK Wating for a Wordpad.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> CALLBACK <span class=\"title\">TimerProc</span><span class=\"params\">(HWND hwin, UINT uMsg, UINT id, DWORD t)</span></span>&#123;</span><br><span class=\"line\">HWND hw = <span class=\"built_in\">FindWindow</span>( <span class=\"string\">&quot;WordPadClass&quot;</span>,<span class=\"literal\">NULL</span> );</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!hw) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">DWORD thread = <span class=\"built_in\">GetWindowThreadProcessId</span>( hw, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\">MyHook = <span class=\"built_in\">HookStart</span>( WH_SHELL, hWin,  thread );</span><br><span class=\"line\"><span class=\"keyword\">if</span>(MyHook)&#123;</span><br><span class=\"line\"><span class=\"built_in\">KillTimer</span>( hWin,TIMER_HOOK );</span><br><span class=\"line\">tipText = <span class=\"string\">&quot;Hooked for Wordpad.&quot;</span>;</span><br><span class=\"line\">RECT rect;</span><br><span class=\"line\"><span class=\"built_in\">GetClientRect</span>( hWin, &amp;rect );</span><br><span class=\"line\"><span class=\"built_in\">InvalidateRect</span>( hWin, &amp;rect, TRUE);</span><br><span class=\"line\"><span class=\"built_in\">UpdateWindow</span>( hWin );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SendToPad</span><span class=\"params\">(<span class=\"type\">char</span> * buf)</span></span>&#123; <span class=\"comment\">// 通过消息给程序发送字符及换行符</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">txt</span><span class=\"params\">(buf)</span></span>;</span><br><span class=\"line\">HWND hw = <span class=\"built_in\">FindWindow</span>( <span class=\"string\">&quot;WordPadClass&quot;</span>,<span class=\"literal\">NULL</span> );</span><br><span class=\"line\">HWND  hc = <span class=\"built_in\">FindWindowEx</span>( hw, <span class=\"literal\">NULL</span>,<span class=\"string\">&quot;RICHEDIT50W&quot;</span>,<span class=\"literal\">NULL</span> );</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!hc) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;txt.<span class=\"built_in\">length</span>(); i++)&#123;</span><br><span class=\"line\"><span class=\"built_in\">SendMessage</span>( hc, WM_CHAR, (<span class=\"type\">char</span>) txt[i], <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">SendMessage</span>( hc, WM_KEYDOWN, VK_RETURN, <span class=\"number\">0</span> ); <span class=\"comment\">// &quot;\\r\\n&quot; for Wordpad;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">circle</span><span class=\"params\">( HWND hWin, UINT iMsg, WPARAM wp, LPARAM lp )</span></span>&#123;</span><br><span class=\"line\">HDC hdc ;</span><br><span class=\"line\">PAINTSTRUCT ps ;</span><br><span class=\"line\">RECT    rect ;</span><br><span class=\"line\">string text =  <span class=\"string\">&quot;Appication API HOOK Wating for a Wordpad.&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> buf[MAXBYTE];</span><br><span class=\"line\">stringstream ss;</span><br><span class=\"line\">TIMERPROC cb = <span class=\"built_in\">reinterpret_cast</span>(TimerProc); <span class=\"comment\">// for VS97</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>( iMsg )&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_CREATE:</span><br><span class=\"line\"><span class=\"built_in\">PlaySound</span>( szSound, <span class=\"literal\">NULL</span>, SND_FILENAME | SND_ASYNC );</span><br><span class=\"line\"><span class=\"built_in\">SetTimer</span>( hWin, TIMER_HOOK,  <span class=\"number\">1000</span>, cb);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\"><span class=\"built_in\">PostQuitMessage</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">HookDown</span>( MyHook );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_PAINT:</span><br><span class=\"line\">hdc = <span class=\"built_in\">BeginPaint</span>( hWin, &amp;ps);</span><br><span class=\"line\"><span class=\"built_in\">GetClientRect</span>( hWin, &amp;rect );</span><br><span class=\"line\"><span class=\"built_in\">DrawText</span>( hdc, tipText.<span class=\"built_in\">c_str</span>(), <span class=\"number\">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER );</span><br><span class=\"line\"><span class=\"built_in\">EndPaint</span>( hWin, &amp;ps);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> WM_HOOK:</span><br><span class=\"line\">ss &lt;&lt; szTitle &lt;&lt; <span class=\"string\">&quot; -  &quot;</span> &lt;&lt; ++COUNT &lt;&lt; std::hex &lt;&lt; <span class=\"string\">&quot; HOOK:0x&quot;</span> &lt;&lt; hookCode</span><br><span class=\"line\"> &lt;&lt; <span class=\"string\">&quot; wp:0x&quot;</span> &lt;&lt; wp &lt;&lt; <span class=\"string\">&quot; lp:0x&quot;</span> &lt;&lt; lp &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">ss.<span class=\"built_in\">getline</span>( buf, MAXBYTE);</span><br><span class=\"line\"><span class=\"built_in\">SetWindowText</span>( hWin, buf );</span><br><span class=\"line\"><span class=\"built_in\">SendToPad</span>(buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">DefWindowProc</span>( hWin, iMsg, wp, lp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意主程序使用__declspec(dllimport)标记来导入DLL变量，hookCode这个变量存储在DLL的共享数据段，所有使用此DLL的进程都可以修改它，并且所有进程都会得到修改后的数据，这种情况就是进程不安全的状态。</p>\n<p>如果钩子不是DLL模块，那么在设置系统钩子时，就会出错：没有模块句柄无法设置非本机连接。这里尝试将钩子也编译到同一个程序文件来测试，通过LocaLibrary来加载程序，通过返回的模块句柄来操作，但LoadLibrary不能使其形成有效的模块，即使程序正常运行，但即收不到钩子回调动作。同时，每一个DLL钩子同时只能有个程序使用，如果多个程序使用注册DLL钩子，那么最后注册的才有效，即设置了不同的钩子类型，但是清除钩子却可以由不同的程序完成！钩子回调过程细节</p>\n<p>钩子回调时，传回三个参数中，第一个为ncode，它指一个钩子的代码，如果这个为负值，那么应该直接通过CallNextHookEx传回系统内部处理，然后回调函数直接返回系统给出的结果。但是从Windows 3.1开始，不再向回调函数传递负值了。后两个wParam和lParam，与消息环的参数可以说十分一致。它们则是根据不同的钩子，用来传递不同的参数或数据。下面逐个钩子类型进行解释。这里特别要说明一点，因为Windows进程的内存空间是受保护的，所以注入DLL的进程和主程序是两个受保护的内存空间，要共享数据就要透过前面介绍的DLL共享数据的方法，或其它手段的实现，绝对不能通过指针来实现。</p>\n<p>WH_CALLWNDPROC</p>\n<p>得到一个钩子代码指示SendMessage已经发送消息，和一个指针指向真正的消息数据，如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagCWPSTRUCT</span> &#123;</span><br><span class=\"line\">LPARAM  lParam;</span><br><span class=\"line\">WPARAM  wParam;</span><br><span class=\"line\">DWORD   message;</span><br><span class=\"line\">HWND    hwnd;</span><br><span class=\"line\">&#125; CWPSTRUCT, *PCWPSTRUCT, NEAR *NPCWPSTRUCT, FAR *LPCWPSTRUCT;</span><br></pre></td></tr></table></figure>\n<p>WH_DEBUG</p>\n<p>当系统调用其它类型钩子过程之前会执行这个钩子，wParam中得到下一个将被调用的钩子的ID，例如可能是一个WH_MOUSE。可以通过返回一个非0值来阻止系统，但不能修改钩子ID。lParam指向一个结构体，定义如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagDEBUGHOOKINFO</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">DWORD   idThread;  <span class=\"comment\">// The thread ID for the current thread</span></span><br><span class=\"line\">LPARAM  reserved;</span><br><span class=\"line\">LPARAM  lParam;<span class=\"comment\">// The lParam for the target filter function</span></span><br><span class=\"line\">WPARAM  wParam;<span class=\"comment\">// The wParam for the target filter function</span></span><br><span class=\"line\"><span class=\"type\">int</span> code;</span><br><span class=\"line\">&#125; DEBUGHOOKINFO, *PDEBUGHOOKINFO, NEAR *NPDEBUGHOOKINFO, FAR* LPDEBUGHOOKINFO;</span><br></pre></td></tr></table></figure>\n<p>WH_FOREGROUNDIDLE</p>\n<p>当用户进程空闲无用户输入时调用的钩子，注意，只有钩子注入的线程是当前线程时才有效。这只是一个通知钩子，可以用来执行空闲任务，参数 wParam 和 lParam 都是0。</p>\n<p>WH_GETMESSAGE</p>\n<p>在GetMessage和PeekMessage即将返回时消息时调用的钩子，lParam指向一个结构体，包含了消息体数据，对消息的所有修改也会原样返回给程序。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagMSG</span> &#123; <span class=\"comment\">/* msg */</span></span><br><span class=\"line\">HWND   hwnd;  <span class=\"comment\">// The window whose Winproc will receive the message</span></span><br><span class=\"line\">UINT   message;   <span class=\"comment\">// The message number</span></span><br><span class=\"line\">WPARAM wParam;</span><br><span class=\"line\">LPARAM lParam;</span><br><span class=\"line\">DWORD  time;  <span class=\"comment\">// The time the message was posted</span></span><br><span class=\"line\">POINT  pt;<span class=\"comment\">//The cursor position in screen coordinates of the message</span></span><br><span class=\"line\">&#125; MSG;</span><br></pre></td></tr></table></figure>\n<p>WH_HARDWARE</p>\n<p>欠缺资料。</p>\n<p>WH_KEYBOARD</p>\n<p>当GetMessage或PeekMessage即将返回键盘消息时调用，即一系列的WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, WM_SYSKEYDOWN, 和 。回调过程会收到键盘的虚拟按键代码和键盘状态，还可以让系统忽略掉这些消息。回调过程的钩子代码有两种，HC_ACTION和HC_NOREMOVE。前者表示事件将要从系统队列中清除，而后者则提示消息队列不会移除键盘消息。这是因为程序使用了带PM_NOREMOVE参数的PeekMessage。wParam存放虚拟键值如VK_ESCAPE之类，或在WM_CHAR消息中存放字符代码，lParam存放按键数据，如重复次数，按键扫描码之类。虚拟键值定义在WINRESRC.H，现罗列如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_LBUTTON0x01</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_RBUTTON0x02</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_CANCEL 0x03</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_MBUTTON0x04<span class=\"comment\">/* NOT contiguous with L &amp; RBUTTON */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_BACK   0x08  #<span class=\"keyword\">define</span> VK_SPACE  0x20</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_TAB0x09  #<span class=\"keyword\">define</span> VK_PRIOR  0x21</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NEXT   0x22</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_CLEAR  0x0C  #<span class=\"keyword\">define</span> VK_END0x23</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_RETURN 0x0D  #<span class=\"keyword\">define</span> VK_HOME   0x24</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_LEFT   0x25</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_SHIFT  0x10  #<span class=\"keyword\">define</span> VK_UP 0x26</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_CONTROL0x11  #<span class=\"keyword\">define</span> VK_RIGHT  0x27</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_MENU   0x12  #<span class=\"keyword\">define</span> VK_DOWN   0x28</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_PAUSE  0x13  #<span class=\"keyword\">define</span> VK_SELECT 0x29</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_CAPITAL0x14  #<span class=\"keyword\">define</span> VK_PRINT  0x2A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_EXECUTE0x2B</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_SNAPSHOT   0x2C</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_ESCAPE 0x1B  #<span class=\"keyword\">define</span> VK_INSERT 0x2D</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_DELETE 0x2E</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_HELP   0x2F</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* VK_0 thru VK_9 are the same as ASCII &#x27;0&#x27; thru &#x27;9&#x27; (0x30 - 0x39) */</span></span><br><span class=\"line\"><span class=\"comment\">/* VK_A thru VK_Z are the same as ASCII &#x27;A&#x27; thru &#x27;Z&#x27; (0x41 - 0x5A) */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_LWIN   0x5B</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_RWIN   0x5C</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_APPS   0x5D  #<span class=\"keyword\">define</span> VK_SEPARATOR  0x6C</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_SUBTRACT   0x6D</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMLOCK0x90  #<span class=\"keyword\">define</span> VK_DECIMAL0x6E</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_SCROLL 0x91  #<span class=\"keyword\">define</span> VK_DIVIDE 0x6F</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD00x60  #<span class=\"keyword\">define</span> VK_F1 0x70</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD10x61  #<span class=\"keyword\">define</span> VK_F2 0x71</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD20x62  #<span class=\"keyword\">define</span> VK_F3 0x72</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD30x63  #<span class=\"keyword\">define</span> VK_F4 0x73</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD40x64  #<span class=\"keyword\">define</span> VK_F5 0x74</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD50x65  #<span class=\"keyword\">define</span> VK_F6 0x75</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD60x66  #<span class=\"keyword\">define</span> VK_F7 0x76</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD70x67  #<span class=\"keyword\">define</span> VK_F8 0x77</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD80x68  #<span class=\"keyword\">define</span> VK_F9 0x78</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_NUMPAD90x69  #<span class=\"keyword\">define</span> VK_F100x79</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_MULTIPLY   0x6A  #<span class=\"keyword\">define</span> VK_F110x7A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_ADD0x6B  #<span class=\"keyword\">define</span> VK_F120x7B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * VK_L* &amp; VK_R* - left and right Alt, Ctrl and Shift virtual keys.</span></span><br><span class=\"line\"><span class=\"comment\"> * Used only as parameters to GetAsyncKeyState() and GetKeyState().</span></span><br><span class=\"line\"><span class=\"comment\"> * No other API or message will distinguish left and right keys in this way.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_LSHIFT 0xA0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_RSHIFT 0xA1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_LCONTROL   0xA2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_RCONTROL   0xA3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_LMENU  0xA4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VK_RMENU  0xA5</span></span><br></pre></td></tr></table></figure>\n<p>WH_MOUSE</p>\n<p>当GetMessage或PeekMessage即将返回鼠标消息时调用，和WH_KEYBOARD相似，也有钩子代码指示消息是否会从队列中移除。而鼠标事件消息有好多，如WM_MOUSEMOVE，也有直接根据鼠标按键状态引发的事件消息，如WM_LBUTTONDOWN、WM_LBUTTONUP、WM_LBUTTONDBLCLK，还有相应的中键和右键的消息。lParam的高低两个字节分别存储了Y、X坐标，即LOWORD(lParam)表示X坐标。wParam存储了按键状态数据，可以和按键掩码进行运算，如MK_CONTROL、MK_LBUTTON、MK_MBUTTON、MK_RBUTTON、MK_SHIFT。</p>\n<p>当鼠标在非显示区域时，会引发WM_NCMOUSEMOVE这类事件，有对应按下左键的WM_NCLBUTTONDOWN、WM_NCLBUTTONUP、WM_NCLBUTTONDBLCLK，其它按键类似。此时wParam表示命中的区域，lParam还是表示鼠标的屏幕坐标系。</p>\n<p>鼠标命中测试消息WM_NCHITTEST，Windows根据它来产生与鼠标位置相关的所有其它鼠标消息。wParam未使用，lParam 存储屏幕坐标。滑轮消息WM_MOUSEWHEEL，此时wParam还保存按键状态数据，而且在其高两字节保存了滚动计数值zDelta，即HIWORD(wParam)。</p>\n<p>但是在鼠标钩子回调过程中，wParam存放的是鼠标消息ID，lParam指向一个结构体，如下罗列：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSEACTIVATE0x0021</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCMOUSEMOVE  0x00A0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCMOUSEMOVE  0x00A0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCLBUTTONDOWN0x00A1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCLBUTTONUP  0x00A2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCLBUTTONDBLCLK  0x00A3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCRBUTTONDOWN0x00A4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCRBUTTONUP  0x00A5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCRBUTTONDBLCLK  0x00A6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCMBUTTONDOWN0x00A7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCMBUTTONUP  0x00A8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_NCMBUTTONDBLCLK  0x00A9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSEFIRST   0x0200</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSEMOVE0x0200</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_LBUTTONDOWN  0x0201</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_LBUTTONUP0x0202</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_LBUTTONDBLCLK0x0203</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_RBUTTONDOWN  0x0204</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_RBUTTONUP0x0205</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_RBUTTONDBLCLK0x0206</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MBUTTONDOWN  0x0207</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MBUTTONUP0x0208</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MBUTTONDBLCLK0x0209</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span>(_WIN32_WINNT &gt;= 0x0400)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSEWHEEL   0x020A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* _WIN32_WINNT &gt;= 0x0400 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> (_WIN32_WINNT &lt; 0x0400)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSELAST0x0209</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSELAST0x020A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* if (_WIN32_WINNT &lt; 0x0400) */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span>(_WIN32_WINNT &gt;= 0x0400)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSEHOVER   0x02A1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WM_MOUSELEAVE   0x02A3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* _WIN32_WINNT &gt;= 0x0400 */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagMOUSEHOOKSTRUCT</span> &#123;</span><br><span class=\"line\">POINT   pt;</span><br><span class=\"line\">HWND    hwnd;</span><br><span class=\"line\">UINT    wHitTestCode;</span><br><span class=\"line\">DWORD   dwExtraInfo;</span><br><span class=\"line\">&#125; MOUSEHOOKSTRUCT, FAR *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagPOINT</span> &#123;</span><br><span class=\"line\">LONG x;</span><br><span class=\"line\">LONG y;</span><br><span class=\"line\">&#125; POINT;</span><br></pre></td></tr></table></figure>\n<p>WH_MSGFILTER</p>\n<p>这个钩子在对话框、消息框、滚动条、菜单条收到消息时，或ALT+TAB、ALT+ESC等组合键在钩子活动中被按下时调用，不过测试时发现组合键不会引用钩子调用。因为这个钩子是指定线程的，因此它可以在程序或DLL中运行良好。它的回调过程将会收到lParam指向的消息数据，还有以下几个钩子代码表示不同的状态，还有些未使用的就不罗列了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MSGF_DIALOGBOX  0 <span class=\"comment\">// 消息框或对话框消息</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MSGF_MENU   2 <span class=\"comment\">// 菜单条消息</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MSGF_MOVE   3 <span class=\"comment\">// 移动窗口消息</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MSGF_SIZE   4 <span class=\"comment\">// 调整窗口大小</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MSGF_SCROLLBAR  5 <span class=\"comment\">// 滚动条消息</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MSGF_NEXTWINDOW 6 <span class=\"comment\">// 即将替换为下一个窗口</span></span></span><br></pre></td></tr></table></figure>\n<p>WH_SYSMSGFILTER</p>\n<p>相似WH_MSGFILTER钩子，它要更早执行，因为是系统级别的。因此通过返回TRUE，可以忽略掉WH_MSGFILTER钩子。</p>\n<p>WH_SHELL</p>\n<p>外壳钩子发生在顶级窗口消息中，因此也是要指定线程ID的，钩子只在属于线程的窗口消息中引发。是一个通知钩子，因此不能更改事件消息，在wParam参数中包含了窗口的句柄。部分钩子代码有如下值定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_WINDOWCREATED1 <span class=\"comment\">// 窗口已经创建消息</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_WINDOWDESTROYED  2 <span class=\"comment\">// 窗口即将解构</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_ACTIVATESHELLWINDOW  3 <span class=\"comment\">// 激活shell主窗口</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_WINDOWACTIVATED  4 <span class=\"comment\">// 窗口已切换</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_GETMINRECT   5 <span class=\"comment\">// 系统需要该窗口被最小化时的矩形坐标</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_REDRAW   6 <span class=\"comment\">// 任务条上的标题已被重画</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_TASKMAN  7 <span class=\"comment\">// 用户已选择其任务列表</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_LANGUAGE 8 <span class=\"comment\">// 键盘语言被改变或者一个新的键盘布局被加载</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HSHELL_ACCESSIBILITYSTATE   11 <span class=\"comment\">// NT5.0或以上版本有效，指示可访问性已改变</span></span></span><br></pre></td></tr></table></figure>\n<p>记录钩子</p>\n<p>JOURNAL，是日志记录的意思，相关的钩子也是和记录和回放事件有关的，因为它是系统全局的钩子，影响所有程序，因而负作用更多。为此系统提供了几种默认的的按键来清除这些钩子，有CTRL+ESC、 ALT+ESC 和 CTRL+ALT+DEL。然后，系统通过一条WM_CANCELJOURNAL消息通知程序被挂了日志钩子。这个消息并没指定窗口句柄，因此没有窗口过程会收到这样的消息分配。一个好方法就是使用WH_GETMESSAGE钩子来截取这条消息。当然提供一个取消钩子的方法更重要，如通过VK_CANCEL 即CTRL+BREAK。下面是两个日志相关钩子。</p>\n<p>WH_JOURNALRECORD</p>\n<p>记录钩子，系统从队列中移除鼠标及键盘消息时引发，除了回放钩子的消息外。钩子可以处理，但不可以修改或丢弃消息，这是因为记录已经保存在磁盘或内存中。目前只实现HC_ACTION这个有效钩子代码。lParam参数指向一个ENVENTMSG结构体，通常的做法是将这些数据存储起来，然后再通过回放钩子将这些数据形成回放动作。注意它只能是全局的系统钩子。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagEVENTMSG</span> &#123;</span><br><span class=\"line\">UINT message;  <span class=\"comment\">// 消息ID，如WM_MOUSEMOVE</span></span><br><span class=\"line\">UINT paramL;</span><br><span class=\"line\">UINT paramH;</span><br><span class=\"line\">DWORD time; <span class=\"comment\">// 消息发生的系统时间，GetTickCount的返回值</span></span><br><span class=\"line\">HWND hwnd;</span><br><span class=\"line\">&#125; EVENTMSG;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagEVENTMSG</span> *PEVENTMSG, NEAR *NPEVENTMSG, FAR *LPEVENTMSG;</span><br></pre></td></tr></table></figure>\n<p>如果是键盘消息，paramL高字节放有扫描码，低字节放有虚拟键值，paramH则包含重复次数、Bit 15指示扩展键是否等内容；如果是鼠标消息，paramL 和 paramH 则是xy坐标。</p>\n<p>WH_JOURNALPLAYBACK</p>\n<p>回放钩子在回放记录钩子的数据，或给其它程序发送事件消息时使用。当回放钩子一挂接，系统就会忽略鼠标的移动，其它的键盘和鼠标事件消息将会在回放钩子撤除后才会进入队列。钩子代码有以下两个：</p>\n<p>HC_GETNEXT，在访问线程消息时引发，系统会使用相同的消息调用多次。lParam指定一个EVENTMSG结构体，回调过程需要将已经记录的数据填回到这个结构体中，通常是直接拷贝已在记录钩子保存的数据。系统需要两个参数来处理钩子提供的回放数据，一个是等待处理这条消息的时间，另一个是在什么时候处理这条消息。通常等待时间可以使用两个相间的消息时间的差值，而指定处理时间则通过等待时间和当前GetTickCount返回值相加得到。如果想要加速回放，设置等待时间为0就可以了，等待时间通过钩子回调返回给系统。</p>\n<p>HC_SKIP，当系统处理完一个回放记录时引发，此时应当准备下一个回放记录，当所胡记录都回放完了，就应该清除回放钩子，以使程序回到正常工作状态。</p>\n<p>WH_CBT</p>\n<p>这可以说是最最长篇的一个钩子，它有如下几种钩子代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> HCBT_MOVESIZE 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_MINMAX 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_QS 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_CREATEWND 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_DESTROYWND 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_ACTIVATE 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_CLICKSKIPPED 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_KEYSKIPPED 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_SYSCOMMAND 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HCBT_SETFOCUS 9</span></span><br></pre></td></tr></table></figure>\n<p>HCBT_ACTIVATE，激活窗口，返回TRUE阻止焦点以禁止激活。对应的参数，wParam指向正在激活的窗口的句柄，lParam指向一个结构体：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagCBTACTIVATESTRUCT</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   BOOL fMouse; <span class=\"comment\">// TRUE if activation results from a mouse click</span></span><br><span class=\"line\">   HWND hWndActive; <span class=\"comment\">// the currently active window&#x27;s handle.</span></span><br><span class=\"line\">&#125; CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;</span><br></pre></td></tr></table></figure>\n<p>HCBT_CREATEWND，窗口创建中，但程序的WM_GETMINMAXINFO, WM_NCCREATE, WM_CREATE消息还没有发出，因此返回TRUE可以禁止窗体的创建。参数wParam是窗口的句柄，lParam指向一个结构体：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">CBT_CREATEWND</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tagCREATESTRUCT</span> *lpcs;</span><br><span class=\"line\">HWND   hwndInsertAfter;   <span class=\"comment\">// The window will be followed, in Z-order.</span></span><br><span class=\"line\">&#125; CBT_CREATEWND, *LPCBT_CREATEWND;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagCREATESTRUCTA</span> &#123;</span><br><span class=\"line\">LPVOID  lpCreateParams;</span><br><span class=\"line\">HINSTANCE   hInstance;</span><br><span class=\"line\">HMENU   hMenu;</span><br><span class=\"line\">HWND    hwndParent;</span><br><span class=\"line\"><span class=\"type\">int</span> cy;</span><br><span class=\"line\"><span class=\"type\">int</span> cx;</span><br><span class=\"line\"><span class=\"type\">int</span> y;</span><br><span class=\"line\"><span class=\"type\">int</span> x;</span><br><span class=\"line\">LONG    style;</span><br><span class=\"line\">LPCSTR  lpszName;</span><br><span class=\"line\">LPCSTR  lpszClass;</span><br><span class=\"line\">DWORD   dwExStyle;</span><br><span class=\"line\">&#125; CREATESTRUCTA, *LPCREATESTRUCTA;</span><br></pre></td></tr></table></figure>\n<p>HCBT_DESTROYWND，窗口解构中，但WM_DESTROY消息还没有发出，可以通过返回TRUE来阻止窗口解构。参数wParam是窗口的句柄，lParam为0L。</p>\n<p>HCBT_MINMAX最大最小化时引发，返回TRUE可以禁止动作。参数wParam是窗口的句柄，lParam是一个ShowWindow常数SW_*值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_HIDE 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOWNORMAL   1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_NORMAL   1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOWMINIMIZED2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOWMAXIMIZED3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_MAXIMIZE 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOWNOACTIVATE   4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOW 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_MINIMIZE 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOWMINNOACTIVE  7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOWNA   8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_RESTORE  9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_SHOWDEFAULT  10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SW_MAX  10</span></span><br></pre></td></tr></table></figure>\n<p>HCBT_MOVESIZE，移动或调整窗口大小时引发，返回TRUE可以禁止动作。参数wParam是窗口的句柄，lParam是一个矩形RECT结构体指针，文章开始处已经出现过。</p>\n<p>HCBT_SYSCOMMAND，系统菜单命令，即左上角的弹出菜单引发，返回TRUE可以禁止系统菜单弹出。WH_CBT钩子是由DefWindowsProc过程调用的，如果没有发送WH_SYSCOMMAND过来，就不会有这个钩子的调用。参数wParam包含即将执行行的系统命令，即鼠标划过的菜单项，lParam的低位字和高位字存放鼠标的xy坐标。如果wParam是SC_HOTKEY，那么lParam就包含热键适用的窗口句柄。其它系统命令列表如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_SIZE 0xF000 <span class=\"comment\">// 调整窗口大小</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_MOVE 0xF010 <span class=\"comment\">// 移动窗口位置</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_MINIMIZE 0xF020 <span class=\"comment\">// 最小化窗口</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_MAXIMIZE 0xF030 <span class=\"comment\">// 最大化窗口</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_NEXTWINDOW   0xF040 <span class=\"comment\">// 下一个窗口</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_PREVWINDOW   0xF050 <span class=\"comment\">// 上一个窗口</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_CLOSE0xF060 <span class=\"comment\">// 关闭命令</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_VSCROLL  0xF070 <span class=\"comment\">// 垂直滚动</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_HSCROLL  0xF080 <span class=\"comment\">// 水平滚动</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_MOUSEMENU0xF090 <span class=\"comment\">// 通过鼠标单击获取菜单</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_KEYMENU  0xF100 <span class=\"comment\">// 通过按键获取菜单</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_ARRANGE  0xF110</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_RESTORE  0xF120 <span class=\"comment\">// 还原窗口位置状态</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_TASKLIST 0xF130 <span class=\"comment\">// 执行或激活任务管理程序</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_SCREENSAVE   0xF140 <span class=\"comment\">// 执行屏保程序</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_HOTKEY   0xF150</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_DEFAULT  0xF160</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_MONITORPOWER 0xF170</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_CONTEXTHELP  0xF180</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SC_SEPARATOR0xF00F</span></span><br></pre></td></tr></table></figure>\n<p>HCBT_SETFOCUS，当窗口激活就要取得焦点时引起，可以通过返回TRUE来阻止窗口取得焦点。参数wParam有窗口的句柄，lParam失去焦点的窗口句柄。</p>\n<p>HCBT_QS，当移动或调整窗口大小过程中，一个WM_QUEUESYNC消息从系统队列移除时引起，其它任何情况不会发生。参数wParam和lParam都为0。</p>\n<p>HCBT_CLICKSKIPPED，当鼠标事件要从队列移除时引发，也就是说这个鼠标事件是无效的，通常是日志钩子回放时引起的。wParam包含鼠标事的类型，如WM_LBUTTONDOWN，lParam包含一个结构体的指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tagMOUSEHOOKSTRUCT</span> &#123;</span><br><span class=\"line\">POINT   pt; <span class=\"comment\">// Location of mouse in screen coordinates</span></span><br><span class=\"line\">HWND    hwnd;   <span class=\"comment\">// Window that receives this message</span></span><br><span class=\"line\">UINT    wHitTestCode;   <span class=\"comment\">// The result of hit-testing (HT_*)</span></span><br><span class=\"line\">DWORD   dwExtraInfo;<span class=\"comment\">// Extra info associated with the current message</span></span><br><span class=\"line\">&#125; MOUSEHOOKSTRUCT, FAR *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;</span><br></pre></td></tr></table></figure>\n<p>HCBT_KEYSKIPPED，和前者一样，路过或从队列中移除消息都会引发。wParam包含虚拟键值，lParam包含其它属性，和消息环的键盘事件消息一样。</p>\n<p>WM_QUEUESYNC，CBT编程通常都要响应主程序的这些键盘和鼠标事件，例如，在确定一个对话框后，CBT程序可能会要向主程序输入几个字符。通过鼠标钩子可以用来确定有没有按下OK按钮，根据结果来决定要输入哪些字符到主程序， 这样CBT程序就要等到按下OK按钮后的过程处理完成后。那么CBT程序就可以通过WM_QUEUESYNC消息来监视主程序，看看动作何时完成，下面是两个判断步骤：</p>\n<p>CBT程序等待直到收到WH_CBT钩子，带 HCBT_CLICKSKIPPED 或 HCBT_KEYSKIPPED 代码的钩子。这会在主程序把消息从系统队列中移除时发生。当CBT安装回放钩子时，直到收到HCBT_CLICKSKIPPED 或 HCBT_KEYSKIPPED 代码才能安装成功。回放钩子发送WM_QUEUESYNC消息给CBT程序，CBT程序可以响应这个事件，比如说输入一些字符到主程序。</p>\n<p>参考资料</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Visual Studio MSDN Library 6.0 SPY Code Sample</span><br><span class=\"line\">Win32 Hooks -MSDN 99, Kyle Marsh July 29, 1993</span><br><span class=\"line\">Using Hooks, MSDN: http://msdn.microsoft.com/en-us/library/ms644960%28v=vs.85%29.aspx</span><br><span class=\"line\">&quot;Load Your 32-bit DLL into Another Process&#x27;s Address Space Using INJLIB&quot; Jeffrey Ritcher, MSJ May 1994</span><br><span class=\"line\">&quot;An In-Depth Look into the Win32 PE file format&quot; , part 1, Matt Pietrek, MSJ February 2002</span><br><span class=\"line\">&quot;An In-Depth Look into the Win32 PE file format&quot; , part 2, Matt Pietrek, MSJ March 2002</span><br><span class=\"line\">DLLs in Win32 by Randy Kath，MSDN September 15, 1992</span><br><span class=\"line\">DLLs for Beginners by Debabrata Sarma，MSDN 1996</span><br><span class=\"line\">Advanced Windows NT, The Developer&#x27;s Guide to the Win32 Application Programming Interface by J. Richter</span><br><span class=\"line\">Detecting Windows NT/2K process execution: http://www.codeproject.com/Articles/2018/Detecting-Windows-NT-2K-process-execution</span><br><span class=\"line\">API hooking revealed: http://www.codeproject.com/Articles/2082/API-hooking-revealed</span><br><span class=\"line\">API Hook完全手册 : http://blog.csdn.net/ATField/article/details/1507122</span><br><span class=\"line\">让EXE导出函数，看雪论坛: http://bbs.pediy.com/showthread.php?t=56840</span><br><span class=\"line\">如何与应用程序或其他 DLL 共享自己 DLL 中的数据？: http://msdn.microsoft.com/zh-cn/library/h90dkhs0</span><br><span class=\"line\">DLL导出变量: http://blog.csdn.net/henry000/article/details/6852521</span><br></pre></td></tr></table></figure>\n<p>修改文件的IMAGE_NT_HEADERS.FileHeader.Characteristics为IMAGE_FILE_DLL。</p>\n<p>版权声明：自由转载-非商用-非衍生-保持署名 | Creative Commons BY-NC-ND 3.0<br>\nByNo CommercialNo Derived<br>\n建档时间：2013年11月15日修改时间：2013年11月22日<br>\n————————————————<br>\n版权声明：本文为CSDN博主「Jimbo」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：<a href=\"https://blog.csdn.net/winsenjiansbomber/article/details/16891189\">https://blog.csdn.net/winsenjiansbomber/article/details/16891189</a></p>\n","_path":"20191203/hook-windows-nt/","_link":"https://yaoqs.github.io/20191203/hook-windows-nt/","_id":"clzpq9hsz001asgerekin5aap"}}