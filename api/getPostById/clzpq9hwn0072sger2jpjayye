{"type":"getPostById","data":{"title":"使用 NextJS 和 TailwindCSS 重构我的博客","date":"2024-07-11T03:05:32.000Z","description":"","categories":[{"name":"nextjs","_id":"clzpq9hwp0079sgergadt1z96"}],"tags":[{"name":"nextjs","_id":"clzpq9hzf00brsger5oejatxs"}],"content":"<p>转载自 <a href=\"https://juejin.cn/post/6984267680324780040\">使用 NextJS 和 TailwindCSS 重构我的博客</a></p>\n<ul>\n<li><a href=\"https://github.com/maqi1520/nextjs-tailwind-blog\" title=\"https://github.com/maqi1520/nextjs-tailwind-blog\">git地址</a></li>\n<li><a href=\"http://maqib.cn/\" title=\"http://maqib.cn/\">在线地址</a></li>\n</ul>\n<p>这是笔者第三次重构博客，虽然博客应用是最简单的应用，但学习新技术何不从重构博客开始？</p>\n<ul>\n<li>\n<p>第一版：使用 Hexo 和 Github pages</p>\n<ul>\n<li>\n<p>优点：重新部署只要花5分钟，内容管理在本地 纯静态、免费；</p>\n</li>\n<li>\n<p>缺点：依赖Github，国内访问困难；</p>\n</li>\n</ul>\n</li>\n<li>\n<p>第二版：React + Antd + Mysql 服务器是阿里云 ESC 最低配</p>\n<ul>\n<li>\n<p>优点： 感觉没什么优点；</p>\n</li>\n<li>\n<p>缺点： 浏览器渲染，搜索引擎无法收录 ESO 优化难，Antd 组件使用方便，但前台页面定制需要覆盖样式；</p>\n</li>\n</ul>\n</li>\n<li>\n<p>第三版：NextJS + TailwindCSS + Postgresql</p>\n<ul>\n<li>优点： 服务端渲染（SSR）+ 静态生成， 访问速度极快，全新 UI 支持换肤；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"TailwindCSS\"><a class=\"header-anchor\" href=\"#TailwindCSS\">※</a>TailwindCSS</h3>\n<p>在国外如火如荼，但是在国内却很少看到在生产上应用，对我来说， TailwindCSS 不仅仅是一个原子类的超级样式库；</p>\n<p>1、我们在写样式的时候，经常会写类名，团队成员之间会存在样式冲突的可能，虽然我们可以使用 css modules 来避免，但却会存在取类名称的疲劳的问题，重复的类名称 <code>-header,-body -container --wrapper</code>等；</p>\n<p>2、Utility-First： 默认采用 rem 单位， 变量也就是16 的倍数， <code>px-1</code>是 16 的 <code>1/4</code> 也就是 4 px，我们不会写出13px、17px 等不统一的单位变量，正所谓失之毫厘，差之千里。 配合 <a href=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\" title=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\">VScode 插件</a>， 我们可以根据提示实时看到实际单位数值，写出高度还原高保真的样式；</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd54b2ba6cb244cbb930ab82b8521e1b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>3、jwt 模式： just-in-time 模式，可以写出在原子类之外的样式，比如: <code>w-[762px]</code>表示<code>width:762px</code>, <code>grid-cols-[1fr,700px,2fr]</code> 表示<code>grid-template-columns: 1fr 700px 2fr;</code> 当然还有<code>h-[calc(1000px-4rem)]</code>等等，这些都是运行时才生成的样式；配合在<code>tailwind.config.js</code> 中加入<code>purge: ['./src/**/*.&#123;js,ts,jsx,tsx&#125;']</code>打包时只会提取使用到的样式，让应用css最小化。</p>\n<p>4、之前写了<a href=\"https://juejin.cn/post/6971708936734900254\" title=\"https://juejin.cn/post/6971708936734900254\">《使用 CSS variables 和Tailwind css实现主题换肤》</a>也运用到了我的博客中。</p>\n<h3 id=\"Next-js\"><a class=\"header-anchor\" href=\"#Next-js\">※</a>Next.js</h3>\n<p>next.js 是一个 react 服务端渲染框架，相比react单页应用，网络爬虫可以识别 HTML 语义标签，更有利于 SEO。</p>\n<p>接下来介绍下 NextJS 主要 API：</p>\n<h4 id=\"getServerSideProps-服务端渲染\"><a class=\"header-anchor\" href=\"#getServerSideProps-服务端渲染\">※</a>getServerSideProps 服务端渲染</h4>\n<p>下面是最简单的客户端渲染代码</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">ReactElement</span>, useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useParams &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Post</span>(<span class=\"params\"></span>): <span class=\"title class_\">ReactElement</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; slug &#125; = <span class=\"title function_\">useParams</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [post, setPost] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">content</span>:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">`/api/post/<span class=\"subst\">$&#123;slug&#125;</span>`</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>res.<span class=\"title function_\">json</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"title function_\">setPost</span>(res)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;post.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">dangerouslySetInnerHTML</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">__html:post.content</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>改成 NextJS 后的代码如下</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pgaes/blog/[slug].tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">ReactElement</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Post</span>(<span class=\"params\">&#123; post &#125;</span>): <span class=\"title class_\">ReactElement</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;post.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">dangerouslySetInnerHTML</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">__html:post.content</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#125;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getServerSideProps</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; slug &#125;=context.<span class=\"property\">params</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`https://.../api/post/<span class=\"subst\">$&#123;slug&#125;</span>`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> post = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">       post</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>getServerSideProps</code> 是在node端处理，每个 request 请求时执行。</p>\n<p>而文章内容写完之后是通常不变的，所以可以先将页面静态存储在服务器上，这样就可以大大减小数据库压力。</p>\n<h3 id=\"getStaticProps-在构建时请求数据。\"><a class=\"header-anchor\" href=\"#getStaticProps-在构建时请求数据。\">※</a>getStaticProps 在构建时请求数据。</h3>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getStaticProps</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// fetch data</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//data</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就需要在构建时获取全部文章列表，而博客详情页是一个动态路由，就需要 <code>getStaticPaths</code> 这个API</p>\n<h4 id=\"getStaticPaths-构建时获取动态路由的数据\"><a class=\"header-anchor\" href=\"#getStaticPaths-构建时获取动态路由的数据\">※</a>getStaticPaths 构建时获取动态路由的数据</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"keyword\">async</span> <span class=\"title function_\">getStaticPaths</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> slugs= <span class=\"keyword\">await</span> <span class=\"title function_\">getAllSlugs</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">paths</span>: slugs.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">slug</span>=&gt;</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">params</span>:slug</span><br><span class=\"line\">    &#125;)),</span><br><span class=\"line\">    <span class=\"attr\">fallback</span>: <span class=\"literal\">true</span> <span class=\"comment\">//or false</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当网站构建后，新写的文章也需要生成静态页面，这时就可以将<code>fallback</code> 设置为true， 如果设为false，则在构建之外的文章都将返回404页面。</p>\n<p>下面是文章详情页的主体代码</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pages/posts/[slug].js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;next/router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Post</span>(<span class=\"params\">&#123; post &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果页面还没静态生成，则先显示下面的loading</span></span><br><span class=\"line\">  <span class=\"comment\">// 直到 `getStaticProps()`运行完成</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (router.<span class=\"property\">isFallback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Render post...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在构建时运行，获取全部文章路径</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getStaticPaths</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在打包时值生成 `/posts/1` 和 `/posts/2` 的静态页面</span></span><br><span class=\"line\">    <span class=\"attr\">paths</span>: [&#123; <span class=\"attr\">params</span>: &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span> &#125; &#125;, &#123; <span class=\"attr\">params</span>: &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2&#x27;</span> &#125; &#125;],</span><br><span class=\"line\">    <span class=\"comment\">// 开启其他页面的静态生成</span></span><br><span class=\"line\">    <span class=\"comment\">// For example: `/posts/3`</span></span><br><span class=\"line\">    <span class=\"attr\">fallback</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在构建时运行，根据params中的id 获取文章详情</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getStaticProps</span>(<span class=\"params\">&#123; params &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果页面的路由是 /posts/1, 这 params.id 的值就是1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`https://.../posts/<span class=\"subst\">$&#123;params.id&#125;</span>`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> post = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把数据专递给页面的props</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123; post &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//当请求进入的时候再次生成文章详情页，比如修改文章重新生成</span></span><br><span class=\"line\">    <span class=\"comment\">// 1s 内最多生成1次</span></span><br><span class=\"line\">    <span class=\"attr\">revalidate</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Post</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"prisma-——-下一代-ORM-框架\"><a class=\"header-anchor\" href=\"#prisma-——-下一代-ORM-框架\">※</a>prisma —— 下一代 ORM 框架</h3>\n<p>Nodejs 框架访问数据库，往往会需要一个ORM 框架来帮我们管理数据层代码，而在 Node.js 社区中，sequelize、TypeORM 等框架都被广泛应用，而 prisma 却是一个新秀。</p>\n<p>Prisma 支持 Mysql、Postgresql 和 Sqlite， 访问官网我们可以很容易的上手，也可以快速的从老项目接入</p>\n<p>虽然 Prisma 和 TypeORM 解决了类似的问题，但它们的工作方式却大相径庭。</p>\n<h4 id=\"与-TypeORM-对比\"><a class=\"header-anchor\" href=\"#与-TypeORM-对比\">※</a>与 TypeORM 对比</h4>\n<p><a href=\"https://typeorm.io/\" title=\"https://typeorm.io/\">TypeORM</a> 是一种传统的 ORM，它将表映射到模型类。这些模型类可用于生成 SQL 迁移。然后，模型类的实例在运行时为应用程序的 CRUD 查询提供一个接口。</p>\n<p><a href=\"https://www.prisma.io/\" title=\"https://www.prisma.io/\">Prisma</a> 是一种新的 ORM，它缓解了传统 ORM 的许多问题，例如: 模型实例的膨胀、业务与存储逻辑的混合、缺乏类型安全性或由延迟加载引起的不可预测查询。</p>\n<p>它使用 Prisma Schema，以声明的方式定义应用程序模型。然后使用 <code>Prisma Migrate</code> 命令， Prisma Schema 会生成 SQL 迁移并根据数据库执行它们。Prisma CRUD 查询由 Prisma Client 提供，这是一个针对 Node.js 和 TypeScript 的轻量级且完全类型安全的数据库客户端。</p>\n<p>对比下二者代码</p>\n<ol>\n<li><strong>Prisma Schema</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  id      <span class=\"title class_\">Int</span>      @id @<span class=\"title function_\">default</span>(<span class=\"title function_\">autoincrement</span>())</span><br><span class=\"line\">  name    <span class=\"title class_\">String</span>?</span><br><span class=\"line\">  email   <span class=\"title class_\">String</span>   @unique</span><br><span class=\"line\">  posts   <span class=\"title class_\">Post</span>[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">model <span class=\"title class_\">Post</span> &#123;</span><br><span class=\"line\">  id        <span class=\"title class_\">Int</span>     @id @<span class=\"title function_\">default</span>(<span class=\"title function_\">autoincrement</span>())</span><br><span class=\"line\">  title     <span class=\"title class_\">String</span></span><br><span class=\"line\">  content   <span class=\"title class_\">String</span>?</span><br><span class=\"line\">  published <span class=\"title class_\">Boolean</span> @<span class=\"title function_\">default</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  authorId  <span class=\"title class_\">Int</span>?</span><br><span class=\"line\">  author    <span class=\"title class_\">User</span>?   @<span class=\"title function_\">relation</span>(<span class=\"attr\">fields</span>: [authorId], <span class=\"attr\">references</span>: [id])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Schema 是一个描述文件，描述了数据模型直接的关系，再通过<code>prisma generate</code> 生成 typescript 声明文件。</p>\n<ol start=\"2\">\n<li><strong>TypeORM Entity</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Entity</span>, <span class=\"title class_\">PrimaryGeneratedColumn</span>, <span class=\"title class_\">Column</span>, <span class=\"title class_\">OneToMany</span>, <span class=\"title class_\">ManyToOne</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;typeorm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title class_\">Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  @<span class=\"title class_\">PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">nullable</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  <span class=\"attr\">name</span>: string</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  <span class=\"attr\">email</span>: string</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title class_\">OneToMany</span>(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">type</span> =&gt;</span> <span class=\"title class_\">Post</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">post</span> =&gt;</span> post.<span class=\"property\">author</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"attr\">posts</span>: <span class=\"title class_\">Post</span>[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title class_\">Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Post</span> &#123;</span><br><span class=\"line\">  @<span class=\"title class_\">PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title class_\">Column</span>()</span><br><span class=\"line\">  <span class=\"attr\">title</span>: string</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">nullable</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  <span class=\"attr\">content</span>: string</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title class_\">Column</span>(&#123; <span class=\"attr\">default</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">  <span class=\"attr\">published</span>: boolean</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"title class_\">ManyToOne</span>(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">type</span> =&gt;</span> <span class=\"title class_\">User</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">user</span> =&gt;</span> user.<span class=\"property\">posts</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"attr\">author</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Entity 是在运行时，代码通过<code>@Entity()</code>来实现 JavaScript 类的继承。</p>\n<h4 id=\"过滤\"><a class=\"header-anchor\" href=\"#过滤\">※</a><strong>过滤</strong></h4>\n<ol>\n<li>Prisma</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> posts = <span class=\"keyword\">await</span> postRepository.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">where</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123; <span class=\"attr\">contains</span>: <span class=\"string\">&#x27;Hello World&#x27;</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>TypeORM</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> posts = <span class=\"keyword\">await</span> postRepository.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">where</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"title class_\">ILike</span>(<span class=\"string\">&#x27;%Hello World%&#x27;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"多对多关系级联操作\"><a class=\"header-anchor\" href=\"#多对多关系级联操作\">※</a>多对多关系级联操作</h4>\n<ol>\n<li>Prisma</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Categories</span>=&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>?: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">createdAt</span>?: <span class=\"title class_\">Date</span> | <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PostBody</span> = <span class=\"title class_\">Post</span> &amp; &#123;</span><br><span class=\"line\">  <span class=\"attr\">categories</span>: <span class=\"title class_\">Categories</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; title, summary, slug, content, published, categories &#125; =</span><br><span class=\"line\">    req.<span class=\"property\">body</span> <span class=\"keyword\">as</span> <span class=\"title class_\">PostBody</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> connectOrCreate = categories.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">&#123; name &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">create</span>: &#123;</span><br><span class=\"line\">        name,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">where</span>: &#123;</span><br><span class=\"line\">        name,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newPost = <span class=\"keyword\">await</span> prisma.<span class=\"property\">post</span>.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      summary,</span><br><span class=\"line\">      slug,</span><br><span class=\"line\">      content,</span><br><span class=\"line\">      published,</span><br><span class=\"line\">      <span class=\"attr\">categories</span>: &#123;</span><br><span class=\"line\">        connectOrCreate,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">user</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">connect</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: req.<span class=\"property\">user</span>.<span class=\"property\">id</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">include</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">categories</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>文章和分类是多对多的关系，一篇文章可以有多个分类，一个分类下可以有多篇文章，</p>\n<p><code>categories</code> 可以选择已经存在的分类，也可以是新加的分类,通过<code>name</code>唯一熟悉来判断是否要新增还是级联。</p>\n<ol start=\"2\">\n<li>TypeORM</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Post</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>()</span><br><span class=\"line\">  <span class=\"meta\">@IsNotEmpty</span>()</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">select</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;text&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"attr\">content</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@ManyToMany</span>(<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">type</span></span>) =&gt;</span> <span class=\"title class_\">Category</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//级联插入修改  boolean | (&quot;insert&quot; | &quot;update&quot; | &quot;remove&quot; | &quot;soft-remove&quot; | &quot;recover&quot;)[]</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"meta\">@JoinTable</span>()</span><br><span class=\"line\">  <span class=\"attr\">categories</span>: <span class=\"title class_\">Category</span>[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newPost = postRepository.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">      ...ctx.<span class=\"property\">request</span>.<span class=\"property\">body</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>typeorm 通过<code>cascade</code> 属性 就可以级联增、删、改 软删除 等</p>\n<h4 id=\"Postgresql\"><a class=\"header-anchor\" href=\"#Postgresql\">※</a>Postgresql</h4>\n<p>本次重构还讲数据库迁移到了 Postgresql。</p>\n<p>1、MySQL 里有只有 utf8mb4 才能显示 emoji 的坑, Pg 就没这个坑；</p>\n<p>2、Pg可以存储 array 和 json， 可以在 array 和 json 上建索引；</p>\n<h3 id=\"代码编辑器\"><a class=\"header-anchor\" href=\"#代码编辑器\">※</a>代码编辑器</h3>\n<p>从上一版是 <a href=\"https://codemirror.net/#features\" title=\"https://codemirror.net/#features\">codemiror</a> 和 remark 自己写的组件 ，这一版发现掘金的 Markdown 编辑比较好用，就直接使用了<a href=\"https://github.com/bytedance/bytemd\" title=\"https://github.com/bytedance/bytemd\">bytemd</a>, 底层都是使用了 remark 和 <a href=\"https://github.com/rehypejs/rehype\" title=\"https://github.com/rehypejs/rehype\">rehype</a>，支持任何框架，并且拥有丰富的插件，还是比较好用的，但是在文章详情页却没有单独的 TOC（目录）组件，得单独封装一个TOC组件了。</p>\n<h3 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\">※</a>小结</h3>\n<p>本文主要是笔者记录重构博客所用的知识和记录，当然还有很多不足，也还有很多功能得开发， 比如：图床、评论、SEO优化、 统计和监控等。</p>\n<p>当然内容是最重要的，希望以后每周或者每两周能够有一篇文章，记录和总结知识。</p>\n<p>喜欢的同学可以fork一下，免费部署到 <a href=\"https://heroku.com/\" title=\"https://heroku.com/\">Heroku</a> 中，Heroku 支持免费的 Postgresql 数据库，也可以将程序部署到 <a href=\"https://vercel.app/\" title=\"https://vercel.app/\">vercel.app/</a> （国内比较快，不支持数据库），数据库还是选择 Heroku。记得给一个小星✨ ！</p>\n","_path":"20240711/shi-yong-nextjs-he-tailwindcss-chong-gou-wo-de-bo-ke/","_link":"https://yaoqs.github.io/20240711/shi-yong-nextjs-he-tailwindcss-chong-gou-wo-de-bo-ke/","_id":"clzpq9hwn0072sger2jpjayye"}}