{"type":"getPostById","data":{"title":"使用 Next.js + Hexo 重构我的博客","date":"2024-07-11T03:08:40.000Z","description":"","categories":[{"name":"nextjs","_id":"clzpq9hwp0079sgergadt1z96"}],"tags":[{"name":"nextjs","_id":"clzpq9hzf00brsger5oejatxs"}],"content":"<p>转载自 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">使用 Next.js + Hexo 重构我的博客</a></p>\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）</p>\n<h3 id=\"技术选型：Gatsby-vs-Next-js\"><a class=\"header-anchor\" href=\"#技术选型：Gatsby-vs-Next-js\">※</a>技术选型：Gatsby vs Next.js</h3>\n<p>我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 <a href=\"https://theme-suka.skk.moe/\">Hexo 主题</a>，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。</p>\n<p>Hexo 是一个诞生于 2012 年的、由 Node.js 驱动的静态站点生成器（Static Site Generator），对标 Jekyll 和 Octopress；受限制于其时代背景、Hexo 只是一个基于模板拼接静态字符串的工具。在构建更强大、更现代的网站时，Hexo 并不能提供太多帮助。</p>\n<p>在选择框架的时候，我希望选择的框架能够实现以下功能：</p>\n<ul>\n<li>静态导出：静态页面无需后端，易于部署和缓存</li>\n<li>无刷新页面导航：不仅仅是 PJAX 的刷新不重载，我希望页面切换时，只需要加载新页面需要但尚未加载的资源（即复用现有的资源），同时浏览器能够差分更新 DOM、节省不必要的重复渲染开销。</li>\n<li>页面预载：我希望网站内链接可以在 进入用户 Viewport / 用户 Mouseover 时能够预加载，配合无刷新站内导航实现接近 Native 级别的页面切换性能。由于我的技术栈不包括 Vue，因此 Nuxt.js、VuePress 和 VitePress 率先出局；常见 React 元框架（The Framework of Framework a.k.a Meta Framework）包括 Remix、Gatsby 和 Next.js。其中 Remix 依赖 Serverless 平台、不支持静态导出和 optimistic 缓存，也一并出局。</li>\n</ul>\n<p>关于 Gatsby 和 Next.js 之间的对比和区别，相关讨论数不胜数、无需赘述。对我来说，两者最重要的区别是 Gatsby 的 Data Source 必须是 GraphQL Based Query，而 Next.js 的 Data Source 是任意的：开发者只需要在 pages 中命名导出 getStaticProps、getServerSideProps、getStaticPaths、getInitialProps 供 Next.js 在构建时调用，Next.js 本身并不关心数据来源是 GraphQL 还是 RESTful，亦或者是本地文件系统。因此，我可以继续使用 Hexo 作为我的 Content Management System、管理文章数据，让 Next.js（React）专注于 UI/UX 的构建上。</p>\n<h3 id=\"内容管理：从-Hexo-到-Next-js\"><a class=\"header-anchor\" href=\"#内容管理：从-Hexo-到-Next-js\">※</a>内容管理：从 Hexo 到 Next.js</h3>\n<p>从 Hexo 获取数据<br>\nHexo 的核心是一个 JSON based NoSQL 数据库 warehouse。除了可以通过 CLI 调用以外，Hexo 还暴露了一系列 JS API，直接操作 warehouse 来对文章数据 CRUD。</p>\n<p>首先初始化 Hexo 实例：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Hexo</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;hexo&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">__SECRET_HEXO_INSTANCE__</span>: <span class=\"title class_\">Hexo</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">initHexo</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 复用已初始化的 Hexo 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__SECRET_HEXO_INSTANCE__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __SECRET_HEXO_INSTANCE__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用指定参数实例化一个 Hexo 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexo = <span class=\"keyword\">new</span> <span class=\"title class_\">Hexo</span>(process.<span class=\"title function_\">cwd</span>(), &#123;</span><br><span class=\"line\">    <span class=\"attr\">silent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 Hexo 实例（加载插件、加载配置文件）</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> hexo.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 载入 Hexo 目录（文章、草稿、站点数据、主题）</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> hexo.<span class=\"title function_\">load</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  __SECRET_HEXO_INSTANCE__ = hexo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hexo;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>初始化 Hexo 实例以后，即可从 Hexo 中获取数据了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; basename &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; url_for &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;hexo-util&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取所有文章的路径，供 Next.js 的 getStaticPaths 构建路径索引时使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"keyword\">async</span> fetchAllPostsPaths = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexo = <span class=\"keyword\">await</span> <span class=\"title function_\">initHexo</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> posts = hexo.<span class=\"property\">database</span>.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Post&#x27;</span>).<span class=\"title function_\">find</span>(&#123;&#125;).<span class=\"title function_\">sort</span>(<span class=\"string\">&#x27;-date&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> posts.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">post</span> =&gt;</span> <span class=\"title function_\">basename</span>(post.<span class=\"property\">slug</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定文章的数据，供 Next.js 的 getStaticProps 使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">findPostBySlug</span> = <span class=\"keyword\">async</span> (<span class=\"params\">slug: string</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexo = <span class=\"keyword\">await</span> <span class=\"title function_\">initHexo</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> urlFor = url_for.<span class=\"title function_\">bind</span>(hexo);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> post = hexo.<span class=\"property\">database</span>.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Post&#x27;</span>).<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">path</span>: <span class=\"string\">`post/<span class=\"subst\">$&#123;slug&#125;</span>/`</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 只返回需要用到的 prop</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: post.<span class=\"property\">title</span>;</span><br><span class=\"line\">    <span class=\"attr\">date</span>: post.<span class=\"property\">date</span>;</span><br><span class=\"line\">    <span class=\"attr\">updated</span>: post.<span class=\"property\">updated</span>;</span><br><span class=\"line\">    <span class=\"attr\">content</span>: post.<span class=\"property\">content</span>;</span><br><span class=\"line\">    <span class=\"attr\">permalink</span>: post.<span class=\"property\">permalink</span>;</span><br><span class=\"line\">      <span class=\"attr\">prev</span>: post.<span class=\"property\">prev</span> ? &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: post.<span class=\"property\">prev</span>.<span class=\"property\">title</span> ?? <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"title function_\">urlFor</span>(post.<span class=\"property\">prev</span>.<span class=\"property\">path</span>)</span><br><span class=\"line\">    &#125; : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">next</span>: post.<span class=\"property\">next</span> ? &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: post.<span class=\"property\">next</span>.<span class=\"property\">title</span> ?? <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"title function_\">urlFor</span>(post.<span class=\"property\">next</span>.<span class=\"property\">path</span>)</span><br><span class=\"line\">    &#125; : <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getStaticPaths</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> paths = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchAllPostsPaths</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    paths,</span><br><span class=\"line\">    <span class=\"attr\">fallback</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getStaticProps</span> = <span class=\"keyword\">async</span> (<span class=\"params\">&#123; params &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> post = <span class=\"keyword\">await</span> <span class=\"title function_\">findPostBySlug</span>(params.<span class=\"property\">slug</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">      post</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要返回所有包含指定标签的文章，通过构建 query 索引 Hexo 数据库即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getPostsFromTag =&gt; <span class=\"title function_\">async</span> (<span class=\"attr\">tag</span>: string) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexo = <span class=\"keyword\">await</span> <span class=\"title function_\">initHexo</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 根据标签的 name 在数据库中寻找对应的 Tag 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> tag = hexo.<span class=\"property\">database</span>.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Tag&#x27;</span>).<span class=\"title function_\">findOne</span>(&#123; <span class=\"attr\">name</span>: tag &#125;, &#123; <span class=\"attr\">lean</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\">  <span class=\"comment\">// 在 Post - Tag 交叉索引数据库中寻找所有包含当前 Tag 的 _id 的文章</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> postIds = hexo.<span class=\"property\">database</span>.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;PostTag&#x27;</span>).<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">tag_id</span>: tag.<span class=\"property\">_id</span> &#125;).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">post_id</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 利用 $in query 寻找 postIds 中的所有文章、并按照日期排序</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> posts = hexo.<span class=\"property\">database</span>.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Post&#x27;</span>).<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">_id</span>: &#123; <span class=\"attr\">$in</span>: postIds &#125; &#125;).<span class=\"title function_\">sort</span>(<span class=\"string\">&#x27;-date&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在构建文章列表的时候，需要生成一个形状类似于 { posts: Post[], path: string, index: number, prev: { path: string, index: number }, next: { path: string, index: number } }[] 分页数组，也可以使用 Hexo 的插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hexoIndexGenerator <span class=\"keyword\">from</span> <span class=\"string\">&#x27;hexo-generator-index/lib/generator&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">buildIndexPaginations</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexo = <span class=\"keyword\">await</span> <span class=\"title function_\">initHexo</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = hexoIndexGenerator.<span class=\"title function_\">call</span>(hexo, hexo.<span class=\"property\">locals</span>.<span class=\"title function_\">toObject</span>());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Next-js-多线程与-Hexo-数据持久化\"><a class=\"header-anchor\" href=\"#Next-js-多线程与-Hexo-数据持久化\">※</a>Next.js 多线程与 Hexo 数据持久化</h3>\n<p>为了加快构建速度，Next.js 默认使用 worker_thread 进行多线程构建，其中 getStaticProps、getStaticPaths 等函数都会在不同的线程中运行。Next.js 并没有实现线程间共享数据的 API，目前官方推荐的做法是将需要共享的数据写入文件系统进行缓存。而 Hexo 也内置了基于文件系统（db.json）的数据持久化接口 database.save()。我们可以在首次初始化 Hexo 实例、从本地 Hexo 目录加载数据后将 db.json 写入文件系统，后续 Next.js 其余线程再次创建 Hexo 实例时，Hexo 会自动优先从 db.json 获取数据、不再扫描本地目录。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">initHexo</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__SECRET_HEXO_INSTANCE__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __SECRET_HEXO_INSTANCE__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexo = <span class=\"keyword\">new</span> <span class=\"title class_\">Hexo</span>(process.<span class=\"title function_\">cwd</span>(), &#123;</span><br><span class=\"line\">    <span class=\"attr\">silent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dbPath = <span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;db.json&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当 不属于生产构建、且本地存在 db.json 时，删除 db.json、确保开发时可以预览实时最新的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(dbPath)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> fs.<span class=\"property\">promises</span>.<span class=\"title function_\">unlink</span>(dbPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> hexo.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> hexo.<span class=\"title function_\">load</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hexo.<span class=\"property\">env</span>.<span class=\"property\">init</span> &amp;&amp; hexo.<span class=\"property\">_dbLoaded</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(dbPath)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 只有在本地不存在 db.json、且在生产构建时，将数据库写入文件系统</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> hexo.<span class=\"property\">database</span>.<span class=\"title function_\">save</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  __SECRET_HEXO_INSTANCE__ = hexo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hexo;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地预览-Hexo-草稿\"><a class=\"header-anchor\" href=\"#本地预览-Hexo-草稿\">※</a>本地预览 Hexo 草稿</h3>\n<p>Hexo 支持 草稿写作 功能：正常构建时默认忽略草稿，只包括「已发布」的文章。在本地预览草稿时，通过 CLI 的 --draft 参数即可将草稿包含在构建当中。draft 参数也可以在实例化 Hexo 时传入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">initHexo</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__SECRET_HEXO_INSTANCE__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __SECRET_HEXO_INSTANCE__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hexo = <span class=\"keyword\">new</span> <span class=\"title class_\">Hexo</span>(process.<span class=\"title function_\">cwd</span>(), &#123;</span><br><span class=\"line\">    <span class=\"attr\">silent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 在 next dev 时包含草稿</span></span><br><span class=\"line\">    <span class=\"attr\">draft</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dbPath = <span class=\"title function_\">join</span>(hexo.<span class=\"property\">base_dir</span>, <span class=\"string\">&#x27;db.json&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fs.<span class=\"title function_\">existsSync</span>(dbPath)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> fs.<span class=\"property\">promises</span>.<span class=\"title function_\">unlink</span>(dbPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> hexo.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> hexo.<span class=\"title function_\">load</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hexo.<span class=\"property\">env</span>.<span class=\"property\">init</span> &amp;&amp; hexo.<span class=\"property\">_dbLoaded</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(dbPath)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> hexo.<span class=\"property\">database</span>.<span class=\"title function_\">save</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  __SECRET_HEXO_INSTANCE__ = hexo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hexo;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 Hexo 为 Next.js 添加 RSS 和 Sitemap<br>\nNext.js 并没有内置 RSS 和 Sitemap 支持。不过由于我的内容是通过 Hexo 管理，因此可以通过 Hexo 的 API 和 Hexo 的插件生成 RSS 和 Sitemap：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; promises <span class=\"keyword\">as</span> fsPromise &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feedGenerator <span class=\"keyword\">from</span> <span class=\"string\">&#x27;hexo-feed-generator/lib/generator&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> betterSitemapGenerator <span class=\"keyword\">from</span> <span class=\"string\">&#x27;hexo-generator-better-sitemap/lib/generator&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hexo = <span class=\"keyword\">await</span> <span class=\"title function_\">initHexo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> atom1 = feedGenerator.<span class=\"title function_\">call</span>(hexo, hexo.<span class=\"property\">locals</span>.<span class=\"title function_\">toObject</span>(), <span class=\"string\">&#x27;atom&#x27;</span>, <span class=\"string\">&#x27;atom.xml&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rss2 = feedGenerator.<span class=\"title function_\">call</span>(hexo, hexo.<span class=\"property\">locals</span>.<span class=\"title function_\">toObject</span>(), <span class=\"string\">&#x27;rss&#x27;</span>, <span class=\"string\">&#x27;rss.xml&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sitemaps = betterSitemapGenerator.<span class=\"title function_\">call</span>(hexo, hexo.<span class=\"property\">locals</span>.<span class=\"title function_\">toObject</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">  [atom, rss2, ...sitemaps].<span class=\"title function_\">map</span>(</span><br><span class=\"line\">    <span class=\"title function_\">async</span> (&#123; data, path &#125;) =&gt; fsPromises.<span class=\"title function_\">writeFile</span>(path, data, <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Atomic-CSS-in-JS：style9\"><a class=\"header-anchor\" href=\"#Atomic-CSS-in-JS：style9\">※</a>Atomic CSS-in-JS：style9</h3>\n<p>当「关注点分离」还是主流思想时，传统大型项目使用的 CSS 方法论如 BEM、OOCSS 都曾大行其道，Bootstrap、Foundation、Bulma 等 CSS Framework 便是这种潮流下的产物。而最近，Utility First 的 CSS 概念脱颖而出、逐渐受到社区的关注，其中最典型的便是 Tailwind CSS，通过复用 Utility 规则、以及在编译时只包含用到的 CSS、使得最终 CSS 产物大幅减小。</p>\n<p>在 Utility First 上更进一步，就到了 Atomic CSS。在 Atomic CSS 中，每一个 CSS 类都只有一条独立的 CSS 规则。相比于传统 CSS 方法论、CSS 产物大小与项目的复杂程度和组件数量线性正相关；而使用了 Utility First 或 Atomic CSS 以后，随着组件数量逐渐增加、能复用的 CSS 规则越来越多、最终 CSS 产物大小与项目复杂程度呈对数关系：</p>\n<p>Atomic CSS-in-JS 实现有运行时（Runtime）和预编译（Pre-Compile）两种。运行时实现的优势在于可以动态生成样式，更易于组合样式；缺点在于 Vendor Prefix 等处理需要在 Runtime 时执行、Bundle 中必须携带相关依赖、体积难免变大，典型的库有 Uber 的 Styletron（驱动了 Uber 的官网和 H5）和沃尔沃汽车前技术主管的 Fela（驱动了沃尔沃汽车官网，Cloudflare Dashboard 和 Medium）。预编译实现的优势在于无需将 Vendor Prefixer 等依赖打包 ship 给客户端，改善了性能；缺点在于难以实现动态样式组合（高度依赖对代码的静态分析），典型的库有 Atlassian 的 Compiled CSS-in-JS 和 Facebook 尚未开源的 StyleX。</p>\n<p>在使用 Atomic CSS 重写博客之前，我需要 ship 25.2 KiB 的 CSS 才能在浏览器中达成首次渲染（First Paint）、之后还需要异步 ship 非关键 CSS；在使用 Atomic CSS 重写以后，我只需要 17.5 KiB 的 CSS 就能够覆盖博客所有页面的样式。</p>\n<p>关于 CSS-in-JS 和 Atomic CSS-in-JS，我计划会专门写一篇文章介绍。</p>\n<h3 id=\"原子化状态管理：jotai\"><a class=\"header-anchor\" href=\"#原子化状态管理：jotai\">※</a>原子化状态管理：jotai</h3>\n<p>React 的哲学是「The Data Flows Down」，即「单向数据流」。状态（State）属于组件，而一个组件的状态只能影响其「子组件」。简单地，React 组件的状态是单向往下的，子组件需要修改父组件的状态，必须通过状态提升（即子组件必须是「受控」的）；多个组件需要共享一个状态时，需要将状态提升到公共父组件。</p>\n<p>当 React Tree 越来越深时，逐级向上提升状态也会越来越繁琐：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">IncrementButton</span> = (<span class=\"params\">props: &#123; onClick: () =&gt; <span class=\"keyword\">void</span> &#125;</span>) =&gt; (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onClick&#125;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">DecrementButton</span> = (<span class=\"params\">props: &#123; onClick: () =&gt; <span class=\"keyword\">void</span> &#125;</span>) =&gt; (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onClick&#125;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Control</span> = (<span class=\"params\">props: &#123; value: number, onChange: (value: number) =&gt; <span class=\"keyword\">void</span> &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleInputChange</span> = (<span class=\"params\">event: React.InputEvent&lt;HTMLInputElement&gt;</span>) =&gt; props.<span class=\"title function_\">onChange</span>(<span class=\"title class_\">Number</span>(event.<span class=\"property\">currentTarget</span>.<span class=\"property\">value</span>));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleIncrement</span> = (<span class=\"params\"></span>) =&gt; props.<span class=\"title function_\">onChange</span>(props.<span class=\"property\">value</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleDecrement</span> = (<span class=\"params\"></span>) =&gt; props.<span class=\"title function_\">onChange</span>(props.<span class=\"property\">value</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Box</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">IncrementButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleIncrement&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">DecrementButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleDecrement&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Box</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Count</span> = (<span class=\"params\">props: &#123; value: number &#125;</span>) =&gt; (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;props.value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Counter</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleChange</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span>.<span class=\"title function_\">isInteger</span>(value)) <span class=\"title function_\">setCount</span>(value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Count</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Control</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以如上的计数组件为例，为了能在 <Count /> 组件中展示计数、由 <Control /> 组件控制计数，我们不得不将状态提升到公共父组件 <Counter /> 中；而 <IncrementButton /> 和 <DecrementButton /> 需要通过 props.onClick 将状态提升到 <Control /> 中；而 <Control /> 组件又需要通过 props.onChange 将状态提升到 <Counter /> 中；为了实现数字递增和递减，我们将状态 count 通过 value prop 分别传递给了 <Control />、又通过 handleIncrement 和 handleDecrement 传染到了 <IncrementButton /> 和 <DecrementButton />，导致整个组件的每一个子组件都会随着 value 改变而重新渲染、无法被 memo 优化。</p>\n<p>当然，通过 useReducer 将递增和递减改为 reducer 中的 increment 和 decrement 两个 action，然后只需要将不变的 dispatcher 通过 prop 向下传给 <Control />，使得 <IncrementButton /> 和 <DecrementButton /> 可被包裹在 memo 中，从而优化整个组件。是否有更加直观的状态管理和传递方式呢？</p>\n<p>jotai 是 Daishi Kato 开发的一个「原始、灵活」的、基于原子的 React 状态管理库，在 React Tree 中任意位置的组件都能通过 useAtom Hook 共享一个 atom 的状态、且 API 和 React 的 useState 非常相似，不仅改善开发体验、还降低了学习成本。和 React Context 一改变、所有子组件都要更新不同，只有 subscribe 了 jotai atom 的组件会在 atom 更新时重新渲染。除此以外，jotai 还通过 useReducer 分离状态更新与组件更新，避免了更多潜在的额外渲染（参见 React Hook Cheat Mode）。除此以外，jotai 还提供了对 derived state 和 derived async state 的支持。</p>\n<p>nanostores 是由 PostCSS 作者开发的另一个基于原子的、可用于 React、Vue、Angular、Vanilla、Solid。和 jotai 原理相同，nanostores 也是由外部管理状态；相比 jotai（gzip 后 7KiB 左右），nanostores 更加轻便（gzip 后大小不过 199 Byte），但是并没有针对 React 优化、不能避免潜在的额外渲染。</p>\n<p>使用 jotai 重写上述计数组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">atom</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">IncrementButton</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, setCount] = <span class=\"title function_\">useAtom</span>(count);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count =&gt; count + 1)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">DecrementButton</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, setCount] = <span class=\"title function_\">useAtom</span>(count);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count =&gt; count - 1)&#125;&gt;+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Control</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Box</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">IncrementButton</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">DecrementButton</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Box</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Count</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count] = <span class=\"title function_\">useAtom</span>(count);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Counter</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Count</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Control</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 jotai 在 React 外部管理状态 count，现在所有组件都不再通过 prop 向下传递数据、通过 prop 回调提升状态，我们成功去掉了所有组件的 prop；因此，整个 <Control /> 都可以被包裹在 memo 中；而 jotai 会保证在 count 更新时、只重新渲染 <Count />。</p>\n<p>在我的博客中，我使用 jotai 来处理 React Tree 的不同深度的组件之间共享状态，例如在 Root - Navbar - DarkModeDropDown 和 Root - NextHead 中共享深色模式的状态；用 Root - Fab - FabToC 控制 Root - Left Cols - ToC 的 Modal 组件在移动端是否显示。</p>\n<h3 id=\"为网站添加用户友好的深色模式支持\"><a class=\"header-anchor\" href=\"#为网站添加用户友好的深色模式支持\">※</a>为网站添加用户友好的深色模式支持</h3>\n<p>新的深色模式 UX<br>\n过去，我在 「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」一文之中介绍了什么是深色模式，一些常见的实现深色模式的方法，以及我的博客当时是如何实现深色模式的。简而言之，当时我的博客的深色模式开关需要解决的问题是：</p>\n<p>用户可以通过开关手动切换显示模式网站也可以通过 Media Query、跟随用户系统的偏好设置来自动切换模式如果用户手动切换模式、且网站将用户的选择永远记录在 localStorage 之中，那么用户将来就只能通过手动切换模式、不再能跟随操作系统的偏好设置自动切换绝大部分国内网站的深色模式的 UX 体验就是如此差劲：例如，V2EX 的深色模式必须通过手动切换、不能跟随操作系统的偏好设置自动切换；新浪微博的深色模式只有用户从未手动切换过模式时能够跟随操作系统的偏好设置自动切换，一旦用户手动切换深色模式、那么就不能再跟随操作系统的偏好设置自动切换。</p>\n<p>因此，当时我的博客的解决方案是：</p>\n<p>当网站跟随操作系统的偏好设置、处于浅色模式下时，用户通过点击按钮切换到深色模式当操作系统的偏好设置也为深色模式时，网站自动忘记 localStorage 中记录的模式、恢复跟随操作系统偏好设置自动切换因此当操作系统的偏好设置恢复浅色模式后，网站会自动恢复浅色模式反之亦然：当网站处于深色模式下时，用户可以手动切换到浅色模式；而当用户的操作系统偏好浅色模式时，网站也会恢复到自动切换模式简而言之，当网站记忆的用户的手动模式与操作系统的偏好设置一致时，网站会忘记用户设置的手动模式、恢复自动模式虽然解决了用户手动设置后不能恢复自动切换，但是这个方案的 UX 并不好：</p>\n<p>当用户手动模式被忘记时，在 UI 上没有任何提示用户可能并不希望网页恢复到自动模式为了同时解决「能够在手动模式与自动模式间切换」和「给予用户更大自主权」的问题，我开始参考大部分网站的解决方案：深色模式下拉菜单的 UX 细节仔细观察深色模式下拉菜单的话，可以发现一个细节：</p>\n<p>darkmode-menu<br>\n当深色模式下拉菜单首次打开以后，当前生效的选项会高亮、字体加粗、使用强调色当光标移动时，当前光标悬浮的选项会高亮，当前生效选项的字体仍然加粗和使用强调色当光标离开菜单后，没有选项被高亮、当前生效选项的字体仍然加粗和使用强调色由于 DOM 没有光标悬浮事件，因此我们需要一个 state 配合 onMouseEnter 和 onMouseLeave 事件跟踪当前光标悬浮的选项，控制是否高亮；另外一个包含当前生效选项的 state，控制字体是否加粗和使用强调色。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> darkModeItem = [</span><br><span class=\"line\">  [<span class=\"string\">&#x27;auto&#x27;</span>, <span class=\"string\">&#x27;跟随系统&#x27;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&#x27;dark&#x27;</span>, <span class=\"string\">&#x27;总是深色&#x27;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&#x27;light&#x27;</span>, <span class=\"string\">&#x27;总是浅色&#x27;</span>]</span><br><span class=\"line\">] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">DarkModeDropdownMenu</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [themeValue, setThemeValue] = <span class=\"title function_\">useAtom</span>(themeAtom);</span><br><span class=\"line\">  <span class=\"comment\">// 当前悬浮 state 的初始值取当前生效的选项</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [hovered, setHovered] = <span class=\"title function_\">useState</span>(themeValue);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"title function_\">useCallback</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setThemeValue</span>(value);</span><br><span class=\"line\">  &#125;, [setThemeValue]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleMouseEnter = <span class=\"title function_\">useCallback</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setHovered</span>(key);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleMouseLeave = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setHovered</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;styles(</span>&#x27;<span class=\"attr\">menuBody</span>&#x27;)&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        darkModeItem.map(([key, text]) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">DropdownItem</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">key</span>=<span class=\"string\">&#123;key&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            // <span class=\"attr\">当前生效的选项</span>、<span class=\"attr\">控制</span> &lt;<span class=\"attr\">DropdownItem</span> /&gt;</span> 的字体</span></span><br><span class=\"line\"><span class=\"language-xml\">            active=&#123;themeValue === key&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            // 当前光标悬浮的选项、控制 <span class=\"tag\">&lt;<span class=\"name\">DropdownItem</span> /&gt;</span> 的高亮</span></span><br><span class=\"line\"><span class=\"language-xml\">            hovered=&#123;hovered === key&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            onMouseEnter=&#123;handleMouseEnter(key)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            onMouseLeave=&#123;handleMouseLeave&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            onClick=&#123;handleClick(key)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;text&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">DropdownItem</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        ))</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-React-为静态-Markdown-添加动态交互\"><a class=\"header-anchor\" href=\"#使用-React-为静态-Markdown-添加动态交互\">※</a>使用 React 为静态 Markdown 添加动态交互</h3>\n<p>当使用 Hexo 时，我只需要将 Markdown 编译为静态的 HTML，然后通过编写额外的 JS、调用 DOM 和 Web API 来为静态页面添加动态交互，比如使用 medium-zoom 库模仿 Medium 和知乎专栏的文中图片点击放大。使用 Next.js 以后，这些特性都需要用 React 实现，以最大化发挥 React 的特性和优势。</p>\n<p>dangerouslySetInnerHTML<br>\n迁移到 React 的同时还要维持原有的行为，最简单的办法是通过 dangerouslySetInnerHTML 将生成的 HTML 直接插入到 DOM 中、然后在 React 的副作用（useEffect）中调用 Web API 和操作 DOM。举个例子，只通过 DOM 和 Web API 实现 Next.js 内部链接无刷新导航的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;next/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> shouldCatchLinks = (</span><br><span class=\"line\">  <span class=\"attr\">event</span>: <span class=\"title class_\">MouseEvent</span>,</span><br><span class=\"line\">  <span class=\"attr\">targetsList</span>: <span class=\"title class_\">HTMLAnchorElement</span>[]</span><br><span class=\"line\">): <span class=\"function\"><span class=\"params\">boolean</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 不是左键点击，可能是在试图强制跳转</span></span><br><span class=\"line\">    event.<span class=\"property\">button</span> !== <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用了修饰键，可能是在试图强制跳转</span></span><br><span class=\"line\">    || event.<span class=\"property\">altKey</span></span><br><span class=\"line\">    || event.<span class=\"property\">ctrlKey</span></span><br><span class=\"line\">    || event.<span class=\"property\">metaKey</span></span><br><span class=\"line\">    || event.<span class=\"property\">shiftKey</span></span><br><span class=\"line\">    <span class=\"comment\">// 点击事件已经在别处被处理了</span></span><br><span class=\"line\">    || event.<span class=\"property\">defaultPrevented</span></span><br><span class=\"line\">  ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> anchor = event.<span class=\"property\">target</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(anchor <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HTMLAnchorElement</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!targetsList.<span class=\"title function_\">includes</span>(anchor)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a[download] 应该由浏览器直接处理</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (anchor.<span class=\"title function_\">hasAttribute</span>(<span class=\"string\">&#x27;download&#x27;</span>) === <span class=\"literal\">true</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 不存在 href 属性的链接不应该处理</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (anchor.<span class=\"title function_\">hasAttribute</span>(<span class=\"string\">&#x27;href&#x27;</span>) === <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((</span><br><span class=\"line\">    <span class=\"comment\">// 链接不包含 target 属性</span></span><br><span class=\"line\">    anchor.<span class=\"title function_\">hasAttribute</span>(<span class=\"string\">&#x27;target&#x27;</span>) === <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 在 IE 上，链接的 target 属性一定存在，但可能为 undefined、null 或空字符</span></span><br><span class=\"line\">    || anchor.<span class=\"property\">target</span> == <span class=\"literal\">null</span></span><br><span class=\"line\">    || [<span class=\"string\">&#x27;_self&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>].<span class=\"title function_\">includes</span>(anchor.<span class=\"property\">target</span>)</span><br><span class=\"line\">    || (anchor.<span class=\"property\">target</span> === <span class=\"string\">&#x27;_parent&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// 链接的 target 是 _parent，但 parent 可能不存在</span></span><br><span class=\"line\">      &amp;&amp; (!anchor.<span class=\"property\">ownerDocument</span>.<span class=\"property\">defaultView</span>.<span class=\"property\">parent</span></span><br><span class=\"line\">        <span class=\"comment\">// 链接的 target 是 _parent，但 parent 和当前页面一致</span></span><br><span class=\"line\">        || anchor.<span class=\"property\">ownerDocument</span>.<span class=\"property\">defaultView</span>.<span class=\"property\">parent</span></span><br><span class=\"line\">        === anchor.<span class=\"property\">ownerDocument</span>.<span class=\"property\">defaultView</span>))</span><br><span class=\"line\">    || (anchor.<span class=\"property\">target</span> === <span class=\"string\">&#x27;_top&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// 链接的 target 是 _top，但 top 可能不存在</span></span><br><span class=\"line\">      &amp;&amp; (!anchor.<span class=\"property\">ownerDocument</span>.<span class=\"property\">defaultView</span>.<span class=\"property\">top</span></span><br><span class=\"line\">      <span class=\"comment\">// 链接的 target 是 _top，但 top 和当前页面一致</span></span><br><span class=\"line\">        || anchor.<span class=\"property\">ownerDocument</span>.<span class=\"property\">defaultView</span>.<span class=\"property\">top</span></span><br><span class=\"line\">        === anchor.<span class=\"property\">ownerDocument</span>.<span class=\"property\">defaultView</span>))</span><br><span class=\"line\">  ) === <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 目标链接和当前页面的 Protocol 不相同</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (anchor.<span class=\"property\">protocol</span> !== <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">protocol</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 目标链接和当前页面的 Host 不相同</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (anchor.<span class=\"property\">host</span> !== <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">host</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// IE 会清除动态生成的链接的 host 属性。</span></span><br><span class=\"line\">  <span class=\"comment\">// 除此以外，IE 会将默认端口（80、443）包含在链接的 host 属性中，但是在 window.location 中又不包含，如：</span></span><br><span class=\"line\">  <span class=\"comment\">// http://example.com 的 location.host 是 example.com，但是在链接中的 host 是 example.com:80</span></span><br><span class=\"line\">  <span class=\"comment\">// 在这里我没有做处理，如果需要兼容 IE，需要动态生成一个链接进行判断：</span></span><br><span class=\"line\">  <span class=\"comment\">// const a = document.createElement(&#x27;a&#x27;);</span></span><br><span class=\"line\">  <span class=\"comment\">// a.href = window.location.href;</span></span><br><span class=\"line\">  <span class=\"comment\">// if (anchor.host !== a.host) return false;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    anchor.<span class=\"property\">hash</span> !== <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &amp;&amp; (</span><br><span class=\"line\">      <span class=\"comment\">// 页面路径和当前相同，可能只是 Hash 变化，不处理</span></span><br><span class=\"line\">      anchor.<span class=\"property\">pathname</span> === <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">pathname</span></span><br><span class=\"line\">      <span class=\"comment\">// 在 IE 上，动态生成的链接、且 href 属性只包含 Hash 的，pathname 属性为空字符串</span></span><br><span class=\"line\">      || anchor.<span class=\"property\">pathname</span> === <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> prefetched = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>&lt;string&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Content</span> = (<span class=\"params\">props: &#123; content: string &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postContainerRef = useRef&lt;<span class=\"title class_\">HTMLElement</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 监听内链跳转是直接操作 DOM，因此需要视为 React 副作用</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (postContainerRef.<span class=\"property\">current</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> aEls = [...postContainerRef.<span class=\"property\">current</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;a&#x27;</span>)];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">handleClick</span> = (<span class=\"params\">e: MouseEvent</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">shouldCatchLinks</span>(e, aEls)) &#123;</span><br><span class=\"line\">          e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">          router.<span class=\"title function_\">push</span>((e.<span class=\"property\">target</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLAnchorElement</span>).<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;href&#x27;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// prefetch on hover, just like &lt;Link prefetch=&#123;false&#125; /&gt;</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">handleMouseEnter</span> = (<span class=\"params\">e: MouseEvent</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">shouldCatchLinks</span>(e, aEls)) &#123;</span><br><span class=\"line\">          e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">          <span class=\"keyword\">const</span> href = (e.<span class=\"property\">target</span> <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLAnchorElement</span>).<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;href&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!prefetched.<span class=\"title function_\">has</span>(href)) &#123;</span><br><span class=\"line\">            prefetched.<span class=\"title function_\">add</span>(href);</span><br><span class=\"line\">            router.<span class=\"title function_\">prefetch</span>(href);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      aEls.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> href = a.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;href&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (href?.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;/&#x27;</span>)) &#123;</span><br><span class=\"line\">          a.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span><br><span class=\"line\">          a.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>, handleMouseEnter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        aEls.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> &#123;</span><br><span class=\"line\">          a.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span><br><span class=\"line\">          a.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;mouseenter&#x27;</span>, handleMouseEnter);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [router]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>显而易见的，这种实现非常 dirty、难以维护，且完全没有发挥出 React 的任何特性。</p>\n<h3 id=\"在浏览器中将-Markdown-或-HTML-运行时编译为-React-节点\"><a class=\"header-anchor\" href=\"#在浏览器中将-Markdown-或-HTML-运行时编译为-React-节点\">※</a>在浏览器中将 Markdown 或 HTML 运行时编译为 React 节点</h3>\n<p>为了解决类似的问题，React 社区推出了许多解决方案：</p>\n<ul>\n<li>react-markdown：在浏览器中将原始 Markdown 编译为 React Node</li>\n<li>HTML2React：在浏览器中将静态 HTML 字符串通过 document.createElement 和 innerHTML 生成 DOM、再将 DOM 转换为 React Node</li>\n<li>html-to-react：在浏览器中调用 htmlparser2 将静态 HTML 字符串转换为 AST，再将 AST 渲染为 React Node</li>\n<li>rehype-react：与 html-to-react 类似，在浏览器中先将静态 HTML 字符串转换为 Unified AST，再将 AST 渲染为 React Node</li>\n<li>@frontity/html2react：也是先使用 himalaya 库将 HTML 字符串转换为 AST、再将 AST 渲染为 React Node<br>\n上述解决方案都能够用 React 为静态的 HTML 字符串、Markdown 字符串赋能，但是都需要在运行时对 HTML、Markdown 进行 Parse 与 Render，不仅导致 bundle 体积变大，同时也给浏览器造成了一定的性能压力。如果要改善客户端的性能，至少需要将 Parse 静态 HTML 的环节交给服务端处理、让运行时只负责 Render，也就是预编译。MDX 就是这种思路的一个实现——</li>\n</ul>\n<h4 id=\"预编译-MDX\"><a class=\"header-anchor\" href=\"#预编译-MDX\">※</a>预编译 MDX</h4>\n<p>在 Next.js 中有两种使用 MDX 的方法：</p>\n<p>将 MDX 作为 Next.js 的页面源文件处理，Next.js 会使用 next/mdx Webpack loader 编译将 MDX 通过外部编译器进行预编译、序列化后，将编译结果喂给 Next.js 的 getStaticProps，如 next-mdx-remote 和 mdx-bundler<br>\n上述两种方法都在服务端完成解析和编译环节，但是也有各自的缺陷：</p>\n<p>Next.js 内置的 MDX 将每一个 MDX 文件作为一个单独的页面处理，不能够自定义和复用内容之外的 Layout<br>\nnext-mdx-remote 和 mdx-bundler 将 MDX 预编译并序列化，在前端渲染时需要使用 eval、new Function 或 Reflect.construct</p>\n<h4 id=\"在服务端预生成-HTML-AST，在客户端将-HTML-AST-渲染为-React-节点\"><a class=\"header-anchor\" href=\"#在服务端预生成-HTML-AST，在客户端将-HTML-AST-渲染为-React-节点\">※</a>在服务端预生成 HTML AST，在客户端将 HTML AST 渲染为 React 节点</h4>\n<p>之前在使用 Hexo 时，我已经将 PostHTML 作为 Markdown 静态编译为 HTML 后的 After Processor。因此，我最终采用的方法是将 PostHTML 的 AST 直接喂给 Next.js 的 getStaticProps。同时依照 posthtml-render 实现一个将 PostHTML AST 渲染为 React Node 的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">HtmlTagReplaceReact</span> = &#123;</span><br><span class=\"line\">  [<span class=\"title class_\">TagName</span> <span class=\"keyword\">in</span> keyof <span class=\"variable constant_\">JSX</span>.<span class=\"property\">IntrinsicElements</span>]?: keyof <span class=\"variable constant_\">JSX</span>.<span class=\"property\">IntrinsicElements</span> | <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ComponentPropsWithoutRef</span>&lt;<span class=\"title class_\">TagName</span>&gt;&gt;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SINGLE_TAGS</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([</span><br><span class=\"line\">  <span class=\"string\">&#x27;area&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;base&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;br&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;col&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;command&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;embed&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;hr&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;img&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;input&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;keygen&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;link&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;menuitem&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;meta&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;param&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;source&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;track&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;wbr&#x27;</span></span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> totalIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFalsyNode = (<span class=\"attr\">node</span>: <span class=\"title class_\">PostHTMLNode</span> | <span class=\"title class_\">PostHTMLNode</span>[]): <span class=\"function\"><span class=\"params\">boolean</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    node == <span class=\"literal\">null</span></span><br><span class=\"line\">    || node === <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    || <span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(node)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> posthtmlToReact = (<span class=\"attr\">tree</span>: <span class=\"title class_\">PostHTML</span>.<span class=\"property\">Node</span>[] | <span class=\"title class_\">PostHTML</span>.<span class=\"property\">Node</span>[][], <span class=\"attr\">components</span>: <span class=\"title class_\">HtmlTagReplaceReact</span> = &#123;&#125;, level = <span class=\"number\">0</span>): <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>[] =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> treeLen = tree.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (treeLen === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  totalIndex = totalIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">result</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; treeLen; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = tree[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isFalsyNode</span>(node)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(node)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">length</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(...<span class=\"title function_\">posthtmlToReact</span>(node, components, level + <span class=\"number\">1</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> node === <span class=\"string\">&#x27;number&#x27;</span> || <span class=\"keyword\">typeof</span> node === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(node.<span class=\"property\">content</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isFalsyNode</span>(node.<span class=\"property\">content</span>)) &#123;</span><br><span class=\"line\">        node.<span class=\"property\">content</span> = [];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node.<span class=\"property\">content</span> = [node.<span class=\"property\">content</span>];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(...<span class=\"title function_\">posthtmlToReact</span>(node.<span class=\"property\">content</span>, components, level + <span class=\"number\">1</span>));</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tag = <span class=\"keyword\">typeof</span> node.<span class=\"property\">tag</span> === <span class=\"string\">&#x27;string&#x27;</span> ? node.<span class=\"property\">tag</span> : <span class=\"string\">&#x27;div&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compProps = node.<span class=\"property\">attrs</span> ?? &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Comp</span> = components[tag] ? components[tag] : tag;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"string\">`<span class=\"subst\">$&#123;totalIndex&#125;</span>-<span class=\"subst\">$&#123;i&#125;</span>-<span class=\"subst\">$&#123;level&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable constant_\">SINGLE_TAGS</span>.<span class=\"title function_\">has</span>(tag)) &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...compProps</span>&#125; <span class=\"attr\">key</span>=<span class=\"string\">&#123;key&#125;</span> /&gt;</span></span>);</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(...<span class=\"title function_\">posthtmlToReact</span>(node.<span class=\"property\">content</span>, components, level + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Comp</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;key&#125;</span> &#123;<span class=\"attr\">...compProps</span>&#125;&gt;</span>&#123;posthtmlToReact(node.content, components, level + 1)&#125;<span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>将 PostHTML 的 AST 通过 postHtmlToReact 函数转换为 React.ReactNode[] 后，即可直接在 React 组件中使用。调用 postHtmlToReact 时也可以指定某些 HTML 标签的渲染方式、控制文章内容的呈现方式。比如，通过控制 a 标签的渲染方式，我可以将 a 标签渲染为我的 CustomLink 组件、实现内链通过 Next.js 无刷新跳转：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NextLink</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;next/link&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isExternalLink</span> = (<span class=\"params\">href: string</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!href) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^(\\/\\/|http(s)?:)/</span>.<span class=\"title function_\">test</span>(href)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (href.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;https://blog.skk.moe&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">urlObj</span>: <span class=\"variable constant_\">URL</span> | <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    urlObj = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(href, <span class=\"string\">&#x27;https://blog.skk.moe&#x27;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> urlObj !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (urlObj.<span class=\"property\">origin</span> === <span class=\"string\">&#x27;null&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (urlObj.<span class=\"property\">hostname</span> !== <span class=\"string\">&#x27;blog.skk.moe&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">CustomLink</span> = (<span class=\"params\">props: JSX.IntrinsicElements[<span class=\"string\">&#x27;a&#x27;</span>]</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; href, ...rest &#125; = props;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isExternalLink</span>(href)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> &#123;<span class=\"attr\">...props</span>&#125; <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener noreferrer external nofollow&quot;</span> /&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">NextLink</span> <span class=\"attr\">href</span>=<span class=\"string\">&#123;href&#125;</span> <span class=\"attr\">passHref</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Link</span> &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">NextLink</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">PostContent</span> = (<span class=\"params\">props: &#123; tree: PostHTML.Node[] &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tree = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(props.<span class=\"property\">tree</span>) ? props.<span class=\"property\">tree</span> : [props.<span class=\"property\">tree</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">posthtmlToReact</span>(</span><br><span class=\"line\">    tree,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"title class_\">CustomLink</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>再比如，我可以用 CSS-in-JS 为文章内容添加样式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Blockquote</span> = <span class=\"title function_\">styled</span>(<span class=\"string\">&#x27;blockquote&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">borderLeft</span>: <span class=\"string\">&#x27;0.25em solid var(--border)&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">padding</span>: <span class=\"string\">&#x27;1em&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">background</span>: <span class=\"string\">&#x27;var(--c-bg)&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">PostContent</span> = (<span class=\"params\">props: &#123; tree: PostHTML.Node[] &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tree = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(props.<span class=\"property\">tree</span>) ? props.<span class=\"property\">tree</span> : [props.<span class=\"property\">tree</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">posthtmlToReact</span>(</span><br><span class=\"line\">    tree,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;blockquote&#x27;</span>: <span class=\"title class_\">Blockquote</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"图片-lazyload-优化\"><a class=\"header-anchor\" href=\"#图片-lazyload-优化\">※</a>图片 lazyload 优化</h4>\n<p>两年前，我曾经写过一篇文章「图片 lazyload 的学问和在 Hexo 上的最佳实践」，简单介绍了图片 lazyload 以及与之有关的 Layout Shift 问题，以及占位图、宽高比盒子等概念。两年过去了，图片 lazyload 的策略也在不断进化。</p>\n<p>为什么图片需要指定 width 和 height 属性？推荐大家阅读「Setting Height And Width On Images Is Important Again」。在这里 TL, DR 一下：</p>\n<p>在比较久远的过去，网络环境并不良好、带宽不足、RTT 和 TTFB 高、丢包率高，加上当时没有合适的 Web 图片编码方式，如果网页不显式提供 <img /> 元素的长宽，浏览器不得不等到图片全部下载完成后才能获取图片的长宽，从而导致 Reflow 和 Layout Shift。随着移动端和平板电脑的出现，网页设计者希望图片的宽度能填满 viewport 或 container（即响应式图片），一种常见的做法就是 max-width: 100%; height: auto。但是一旦通过 CSS 指定了 max-width 和 height，<img /> 元素的 width 和 height 属性便会被浏览器忽略。无法得知图片的长宽，Reflow 和 Layout Shift 问题重新出现。为了避免响应式图片导致的 Reflow 和 Layout Shift，一个 workaround 是将图片包裹在一个 position: relative 的容器中，然后为图片设置 position: absolute、为容器设置一个值为长宽百分比的 padding-bottom，即「宽高比盒子」（Aspect Ratio Boxes）。使用了宽高比盒子后，虽然浏览器在图片加载完以后仍然会 Reflow，但是避免了 Layout Shift。至今 Medium 仍然在使用宽高比盒子避免 Layout Shift。为了一劳永逸的解决这个问题，CSSWG（CSS Working-Group）在「CSS Box Sizing Module Level 4」草案中提出了 aspect-ratio、为块级元素指定宽高比。从 Chrome 79 和 Firefox 71 开始，如果同时为 <img /> 元素设置了 width 和 height 属性，浏览器会将 width 和 height 用来计算 <img /> 元素的宽高比（aspect-ratio: attr(width) / attr(height)），既兼容了响应式图片、又避免了 Reflow 和 Layout Shift。<br>\n1px 占位图的困局在实现 lazyload 时，一般将真实图片的 URL 放在 data-src 中，并通过 JS 控制 src。但是浏览器并不能很好的处理没有 src 属性的 <img /> 元素（Undefined Behavior），而将 src 的初始值设置为空字符串又会导致浏览器向页面本身发送一个 GET 请求（参见 RFC3986 中对 URI 为空字符串时的行为规定），常见的解决办法便是将 <img /> 元素的 src 属性设置为一个 1px 的透明 GIF。</p>\n<p>但是 1px 像素的占位图的宽高比例是 1:1，浏览器在渲染 <img /> 元素时就会设置 1 比 1 的宽高比；当 <img /> 元素进入 viewport 以后，JS 将 src 设置为图片真实的 URL，此时真实图片的宽高比和 1px 像素占位图的宽高比不相同，便会引发 Reflow 和 Layout Shift。一些大型网站选择采用等比低像素占位图（占位图经过压缩和缩放，只保留原始图片的宽高比），避免真实图片代替占位图后引发宽高比变化。Medium 在使用宽高比盒子的同时，也使用了等比低像素占位图。</p>\n<p>最终的解决方案在重构博客的时候，我的图片组件需要解决以下几点问题：</p>\n<p>最基础的 Lazyload —— 不加载非关键资源是前端性能优化的铁律，不能违背当图片已经被加载过后，下次加载同一张图片时不再需要 lazyload<br>\n由于我的博客不是大型网站、没有专门的图片服务器生成等比低像素占位图、只能使用 1px GIF 占位图规避 Undefined Behavior，因此我的图片组件需要能规避宽高比变化<br>\nReact DOM 不支持将跨级元素（如 <div /> 或 <figure />）渲染在 <p /> 中，这与 Marked.js 的默认行为冲突，因此要么破坏宽高比盒子的 HTML 语义（figure -&gt; img），要么不使用宽高比盒子<br>\n1px 透明占位图的 UX 不好、需要为图片组件设置一个 background-color，让用户知道这里存在一个尚未加载的元素（即元素骨架）；但是在图片完全加载成功后，又需要将 backgounrd-color 移除，避免影响透明背景图片、半透明图片的显示效果。首先解决 Lazyload。首先实现一个 use-intersection 的 React Hook。相比 react-use 等现成的实现，我的实现复用了 IntersectionObserver 实例，大幅节省了内存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">UseIntersectionObserverInit</span> = <span class=\"title class_\">Pick</span>&lt;<span class=\"title class_\">IntersectionObserverInit</span>, <span class=\"string\">&#x27;rootMargin&#x27;</span> | <span class=\"string\">&#x27;root&#x27;</span>&gt;;</span><br><span class=\"line\">type <span class=\"title class_\">UseIntersection</span> = &#123; disabled?: boolean &#125; &amp; <span class=\"title class_\">UseIntersectionObserverInit</span> &amp; &#123; rootRef?: <span class=\"title class_\">React</span>.<span class=\"property\">RefObject</span>&lt;<span class=\"title class_\">HTMLElement</span>&gt; | <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">type <span class=\"title class_\">ObserveCallback</span> = <span class=\"function\">(<span class=\"params\">isVisible: boolean</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">type <span class=\"title class_\">Identifier</span> = &#123; <span class=\"attr\">root</span>: <span class=\"title class_\">Element</span> | <span class=\"title class_\">Document</span> | <span class=\"literal\">null</span>; <span class=\"attr\">margin</span>: string &#125;;</span><br><span class=\"line\">type <span class=\"title class_\">Observer</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"title class_\">Identifier</span></span><br><span class=\"line\">  <span class=\"attr\">observer</span>: <span class=\"title class_\">IntersectionObserver</span></span><br><span class=\"line\">  <span class=\"attr\">elements</span>: <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">Element</span>, <span class=\"title class_\">ObserveCallback</span>&gt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasIntersectionObserver = <span class=\"keyword\">typeof</span> <span class=\"title class_\">IntersectionObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useIntersection&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Element</span>&gt;(&#123;</span><br><span class=\"line\">  rootRef,</span><br><span class=\"line\">  rootMargin,</span><br><span class=\"line\">  disabled</span><br><span class=\"line\">&#125;: <span class=\"title class_\">UseIntersection</span>): [<span class=\"function\">(<span class=\"params\">element: T | <span class=\"literal\">null</span></span>) =&gt;</span> <span class=\"keyword\">void</span>, boolean, <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span>] &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过 isDisabled 控制 useEffect 中副作用是否需要执行</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">isDisabled</span>: boolean = disabled || !hasIntersectionObserver;</span><br><span class=\"line\">  <span class=\"comment\">// 通过 Ref 缓存上一次调用 useIntersection 时生成的 unobserve 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unobserve = useRef&lt;<span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [visible, setVisible] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 设置 IntersectionObserver 的 root</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [root, setRoot] = <span class=\"title function_\">useState</span>(rootRef ? rootRef.<span class=\"property\">current</span> : <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// React 回调 Ref</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setRef = <span class=\"title function_\">useCallback</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">el: T | <span class=\"literal\">null</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// unobserve 上一次调用 useIntersection 时观察的元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (unobserve.<span class=\"property\">current</span>) &#123;</span><br><span class=\"line\">        unobserve.<span class=\"title function_\">current</span>();</span><br><span class=\"line\">        unobserve.<span class=\"property\">current</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDisabled || visible) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的 el 是一个 HTMLElement</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (el &amp;&amp; el.<span class=\"property\">tagName</span>) &#123;</span><br><span class=\"line\">        unobserve.<span class=\"property\">current</span> = <span class=\"title function_\">observe</span>(</span><br><span class=\"line\">          el,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">isVisible</span>) =&gt;</span> isVisible &amp;&amp; <span class=\"title function_\">setVisible</span>(isVisible),</span><br><span class=\"line\">          &#123; root, rootMargin &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [isDisabled, root, rootMargin, visible]</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasIntersectionObserver) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前 Runtime 没有 IntersectionObserver（如 Node.js 服务端、或浏览器不兼容）</span></span><br><span class=\"line\">      <span class=\"comment\">// 在 rIC 后显示图片，作为 fallback。rIC 额外引入 Polyfill。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!visible) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> idleCallback = <span class=\"title function_\">requestIdleCallback</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">setVisible</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"title function_\">cancelIdleCallback</span>(idleCallback);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [visible]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">if</span> (rootRef) <span class=\"title function_\">setRoot</span>(rootRef.<span class=\"property\">current</span>); &#125;, [rootRef]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露重置 visible 的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resetVisible = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">setVisible</span>(<span class=\"literal\">false</span>), []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [setRef, visible, resetVisible];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存 IntersectionObserver 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> observers = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">Identifier</span>, <span class=\"title class_\">Observer</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">idList</span>: <span class=\"title class_\">Identifier</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createObserver</span>(<span class=\"params\">options: UseIntersectionObserverInit</span>): <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = &#123; <span class=\"attr\">root</span>: options.<span class=\"property\">root</span> || <span class=\"literal\">null</span>, <span class=\"attr\">margin</span>: options.<span class=\"property\">rootMargin</span> || <span class=\"string\">&#x27;&#x27;</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> existing = idList.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> obj.<span class=\"property\">root</span> === id.<span class=\"property\">root</span> &amp;&amp; obj.<span class=\"property\">margin</span> === id.<span class=\"property\">margin</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance;</span><br><span class=\"line\">  <span class=\"comment\">// 复用已有的 IntersectionObserver 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (existing) &#123;</span><br><span class=\"line\">    instance = observers.<span class=\"title function_\">get</span>(existing);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    instance = observers.<span class=\"title function_\">get</span>(id);</span><br><span class=\"line\">    idList.<span class=\"title function_\">push</span>(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (instance) <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 记录每个 IntersectionObserver 实例观察的元素，在所有观察的元素都进入 Viewport 后销毁实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> elements = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">Element</span>, <span class=\"title class_\">ObserveCallback</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">IntersectionObserver</span>(<span class=\"function\">(<span class=\"params\">entries</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    entries.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">entry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> callback = elements.<span class=\"title function_\">get</span>(entry.<span class=\"property\">target</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isVisible = entry.<span class=\"property\">isIntersecting</span> || entry.<span class=\"property\">intersectionRatio</span> &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callback &amp;&amp; isVisible) <span class=\"title function_\">callback</span>(isVisible);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, options);</span><br><span class=\"line\"></span><br><span class=\"line\">  observers.<span class=\"title function_\">set</span>(id, (instance = &#123; id, observer, elements &#125;));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  element: Element,</span></span><br><span class=\"line\"><span class=\"params\">  callback: ObserveCallback,</span></span><br><span class=\"line\"><span class=\"params\">  options: UseIntersectionObserverInit</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; id, observer, elements &#125; = <span class=\"title function_\">createObserver</span>(options);</span><br><span class=\"line\">  elements.<span class=\"title function_\">set</span>(element, callback);</span><br><span class=\"line\"></span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(element);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unobserve</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    elements.<span class=\"title function_\">delete</span>(element);</span><br><span class=\"line\">    observer.<span class=\"title function_\">unobserve</span>(element);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当没有元素需要观察时，销毁 IntersectionObserver 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elements.<span class=\"property\">size</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      observer.<span class=\"title function_\">disconnect</span>();</span><br><span class=\"line\">      observers.<span class=\"title function_\">delete</span>(id);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = idList.<span class=\"title function_\">findIndex</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> obj.<span class=\"property\">root</span> === id.<span class=\"property\">root</span> &amp;&amp; obj.<span class=\"property\">margin</span> === id.<span class=\"property\">margin</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        idList.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">接下来实现 &lt;<span class=\"title class_\">Image</span> /&gt; 组件：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Image</span> = (<span class=\"params\">props: JSX.IntrinsicElements[<span class=\"string\">&#x27;img&#x27;</span>]</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; src, ...rest &#125; = props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> imageElRef = useRef&lt;<span class=\"title class_\">HTMLImageElement</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> previousSrcRef = useRef&lt;string | <span class=\"literal\">undefined</span>&gt;(src);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isLazy = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 至少在 HTML5 spec 中，img 允许没有 src 属性，需要特殊处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!src) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (src?.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;data:&#x27;</span>) || src?.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;blob:&#x27;</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;, [src]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [setIntersection, isIntersected, resetIntersected] = useIntersection&lt;<span class=\"title class_\">HTMLImageElement</span>&gt;(&#123;</span><br><span class=\"line\">    <span class=\"attr\">rootMargin</span>: <span class=\"string\">&#x27;200px&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">disabled</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useLayoutEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在 React Reconcile 中，同一个 Image 组件可能会被复用、DOM 中的 HTMLImageElement 也会被复用</span></span><br><span class=\"line\">    <span class=\"comment\">// 而 useIntersection 中副作用的依赖仅为 HTMLImageElement，因此需要手动重置 visible state</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (previousSrcRef.<span class=\"property\">current</span> !== src) &#123;</span><br><span class=\"line\">      previousSrcRef.<span class=\"property\">current</span> = src;</span><br><span class=\"line\">      <span class=\"title function_\">resetIntersected</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">setIntersection</span>(imageElRef.<span class=\"property\">current</span>);</span><br><span class=\"line\">  &#125;, [resetIntersected, setIntersection, src]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isVisible = !isLazy || isIntersected;</span><br><span class=\"line\">  <span class=\"comment\">// 由 React 控制显示 1px 占位图还是真实图片</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> srcString = isVisible ? src : <span class=\"variable constant_\">SMALLEST_GIF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &#123;<span class=\"attr\">...rest</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">ref</span>=<span class=\"string\">&#123;imageElRef&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">decoding</span>=<span class=\"string\">&quot;async&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">crossOrigin</span>=<span class=\"string\">&quot;anonymous&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">src</span>=<span class=\"string\">&#123;srcString&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    /&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来解决 1px 占位图的宽高比问题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;/* 既然 React DOM 不允许在 <span class=\"tag\">&lt;<span class=\"name\">p</span> /&gt;</span> 中渲染 <span class=\"tag\">&lt;<span class=\"name\">figure</span> /&gt;</span> 或 <span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span>，<span class=\"tag\">&lt;<span class=\"name\">span</span> /&gt;</span> 总行吧？ */&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">boxSizing:</span> &#x27;<span class=\"attr\">border-box</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">display:</span> &#x27;<span class=\"attr\">inline-block</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">position:</span> &#x27;<span class=\"attr\">relative</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">maxWidth:</span> &#x27;<span class=\"attr\">100</span>%&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">width:</span> &#x27;<span class=\"attr\">initial</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">height:</span> &#x27;<span class=\"attr\">initial</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">cursor:</span> &#x27;<span class=\"attr\">zoom-in</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">margin:</span> &#x27;<span class=\"attr\">0</span> <span class=\"attr\">auto</span> <span class=\"attr\">1em</span>&#x27;</span></span><br><span class=\"line\"><span class=\"tag\">&#125;&#125;&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">boxSizing:</span> &#x27;<span class=\"attr\">border-box</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">display:</span> &#x27;<span class=\"attr\">block</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">width:</span> &#x27;<span class=\"attr\">initial</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">height:</span> &#x27;<span class=\"attr\">initial</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">maxWidth:</span> &#x27;<span class=\"attr\">100</span>%&#x27;</span></span><br><span class=\"line\"><span class=\"tag\">    &#125;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;/* 使用一个和原始图片长宽一致的 data URI svg 图片撑起宽高比容器，兼容包括 Safari 在内的、没有原生 aspect-ratio 的浏览器 */&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">display:</span> &#x27;<span class=\"attr\">block</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">backgroundColor:</span> &#x27;<span class=\"attr\">none</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">backgroundImage:</span> &#x27;<span class=\"attr\">none</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">width:</span> &#x27;<span class=\"attr\">initial</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">height:</span> &#x27;<span class=\"attr\">initial</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">maxWidth:</span> &#x27;<span class=\"attr\">100</span>%&#x27;</span></span><br><span class=\"line\"><span class=\"tag\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">width</span>=<span class=\"string\">&#123;width&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">height</span>=<span class=\"string\">&#123;height&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&#123;true&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&#123;</span>`<span class=\"attr\">data:image</span>/<span class=\"attr\">svg</span>+<span class=\"attr\">xml</span>,%<span class=\"attr\">3csvg</span>%<span class=\"attr\">20xmlns</span>=<span class=\"string\">%27http://www.w3.org/2000/svg%27%20version</span>=<span class=\"string\">%271.1%27%20width</span>=<span class=\"string\">%27$&#123;width&#125;%27%20height</span>=<span class=\"string\">%27$&#123;height&#125;%27/%3e</span>`&#125;</span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">    &#123;<span class=\"attr\">...rest</span>&#125;</span></span><br><span class=\"line\"><span class=\"tag\">    &#123;/* <span class=\"attr\">让图片直接填满由</span> <span class=\"attr\">data</span> <span class=\"attr\">URI</span> <span class=\"attr\">svg</span> <span class=\"attr\">撑起的容器</span> */&#125;</span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">boxSizing:</span> &#x27;<span class=\"attr\">border-box</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">padding:</span> <span class=\"attr\">0</span>,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">border:</span> <span class=\"attr\">0</span>,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">margin:</span> &#x27;<span class=\"attr\">auto</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">display:</span> &#x27;<span class=\"attr\">block</span>&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">minWidth:</span> &#x27;<span class=\"attr\">100</span>%&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">maxWidth:</span> &#x27;<span class=\"attr\">100</span>%&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">minHeight:</span> &#x27;<span class=\"attr\">100</span>%&#x27;,</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">maxHeight:</span> &#x27;<span class=\"attr\">100</span>%&#x27;</span></span><br><span class=\"line\"><span class=\"tag\">    &#125;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">ref</span>=<span class=\"string\">&#123;imageElRef&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">decoding</span>=<span class=\"string\">&quot;async&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">crossOrigin</span>=<span class=\"string\">&quot;anonymous&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">src</span>=<span class=\"string\">&#123;srcString&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由于需要在图片尚未下载、或下载了但尚未解码完成时显示骨架（background-color），需要首先实现一个 useImageFullyLoaded 的 React Hook：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">LOADED_IMAGE_URLS</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>&lt;string&gt;[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">useImageFullyLoaded</span> = (<span class=\"params\">imageElRef: React.RefObject&lt;HTMLImageElement&gt;, srcString?: string</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isFullyLoaded, setIsFullyLoaded] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleLoad = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (srcString) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> img = imageElRef.<span class=\"property\">current</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!img) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 真实图片元素当前的 src（currentSrc，当网页用 picture / source 元素指定了变种后，浏览器实际采用的 src）</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> imgSrc = img.<span class=\"property\">currentSrc</span> || img.<span class=\"property\">src</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (imgSrc &amp;&amp; imgSrc !== <span class=\"variable constant_\">SMALLEST_GIF</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 利用 HTMLImageElement.prototype.decode API，获取图片解码后的回调</span></span><br><span class=\"line\">        <span class=\"comment\">// 在不兼容的浏览器上直接等待一个 microtask</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> promise = <span class=\"string\">&#x27;decode&#x27;</span> <span class=\"keyword\">in</span> img ? img.<span class=\"title function_\">decode</span>() : <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">        promise.<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!imageElRef.<span class=\"property\">current</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 记录已经加载完、解码的图片</span></span><br><span class=\"line\">          <span class=\"variable constant_\">LOADED_IMAGE_URLS</span>.<span class=\"title function_\">add</span>(srcString);</span><br><span class=\"line\">          <span class=\"title function_\">setIsFullyLoaded</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [imageElRef, srcString]);</span><br><span class=\"line\">  <span class=\"comment\">// 由于 SSR 输出了完整 HTML，而页面的 JS 又全部都是异步加载。</span></span><br><span class=\"line\">  <span class=\"comment\">// 浏览器可能在 React DOM 还没 Hydration 时就完成了图片的下载，因此不能直接添加 onLoad</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (imageElRef.<span class=\"property\">current</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (imageElRef.<span class=\"property\">current</span>.<span class=\"property\">complete</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleLoad</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        imageElRef.<span class=\"property\">current</span>.<span class=\"property\">onload</span> = handleLoad;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [handleLoad, imageElRef]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isFullyLoaded;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>有了 useImageFullyLoaded 和 LOADED_IMAGE_URLS，我们就可以获取图片 是否已经下载过 和 是否解码完成并完整地显示在页面上了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isLazy = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!src) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (src?.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;data:&#x27;</span>) || src?.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;blob:&#x27;</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这张图片已经加载过、解码过了，无需 lazyload</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable constant_\">LOADED_IMAGE_URLS</span>.<span class=\"title function_\">has</span>(src)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;, [src]);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isImageFullyLoaded = <span class=\"title function_\">useImageFullyLoaded</span>(imageElRef, src);</span><br><span class=\"line\">&#123;<span class=\"comment\">/* &lt;img /&gt; 外层的容器 */</span>&#125;</span><br><span class=\"line\">&lt;span style=&#123;&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 容器的其它样式</span></span><br><span class=\"line\">  <span class=\"comment\">// ....</span></span><br><span class=\"line\">  <span class=\"comment\">// 只有当图片完全解码、显示在页面上后，才去掉 background-color</span></span><br><span class=\"line\">  <span class=\"attr\">backgroundColor</span>: isImageFullyLoaded ? <span class=\"literal\">undefined</span> : <span class=\"string\">&#x27;#eee&#x27;</span>,</span><br><span class=\"line\">&#125;&#125;&gt;</span><br></pre></td></tr></table></figure>\n<p>最后再加上前文提到的、模仿 Medium 的点击文中图片放大的效果，完整的 <Image /> 组件就封装好了。</p>\n<h3 id=\"尾声\"><a class=\"header-anchor\" href=\"#尾声\">※</a>尾声</h3>\n<p>当我一个月前开始动笔写这篇文章的时候，我只是想写一篇流水账，记录我在重构博客时遇到的每个问题、以及解决的办法。但是写着写着，就变成了介绍我最近发现的前端的前沿技术、以及如何在重构我的博客时应用这些技术，以至于最后几乎变成了一篇前端性能优化和 React 的 Newsletter。</p>\n<p>重构博客是我突破舒适区的又一次尝试。对博客的每一次打磨，就是抓住机会实践 Web 最前沿的技术和经验；每一次 commit，我都将博客的用户体验和性能推上新的高度。</p>\n<p>之前一直有不少人问题，我的博客主题是否开源，我的回答一直是「否」。为了满足这部分人的好奇心，我过去几年间也写过许多关于「前端性能优化」的文章，以及介绍过我过去的博客使用的性能优化方案，如「使 Disqus 不再拖累性能和页面加载」、「天下武功，唯快不破 —— 我是这样优化博客的」和「再快一点，再快一点 —— 优化博客白屏时间的实践」。这一次借着这篇文章，我也分享了部分博客中实际使用的代码、以及我是如何一步一步实现这些特性的，希望能够满足这部分读者的好奇心。</p>\n<p>以上。</p>\n","_path":"20240711/shi-yong-next-js-hexo-chong-gou-wo-de-bo-ke/","_link":"https://yaoqs.github.io/20240711/shi-yong-next-js-hexo-chong-gou-wo-de-bo-ke/","_id":"clzpq9hwi006usger9tw90036"}}