{"type":"getPostById","data":{"title":"MFC集成CEF3窗口","date":"2024-08-08T02:26:47.000Z","description":"","categories":[{"name":"MFC","_id":"clzpq9hub003csger23r915k3"},{"name":"cef","_id":"clzpq9hur0041sger5itj42j2"}],"tags":[{"name":"MFC","_id":"clzpq9hw7006fsger3gsdebcw"},{"name":"cef","_id":"clzpq9hwd006msger6eszc82p"}],"content":"<p>转载自 <a href=\"https://www.tangyuecan.com/2019/02/28/mfc%e9%9b%86%e6%88%90cef3%e7%aa%97%e5%8f%a3/\">MFC集成CEF3窗口</a></p>\n<h3 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">※</a>前言</h3>\n<p>一般来讲我常规开发windows系统的程序的时候绝对会遇到一个问题，我们想要实现美观炫酷的界面效果但是windows无论是QT还是MFC这些老牌 C++ 应用框架还是windows <a href=\"http://xn--UFP-5w2h.NET\">UFP的.NET</a> Winform都很难去完整自定义你的样式。比如说QT里面的按钮你只能通过C++或者UI文件对按钮生成项进行简单的设置，MFC更加过分只有30不到的设置项，Winform也差不多。如果你想完整的定义一个自己的按钮那就需要从绘制开始写了，这个要求就不是一点半点了。</p>\n<p>但是我们在日常使用的时候发现很多程序实现了非常NB的界面样式，而且实现了非常多的动态效果，如果说这些效果全部是通过C/C++重写绘制的话那太要命了。这里就举一个例子，网易云音乐应该是大家都在使用的音乐播放器，它里面的效果确实很漂亮美观。根据对网易云音乐的运行库进行分析我发现了一个神器，那就是CEF。</p>\n<h3 id=\"CEF库\"><a class=\"header-anchor\" href=\"#CEF库\">※</a>CEF库</h3>\n<p>CEF是一个谷歌的半开源库，它提供原生 C++ 库实现了一个基于谷歌V8的浏览器创建，它采用多个子进程区分业务流程然后在各个子进程之中完成对应的回调与消息通知。这个库是我们可以完全脱离QT开发Windows应用程序，相当于实现了在windows上的webview，重型或者底层的操作由前端JS告知C++ 进行执行，服务端或者其他系统状态的消息通知由C++ 通知JS执行，目前看来效果良好，除开windows基础窗口样式之外其他所有的东西都可以通过html进行定制。后期所有的三维可视化项目我们可以通过C<ins>完成实时的通讯，同时由HTML/JS实现页面的绘制，而且所有的全端资源采用ZIP加密为PAK包的方式供C</ins> 调用绘制所以安全性大大高于之前的QTwebengine。</p>\n<h3 id=\"流程\"><a class=\"header-anchor\" href=\"#流程\">※</a>流程</h3>\n<h4 id=\"1、声明APP对象\"><a class=\"header-anchor\" href=\"#1、声明APP对象\">※</a>1、声明APP对象</h4>\n<p>这个东西一个浏览器的应用对象，它可以多态集成CEF的多个组件，一般来讲都是线程之类的东西，如渲染线程、异常线程等等，我们使用的时候为了完成JS调用C++才会对它进行重写。具体声明如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __CEF3SimpleSample__ClientHandler__  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __CEF3SimpleSample__ClientHandler__  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/cef_app.h&quot;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/cef_client.h&quot;</span>  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;HtmlEventHandler.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建CEF应用对象，同时继承渲染进程的消息回调接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClientApp</span> : <span class=\"keyword\">public</span> CefApp, <span class=\"keyword\">public</span> CefRenderProcessHandler &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ClientApp</span>();</span><br><span class=\"line\">    <span class=\"comment\">//获取消息接口对象</span></span><br><span class=\"line\">    <span class=\"function\">CefRefPtr&lt;CefRenderProcessHandler&gt; <span class=\"title\">GetRenderProcessHandler</span><span class=\"params\">()</span> OVERRIDE</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当html上下文加载完毕时回调的重写，用于注册C++函数到JS</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">OnContextCreated</span><span class=\"params\">(CefRefPtr&lt;CefBrowser&gt; browser, CefRefPtr&lt;CefFrame&gt; frame, CefRefPtr&lt;CefV8Context&gt; context)</span> OVERRIDE</span>;</span><br><span class=\"line\">    <span class=\"comment\">//当html上下文被释放的回调的重写，用于释放声明的V8值对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">OnContextReleased</span><span class=\"params\">(CefRefPtr&lt; CefBrowser &gt; browser, CefRefPtr&lt; CefFrame &gt; frame, CefRefPtr&lt; CefV8Context &gt; context)</span> OVERRIDE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//注册JS函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RegisterFunction</span><span class=\"params\">(CefRefPtr&lt;CefV8Value&gt; object)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//V8消息拦截，这里完成对注册函数的实现</span></span><br><span class=\"line\">    CefRawPtr&lt;CefV8Handler&gt; functionhandler;</span><br><span class=\"line\">    <span class=\"built_in\">IMPLEMENT_REFCOUNTING</span>(ClientApp);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-声明Client对象\"><a class=\"header-anchor\" href=\"#2-声明Client对象\">※</a>2.声明Client对象</h4>\n<p>Client对象是一个独立的浏览器实例对象封装，也可以继承多个CEF组件，一般与上层的一些消息通知如请求处理、绘制处理等等，我们为了实现对请求资源的重映射、对底层浏览器对象的获取继承了多个东西具体声明如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __CEFSimpleSample__ClientHandler__  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __CEFSimpleSample__ClientHandler__  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/cef_render_process_handler.h&quot;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/cef_client.h&quot;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/cef_v8.h&quot;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/cef_browser.h&quot;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/wrapper/cef_resource_manager.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//客户端的自定义类</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> resource_manager &#123;</span><br><span class=\"line\">    <span class=\"comment\">//继承CefClient实现客户端功能，继承CefRequestHandler实现请求拦截功能，继承CefLifeSpanHandler实现关闭功能，继承CefDisplayHandler实现如全屏之类的功能</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">ClientHandler</span> : <span class=\"keyword\">public</span> CefClient, <span class=\"keyword\">public</span> CefLifeSpanHandler ,<span class=\"keyword\">public</span> CefDisplayHandler, <span class=\"keyword\">public</span> CefRequestHandler &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">ClientHandler</span>();</span><br><span class=\"line\">        <span class=\"comment\">//获得客户端的浏览器对象</span></span><br><span class=\"line\">        <span class=\"function\">CefRefPtr&lt;CefBrowser&gt; <span class=\"title\">GetBrowser</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> m_Browser;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//得到浏览器窗口句柄</span></span><br><span class=\"line\">        <span class=\"function\">CefWindowHandle <span class=\"title\">GetBrowserHwnd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> m_BrowserHwnd;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//得到此客户端的周期控制</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> CefRefPtr&lt;CefLifeSpanHandler&gt; <span class=\"title\">GetLifeSpanHandler</span><span class=\"params\">()</span> OVERRIDE</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//触发关闭</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">DoClose</span><span class=\"params\">(CefRefPtr&lt;CefBrowser&gt; browser)</span> OVERRIDE</span>;</span><br><span class=\"line\">        <span class=\"comment\">//创建前回调</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">OnAfterCreated</span><span class=\"params\">(CefRefPtr&lt;CefBrowser&gt; browser)</span> OVERRIDE</span>;</span><br><span class=\"line\">        <span class=\"comment\">//关闭之后回调</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">OnBeforeClose</span><span class=\"params\">(CefRefPtr&lt;CefBrowser&gt; browser)</span> OVERRIDE</span>;</span><br><span class=\"line\">        <span class=\"comment\">//请求处理对象</span></span><br><span class=\"line\">        <span class=\"function\">CefRefPtr&lt;CefRequestHandler&gt; <span class=\"title\">GetRequestHandler</span><span class=\"params\">()</span> OVERRIDE </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">        <span class=\"comment\">//资源载入之前回调（重点功能拦截请求给到resource_manager）</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">cef_return_value_t</span> <span class=\"title\">OnBeforeResourceLoad</span><span class=\"params\">(CefRefPtr&lt;CefBrowser&gt; browser, CefRefPtr&lt;CefFrame&gt; frame, CefRefPtr&lt;CefRequest&gt; request, CefRefPtr&lt;CefRequestCallback&gt; callback)</span> OVERRIDE</span>;</span><br><span class=\"line\">        <span class=\"comment\">//资源处理对象</span></span><br><span class=\"line\">        <span class=\"function\">CefRefPtr&lt;CefResourceHandler&gt; <span class=\"title\">GetResourceHandler</span><span class=\"params\">(CefRefPtr&lt;CefBrowser&gt; browser, CefRefPtr&lt;CefFrame&gt; frame, CefRefPtr&lt;CefRequest&gt; request)</span> OVERRIDE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">        <span class=\"comment\">//浏览器对象</span></span><br><span class=\"line\">        CefRefPtr&lt;CefBrowser&gt; m_Browser;</span><br><span class=\"line\">        <span class=\"comment\">//资源管理对象（用于重映射资源文件）</span></span><br><span class=\"line\">        CefRefPtr&lt;CefResourceManager&gt; resource_manager_;</span><br><span class=\"line\">        <span class=\"comment\">//浏览器窗口句柄</span></span><br><span class=\"line\">        CefWindowHandle m_BrowserHwnd;</span><br><span class=\"line\">        <span class=\"comment\">//内部调用声明</span></span><br><span class=\"line\">        <span class=\"built_in\">IMPLEMENT_REFCOUNTING</span>(ClientHandler);</span><br><span class=\"line\">        <span class=\"built_in\">DISALLOW_COPY_AND_ASSIGN</span>(ClientHandler);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-js调用C-处理\"><a class=\"header-anchor\" href=\"#3-js调用C-处理\">※</a>3.js调用C++处理</h4>\n<p>显示注册对应的JS函数，然后创建一个继承CefV8Handler的类进行对应注册函数的功能实现就可以了对应的代码比较基础就不谈了实现部分的声明大致如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/cef_v8.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ClientApp.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//集成V8消息回调类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HtmlEventHandler</span> : <span class=\"keyword\">public</span> CefV8Handler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//构造</span></span><br><span class=\"line\">    <span class=\"built_in\">HtmlEventHandler</span>(CefRefPtr&lt;CefBrowser&gt; browser);</span><br><span class=\"line\">    <span class=\"comment\">//注册函数最终实现的回调，使用name区分</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">Execute</span><span class=\"params\">(<span class=\"type\">const</span> CefString&amp; name, CefRefPtr&lt;CefV8Value&gt; object, <span class=\"type\">const</span> CefV8ValueList&amp; arguments, CefRefPtr&lt;CefV8Value&gt;&amp; retval, CefString&amp; exception)</span> OVERRIDE</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    CefRefPtr&lt;CefBrowser&gt; browser;</span><br><span class=\"line\">    <span class=\"built_in\">IMPLEMENT_REFCOUNTING</span>(HtmlEventHandler);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-资源重定向\"><a class=\"header-anchor\" href=\"#4-资源重定向\">※</a>4.资源重定向</h4>\n<p>在App对象里面新建一个资源管理对象，为这个对象添加一个协议，将一个请求地址进行拦截然后访问一个加密之后的zip文件对资源进行寻找然后返回给浏览器，具体实现部分大致为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化资源管理</span></span><br><span class=\"line\">resource_manager_ = <span class=\"keyword\">new</span> <span class=\"built_in\">CefResourceManager</span>();</span><br><span class=\"line\"><span class=\"comment\">//添加处理协议，拦截&quot;http://data/&quot;,重映射到GetCurDir() + &quot;/data.pak&quot;文件，通过&quot;.......&quot;为密码解压，执行顺序为0，身份校验位空</span></span><br><span class=\"line\">resource_manager_.<span class=\"built_in\">get</span>()-&gt;<span class=\"built_in\">AddArchiveProvider</span>(<span class=\"string\">&quot;http://data/&quot;</span>, <span class=\"built_in\">GetCurDir</span>() + <span class=\"string\">&quot;/data_1.pak&quot;</span>, <span class=\"string\">&quot;.......&quot;</span>, <span class=\"number\">0</span>, std::<span class=\"built_in\">string</span>());</span><br></pre></td></tr></table></figure>\n<p>然后在App之中重写OnBeforeResourceLoad与GetResourceHandler就可以实现对资源的重定向。</p>\n<h4 id=\"5-创建窗口\"><a class=\"header-anchor\" href=\"#5-创建窗口\">※</a>5.创建窗口</h4>\n<p>显示对CEF组件的初始化，这里需要使用MFC的对话框窗口句柄和实例进行对应的窗口初始化。我这里自己进行了封装大致是这个样子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CEFView::Init</span><span class=\"params\">(HINSTANCE hInstance, HWND HWnd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置窗口句柄</span></span><br><span class=\"line\">    <span class=\"function\">CefMainArgs <span class=\"title\">main_args</span><span class=\"params\">(hInstance)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;hInstance = hInstance;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;HWnd = HWnd;</span><br><span class=\"line\">    <span class=\"comment\">//创建应用对象</span></span><br><span class=\"line\">    <span class=\"function\">CefRefPtr&lt;ClientApp&gt; <span class=\"title\">app</span><span class=\"params\">(<span class=\"keyword\">new</span> ClientApp)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">    <span class=\"type\">int</span> exit_code = <span class=\"built_in\">CefExecuteProcess</span>(main_args, app.<span class=\"built_in\">get</span>(), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exit_code &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(exit_code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置设置</span></span><br><span class=\"line\">    CefSettings settings;</span><br><span class=\"line\">    <span class=\"comment\">//初始化设置</span></span><br><span class=\"line\">    CefSettingsTraits::<span class=\"built_in\">init</span>(&amp;settings);</span><br><span class=\"line\">    <span class=\"comment\">//启动多线程消息</span></span><br><span class=\"line\">    settings.multi_threaded_message_loop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//CEF组件初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">CefInitialize</span>(main_args, settings, app.<span class=\"built_in\">get</span>(), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就是去创建这个窗口，流程就是创建一个浏览器然后对这个浏览器进行子窗口映射与大小设置就可以了，我的封装方式为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CEFView::CreatView</span><span class=\"params\">(std::string url)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取窗口坐标</span></span><br><span class=\"line\">    RECT rect;</span><br><span class=\"line\">    <span class=\"built_in\">GetClientRect</span>(HWnd, &amp;rect);</span><br><span class=\"line\">    <span class=\"comment\">//配置窗口信息</span></span><br><span class=\"line\">    CefWindowInfo info;</span><br><span class=\"line\">    <span class=\"comment\">//配置浏览器设置</span></span><br><span class=\"line\">    CefBrowserSettings b_settings;</span><br><span class=\"line\">    <span class=\"comment\">//创建客户对象</span></span><br><span class=\"line\">    <span class=\"function\">CefRefPtr&lt;resource_manager::ClientHandler&gt; <span class=\"title\">client</span><span class=\"params\">(<span class=\"keyword\">new</span> resource_manager::ClientHandler)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//赋值</span></span><br><span class=\"line\">    CEF_Client = client;</span><br><span class=\"line\">    <span class=\"comment\">//设置窗口为MFC窗口句柄的子窗口</span></span><br><span class=\"line\">    info.<span class=\"built_in\">SetAsChild</span>(HWnd, rect);</span><br><span class=\"line\">    <span class=\"comment\">//创建浏览器</span></span><br><span class=\"line\">    CefBrowserHost::<span class=\"built_in\">CreateBrowser</span>(info, client.<span class=\"built_in\">get</span>(), url, b_settings, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-C-调用JS\"><a class=\"header-anchor\" href=\"#6-C-调用JS\">※</a>6.C++调用JS</h4>\n<p>这个比较简单直接使用浏览器对象执行一个上下文就是了，对应的东西都是V8搞好了的，封装就一点点，但是总的得说这种方式只能去执行顶层frame之中函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CEFView::RunJavaScript</span><span class=\"params\">(std::string js)</span> </span>&#123;</span><br><span class=\"line\">    CefRefPtr&lt;CefBrowser&gt; browser = <span class=\"built_in\">GetBrowser</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (browser.<span class=\"built_in\">get</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到web页面的顶层frame</span></span><br><span class=\"line\">        CefRefPtr&lt;CefFrame&gt; frame = browser-&gt;<span class=\"built_in\">GetMainFrame</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (frame)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//执行JS函数</span></span><br><span class=\"line\">            frame-&gt;<span class=\"built_in\">ExecuteJavaScript</span>(js, <span class=\"string\">L&quot;&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-资源文件的加密\"><a class=\"header-anchor\" href=\"#7-资源文件的加密\">※</a>7.资源文件的加密</h4>\n<p>资源文件不能直接使用winrar或者360什么的，由于算法还是封装方式的问题，基本上全部都是卵的。最终的解决办法是使用7-zip，没有就去下一个，加密算法选择ZipCrypto其他没有什么影响输出zip文件之后改为pak文件或者其他什么格式都是可以了，然后交给Client的资源管理对象就可以了。</p>\n<h4 id=\"8-缩放自适应\"><a class=\"header-anchor\" href=\"#8-缩放自适应\">※</a>8.缩放自适应</h4>\n<p>MFC的对话框有一个虚函数可以复写叫OnSize可以自己去找找，直接复写这个东西然后给匹配给浏览器的窗口句柄就可以了，执行起来也比较简单我封装在一个类之中的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CEFView::ReSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取窗口坐标</span></span><br><span class=\"line\">    RECT rect;</span><br><span class=\"line\">    <span class=\"built_in\">GetClientRect</span>(HWnd, &amp;rect);</span><br><span class=\"line\">    <span class=\"comment\">//获取浏览器对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (CEF_Client.<span class=\"built_in\">get</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CefRefPtr&lt;CefBrowser&gt; browser = CEF_Client-&gt;<span class=\"built_in\">GetBrowser</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (browser)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取浏览器窗口句柄</span></span><br><span class=\"line\">            CefWindowHandle hwnd = browser-&gt;<span class=\"built_in\">GetHost</span>()-&gt;<span class=\"built_in\">GetWindowHandle</span>();</span><br><span class=\"line\">            <span class=\"comment\">//设置大小与位置（继承父级窗口）</span></span><br><span class=\"line\">            ::<span class=\"built_in\">MoveWindow</span>(hwnd, <span class=\"number\">0</span>, <span class=\"number\">0</span>, rect.right - rect.left, rect.bottom, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-库编译\"><a class=\"header-anchor\" href=\"#9-库编译\">※</a>9.库编译</h4>\n<p>首先这个东西是必须要CMake的，不然根本没得什么搞头。第二这个东西编译支持的最高版本为2015我是在2015之中编译好了拿给17用的，测试下来X64和X86都没有什么问题，release和debug需要分开编译但是也没有什么问题，debug里面使用资源管理对象进行重映射时加密文件不知为何打不开其他都是没有什么问题。</p>\n<p>流程不算复杂还是比较好用的库了，首先不要去下载源码版，那个东西要编译死了一大堆依赖。最好下载二进制版本（<a href=\"http://opensource.spotify.com/cefbuilds/cef_binary_3.3578.1863.gbf8cff2_windows64.tar.bz2\">下载地址</a>可能有点慢），但是二进制版本之中的libcef_dll_wrapper还是需要自己去编译的，这个时候CMake一下就可以了，最好把debug和release版本都编译下来。这个库的头文件与其他在一起直接引用就可以了。重点是CMake的时候一定要MT版本，之后的运行依赖就好办很多，同时MFC也可以使用静态引用了。然后在vs新建一个像引用就是了。</p>\n<h4 id=\"10-运行依赖\"><a class=\"header-anchor\" href=\"#10-运行依赖\">※</a>10.运行依赖</h4>\n<p>这个逼就很恶心了，它不仅仅有一堆动态库的依赖就是他自己的，还有一堆资源的依赖。首先如果编译release版本就将release文件夹里面的所有东西考到项目的根目录之中不然一大堆空指针中断。debug就拷debug的。然后就是把Resources文件夹下的所有东西也要考到对应的项目的根目录之中无论是release还是debug都是一样的。</p>\n<h4 id=\"11-总结\"><a class=\"header-anchor\" href=\"#11-总结\">※</a>11.总结</h4>\n<p>大概就是这些东西，最终效果还是非常不错的，比QT那个webview好了很多，我大概研究了一下不仅仅是网易云音乐还有babylon离线编辑器、迅雷等等全部都是使用CEF这个库实现的。而且百度云网盘也是无非就是吧CEF自己封装了一个dll实现的。</p>\n<p>CEF是真的NB，谷歌是真的吊！！</p>\n","_path":"20240808/mfc-ji-cheng-cef3-chuang-kou/","_link":"https://yaoqs.github.io/20240808/mfc-ji-cheng-cef3-chuang-kou/","_id":"clzpq9hu0002ysger5upf0p9j"}}